{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Landing Page","text":"Broken Source Software   I'm an Open-Source Developer dedicated on making Useful Niched Software My mission is simple: Give as much power to all my users as possible <p>\ud83d\ude80 Convenience: You're probably looking for the Installation Guide</p>"},{"location":"#suggestions","title":"\u2705 Suggestions","text":"<p>\u2b50\ufe0f Learn about my projects:</p> <ul> <li>DepthFlow: Images to \u2192 3D parallax effect video</li> <li>ShaderFlow: Audio reactive shader render engine</li> <li>Pianola: World's smoothest piano roll, spring physics</li> <li>SpectroNote: Unlock a hidden perfect pitch in you</li> </ul> <p>\ud83d\udcac Join the Community servers on Discord and Telegram</p> <p>\u2764\ufe0f Join my Sponsors, so I can continue Open Source work</p> <p>\u2696\ufe0f Learn about my Copyleft Licensing and intentions</p>"},{"location":"about/changelog/","title":"\ud83e\udeb5 Changelog","text":"<p>\u2b50\ufe0f Here you can find all the most significant changes made or ongoing to the software!</p> <ul> <li>Keep in mind this list isn't exhaustive, for the full thing, see commit history itself</li> <li>Unlisted projects might have received indirect changes from others or the main lib</li> </ul>"},{"location":"about/changelog/#0.9.0","title":"\ud83d\udd18 0.9.0 Ongoing","text":"<p> You can run this version right now from source!</p> <p>General:</p> <ul> <li>Added support for Intel Macs and Linux Arm builds to the releases</li> <li>Actually fix FFmpeg automatic downloads on macOS (missing chmod)</li> <li>Many improvements on the Docker images, and publish them on GHCR<ul> <li>Vulkan now works inside docker for upscayl and ncnn upscalers</li> <li>Publish images of tags <code>project-(latest,cpu,cu121)</code></li> </ul> </li> <li>Moderate code simplifications and refactoring throughout the codebase</li> </ul> <p>DepthFlow:</p> <ul> <li>Add Upscayl as an upscaler option</li> <li>Fixed drag and drop of files due new lazy loading logic</li> <li>Improve dolly preset phase start to be more accurate</li> <li>Add stretch detection math on the shader for potential fill-in with gen ai<ul> <li>Command is <code>inpaint</code>, options <code>--black</code>, <code>--limit</code></li> </ul> </li> <li>Create a robust and fast <code>DepthServer</code> with FastAPI interface</li> <li>DepthMaps are now cached using diskcache for safer and safer cross-process access</li> <li>Rewrite the animation system to be more flexible and reliable</li> <li>Add colors filters (sepia, grayscale, saturation, contrast, brightness)</li> <li>Add transverse lens distortion filter (intensity, decay options)</li> <li>Base scene duration is now 5 seconds</li> <li>Internally interpolate isometric factor from 0.5 to 1 for better edges</li> <li>Overhaul animation system to be more flexible and reliable:<ul> <li>Completely serializable, changing any state parameter</li> </ul> </li> <li>Reorganize website examples section into their own pages</li> <li>Cached depthmaps are now handled by <code>diskcache</code> for safer cross-process access</li> <li>Implement an API with FastAPI, Uvicorn accessible via <code>depthflow server</code>:<ul> <li>Fully serializable, simple json requests and responses</li> <li>Videos are cached, same-hash requests are served from it</li> <li>Configurable maximum simultaneous renders at any time</li> </ul> </li> </ul> <p>ShaderFlow:</p> <ul> <li>Enforce <code>weakref.proxy()</code> on every module's <code>.scene</code> to allow for explicit <code>gc.collect()</code> to find circular references and clean up resources properly</li> <li>Assign all module scenes with a <code>weakref.proxy</code> for better gc collection</li> <li>Add an heuristic to use the headless context when exporting videos (TODO)</li> <li>Fix progress bar creation before ffmpeg command log causing a bad line</li> <li>Fix frametimer first frame being <code>dt=0</code></li> <li>Rename <code>ShaderObject</code> to <code>ShaderProgram</code></li> <li>Initial ground work on better metaprogramming and include system</li> <li>Partial overhaul and heavily simplify <code>ShaderTexture</code> class:<ul> <li>The <code>track</code> parameter is now a float ratio of the scene's resolution</li> </ul> </li> <li><code>ShaderTexture.track</code> is now a float ratio of the scene's resolution</li> <li>Drastically improve import times and consequently CLI startup times</li> <li>Speed improvements moving to float64 on dynamic number + partial rewrite:<ul> <li>Integral and derivatices are optional now, huge speedup as well</li> </ul> </li> <li>Fix many (dumb) memory leaks:<ul> <li>Do not recreate imgui context on every scene init</li> <li>Release proxy render buffers that are piped to ffmpeg when done</li> <li>Release texture objects when ShaderTexture is garbage collected</li> <li>Enforce a <code>gc.collect()</code> on scene deletion for cyclic references</li> </ul> </li> <li>Base duration of the scenes are now configurable (10 seconds default)</li> <li>Throw an exception when FFmpeg process stops unexpectedly</li> <li>Fix sharing a global watchdog causing errors on many initializations</li> <li>Cleanup scheduler before module setup, fixes scene reutilization bug</li> </ul>"},{"location":"about/changelog/#0.8.0","title":"\ud83d\udd18 0.8.0 October 27, 2024","text":"<p>General:</p> <ul> <li>Move away from Rye to uv tooling</li> <li>\u26a0\ufe0f New minimum version of Python: 3.10</li> <li>Bump managed Releases and From Source Python version to 3.12</li> <li>Releases download links now points to a version than <code>-latest.*</code></li> <li>Move a lot of <code>Broken.*</code> global constants to a <code>Broken.Runtime</code> class</li> <li>Unix releases are now a <code>.tar.gz</code> file to preserve executable attribute</li> <li>Many improvements to <code>BrokenTyper</code> on REPL or non-REPL, direct or releases</li> <li>Restyle the website to a more modern look; lots of improvements and additions:<ul> <li>New Cloud Providers section on installation methods</li> <li>Add this monolithic changelog than using blog posts</li> </ul> </li> <li>Lots of releases management improvements. When running binaries without args:<ul> <li>A <code>version.tracker</code> text file is initialized or updated on all PyApp installed versions's root, which contains the last time the binary was run. If this is older than a week by default, a prompt will appear to delete the old installed version to save disk space.</li> <li>Similarly, a <code>version.check</code> SQLite from <code>requests-cache</code> is created, which verifies the latest version of the software using PyPI endpoints each hour. A warning will be shown if a newer version is available; and a error will be shown if the current version is newer than the latest, which can indicate a yanked release or a time-traveller.</li> </ul> </li> <li>Potential fix on macOS automatic downloads of a FFmpeg binary</li> </ul> <p>DepthFlow:</p> <ul> <li>Implement batch export logic within the main command line</li> <li>PyTorch is now managed within a top-most CLI entry point</li> <li>Many improvements to the website documentation: Quickstart, examples, and more</li> <li>Added Apple's DepthPro as an Depth Estimator option</li> <li>The exported video now properly follows the input image's resolution</li> <li>Loading inputs is now lazy, and only happens at module setup before rendering</li> <li>Improved the Readme with community work, quick links, showcase</li> </ul> <p>ShaderFlow:</p> <ul> <li>(#6) Move away from pyimgui to imgui-bundle</li> <li>Fix <code>Scene.tau</code> overlooked calculation, it was half right!</li> <li>Add optional frameskipping disabling on <code>Scene.main</code></li> <li>Add optional progress callback on <code>Scene.main</code></li> <li>The <code>Camera.zoom</code> is now how much is visible vertically from the center</li> <li>Add <code>Camera.fov</code> bound to <code>Camera.zoom</code></li> <li>Use <code>numpy.dtype</code> instead of spaghetti methods on <code>Texture</code></li> <li>Add many <code>Scene.log_*</code> methods for DRY 'who module's logging</li> <li>Performance improvements on not fitting rendering resolutions</li> <li>Add a <code>Uniform</code> class for convenience than the whole <code>Variable</code></li> <li>Fix bug ensure the parent directory exists when exporting</li> <li>Revert <code>vflip</code>'s duty to FFmpeg than on the final sampling shader</li> <li>Renamed <code>Scene.main(benchmark=)</code> to <code>freewheel</code> (exporting mode)</li> <li>Internal code simplification and bug fixes</li> </ul>"},{"location":"about/changelog/#0.7.1","title":"\ud83d\udd18 0.7.1 October 5, 2024","text":"<ul> <li>Fixed readme links to the website</li> <li>Fixed black video exports on Linux llvmpipe</li> <li>Fixed black video exports on macOS</li> </ul>"},{"location":"about/contact/","title":"About/Contact","text":""},{"location":"about/contact/#where-to-get-in-touch","title":"Where to get in touch","text":"<ul> <li> <p> Discord</p> <p>Largest community, fastest responses</p> <ul> <li>Priority sponsors support</li> </ul> <p> Join Server</p> </li> <li> <p> GitHub</p> <p>Officialize your Requests or Issues</p> <ul> <li>One repository per project</li> </ul> <p> All Projects</p> </li> <li> <p> Telegram</p> <p>Also an option if you prefer over others!</p> <ul> <li>Larger uploads can be useful</li> </ul> <p> Join Group</p> </li> <li> <p> Email</p> <p>Get in touch directly and privately</p> <ul> <li>Business and Formal</li> </ul> <p> Send a Message</p> </li> </ul>"},{"location":"about/contact/#availability","title":"Availability","text":"<p>I live on the UTC-04:00 Timezone (EDT), so I might be sleeping when you send me a message</p> <p>Feel free to talk in any of the Languages:</p> <ul> <li>\ud83c\udde7\ud83c\uddf7 Portuguese: My native language</li> <li>\ud83c\uddfa\ud83c\uddf8 English: Too much internet..</li> </ul>"},{"location":"about/contributing/","title":"\ud83c\udf1f Contributing","text":"<p>This page will be improved later, until then, it's best to get in touch directly</p> <p>Open source development is a complex balance of vision and collaboration. While the projects have a clear direction and momentum, meaningful contributions can help make them more robust and valuable for everyone.</p> <p> The main areas where you can contribute are:</p> <ul> <li>\ud83d\udcda Documentation: I need to focus on what matters the most, the code. The website is often a side-work and a place I don't, vaguely speaking, use #</li> <li>\ud83e\uddea Testing: While common or intended use cases are covered when developing, I can only test so much of it and on the available hardware and systems I have #</li> <li>\ud83c\udfa8 Design: Proper logos, banners, art for the projects #</li> <li>\ud83c\udfac Creations: Show off your work and inspire others #</li> <li>\ud83d\udcbb Code: Improvements on the code itself #</li> </ul>"},{"location":"about/contributing/#what-to-contribute","title":"What to Contribute","text":""},{"location":"about/contributing/#documentation","title":"Documentation","text":"<p> Make the projects more accessible:</p> <ul> <li>Improve existing documentation</li> </ul>"},{"location":"about/contributing/#testing","title":"Testing","text":"<p> Test the code in different environments:</p> <ul> <li>Share your experience and suggest improvements</li> <li>Report bugs and issues of your platform</li> </ul> <p>Consider supporting me to upstream more platform!</p>"},{"location":"about/contributing/#code","title":"Code","text":"<p> Improve the codebase itself:</p> <ul> <li>Changes often require careful consideration of their impact across multiple systems</li> <li>There's a substantial backlog of planned improvements and experimental features</li> </ul> <p>Before starting significant work, get in touch to discuss your intended changes!</p> <p>Please read the License before submitting code</p>"},{"location":"about/contributing/#design","title":"Design","text":"<p> Proper branding are needed:</p> <ul> <li>Replace the temporary logos with actual ones</li> <li>GitHub repository banners</li> </ul> <p>Reach out to discuss potential collaborations!</p>"},{"location":"about/contributing/#creations","title":"Creations","text":"<p> Demonstrations serves as validation and inspiration</p> <ul> <li>Share your creations and how you used the projects</li> <li>Create integrations and extensions</li> </ul> <p>Notable contributions may be featured officially!</p>"},{"location":"about/contributing/#community-support","title":"Community Support","text":"<p> Help others; as you also shall be helped!</p>"},{"location":"about/credits/","title":"About/Credits","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p> <p>This page will be written eventually.</p>"},{"location":"about/developers/","title":"About/Developers","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p> <p>This page will be written eventually.</p>"},{"location":"about/faq/","title":"\u2753 Questions","text":""},{"location":"about/faq/#general","title":"General","text":""},{"location":"about/faq/#make-it-faster","title":"Q: Can you make X thing run faster?","text":"<p>Most likely not, but maybe- I'm very sensitive to speeds and latencies by myself, and have already done lots of optimizations and micro-benchmarks to squeeze the most out of the hardware and language I use. Sure, there are always things that can be improved, but anything past doing stuff in parallel (rendering), and specially if the CPU/GPU are already nearing 100% usage on your system, it's simply a matter of the hardware's capabilities.</p>"},{"location":"about/faq/#depthflow-shaderflow","title":"DepthFlow / ShaderFlow","text":""},{"location":"about/faq/#exporting-segfault","title":"Q: The program closes right before rendering (segfaults)","text":"<p>Your hardware probably doesn't support rendering while there are mapped buffers in OpenGL, which happens when TurboPipe is enabled (default). This is likely to take place on older systems (GTX &lt;= 800) or integrated GPUs from Intel or AMD and/or hybrid systems.</p> <p> To fix this, you can go to the (DepthFlow) WebUI's Advanced tab and disable TurboPipe, or pass the <code>--no-turbo</code> flag to the <code>main</code> command as in <code>depthflow main (...) --no-turbo</code></p> <p>Sidenote: There's no easy way to detect support for it. Most users have a decently modern GPU and the speed gains are too good to pass on, so it's enabled by default.</p>"},{"location":"about/faq/#black-videos","title":"Q: Rendered videos are black","text":"<p>This seems to be a problem in hybrid Windows systems, that is, a system that has both an integrated and dedicated GPU. While rendering in live mode in either GPU should work, OpenGL or Windows seems to have issues reading the rendered frames data from a GPU that is not the primary one. To fix this, you can try the following:</p> <ul> <li>NVIDIA: Go to the NVIDIA Control Panel, \"Manage 3D settings\", find either the System's Python if running from PyPI, or a <code>pyapp</code> if running From Releases, and select the dedicated GPU as the preferred one.</li> </ul> <p><sup>Note: I don't have an hybrid system, so this setting doesn't show in the screenshot below.</sup></p> <p></p>"},{"location":"about/faq/#wrong-gpu","title":"Q: Wrong GPU being used for rendering","text":"<p>See this related question for changing the preferred GPU in NVIDIA systems.</p> <p><sup>Help: What are the instructions for AMD and Intel GPUs?</sup></p>"},{"location":"about/license/","title":"About/License","text":"<p>Let's keep it simple, short and fair!</p> <p>All projects have their own licenses. Code is often AGPLv3 and shaders CC BY-SA 4.0, but you must always look at the project's repository and website page for proper details!</p> <ul> <li>I only ask to not abuse my years of work, \u2705 let's grow together</li> <li>For my integrity<sup>1</sup>, I may change this page at any time</li> </ul> <ol> <li> <p>For protecting users and improving the model, so it's more sustainable for both sides.\u00a0\u21a9</p> </li> <li> <p>It's the opposite of copyright! ba dum tss \ud83d\ude05\u00a0\u21a9</p> </li> <li> <p>Each contributor would need to agree re-licensing their contributions.\u00a0\u21a9</p> </li> <li> <p>The generated content from projects like DepthFlow, Pianola, SpectroNote falls under this license.\u00a0\u21a9</p> </li> <li> <p>Downloaded via PyTorch Hub, or HuggingFace's Transformers.\u00a0\u21a9</p> </li> </ol>"},{"location":"about/license/#usage","title":"Usage","text":""},{"location":"about/license/#personal","title":"\ud83d\udd34 Personal","text":"<p>There are no restrictions on private use of any Software. (personal projects, friends)</p> <ul> <li>No strings attached! It's free and open source software.</li> <li>Be creative and have fun, study and modify as you like.</li> </ul> <p>Note: Monetizing online content counts as commercial use.</p>"},{"location":"about/license/#educational","title":"\ud83d\udfe1 Educational","text":"<p>Non-profit educational use is strongly encouraged! (academic, teaching)</p> <ul> <li>My long term goal is to learn and have fun with technology.</li> <li>Share your knowledge and inspire others.</li> </ul>"},{"location":"about/license/#commercial","title":"\ud83d\udfe2 Commercial","text":"<p>Here's the dilema: If I were against commercial use, I wouldn't use it myself as a user</p> <ul> <li>My mission is to empower you, and make awesome tools to the world.</li> <li>It is my desire and goal for you to use the tools commercially!</li> </ul> <p>Fairness makes the difference</p> <p>\u2728 If you valued my work, donate an amount that reflects how much it was essential to your success \u2728</p> <ul> <li>These tools took years to learn and develop; and always ongoing improvements and maintenance</li> <li>Remember: I provide professional, high quality tools for free (1)</li> </ul> <ol> <li>You have locally run, free alternatives for:<ul> <li>Services like ImmersityAI: $0.50 per video</li> <li>Services like Specterr: $75.00 per month</li> <li>Synthesia: One time $40.00 payment</li> </ul> </li> </ol>"},{"location":"about/license/#business","title":"\ud83d\udd35 Business","text":"<p>Interested in powering your current or future business, need support in anything?</p> <ul> <li>\u2b50\ufe0f Join Forces: I miss the infra and marketing, you now have the product</li> <li>\ud83d\ude80 Get in touch with me, let's shred the competition together!</li> </ul> <p></p>"},{"location":"about/license/#code-license","title":"Code license","text":"<p>The license of choice is the AGPLv3. It's a strong copyleft<sup>2</sup> license that ensures the software remains free and open source for all users \u2022 commercial use is allowed.</p> <p> You already have the rights of this license, no need to ask for permission!</p> <p>This choice can be controversial, here's my thoughts:</p> <ul> <li>The GPLv3 part is often well-accepted, even though both are nearly identical licenses.</li> <li>ShaderFlow and derived projects can easily be hosted as a SaaS. The \"Affero\" clause ensures no bad actors can take advantage of the software without contributing back.</li> <li>It can be a blocker for some businesses, get in touch for further discussion.</li> </ul> <p>I plan on relicensing to MIT in the future, the contributions terms are a step towards that.</p> <ul> <li>Some of my projects like TurboPipe are under MIT, and I use many packages under it!</li> <li>Support my work to achieve that faster, I believe the projects can be successful and sustainable in the future, just unsure on the amount of support in this early era \ud83d\ude05</li> </ul> <p></p>"},{"location":"about/license/#contributions","title":"Contributions","text":"<p>By contributing to any project within this organization, you grant all rights to your submissions, including permission to incorporate and use them as part of the projects under any applicable licenses. For agreeing, check the box when submitting pull requests that you have read and agree to this Contributor License Agreement.</p> <p>I know CLAs are discouraging and can cause trust issues regarding being a maneuver tool for moving to a proprietary or source available models. Instead of writing a manifesto about how I'm not going to do that, you have seen my actions and can have my word on it.</p> <p>Note: I can't guarantee integrity if one comes with an irrecusable offer to buy the work</p> <p>There's some good reasons of why I want to do so:</p> <ul> <li>No contribution will easily outweight the current work; by the time someone's submitting such contributions, they'll already be part of the team and receive monetary support.</li> <li>The code base is very complex and took years to develop on my own. It doesn't feel fair to lock it to AGPLv3, making it hard<sup>3</sup> to transition to MIT in the future.</li> <li>Having full rights to the code-base gives me strong governance to prevent abuse from happening: choosing the right and/or well-minded partners for private use, while also getting funding to continue the work.</li> </ul> <p> Call me out if I ever diverge, and I'll make it right.</p> <p></p>"},{"location":"about/license/#user-content","title":"User content","text":"<p>Most projects generates audiovisual content, either procedurally or based on user inputs, in the form of videos, images and/or audio. The user is responsible for all content generated by the software, local or remote. This includes, but is not limited to:</p> <ul> <li>Rights: The user must ensure having the rights to use any third-party assets, including images, videos, audio, code, etc. External laws and licenses apply.</li> <li>Attribution: If the software generates content based on third-party assets direct or indirectly, the user must ensure proper attribution is given if required.</li> </ul> <p></p>"},{"location":"about/license/#third-party","title":"Third Party","text":"<p>Projects may bundle assets files or download them at runtime.</p> <p>Most notably:</p> <ul> <li>Programs: Like FFmpeg, \u00a0FluidSynth, \u00a0RealESRGAN, \u00a0Waifu2x</li> <li>Models<sup>5</sup>: Such as DepthAnything, \u00a0Marigold, \u00a0ZoeDepth</li> <li>Soundfonts:</li> <li>Fonts: DejaVu Fonts</li> </ul>"},{"location":"about/roadmap/","title":"About/Roadmap","text":"<p>Check out the main GitHub Projects boards for the current work of everything!</p>"},{"location":"about/sponsors/","title":"About/Sponsors","text":"<p>Hi, I'm Gabriel, born and currently living in Brazil \ud83c\udde7\ud83c\uddf7</p> <p>While my major is electrical engineering - as I always loved applied maths, I've been developing open source software in most of my free time ever since 2020. In fact, I've got so good at it, that following the engineering career path would be a wasted potential.</p> <p> I'm still early in life. This work is what's left of me that didn't get lost in the way; I don't plan on stopping anytime, truly I'm overwhelmed with ideas and new projects to work on!</p> <p>You might have noticed the incompatibility of \"free software\" and \"career\". Companies often promote \"open source loss leader\" projects that doesn't hurt their main revenue and gain customers, while community projects are funded by the community itself, which is my case.</p> <p>\u2b50\ufe0f I would 100% heartwarmingly do all of this for free, but your support lets me keep going!</p> <p>This might be impostor syndrome, but it's hard for me to comprehend \"value\" in people's work per my philosophy of openness. Ultimately, I'm asking for the society's permission to keep doing this and have a life out of it; I'm modest and humble, will never flaunt or boast.</p> <p>You are the society deciding if I can do this for a living!</p>"},{"location":"about/sponsors/#where-to-support","title":"\u2705 Where to support","text":"<p>Thank you for considering supporting me!</p> <ul> <li> <p> GitHub Sponsors</p> <ul> <li>\u2b50\ufe0f Access to the Insiders program</li> <li>Lowest fees, preferred method</li> </ul> <p> \ud83d\udca0 Support me</p> </li> <li> <p> Patreon</p> <ul> <li>\u274c No access to the Insiders</li> <li>Alternative, occasional posts</li> </ul> <p> \ud83d\udca0 Support me</p> </li> </ul>"},{"location":"about/sponsors/#why-to-support","title":"Why to support?","text":"<ul> <li> <p>\u267b\ufe0f I have spend an uncountable number of hours on the Projects as a whole, in a year's journey of learning, improving on self-taught programming skills, math knowledge, and problem solving. You already get all that for free, and help on keeping it going, improving, maintaining, offering technical support, and more by supporting my work!</p> <p>Think how much a full team would cost to develop and maintain such a software..</p> </li> <li> <p>\u2728 It allows me to improve the software in many platforms<sup>1</sup>, by buying hardware and gadgets to test and implement new features, as well as paying for self-hosting services (eventually), domain names, workstation environment, and other expenses.</p> </li> <li> <p>\ud83c\udde7\ud83c\uddf7 This may appear naive, but my local currency and average income is so weak, that 100$ american dollars already is 50% of the minimum monthly wage here. This is a value you'd spend on a two's dinner!  Not making a point, just putting into perspective \ud83d\ude05 </p> </li> </ul>"},{"location":"about/sponsors/#what-you-get","title":"What you get?","text":"<p>Apart from the already existing exclusive features of the Insiders program, you'll get:</p> <ul> <li> <p>\ud83d\udc8e Prioritized support and feature requests<sup>2</sup>: You have shown to value my time. I'd help everyone individually if possible, but I have to prioritize living, coding and additionally providing technical support on problems you might face or features you'd want!</p> </li> <li> <p>\ud83d\udcac Discord roles: Get access to many members-only channels where I commit to participate at a greater general availability. I can help from simple to complex stuff</p> </li> </ul> <p> Insiders only:</p> <ul> <li> <p>\u2b50\ufe0f Early access to new features: You'll get to test new features before they're released to the public, and provide feedback on them. This might include new ShaderFlow modules, new integrations, even new projects I'm working on!</p> </li> <li> <p>\ud83d\udce6 Exclusive content: Better explained in the Insiders page itself; this might include premium ShaderFlow scenes, automated video farm tools, custom scripts for you.</p> </li> <li> <p>\ud83c\udf35 Bounties program: Contribute to target supporting goals for features to be available for all the community or for the development to start!</p> </li> </ul> <p></p>"},{"location":"about/sponsors/#bounty-hunting","title":"\ud83c\udfa9 Bounty Hunting","text":"<p>This is work in progress, haven't decided the mechanisms or prices yet.</p> <p>There are lots of ideas that I'd like to implement, but haven't had the time, interest or resources to do so. As such, I'm doing a bounties program, where you can contribute to a specific goal, and once it's reached, I'll start work on it!</p> <p>Note: This list is subject to change; achieving such goals may take some time or be unpractical to implement, which can only be seen after starting the work. As such, I'll do my best to keep feasible, self-judged goals here.</p> <ul> <li> <p> Offline portable binary releases DepthFlow #54</p> </li> <li> <p> Text rendering module in ShaderFlow, allowing for lyrics, subtitles, and more.</p> </li> </ul>"},{"location":"about/sponsors/#low-priority","title":"Low priority","text":"<ul> <li> <p> Continue the development of SpectroNote #1</p> </li> <li> <p> Better spectrograms with Reassignment method SpectroNote #2</p> </li> </ul> <ol> <li> <p>Most notably supporting Apple Silicon without having the hardware to test on isn't ideal, as well as Hybrid GPUs systems often found in laptops, which could receive some upstream improvements.\u00a0\u21a9</p> </li> <li> <p>This isn't a guarantee, and I might not approve or put a bounty in your request; but I'll certainly consider it!\u00a0\u21a9</p> </li> </ol>"},{"location":"broken/","title":"Broken","text":"Broken Source Software   Here lies Broken: The Shared Library and Submodules of all my Projects"},{"location":"broken/#description","title":"\ud83d\udd25 Description","text":"<p>Broken is the shared library that powers all my projects \u2022 utilities of a lifetime</p> <ul> <li>\ud83c\udf1f Framework: A solution for Unification and Consistency</li> <li>\ud83d\ude80 Automation: Spend more time using the Projects</li> </ul> <p> \ud83c\udf41 Learn More \ud83c\udf41 \u2728 Check out my Awesome Website instead of a boring Readme \u2728 Installation Guides, Usage, Tips, Code Reference and More!"},{"location":"code/broken/__init__/","title":"File: <code>Broken/__init__.py</code>","text":""},{"location":"code/broken/__init__/#Broken","title":"Broken","text":""},{"location":"code/broken/__init__/#Broken.Environment","title":"Environment","text":"<p>Utilities for managing environment variables</p> Source code in <code>Broken/__init__.py</code> <pre><code>class Environment:\n    \"\"\"Utilities for managing environment variables\"\"\"\n\n    def __new__(cls) -&gt; None:\n        raise TypeError(f\"{cls.__name__} class cannot be instantiated\")\n\n    @staticmethod\n    def set(key: str, value: str | None, /) -&gt; None:\n        if (value is not None):\n            os.environ[key] = str(value)\n\n    @staticmethod\n    def append(key: str, value: str | None, /, pad: str=\" \") -&gt; None:\n        if (key not in os.environ):\n            Environment.set(key, value)\n        elif (value is not None):\n            os.environ[key] += pad + str(value)\n\n    @staticmethod\n    def setdefault(key: str, value: str | None, /) -&gt; None:\n        if (value is not None):\n            os.environ.setdefault(key, str(value))\n\n    @staticmethod\n    def update(**values: str | None) -&gt; None:\n        for key, value in values.items():\n            Environment.set(key, value)\n\n    @staticmethod\n    def get(key: str, default: str=None, /) -&gt; str:\n        return os.getenv(key, default)\n\n    @staticmethod\n    def exists(key: str, /) -&gt; bool:\n        return (key in os.environ)\n\n    @staticmethod\n    def int(key: str, default: int=0, /) -&gt; int:\n        return int(os.getenv(key, default))\n\n    @staticmethod\n    def float(key: str, default: float=1.0, /) -&gt; float:\n        return float(os.getenv(key, default))\n\n    @staticmethod\n    def bool(key: str, default: bool=False, /) -&gt; bool:\n        value = str(os.getenv(key, default)).lower()\n\n        if value in (\"1\", \"true\", \"yes\", \"on\"):\n            return True\n        elif value in (\"0\", \"false\", \"no\", \"off\"):\n            return False\n\n        raise ValueError(f\"Invalid boolean value for environment variable '{key}': {value}\")\n\n    @staticmethod\n    def flag(key: str, default: bool=False, /) -&gt; bool:\n        return Environment.bool(key, default)\n\n    @staticmethod\n    def unset(key: str, /) -&gt; None:\n        os.unsetenv(key)\n</code></pre>"},{"location":"code/broken/__init__/#Broken.Environment.__new__","title":"__new__","text":"<pre><code>__new__() -&gt; None\n</code></pre> Source code in <code>Broken/__init__.py</code> <pre><code>def __new__(cls) -&gt; None:\n    raise TypeError(f\"{cls.__name__} class cannot be instantiated\")\n</code></pre>"},{"location":"code/broken/__init__/#Broken.Environment.set","title":"set","text":"<pre><code>set(key: str, value: str | None) -&gt; None\n</code></pre> Source code in <code>Broken/__init__.py</code> <pre><code>@staticmethod\ndef set(key: str, value: str | None, /) -&gt; None:\n    if (value is not None):\n        os.environ[key] = str(value)\n</code></pre>"},{"location":"code/broken/__init__/#Broken.Environment.append","title":"append","text":"<pre><code>append(\n    key: str, value: str | None, /, pad: str = \" \"\n) -&gt; None\n</code></pre> Source code in <code>Broken/__init__.py</code> <pre><code>@staticmethod\ndef append(key: str, value: str | None, /, pad: str=\" \") -&gt; None:\n    if (key not in os.environ):\n        Environment.set(key, value)\n    elif (value is not None):\n        os.environ[key] += pad + str(value)\n</code></pre>"},{"location":"code/broken/__init__/#Broken.Environment.setdefault","title":"setdefault","text":"<pre><code>setdefault(key: str, value: str | None) -&gt; None\n</code></pre> Source code in <code>Broken/__init__.py</code> <pre><code>@staticmethod\ndef setdefault(key: str, value: str | None, /) -&gt; None:\n    if (value is not None):\n        os.environ.setdefault(key, str(value))\n</code></pre>"},{"location":"code/broken/__init__/#Broken.Environment.update","title":"update","text":"<pre><code>update(**values: str | None) -&gt; None\n</code></pre> Source code in <code>Broken/__init__.py</code> <pre><code>@staticmethod\ndef update(**values: str | None) -&gt; None:\n    for key, value in values.items():\n        Environment.set(key, value)\n</code></pre>"},{"location":"code/broken/__init__/#Broken.Environment.get","title":"get","text":"<pre><code>get(key: str, default: str = None) -&gt; str\n</code></pre> Source code in <code>Broken/__init__.py</code> <pre><code>@staticmethod\ndef get(key: str, default: str=None, /) -&gt; str:\n    return os.getenv(key, default)\n</code></pre>"},{"location":"code/broken/__init__/#Broken.Environment.exists","title":"exists","text":"<pre><code>exists(key: str) -&gt; bool\n</code></pre> Source code in <code>Broken/__init__.py</code> <pre><code>@staticmethod\ndef exists(key: str, /) -&gt; bool:\n    return (key in os.environ)\n</code></pre>"},{"location":"code/broken/__init__/#Broken.Environment.int","title":"int","text":"<pre><code>int(key: str, default: int = 0) -&gt; int\n</code></pre> Source code in <code>Broken/__init__.py</code> <pre><code>@staticmethod\ndef int(key: str, default: int=0, /) -&gt; int:\n    return int(os.getenv(key, default))\n</code></pre>"},{"location":"code/broken/__init__/#Broken.Environment.float","title":"float","text":"<pre><code>float(key: str, default: float = 1.0) -&gt; float\n</code></pre> Source code in <code>Broken/__init__.py</code> <pre><code>@staticmethod\ndef float(key: str, default: float=1.0, /) -&gt; float:\n    return float(os.getenv(key, default))\n</code></pre>"},{"location":"code/broken/__init__/#Broken.Environment.bool","title":"bool","text":"<pre><code>bool(key: str, default: bool = False) -&gt; bool\n</code></pre> Source code in <code>Broken/__init__.py</code> <pre><code>@staticmethod\ndef bool(key: str, default: bool=False, /) -&gt; bool:\n    value = str(os.getenv(key, default)).lower()\n\n    if value in (\"1\", \"true\", \"yes\", \"on\"):\n        return True\n    elif value in (\"0\", \"false\", \"no\", \"off\"):\n        return False\n\n    raise ValueError(f\"Invalid boolean value for environment variable '{key}': {value}\")\n</code></pre>"},{"location":"code/broken/__init__/#Broken.Environment.flag","title":"flag","text":"<pre><code>flag(key: str, default: bool = False) -&gt; bool\n</code></pre> Source code in <code>Broken/__init__.py</code> <pre><code>@staticmethod\ndef flag(key: str, default: bool=False, /) -&gt; bool:\n    return Environment.bool(key, default)\n</code></pre>"},{"location":"code/broken/__init__/#Broken.Environment.unset","title":"unset","text":"<pre><code>unset(key: str) -&gt; None\n</code></pre> Source code in <code>Broken/__init__.py</code> <pre><code>@staticmethod\ndef unset(key: str, /) -&gt; None:\n    os.unsetenv(key)\n</code></pre>"},{"location":"code/broken/__init__/#Broken.Runtime","title":"Runtime","text":"<p>Information about the current runtime environment</p> Source code in <code>Broken/__init__.py</code> <pre><code>class Runtime:\n    \"\"\"Information about the current runtime environment\"\"\"\n\n    Version: str = __version__\n    \"\"\"The version of the Broken library, and subsequently all projects\"\"\"\n\n    # # Bitness\n\n    Bitness: int = (struct.calcsize(\"P\") * 8)\n    \"\"\"The word size of the Python interpreter (32, 64 bits)\"\"\"\n\n    Python32: bool = (Bitness == 32)\n    \"\"\"True if running on a 32-bit Python interpreter\"\"\"\n\n    Python64: bool = (Bitness == 64)\n    \"\"\"True if running on a 64-bit Python interpreter\"\"\"\n\n    # # Runtime environments\n\n    PyInstaller: bool = bool(getattr(sys, \"frozen\", False))\n    \"\"\"True if running from a PyInstaller binary build (https://github.com/pyinstaller/pyinstaller)\"\"\"\n\n    Nuitka: bool = (\"__compiled__\" in globals())\n    \"\"\"True if running from a Nuitka binary build (https://github.com/Nuitka/Nuitka)\"\"\"\n\n    PyApp: bool = Environment.exists(\"PYAPP\")\n    \"\"\"True if running as a PyApp release (https://github.com/ofek/pyapp)\"\"\"\n\n    PyPI: bool = any((part in __file__.lower() for part in (\"site-packages\", \"dist-packages\")))\n    \"\"\"True if running as a installed package from PyPI (https://brokensrc.dev/get/pypi/)\"\"\"\n\n    Binary: bool = (PyInstaller or Nuitka or PyApp)\n    \"\"\"True if running from any executable build (PyInstaller, Nuitka, PyApp)\"\"\"\n\n    Release: bool = (Binary or PyPI)\n    \"\"\"True if running from any static final release build (PyInstaller, Nuitka, PyApp, PyPI)\"\"\"\n\n    Source: bool = (not Release)\n    \"\"\"True if running directly from the source code (https://brokensrc.dev/get/source/)\"\"\"\n\n    Method: str = (Source and \"Source\") or (Binary and \"Binary\") or (PyPI and \"PyPI\")\n    \"\"\"The runtime environment of the current project release (Source, Release, PyPI)\"\"\"\n\n    # # Special and Containers\n\n    Docker: bool = Path(\"/.dockerenv\").exists()\n    \"\"\"True if running from a Docker container\"\"\"\n\n    GitHub: bool = Environment.exists(\"GITHUB_ACTIONS\")\n    \"\"\"True if running in a GitHub Actions CI environment (https://github.com/features/actions)\"\"\"\n\n    WSL: bool = Path(\"/usr/lib/wsl/lib\").exists()\n    \"\"\"True if running in Windows Subsystem for Linux (https://learn.microsoft.com/en-us/windows/wsl/about)\"\"\"\n\n    Interactive: bool = sys.stdout.isatty()\n    \"\"\"True if running in an interactive terminal session (user can input)\"\"\"\n</code></pre>"},{"location":"code/broken/__init__/#Broken.Runtime.Version","title":"Version","text":"<pre><code>Version: str = __version__\n</code></pre> <p>The version of the Broken library, and subsequently all projects</p>"},{"location":"code/broken/__init__/#Broken.Runtime.Bitness","title":"Bitness","text":"<pre><code>Bitness: int = struct.calcsize('P') * 8\n</code></pre> <p>The word size of the Python interpreter (32, 64 bits)</p>"},{"location":"code/broken/__init__/#Broken.Runtime.Python32","title":"Python32","text":"<pre><code>Python32: bool = Bitness == 32\n</code></pre> <p>True if running on a 32-bit Python interpreter</p>"},{"location":"code/broken/__init__/#Broken.Runtime.Python64","title":"Python64","text":"<pre><code>Python64: bool = Bitness == 64\n</code></pre> <p>True if running on a 64-bit Python interpreter</p>"},{"location":"code/broken/__init__/#Broken.Runtime.PyInstaller","title":"PyInstaller","text":"<pre><code>PyInstaller: bool = bool(getattr(sys, 'frozen', False))\n</code></pre> <p>True if running from a PyInstaller binary build (https://github.com/pyinstaller/pyinstaller)</p>"},{"location":"code/broken/__init__/#Broken.Runtime.Nuitka","title":"Nuitka","text":"<pre><code>Nuitka: bool = '__compiled__' in globals()\n</code></pre> <p>True if running from a Nuitka binary build (https://github.com/Nuitka/Nuitka)</p>"},{"location":"code/broken/__init__/#Broken.Runtime.PyApp","title":"PyApp","text":"<pre><code>PyApp: bool = Environment.exists('PYAPP')\n</code></pre> <p>True if running as a PyApp release (https://github.com/ofek/pyapp)</p>"},{"location":"code/broken/__init__/#Broken.Runtime.PyPI","title":"PyPI","text":"<pre><code>PyPI: bool = any(\n    part in __file__.lower()\n    for part in (\"site-packages\", \"dist-packages\")\n)\n</code></pre> <p>True if running as a installed package from PyPI (https://brokensrc.dev/get/pypi/)</p>"},{"location":"code/broken/__init__/#Broken.Runtime.Binary","title":"Binary","text":"<pre><code>Binary: bool = PyInstaller or Nuitka or PyApp\n</code></pre> <p>True if running from any executable build (PyInstaller, Nuitka, PyApp)</p>"},{"location":"code/broken/__init__/#Broken.Runtime.Release","title":"Release","text":"<pre><code>Release: bool = Binary or PyPI\n</code></pre> <p>True if running from any static final release build (PyInstaller, Nuitka, PyApp, PyPI)</p>"},{"location":"code/broken/__init__/#Broken.Runtime.Source","title":"Source","text":"<pre><code>Source: bool = not Release\n</code></pre> <p>True if running directly from the source code (https://brokensrc.dev/get/source/)</p>"},{"location":"code/broken/__init__/#Broken.Runtime.Method","title":"Method","text":"<pre><code>Method: str = (\n    Source\n    and \"Source\"\n    or Binary\n    and \"Binary\"\n    or PyPI\n    and \"PyPI\"\n)\n</code></pre> <p>The runtime environment of the current project release (Source, Release, PyPI)</p>"},{"location":"code/broken/__init__/#Broken.Runtime.Docker","title":"Docker","text":"<pre><code>Docker: bool = Path('/.dockerenv').exists()\n</code></pre> <p>True if running from a Docker container</p>"},{"location":"code/broken/__init__/#Broken.Runtime.GitHub","title":"GitHub","text":"<pre><code>GitHub: bool = Environment.exists('GITHUB_ACTIONS')\n</code></pre> <p>True if running in a GitHub Actions CI environment (https://github.com/features/actions)</p>"},{"location":"code/broken/__init__/#Broken.Runtime.WSL","title":"WSL","text":"<pre><code>WSL: bool = Path('/usr/lib/wsl/lib').exists()\n</code></pre> <p>True if running in Windows Subsystem for Linux (https://learn.microsoft.com/en-us/windows/wsl/about)</p>"},{"location":"code/broken/__init__/#Broken.Runtime.Interactive","title":"Interactive","text":"<pre><code>Interactive: bool = sys.stdout.isatty()\n</code></pre> <p>True if running in an interactive terminal session (user can input)</p>"},{"location":"code/broken/__init__/#Broken.Tools","title":"Tools","text":"<p>Shortcuts to common tools and utilities</p> Source code in <code>Broken/__init__.py</code> <pre><code>class Tools:\n    \"\"\"Shortcuts to common tools and utilities\"\"\"\n\n    python: Path = Path(sys.executable)\n    \"\"\"The current Python interpreter executable\"\"\"\n\n    uv: list[str, Path] = [python, \"-m\", \"uv\"]\n    \"\"\"Entry point for the uv package manager (https://github.com/astral-sh/uv)\"\"\"\n\n    pip: list[str, Path] = [python, \"-m\", \"uv\", \"pip\"]\n    \"\"\"Entry point for pip\"\"\"\n</code></pre>"},{"location":"code/broken/__init__/#Broken.Tools.python","title":"python","text":"<pre><code>python: Path = Path(sys.executable)\n</code></pre> <p>The current Python interpreter executable</p>"},{"location":"code/broken/__init__/#Broken.Tools.uv","title":"uv","text":"<pre><code>uv: list[str, Path] = [python, '-m', 'uv']\n</code></pre> <p>Entry point for the uv package manager (https://github.com/astral-sh/uv)</p>"},{"location":"code/broken/__init__/#Broken.Tools.pip","title":"pip","text":"<pre><code>pip: list[str, Path] = [python, '-m', 'uv', 'pip']\n</code></pre> <p>Entry point for pip</p>"},{"location":"code/broken/__init__/#Broken.BROKEN","title":"BROKEN","text":"<pre><code>BROKEN = BrokenProject(\n    PACKAGE=__file__,\n    APP_NAME=\"Broken\",\n    APP_AUTHOR=\"BrokenSource\",\n    RESOURCES=BrokenResources,\n)\n</code></pre> <p>The main library's BrokenProject instance</p>"},{"location":"code/broken/__init__/#Broken.PROJECT","title":"PROJECT","text":"<pre><code>PROJECT: BrokenProject = BROKEN\n</code></pre> <p>The first BrokenProject initialized after (but including) BROKEN itself</p>"},{"location":"code/broken/__main__/","title":"File: <code>Broken/__main__.py</code>","text":""},{"location":"code/broken/__main__/#Broken.__main__","title":"Broken.__main__","text":""},{"location":"code/broken/__main__/#Broken.__main__.ProjectLanguage","title":"ProjectLanguage","text":"<p>               Bases: <code>BrokenEnum</code></p> Source code in <code>Broken/__main__.py</code> <pre><code>class ProjectLanguage(BrokenEnum):\n    Unknown = \"unknown\"\n    Python  = \"python\"\n    NodeJS  = \"nodejs\"\n    Rust    = \"rust\"\n    CPP     = \"cpp\"\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectLanguage.Unknown","title":"Unknown","text":"<pre><code>Unknown = 'unknown'\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectLanguage.Python","title":"Python","text":"<pre><code>Python = 'python'\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectLanguage.NodeJS","title":"NodeJS","text":"<pre><code>NodeJS = 'nodejs'\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectLanguage.Rust","title":"Rust","text":"<pre><code>Rust = 'rust'\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectLanguage.CPP","title":"CPP","text":"<pre><code>CPP = 'cpp'\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager","title":"ProjectManager","text":"Source code in <code>Broken/__main__.py</code> <pre><code>@define\nclass ProjectManager:\n    path: Path\n    name: str = \"Unknown\"\n    cli: BrokenTyper = None\n\n    # # Main entry point\n\n    def main(self, ctx: Context) -&gt; None:\n        self.cli = BrokenTyper(help=False)\n        self.cli.command(self.update)\n        self.cli.command(self.compile)\n        self.cli.command(self.run, context=True)\n        with BrokenPath.pushd(self.path, echo=False):\n            self.cli(*ctx.args)\n\n    # # Initialization\n\n    def __attrs_post_init__(self):\n        self.name = self.path.name\n\n    def __eq__(self, other: Self) -&gt; bool:\n        return self.path == other.path\n\n    # # Utility Attributes\n\n    @property\n    def version(self) -&gt; str:\n        import arrow\n        now = arrow.utcnow().format(\"YYYY.M.D\")\n        return self.config.setdefault(\"version\", now)\n\n    @property\n    def description(self) -&gt; str:\n        description = \"\"\n\n        # Read Python's pyproject.toml\n        if (config := self.path/\"pyproject.toml\").exists():\n            description = (\n                toml.loads(config.read_text())\n                .get(\"project\", {})\n                .get(\"description\", \"\")\n            )\n\n        # Read Rust's Cargo.toml\n        elif (config := self.path/\"Cargo.toml\").exists():\n            description = (\n                toml.loads(config.read_text())\n                .get(\"package\", {})\n                .get(\"description\", \"\")\n            )\n\n        return description\n\n    @property\n    def languages(self) -&gt; set[ProjectLanguage]:\n        languages = set()\n\n        # Best attempts to detect language\n        if (self.path/\"pyproject.toml\").exists():\n            languages.add(ProjectLanguage.Python)\n        elif (self.path/\"Cargo.toml\").exists():\n            languages.add(ProjectLanguage.Rust)\n        elif (self.path/\"meson.build\").exists():\n            languages.add(ProjectLanguage.CPP)\n        else:\n            languages.add(ProjectLanguage.Unknown)\n\n        return languages\n\n    @property\n    def pyproject(self) -&gt; DotMap:\n        return DotMap(toml.loads((self.path/\"pyproject.toml\").read_text()))\n\n    @property\n    def cargo_toml(self) -&gt; DotMap:\n        return DotMap(toml.loads((self.path/\"Cargo.toml\").read_text()))\n\n    @property\n    def _pretty_language(self) -&gt; str:\n        if self.is_python: return f\"\ud83d\udc0d (Python) {self.description}\"\n        if self.is_nodejs: return f\"\ud83d\udfe2 (NodeJS) {self.description}\"\n        if self.is_rust:   return f\"\ud83e\udd80 (Rust  ) {self.description}\"\n        if self.is_cpp:    return f\"\ud83c\udf00 (C/C++ ) {self.description}\"\n        return self.description\n\n    # Shorthands for project language\n\n    @property\n    def is_known(self) -&gt; bool:\n        return ProjectLanguage.Unknown not in self.languages\n    @property\n    def is_python(self) -&gt; bool:\n        return ProjectLanguage.Python in self.languages\n    @property\n    def is_nodejs(self) -&gt; bool:\n        return ProjectLanguage.NodeJS in self.languages\n    @property\n    def is_rust(self) -&gt; bool:\n        return ProjectLanguage.Rust in self.languages\n    @property\n    def is_cpp(self) -&gt; bool:\n        return ProjectLanguage.CPP in self.languages\n\n    # # Commands\n\n    def update(self) -&gt; None:\n        \"\"\"\u2728 Update this project's dependencies\"\"\"\n        if self.is_python:\n            outdated = shell(\"uv\", \"pip\", \"list\", \"--outdated\", \"--format=json\", output=True)\n            pyproject = (self.path/\"pyproject.toml\").read_text(\"utf8\")\n\n            # Replaces any package version of '~=', '&gt;=', '^=' with latest\n            for package in map(DotMap, json.loads(outdated)):\n                pyproject = re.sub(\n                    rf'({re.escape(package.name)}(?:\\[[^\\]]+\\])?\\s*(?:~=|&gt;=|\\^))\\s*([^\\\"]*)\"',\n                    rf'\\g&lt;1&gt;{package.latest_version}\"',\n                    pyproject\n                )\n\n            # Write changes\n            (self.path/\"pyproject.toml\").write_text(pyproject, \"utf8\")\n            shell(\"uv\", \"sync\", \"--all-packages\")\n\n        if self.is_nodejs:\n            shell(\"pnpm\", \"update\")\n        if self.is_rust:\n            shell(\"cargo\", \"update\")\n        if self.is_cpp:\n            log.error(\"C++ projects are not supported yet\")\n\n    def run(self, ctx: Context,\n        loop:  Annotated[bool, Option(\"--loop\",  help=\"Press Enter after each run to run again\")]=False,\n        clear: Annotated[bool, Option(\"--clear\", help=\"Clear terminal before running\")]=False,\n        debug: Annotated[bool, Option(\"--debug\", help=\"Debug mode for Rust projects\")]=False,\n    ) -&gt; None:\n        \"\"\"\ud83d\udd25 Run this project with all arguments that follow\"\"\"\n\n        while True:\n            BrokenPlatform.clear_terminal() if clear else None\n\n            if self.is_python:\n                log.info(f\"Hey! Just type '{self.name.lower()}' to run the project directly, it's faster \ud83d\ude09\")\n                return\n\n            elif self.is_rust:\n                raise RuntimeError(log.error(\"Rust projects are not supported yet\"))\n                _status = shell(\n                    \"cargo\", \"run\",\n                    \"--bin\", self.name,\n                    [\"--profile\", \"release\"] if not debug else [],\n                    \"--features\", self.rust_features,\n                    \"--\", ctx.args\n                )\n\n            elif self.is_cpp:\n                BUILD_DIR = BROKEN.DIRECTORIES.REPO_BUILD/self.name\n                if shell(\"meson\", BUILD_DIR, \"--reconfigure\", \"--buildtype\", \"release\").returncode != 0:\n                    exit(log.error(f\"Could not build project ({self.name})\") or 1)\n                if shell(\"ninja\", \"-C\", BUILD_DIR).returncode != 0:\n                    exit(log.error(f\"Could not build project ({self.name})\") or 1)\n                binary = next(BUILD_DIR.glob(f\"{self.name.lower()}\"))\n                shell(binary, ctx.args)\n\n            if not loop:\n                break\n\n            import rich.prompt\n            log.success(f\"Project ({self.name}) finished successfully\")\n            if not rich.prompt.Confirm.ask(\"(Infinite mode) Press Enter to run again\", default=True):\n                break\n\n    # # Python shenanigans\n\n    def compile(self,\n        target: Annotated[list[PlatformEnum],\n            Option(\"--target\", \"-t\",\n            help=\"Target platforms to build binaries for\"\n        )] = [BrokenPlatform.Host],\n\n        tarball: Annotated[bool,\n            Option(\"--tarball\", \"-z\",\n            help=\"Create a compressed tarball archive for unix releases\",\n        )] = False,\n\n        standalone: Annotated[bool,\n            Option(\"--standalone\", \"-s\",\n            help=\"(Standalone) Create self-contained distributions with all dependencies\",\n        )] = False,\n\n        torch: Annotated[Optional[TorchRelease],\n            Option(\"--torch\", \"-r\",\n            help=\"(Standalone) Bundle a specific PyTorch version with the project\"\n        )] = None,\n    ) -&gt; None:\n        \"\"\"\n        \ud83d\udce6 Release the Project as a distributable binary\n\n        Note:\n            - Requires mingw packages for Windows cross compilation from Linux\n        \"\"\"\n\n        # Recurse on each target item\n        if isinstance(target, list):\n            for target in flatten(map(PlatformEnum.get_all, target)):\n                ProjectManager.compile(**locals())\n            return None\n\n        # Filter invalid host -&gt; target combinations of all targets\n        if BrokenPlatform.OnLinux and (target.system == SystemEnum.MacOS):\n            return log.skip(f\"Linux can't [italic]easily[/] compile for {target.system}\")\n        elif BrokenPlatform.OnMacOS and (target.system != SystemEnum.MacOS):\n            return log.skip(\"macOS can only [italic]easily[/] compile for itself\")\n        elif BrokenPlatform.OnWindows and (target.system != SystemEnum.Windows):\n            return log.skip(\"Windows can only [italic]easily[/] compile for itself\")\n        elif (target == PlatformEnum.WindowsARM64):\n            return log.skip(\"Windows on ARM is not widely supported\")\n\n        # Automatically bundle some torch on projects that needs it\n        if (self.name == \"DepthFlow\"):\n            torch = (torch or SimpleTorch.CPU.value)\n\n        # Non-macOS ARM builds can be unstable/not tested, disable on CI\n        if (target.arch.is_arm() and (target.system != SystemEnum.MacOS)):\n            log.warning(\"ARM general support is only present in macOS\")\n\n        # Fixme: Wait for uv's implementation of pip wheel for my own sanity\n        if (standalone and target != BrokenPlatform.Host):\n            log.error(\"Standalone releases are best built in a host matching the target platform\")\n            log.error(\"\u2022 Awaiting implementation of (https://github.com/astral-sh/uv/issues/1681)\")\n            log.error(f\"\u2022 Attempted to build for '{target.value}' on '{BrokenPlatform.Host.value}'\")\n            return\n\n        log.note(\"Building Project Release for\", target)\n\n        if self.is_python:\n            BrokenManager.rust()\n            BUILD_DIR: Path = BROKEN.DIRECTORIES.REPO_BUILD/\"Cargo\"\n            BUILD_WHL: Path = BROKEN.DIRECTORIES.BUILD_WHEELS\n            PYTHON_VERSION: str = \"3.12\"\n\n            # Remove previous build cache for pyapp\n            for path in BUILD_DIR.rglob(\"pyapp*\"):\n                BrokenPath.remove(path)\n\n            # Write a releases env config file\n            (RELEASE_ENV := BROKEN.RESOURCES.ROOT/\"Release.env\").write_text('\\n'.join(\n                f\"{key}={value}\" for key, value in dict(\n                    # Placeholder\n                ).items()\n            ))\n\n            # Build wheels, find main and extra ones\n            Environment.set(\"PYAPP_RELEASE\", 1)\n            WHEELS = BrokenManager().pypi(all=True)\n            MAIN   = next(WHEELS.glob(\"broken_source*\"))\n            EXTRA  = set(WHEELS.glob(\"*.whl\")) - {MAIN}\n\n            if (standalone):\n\n                # Fixme: Improve this with (https://github.com/astral-sh/uv/issues/1681)\n                def fetch_wheel(\n                    dependencies: Union[str, list[str]],\n                    index: Optional[str]=None,\n                    nodeps: bool=True,\n                ) -&gt; None:\n                    if (returncode := shell(\n                        sys.executable, \"-m\", \"pip\", \"download\", dependencies,\n                        ((\"--platform\", x) for x in target.pip_platform),\n                        \"--python-version\", PYTHON_VERSION,\n                        \"--only-binary=:all:\"*(not nodeps),\n                        \"--no-deps\"*(nodeps),\n                        \"--prefer-binary\",\n                        every(\"--index\", index),\n                        \"--dest\", BUILD_WHL,\n                    ).returncode) != 0:\n                        log.error(f\"Failed to download dependency ({dependencies})\")\n                        exit(returncode)\n\n                from concurrent.futures import ThreadPoolExecutor\n\n                with ThreadPoolExecutor(max_workers=10) as pool:\n                    for dependency in filter(None, shell(\n                        \"uv\", \"export\", \"--all-packages\",\n                        \"--format\", \"requirements-txt\",\n                        \"--no-editable\", \"--no-hashes\",\n                        \"--no-header\", \"--no-dev\",\n                        output=True\n                    ).splitlines()):\n\n                        # Skip editable packages\n                        if (dependency.startswith(\".\")):\n                            continue\n\n                        # Skip audioop on Python 3.13+ as it was dropped from stdlib\n                        if (PYTHON_VERSION == \"3.13\") and (\"audioop\" in dependency):\n                            continue\n\n                        # Ignore platform constraints\n                        dependency = dependency.split(\";\")[0]\n\n                        pool.submit(fetch_wheel, dependency)\n\n                # Add all dependencies wheels and sdists to the extra list\n                EXTRA |= set(BUILD_WHL.glob(\"*.whl\")) - (EXTRA | {MAIN})\n                EXTRA |= set(BUILD_WHL.glob(\"*.tar.gz\"))\n\n                # Why PyTorch can't be normal?\n                if bool(torch):\n\n                    # Help the linker deal with 3.2 GB Torch CUDA binaries..\n                    Environment.append(\"RUSTFLAGS\", \"-C code-model=large\")\n\n                    fetch_wheel(\n                        dependencies=torch.packages,\n                        index=torch.index,\n                        nodeps=False\n                    )\n\n                    # Remove new duplicate and list them on extra wheels\n                    for file in set(BUILD_WHL.iterdir()) - (EXTRA | {MAIN}):\n\n                        # Note: Need case insensitive enabled due shit like this:\n                        # - https://pypi.org/project/Jinja2/3.1.4/#jinja2-3.1.4-py3-none-any.whl\n                        # - https://download.pytorch.org/whl/Jinja2-3.1.4-py3-none-any.whl\n                        duplicates = list(BUILD_WHL.glob(\n                            pattern=f\"{file.name.split(\"-\")[0]}-*\",\n                            case_sensitive=False\n                        ))\n\n                        if len(duplicates) &gt; 1:\n                            log.info(f\"Removing duplicate: {file}\")\n                            file.unlink()\n                            continue\n\n                        EXTRA |= {file}\n\n            # Pyapp configuration\n            Environment.update(\n                PYAPP_PROJECT_PATH=str(MAIN),\n                PYAPP_EXTRA_WHEELS=\";\".join(map(str, EXTRA)),\n                PYAPP_PIP_EXTRA_ARGS=(\"--no-deps\"*standalone),\n                PYAPP_PYTHON_VERSION=PYTHON_VERSION,\n                PYAPP_EXEC_MODULE=self.name,\n                PYAPP_DISTRIBUTION_EMBED=1,\n                PYAPP_PASS_LOCATION=1,\n                PYAPP_UV_ENABLED=1,\n                PYAPP_UV_EMBED=1,\n            )\n\n            # Rust configuration\n            Environment.update(\n                CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=shutil.which(\"aarch64-linux-gnu-gcc\"),\n            )\n\n            # Cache Rust compilation across projects\n            Environment.set(\"CARGO_HOME\", BUILD_DIR)\n            shell(\"rustup\", \"target\", \"add\", target.triple)\n\n            # Cargo warning: We're not 'installing' a utility\n            BrokenPath.add_to_path(BUILD_DIR/\"bin\")\n\n            if (_PYAPP_FORK := True):\n                if not (fork := BROKEN.DIRECTORIES.REPO_BUILD/\"PyApp\").exists():\n                    shell(\"git\", \"clone\", \"https://github.com/BrokenSource/PyApp\", fork, \"-b\", \"custom\")\n                embed = (fork/\"src\"/\"embed\")\n\n                # Remove previous embeddings if any\n                for file in embed.glob(\"*.whl\"):\n                    file.unlink()\n                for file in embed.glob(\"*.tar.gz\"):\n                    file.unlink()\n\n                # Actually compile it\n                if shell(\n                    \"cargo\", \"install\",\n                    \"--path\", fork, \"--force\",\n                    \"--root\", BUILD_DIR,\n                    \"--target\", target.triple,\n                ).returncode != 0:\n                    raise RuntimeError(log.error(\"Failed to compile PyApp\"))\n            else:\n                if shell(\n                    \"cargo\", \"install\",\n                    \"pyapp\", \"--force\",\n                    \"--root\", BUILD_DIR,\n                    \"--target\", target.triple,\n                ).returncode != 0:\n                    raise RuntimeError(log.error(\"Failed to compile PyApp\"))\n\n            RELEASE_ENV.unlink()\n\n            # Find the compiled binary\n            binary = next((BUILD_DIR/\"bin\").glob(\"pyapp*\"))\n            log.info(f\"Compiled Pyapp binary at ({binary})\")\n            BrokenPath.make_executable(binary)\n\n            # Rename the compiled binary to the final release name\n            release_path = BROKEN.DIRECTORIES.REPO_RELEASES / ''.join((\n                f\"{self.name.lower()}\",\n                f\"-{target.value}\",\n                f\"-v{BROKEN.VERSION}\",\n                f\"-{torch.flavor}\" if torch else \"\",\n                \"-standalone\"*standalone,\n                f\"{target.extension}\",\n            ))\n            BrokenPath.copy(src=binary, dst=release_path)\n            BrokenPath.make_executable(release_path)\n\n            # Release a tar.gz to keep chmod +x attributes\n            if tarball and (\"windows\" not in target.name):\n                release_path = BrokenPath.gzip(release_path, remove=True)\n\n            log.success(f\"Built Project Release at ({release_path})\")\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.path","title":"path","text":"<pre><code>path: Path\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.name","title":"name","text":"<pre><code>name: str = 'Unknown'\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.cli","title":"cli","text":"<pre><code>cli: BrokenTyper = None\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.main","title":"main","text":"<pre><code>main(ctx: Context) -&gt; None\n</code></pre> Source code in <code>Broken/__main__.py</code> <pre><code>def main(self, ctx: Context) -&gt; None:\n    self.cli = BrokenTyper(help=False)\n    self.cli.command(self.update)\n    self.cli.command(self.compile)\n    self.cli.command(self.run, context=True)\n    with BrokenPath.pushd(self.path, echo=False):\n        self.cli(*ctx.args)\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.__attrs_post_init__","title":"__attrs_post_init__","text":"<pre><code>__attrs_post_init__()\n</code></pre> Source code in <code>Broken/__main__.py</code> <pre><code>def __attrs_post_init__(self):\n    self.name = self.path.name\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.__eq__","title":"__eq__","text":"<pre><code>__eq__(other: Self) -&gt; bool\n</code></pre> Source code in <code>Broken/__main__.py</code> <pre><code>def __eq__(self, other: Self) -&gt; bool:\n    return self.path == other.path\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.version","title":"version","text":"<pre><code>version: str\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.description","title":"description","text":"<pre><code>description: str\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.languages","title":"languages","text":"<pre><code>languages: set[ProjectLanguage]\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.pyproject","title":"pyproject","text":"<pre><code>pyproject: DotMap\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.cargo_toml","title":"cargo_toml","text":"<pre><code>cargo_toml: DotMap\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.is_known","title":"is_known","text":"<pre><code>is_known: bool\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.is_python","title":"is_python","text":"<pre><code>is_python: bool\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.is_nodejs","title":"is_nodejs","text":"<pre><code>is_nodejs: bool\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.is_rust","title":"is_rust","text":"<pre><code>is_rust: bool\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.is_cpp","title":"is_cpp","text":"<pre><code>is_cpp: bool\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.update","title":"update","text":"<pre><code>update() -&gt; None\n</code></pre> <p>\u2728 Update this project's dependencies</p> Source code in <code>Broken/__main__.py</code> <pre><code>def update(self) -&gt; None:\n    \"\"\"\u2728 Update this project's dependencies\"\"\"\n    if self.is_python:\n        outdated = shell(\"uv\", \"pip\", \"list\", \"--outdated\", \"--format=json\", output=True)\n        pyproject = (self.path/\"pyproject.toml\").read_text(\"utf8\")\n\n        # Replaces any package version of '~=', '&gt;=', '^=' with latest\n        for package in map(DotMap, json.loads(outdated)):\n            pyproject = re.sub(\n                rf'({re.escape(package.name)}(?:\\[[^\\]]+\\])?\\s*(?:~=|&gt;=|\\^))\\s*([^\\\"]*)\"',\n                rf'\\g&lt;1&gt;{package.latest_version}\"',\n                pyproject\n            )\n\n        # Write changes\n        (self.path/\"pyproject.toml\").write_text(pyproject, \"utf8\")\n        shell(\"uv\", \"sync\", \"--all-packages\")\n\n    if self.is_nodejs:\n        shell(\"pnpm\", \"update\")\n    if self.is_rust:\n        shell(\"cargo\", \"update\")\n    if self.is_cpp:\n        log.error(\"C++ projects are not supported yet\")\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.run","title":"run","text":"<pre><code>run(\n    ctx: Context,\n    loop: Annotated[\n        bool,\n        Option(\n            --loop,\n            help=\"Press Enter after each run to run again\",\n        ),\n    ] = False,\n    clear: Annotated[\n        bool,\n        Option(\n            --clear, help=\"Clear terminal before running\"\n        ),\n    ] = False,\n    debug: Annotated[\n        bool,\n        Option(\n            --debug, help=\"Debug mode for Rust projects\"\n        ),\n    ] = False,\n) -&gt; None\n</code></pre> <p>\ud83d\udd25 Run this project with all arguments that follow</p> Source code in <code>Broken/__main__.py</code> <pre><code>def run(self, ctx: Context,\n    loop:  Annotated[bool, Option(\"--loop\",  help=\"Press Enter after each run to run again\")]=False,\n    clear: Annotated[bool, Option(\"--clear\", help=\"Clear terminal before running\")]=False,\n    debug: Annotated[bool, Option(\"--debug\", help=\"Debug mode for Rust projects\")]=False,\n) -&gt; None:\n    \"\"\"\ud83d\udd25 Run this project with all arguments that follow\"\"\"\n\n    while True:\n        BrokenPlatform.clear_terminal() if clear else None\n\n        if self.is_python:\n            log.info(f\"Hey! Just type '{self.name.lower()}' to run the project directly, it's faster \ud83d\ude09\")\n            return\n\n        elif self.is_rust:\n            raise RuntimeError(log.error(\"Rust projects are not supported yet\"))\n            _status = shell(\n                \"cargo\", \"run\",\n                \"--bin\", self.name,\n                [\"--profile\", \"release\"] if not debug else [],\n                \"--features\", self.rust_features,\n                \"--\", ctx.args\n            )\n\n        elif self.is_cpp:\n            BUILD_DIR = BROKEN.DIRECTORIES.REPO_BUILD/self.name\n            if shell(\"meson\", BUILD_DIR, \"--reconfigure\", \"--buildtype\", \"release\").returncode != 0:\n                exit(log.error(f\"Could not build project ({self.name})\") or 1)\n            if shell(\"ninja\", \"-C\", BUILD_DIR).returncode != 0:\n                exit(log.error(f\"Could not build project ({self.name})\") or 1)\n            binary = next(BUILD_DIR.glob(f\"{self.name.lower()}\"))\n            shell(binary, ctx.args)\n\n        if not loop:\n            break\n\n        import rich.prompt\n        log.success(f\"Project ({self.name}) finished successfully\")\n        if not rich.prompt.Confirm.ask(\"(Infinite mode) Press Enter to run again\", default=True):\n            break\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.ProjectManager.compile","title":"compile","text":"<pre><code>compile(\n    target: Annotated[\n        list[PlatformEnum],\n        Option(\n            --target,\n            -t,\n            help=\"Target platforms to build binaries for\",\n        ),\n    ] = [BrokenPlatform.Host],\n    tarball: Annotated[\n        bool,\n        Option(\n            --tarball,\n            -z,\n            help=\"Create a compressed tarball archive for unix releases\",\n        ),\n    ] = False,\n    standalone: Annotated[\n        bool,\n        Option(\n            --standalone,\n            -s,\n            help=\"(Standalone) Create self-contained distributions with all dependencies\",\n        ),\n    ] = False,\n    torch: Annotated[\n        Optional[TorchRelease],\n        Option(\n            --torch,\n            -r,\n            help=\"(Standalone) Bundle a specific PyTorch version with the project\",\n        ),\n    ] = None,\n) -&gt; None\n</code></pre> <p>\ud83d\udce6 Release the Project as a distributable binary</p> Note <ul> <li>Requires mingw packages for Windows cross compilation from Linux</li> </ul> Source code in <code>Broken/__main__.py</code> <pre><code>def compile(self,\n    target: Annotated[list[PlatformEnum],\n        Option(\"--target\", \"-t\",\n        help=\"Target platforms to build binaries for\"\n    )] = [BrokenPlatform.Host],\n\n    tarball: Annotated[bool,\n        Option(\"--tarball\", \"-z\",\n        help=\"Create a compressed tarball archive for unix releases\",\n    )] = False,\n\n    standalone: Annotated[bool,\n        Option(\"--standalone\", \"-s\",\n        help=\"(Standalone) Create self-contained distributions with all dependencies\",\n    )] = False,\n\n    torch: Annotated[Optional[TorchRelease],\n        Option(\"--torch\", \"-r\",\n        help=\"(Standalone) Bundle a specific PyTorch version with the project\"\n    )] = None,\n) -&gt; None:\n    \"\"\"\n    \ud83d\udce6 Release the Project as a distributable binary\n\n    Note:\n        - Requires mingw packages for Windows cross compilation from Linux\n    \"\"\"\n\n    # Recurse on each target item\n    if isinstance(target, list):\n        for target in flatten(map(PlatformEnum.get_all, target)):\n            ProjectManager.compile(**locals())\n        return None\n\n    # Filter invalid host -&gt; target combinations of all targets\n    if BrokenPlatform.OnLinux and (target.system == SystemEnum.MacOS):\n        return log.skip(f\"Linux can't [italic]easily[/] compile for {target.system}\")\n    elif BrokenPlatform.OnMacOS and (target.system != SystemEnum.MacOS):\n        return log.skip(\"macOS can only [italic]easily[/] compile for itself\")\n    elif BrokenPlatform.OnWindows and (target.system != SystemEnum.Windows):\n        return log.skip(\"Windows can only [italic]easily[/] compile for itself\")\n    elif (target == PlatformEnum.WindowsARM64):\n        return log.skip(\"Windows on ARM is not widely supported\")\n\n    # Automatically bundle some torch on projects that needs it\n    if (self.name == \"DepthFlow\"):\n        torch = (torch or SimpleTorch.CPU.value)\n\n    # Non-macOS ARM builds can be unstable/not tested, disable on CI\n    if (target.arch.is_arm() and (target.system != SystemEnum.MacOS)):\n        log.warning(\"ARM general support is only present in macOS\")\n\n    # Fixme: Wait for uv's implementation of pip wheel for my own sanity\n    if (standalone and target != BrokenPlatform.Host):\n        log.error(\"Standalone releases are best built in a host matching the target platform\")\n        log.error(\"\u2022 Awaiting implementation of (https://github.com/astral-sh/uv/issues/1681)\")\n        log.error(f\"\u2022 Attempted to build for '{target.value}' on '{BrokenPlatform.Host.value}'\")\n        return\n\n    log.note(\"Building Project Release for\", target)\n\n    if self.is_python:\n        BrokenManager.rust()\n        BUILD_DIR: Path = BROKEN.DIRECTORIES.REPO_BUILD/\"Cargo\"\n        BUILD_WHL: Path = BROKEN.DIRECTORIES.BUILD_WHEELS\n        PYTHON_VERSION: str = \"3.12\"\n\n        # Remove previous build cache for pyapp\n        for path in BUILD_DIR.rglob(\"pyapp*\"):\n            BrokenPath.remove(path)\n\n        # Write a releases env config file\n        (RELEASE_ENV := BROKEN.RESOURCES.ROOT/\"Release.env\").write_text('\\n'.join(\n            f\"{key}={value}\" for key, value in dict(\n                # Placeholder\n            ).items()\n        ))\n\n        # Build wheels, find main and extra ones\n        Environment.set(\"PYAPP_RELEASE\", 1)\n        WHEELS = BrokenManager().pypi(all=True)\n        MAIN   = next(WHEELS.glob(\"broken_source*\"))\n        EXTRA  = set(WHEELS.glob(\"*.whl\")) - {MAIN}\n\n        if (standalone):\n\n            # Fixme: Improve this with (https://github.com/astral-sh/uv/issues/1681)\n            def fetch_wheel(\n                dependencies: Union[str, list[str]],\n                index: Optional[str]=None,\n                nodeps: bool=True,\n            ) -&gt; None:\n                if (returncode := shell(\n                    sys.executable, \"-m\", \"pip\", \"download\", dependencies,\n                    ((\"--platform\", x) for x in target.pip_platform),\n                    \"--python-version\", PYTHON_VERSION,\n                    \"--only-binary=:all:\"*(not nodeps),\n                    \"--no-deps\"*(nodeps),\n                    \"--prefer-binary\",\n                    every(\"--index\", index),\n                    \"--dest\", BUILD_WHL,\n                ).returncode) != 0:\n                    log.error(f\"Failed to download dependency ({dependencies})\")\n                    exit(returncode)\n\n            from concurrent.futures import ThreadPoolExecutor\n\n            with ThreadPoolExecutor(max_workers=10) as pool:\n                for dependency in filter(None, shell(\n                    \"uv\", \"export\", \"--all-packages\",\n                    \"--format\", \"requirements-txt\",\n                    \"--no-editable\", \"--no-hashes\",\n                    \"--no-header\", \"--no-dev\",\n                    output=True\n                ).splitlines()):\n\n                    # Skip editable packages\n                    if (dependency.startswith(\".\")):\n                        continue\n\n                    # Skip audioop on Python 3.13+ as it was dropped from stdlib\n                    if (PYTHON_VERSION == \"3.13\") and (\"audioop\" in dependency):\n                        continue\n\n                    # Ignore platform constraints\n                    dependency = dependency.split(\";\")[0]\n\n                    pool.submit(fetch_wheel, dependency)\n\n            # Add all dependencies wheels and sdists to the extra list\n            EXTRA |= set(BUILD_WHL.glob(\"*.whl\")) - (EXTRA | {MAIN})\n            EXTRA |= set(BUILD_WHL.glob(\"*.tar.gz\"))\n\n            # Why PyTorch can't be normal?\n            if bool(torch):\n\n                # Help the linker deal with 3.2 GB Torch CUDA binaries..\n                Environment.append(\"RUSTFLAGS\", \"-C code-model=large\")\n\n                fetch_wheel(\n                    dependencies=torch.packages,\n                    index=torch.index,\n                    nodeps=False\n                )\n\n                # Remove new duplicate and list them on extra wheels\n                for file in set(BUILD_WHL.iterdir()) - (EXTRA | {MAIN}):\n\n                    # Note: Need case insensitive enabled due shit like this:\n                    # - https://pypi.org/project/Jinja2/3.1.4/#jinja2-3.1.4-py3-none-any.whl\n                    # - https://download.pytorch.org/whl/Jinja2-3.1.4-py3-none-any.whl\n                    duplicates = list(BUILD_WHL.glob(\n                        pattern=f\"{file.name.split(\"-\")[0]}-*\",\n                        case_sensitive=False\n                    ))\n\n                    if len(duplicates) &gt; 1:\n                        log.info(f\"Removing duplicate: {file}\")\n                        file.unlink()\n                        continue\n\n                    EXTRA |= {file}\n\n        # Pyapp configuration\n        Environment.update(\n            PYAPP_PROJECT_PATH=str(MAIN),\n            PYAPP_EXTRA_WHEELS=\";\".join(map(str, EXTRA)),\n            PYAPP_PIP_EXTRA_ARGS=(\"--no-deps\"*standalone),\n            PYAPP_PYTHON_VERSION=PYTHON_VERSION,\n            PYAPP_EXEC_MODULE=self.name,\n            PYAPP_DISTRIBUTION_EMBED=1,\n            PYAPP_PASS_LOCATION=1,\n            PYAPP_UV_ENABLED=1,\n            PYAPP_UV_EMBED=1,\n        )\n\n        # Rust configuration\n        Environment.update(\n            CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=shutil.which(\"aarch64-linux-gnu-gcc\"),\n        )\n\n        # Cache Rust compilation across projects\n        Environment.set(\"CARGO_HOME\", BUILD_DIR)\n        shell(\"rustup\", \"target\", \"add\", target.triple)\n\n        # Cargo warning: We're not 'installing' a utility\n        BrokenPath.add_to_path(BUILD_DIR/\"bin\")\n\n        if (_PYAPP_FORK := True):\n            if not (fork := BROKEN.DIRECTORIES.REPO_BUILD/\"PyApp\").exists():\n                shell(\"git\", \"clone\", \"https://github.com/BrokenSource/PyApp\", fork, \"-b\", \"custom\")\n            embed = (fork/\"src\"/\"embed\")\n\n            # Remove previous embeddings if any\n            for file in embed.glob(\"*.whl\"):\n                file.unlink()\n            for file in embed.glob(\"*.tar.gz\"):\n                file.unlink()\n\n            # Actually compile it\n            if shell(\n                \"cargo\", \"install\",\n                \"--path\", fork, \"--force\",\n                \"--root\", BUILD_DIR,\n                \"--target\", target.triple,\n            ).returncode != 0:\n                raise RuntimeError(log.error(\"Failed to compile PyApp\"))\n        else:\n            if shell(\n                \"cargo\", \"install\",\n                \"pyapp\", \"--force\",\n                \"--root\", BUILD_DIR,\n                \"--target\", target.triple,\n            ).returncode != 0:\n                raise RuntimeError(log.error(\"Failed to compile PyApp\"))\n\n        RELEASE_ENV.unlink()\n\n        # Find the compiled binary\n        binary = next((BUILD_DIR/\"bin\").glob(\"pyapp*\"))\n        log.info(f\"Compiled Pyapp binary at ({binary})\")\n        BrokenPath.make_executable(binary)\n\n        # Rename the compiled binary to the final release name\n        release_path = BROKEN.DIRECTORIES.REPO_RELEASES / ''.join((\n            f\"{self.name.lower()}\",\n            f\"-{target.value}\",\n            f\"-v{BROKEN.VERSION}\",\n            f\"-{torch.flavor}\" if torch else \"\",\n            \"-standalone\"*standalone,\n            f\"{target.extension}\",\n        ))\n        BrokenPath.copy(src=binary, dst=release_path)\n        BrokenPath.make_executable(release_path)\n\n        # Release a tar.gz to keep chmod +x attributes\n        if tarball and (\"windows\" not in target.name):\n            release_path = BrokenPath.gzip(release_path, remove=True)\n\n        log.success(f\"Built Project Release at ({release_path})\")\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager","title":"BrokenManager","text":"<p>               Bases: <code>BrokenSingleton</code></p> Source code in <code>Broken/__main__.py</code> <pre><code>@define\nclass BrokenManager(BrokenSingleton):\n    projects: list[ProjectManager] = Factory(list)\n\n    cli: BrokenTyper = Factory(lambda: BrokenTyper(description=(\n        \"\ud83d\ude80 Broken Source Software Monorepo development manager script\\n\\n\"\n        \"\u2022 Tip: run \\\"broken (command) --help\\\" for options on commands or projects \u2728\\n\\n\"\n    )))\n\n    @property\n    def python_projects(self) -&gt; list[ProjectManager]:\n        return list(filter(lambda project: project.is_python, self.projects))\n\n    def __attrs_post_init__(self) -&gt; None:\n        self.projects.append(broken := ProjectManager(BROKEN.DIRECTORIES.REPOSITORY))\n        self.find_projects(BROKEN.DIRECTORIES.REPO_PROJECTS)\n        self.find_projects(BROKEN.DIRECTORIES.REPO_META)\n\n        with self.cli.panel(\"\ud83d\ude80 Core\"):\n            self.cli.command(BrokenTorch.install)\n            self.cli.command(self.insiders)\n            self.cli.command(self.clone)\n            self.cli.command(self.rust)\n\n        with self.cli.panel(\"\ud83d\udce6 Development\"):\n            self.cli.command(self.compile_all, hidden=True)\n            self.cli.command(self.docker)\n            self.cli.command(self.website)\n            self.cli.command(self.pypi)\n            self.cli.command(self.upgrade)\n            self.cli.command(self.clean)\n            self.cli.command(self.sync)\n\n        self.cli.command(self.tremeschin, hidden=True)\n\n        for project in self.projects:\n            self.cli.command(\n                target=project.main,\n                name=project.name.lower(),\n                description=project._pretty_language,\n                panel=f\"\ud83d\udd25 Projects at [bold]({project.path.parent})[/]\",\n                hidden=(project is broken),\n                context=True,\n                help=False,\n            )\n\n    def find_projects(self, path: Path, max_depth: int=1) -&gt; None:\n        if (not path.exists()):\n            return\n        if (max_depth &lt;= 0):\n            return\n\n        # Special directories that could contain projects\n        if (projects := path/\"Projects\").exists():\n            self.find_projects(projects, 1)\n\n        # Note: Avoid hidden, workspace, recursion\n        for directory in (path := BrokenPath.get(path)).iterdir():\n            if directory.is_file():\n                continue\n            if directory.is_symlink() or directory.is_dir():\n                self.find_projects(directory, max_depth - 1)\n            if (project := ProjectManager(directory)).is_known:\n                self.projects.append(project)\n\n    # ---------------------------------------------------------------------------------------------|\n    # Meta Repositories\n\n    def clone(self,\n        repo:     Annotated[str,  Argument(help=\"URL of the Git Repository to Clone\")],\n        path:     Annotated[Path, Option(\"--path\",     \"-p\", help=\"Path to clone the repository to\")]=BROKEN.DIRECTORIES.REPO_META,\n        recurse:  Annotated[bool, Option(\"--recurse\",  \"-r\", help=\"Clone all submodules recursively\")]=True,\n        checkout: Annotated[str,  Option(\"--checkout\", \"-c\", help=\"Checkout recursively branch or tag\")]=\"main\",\n    ) -&gt; Path:\n        \"\"\"\ud83d\udd17 Clone a project in the Meta directory\"\"\"\n        from urllib.parse import urlparse\n\n        # If the path isn't a repo, use the repository name\n        if (path.exists()) and (not (Path(path)/\".git\").exists()):\n            log.minor(f\"Path {path} isn't a repository, appending the url name\")\n            path = (path/Path(urlparse(str(repo).removesuffix(\".git\")).path).stem)\n\n        # Only attempt cloning if non-existent\n        if (not path.exists()):\n            with BrokenPath.pushd(path.parent, echo=False):\n                shell(\"git\", \"clone\", (\"--recurse-submodules\"*recurse), repo, path)\n\n        # Not having .git is a failed clone\n        if not (path/\".git\").exists():\n            log.error(f\"Invalid repository at ({path}), perhaps try removing it\")\n            exit(1)\n\n        with BrokenPath.pushd(path, echo=False):\n            shell(\"git\", \"submodule\", \"foreach\", \"--recursive\", f\"git checkout {checkout} || true\")\n\n        return path\n\n    def insiders(self):\n        \"\"\"\ud83d\udc8e Clone the Insiders repository (WIP, No content)\"\"\"\n        self.clone(\"https://github.com/BrokenSource/Insiders\", BROKEN.DIRECTORIES.INSIDERS)\n\n    def tremeschin(self):\n        Tremeschin = (BROKEN.DIRECTORIES.REPO_META/\"Tremeschin\")\n        self.clone(\"https://github.com/Tremeschin/Personal\", Tremeschin)\n        self.clone(\"https://github.com/Tremeschin/Private\",  Tremeschin/\"Private\")\n\n    # ---------------------------------------------------------------------------------------------|\n    # Core section\n\n    def website(self, deploy: Annotated[bool, Option(\"--deploy\", \"-d\", help=\"Deploy Unified Website to GitHub Pages\")]=False) -&gt; None:\n        \"\"\"\ud83d\udcda Serve or deploy the monorepo website\"\"\"\n        if deploy:\n            Environment.set(\"CODE_REFERENCE\", 1)\n            shell(\"mkdocs\", \"gh-deploy\", \"--force\")\n        else:\n            shell(\"mkdocs\", \"serve\")\n\n    def compile_all(self,\n        standalone: Annotated[bool, Option(\"--standalone\", \"-s\")]=False,\n    ) -&gt; None:\n        for project in self.projects[1:]:\n            project.compile(\n                target=[PlatformEnum._AllHost],\n                standalone=standalone,\n                tarball=True,\n            )\n\n    def pypi(self,\n        publish: Annotated[bool, Option(\"--publish\", \"-p\", help=\"Publish the wheel to PyPI\")]=False,\n        output:  Annotated[Path, Option(\"--output\",  \"-o\", help=\"Output directory for wheels\")]=BROKEN.DIRECTORIES.BUILD_WHEELS,\n        all:     Annotated[bool, Option(\"--all\",     \"-a\", help=\"Build all projects\")]=True,\n    ) -&gt; Path:\n        \"\"\"\ud83e\uddc0 Build all project wheels and publish to PyPI\"\"\"\n        BrokenPath.recreate(output)\n        shell(\"uv\", \"build\", \"--wheel\", (\"--all\"*all), \"--out-dir\", output)\n        shell(\"uv\", \"publish\", f\"{output}/*.whl\", skip=(not publish))\n        return Path(output)\n\n    def docker(self,\n        push:  Annotated[bool, Option(\"--push\",  \"-p\", help=\"Push built images to GHCR\")]=False,\n        clean: Annotated[bool, Option(\"--clean\", \"-c\", help=\"Remove local images after pushing\")]=False,\n    ) -&gt; None:\n        \"\"\"\ud83d\udc33 Build and push docker images for all projects\"\"\"\n        from Broken.Core.BrokenTorch import BrokenTorch\n\n        for build in combinations(\n            base_image=[\"ubuntu:24.04\"],\n            torch=BrokenTorch.docker(),\n        ):\n            # Warn: Must use same env vars as in docker-compose.yml\n            Environment.set(\"BASE_IMAGE\",    build.base_image)\n            Environment.set(\"TORCH_VERSION\", build.torch.number)\n            Environment.set(\"TORCH_FLAVOR\",  build.torch.flavor)\n            shell(\"docker\", \"compose\", \"build\")\n\n            # Assumes all dockerfiles were built by docker compose, fails ok otherwise\n            for dockerfile in BROKEN.DIRECTORIES.REPO_DOCKER.glob(\"*.dockerfile\"):\n                image:  str = dockerfile.stem\n                latest: str = f\"{image}:latest\"\n                flavor: str = build.torch.flavor\n\n                # Tag a latest and versioned flavored images, optional push\n                for tag in (f\"latest-{flavor}\", f\"{__version__}-{flavor}\"):\n                    final: str = f\"ghcr.io/brokensource/{image}:{tag}\"\n                    shell(\"docker\", \"tag\",  latest, final)\n                    shell(\"docker\", \"push\", final,  skip=(not push))\n                    shell(\"docker\", \"rmi\",  final,  skip=(not clean))\n\n                # No need for generic latest image\n                shell(\"docker\", \"rmi\", latest)\n\n    def upgrade(self) -&gt; None:\n        \"\"\"\ud83d\udce6 Temporary solution to bump pyproject versions\"\"\"\n        for project in self.projects:\n            project.update()\n\n    @staticmethod\n    def rust(\n        toolchain:   Annotated[str,  Option(\"--toolchain\",   \"-t\", help=\"(Any    ) Rust toolchain to use (stable, nightly)\")]=\"stable\",\n        build_tools: Annotated[bool, Option(\"--build-tools\", \"-b\", help=\"(Windows) Install Visual C++ Build Tools\")]=True,\n    ):\n        \"\"\"\ud83e\udd80 Installs rustup and a rust toolchain\"\"\"\n        import requests\n\n        # Actions has its own workflow setup\n        if (Runtime.GitHub):\n            return\n\n        # Install rustup based on platform\n        if not shutil.which(\"rustup\"):\n            log.info(\"Rustup wasn't found, will install it\")\n\n            if BrokenPlatform.OnWindows:\n                shell(\"winget\", \"install\", \"-e\", \"--id\", \"Rustlang.Rustup\")\n            elif BrokenPlatform.OnUnix:\n                shell(\"sh\", \"-c\", requests.get(\"https://sh.rustup.rs\").text, \"-y\", echo=False)\n\n            # If rustup isn't found, ask user to restart shell\n            BrokenPath.add_to_path(Path.home()/\".cargo\"/\"bin\")\n\n            if not BrokenPath.which(\"rustup\"):\n                log.warning(\"Rustup was likely installed but wasn't found adding '~/.cargo/bin' to Path\")\n                log.warning(\"\u2022 Maybe you changed the CARGO_HOME or RUSTUP_HOME environment variables\")\n                log.warning(\"\u2022 Please restart your shell for Rust toolchain to be on PATH\")\n                exit(0)\n\n        # Install Visual C++ Build Tools on Windows\n        if (BrokenPlatform.OnWindows and build_tools):\n            log.warning(\"You must have Microsoft Visual C++ Build Tools installed to compile Rust projects\")\n            log.warning(\"\u2022 Broken will try installing it, you might need to restart your shell afterwards\")\n            shell(\"winget\", \"install\", \"-e\", \"--id\", \"Microsoft.VisualStudio.2022.BuildTools\", \"--override\", (\n                \" --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64\"\n                \" --add Microsoft.VisualStudio.Component.Windows10SDK\"\n                \" --add Microsoft.VisualStudio.Component.Windows11SDK.22000\"\n                \"--wait --passive\"\n            ))\n\n        class RustToolchain(BrokenEnum):\n            Stable  = \"stable\"\n            Nightly = \"nightly\"\n\n        toolchain = RustToolchain.get(toolchain).value\n\n        # Install or select the correct toolchain\n        for line in shell(\"rustup\", \"toolchain\", \"list\", output=True, echo=False).split(\"\\n\"):\n            if (\"no installed\" in line) or ((\"default\" in line) and (line.split(\"-\")[0] != toolchain)):\n                log.info(f\"Defaulting Rust toolchain to ({toolchain})\")\n                shell(\"rustup\", \"default\", toolchain)\n        else:\n            log.info(f\"Rust toolchain is already the default ({toolchain})\")\n\n    def clean(self) -&gt; None:\n        \"\"\"\ud83e\uddf9 Remove pycaches, common blob directories\"\"\"\n        root = BROKEN.DIRECTORIES.REPOSITORY\n\n        for path in root.rglob(\"__pycache__\"):\n            BrokenPath.remove(path)\n\n        # Fixed known blob directories\n        BrokenPath.remove(BROKEN.DIRECTORIES.REPO_RELEASES)\n        BrokenPath.remove(BROKEN.DIRECTORIES.REPO_BUILD)\n        BrokenPath.remove(root/\".cache\")\n\n    def sync(self) -&gt; None:\n        \"\"\"\u267b\ufe0f  Synchronize common resources files across all projects\"\"\"\n        root = BROKEN.DIRECTORIES.REPOSITORY\n\n        for project in self.projects[1:]:\n            if (project.path/\".github\"/\".nosync\").exists():\n                continue\n            for file in flatten(\n                ((root/\".github\").glob(ext) for ext in (\"*.md\", \"*.yml\")),\n                (root/\".github\"/\"ISSUE_TEMPLATE\").glob(\"*.yml\"),\n                (root/\".github\"/\"hatch_build.py\"),\n            ):\n                target = project.path/file.relative_to(root)\n                BrokenPath.copy(src=file, dst=target)\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager.projects","title":"projects","text":"<pre><code>projects: list[ProjectManager] = Factory(list)\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager.cli","title":"cli","text":"<pre><code>cli: BrokenTyper = Factory(\n    lambda: BrokenTyper(\n        description='\ud83d\ude80 Broken Source Software Monorepo development manager script\\n\\n\u2022 Tip: run \"broken (command) --help\" for options on commands or projects \u2728\\n\\n'\n    )\n)\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager.python_projects","title":"python_projects","text":"<pre><code>python_projects: list[ProjectManager]\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager.__attrs_post_init__","title":"__attrs_post_init__","text":"<pre><code>__attrs_post_init__() -&gt; None\n</code></pre> Source code in <code>Broken/__main__.py</code> <pre><code>def __attrs_post_init__(self) -&gt; None:\n    self.projects.append(broken := ProjectManager(BROKEN.DIRECTORIES.REPOSITORY))\n    self.find_projects(BROKEN.DIRECTORIES.REPO_PROJECTS)\n    self.find_projects(BROKEN.DIRECTORIES.REPO_META)\n\n    with self.cli.panel(\"\ud83d\ude80 Core\"):\n        self.cli.command(BrokenTorch.install)\n        self.cli.command(self.insiders)\n        self.cli.command(self.clone)\n        self.cli.command(self.rust)\n\n    with self.cli.panel(\"\ud83d\udce6 Development\"):\n        self.cli.command(self.compile_all, hidden=True)\n        self.cli.command(self.docker)\n        self.cli.command(self.website)\n        self.cli.command(self.pypi)\n        self.cli.command(self.upgrade)\n        self.cli.command(self.clean)\n        self.cli.command(self.sync)\n\n    self.cli.command(self.tremeschin, hidden=True)\n\n    for project in self.projects:\n        self.cli.command(\n            target=project.main,\n            name=project.name.lower(),\n            description=project._pretty_language,\n            panel=f\"\ud83d\udd25 Projects at [bold]({project.path.parent})[/]\",\n            hidden=(project is broken),\n            context=True,\n            help=False,\n        )\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager.find_projects","title":"find_projects","text":"<pre><code>find_projects(path: Path, max_depth: int = 1) -&gt; None\n</code></pre> Source code in <code>Broken/__main__.py</code> <pre><code>def find_projects(self, path: Path, max_depth: int=1) -&gt; None:\n    if (not path.exists()):\n        return\n    if (max_depth &lt;= 0):\n        return\n\n    # Special directories that could contain projects\n    if (projects := path/\"Projects\").exists():\n        self.find_projects(projects, 1)\n\n    # Note: Avoid hidden, workspace, recursion\n    for directory in (path := BrokenPath.get(path)).iterdir():\n        if directory.is_file():\n            continue\n        if directory.is_symlink() or directory.is_dir():\n            self.find_projects(directory, max_depth - 1)\n        if (project := ProjectManager(directory)).is_known:\n            self.projects.append(project)\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager.clone","title":"clone","text":"<pre><code>clone(\n    repo: Annotated[\n        str,\n        Argument(help=\"URL of the Git Repository to Clone\"),\n    ],\n    path: Annotated[\n        Path,\n        Option(\n            --path,\n            -p,\n            help=\"Path to clone the repository to\",\n        ),\n    ] = BROKEN.DIRECTORIES.REPO_META,\n    recurse: Annotated[\n        bool,\n        Option(\n            --recurse,\n            -r,\n            help=\"Clone all submodules recursively\",\n        ),\n    ] = True,\n    checkout: Annotated[\n        str,\n        Option(\n            --checkout,\n            -c,\n            help=\"Checkout recursively branch or tag\",\n        ),\n    ] = \"main\",\n) -&gt; Path\n</code></pre> <p>\ud83d\udd17 Clone a project in the Meta directory</p> Source code in <code>Broken/__main__.py</code> <pre><code>def clone(self,\n    repo:     Annotated[str,  Argument(help=\"URL of the Git Repository to Clone\")],\n    path:     Annotated[Path, Option(\"--path\",     \"-p\", help=\"Path to clone the repository to\")]=BROKEN.DIRECTORIES.REPO_META,\n    recurse:  Annotated[bool, Option(\"--recurse\",  \"-r\", help=\"Clone all submodules recursively\")]=True,\n    checkout: Annotated[str,  Option(\"--checkout\", \"-c\", help=\"Checkout recursively branch or tag\")]=\"main\",\n) -&gt; Path:\n    \"\"\"\ud83d\udd17 Clone a project in the Meta directory\"\"\"\n    from urllib.parse import urlparse\n\n    # If the path isn't a repo, use the repository name\n    if (path.exists()) and (not (Path(path)/\".git\").exists()):\n        log.minor(f\"Path {path} isn't a repository, appending the url name\")\n        path = (path/Path(urlparse(str(repo).removesuffix(\".git\")).path).stem)\n\n    # Only attempt cloning if non-existent\n    if (not path.exists()):\n        with BrokenPath.pushd(path.parent, echo=False):\n            shell(\"git\", \"clone\", (\"--recurse-submodules\"*recurse), repo, path)\n\n    # Not having .git is a failed clone\n    if not (path/\".git\").exists():\n        log.error(f\"Invalid repository at ({path}), perhaps try removing it\")\n        exit(1)\n\n    with BrokenPath.pushd(path, echo=False):\n        shell(\"git\", \"submodule\", \"foreach\", \"--recursive\", f\"git checkout {checkout} || true\")\n\n    return path\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager.insiders","title":"insiders","text":"<pre><code>insiders()\n</code></pre> <p>\ud83d\udc8e Clone the Insiders repository (WIP, No content)</p> Source code in <code>Broken/__main__.py</code> <pre><code>def insiders(self):\n    \"\"\"\ud83d\udc8e Clone the Insiders repository (WIP, No content)\"\"\"\n    self.clone(\"https://github.com/BrokenSource/Insiders\", BROKEN.DIRECTORIES.INSIDERS)\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager.tremeschin","title":"tremeschin","text":"<pre><code>tremeschin()\n</code></pre> Source code in <code>Broken/__main__.py</code> <pre><code>def tremeschin(self):\n    Tremeschin = (BROKEN.DIRECTORIES.REPO_META/\"Tremeschin\")\n    self.clone(\"https://github.com/Tremeschin/Personal\", Tremeschin)\n    self.clone(\"https://github.com/Tremeschin/Private\",  Tremeschin/\"Private\")\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager.website","title":"website","text":"<pre><code>website(\n    deploy: Annotated[\n        bool,\n        Option(\n            --deploy,\n            -d,\n            help=\"Deploy Unified Website to GitHub Pages\",\n        ),\n    ] = False,\n) -&gt; None\n</code></pre> <p>\ud83d\udcda Serve or deploy the monorepo website</p> Source code in <code>Broken/__main__.py</code> <pre><code>def website(self, deploy: Annotated[bool, Option(\"--deploy\", \"-d\", help=\"Deploy Unified Website to GitHub Pages\")]=False) -&gt; None:\n    \"\"\"\ud83d\udcda Serve or deploy the monorepo website\"\"\"\n    if deploy:\n        Environment.set(\"CODE_REFERENCE\", 1)\n        shell(\"mkdocs\", \"gh-deploy\", \"--force\")\n    else:\n        shell(\"mkdocs\", \"serve\")\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager.compile_all","title":"compile_all","text":"<pre><code>compile_all(\n    standalone: Annotated[\n        bool, Option(--standalone, -s)\n    ] = False,\n) -&gt; None\n</code></pre> Source code in <code>Broken/__main__.py</code> <pre><code>def compile_all(self,\n    standalone: Annotated[bool, Option(\"--standalone\", \"-s\")]=False,\n) -&gt; None:\n    for project in self.projects[1:]:\n        project.compile(\n            target=[PlatformEnum._AllHost],\n            standalone=standalone,\n            tarball=True,\n        )\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager.pypi","title":"pypi","text":"<pre><code>pypi(\n    publish: Annotated[\n        bool,\n        Option(\n            --publish, -p, help=\"Publish the wheel to PyPI\"\n        ),\n    ] = False,\n    output: Annotated[\n        Path,\n        Option(\n            --output,\n            -o,\n            help=\"Output directory for wheels\",\n        ),\n    ] = BROKEN.DIRECTORIES.BUILD_WHEELS,\n    all: Annotated[\n        bool, Option(--all, -a, help=\"Build all projects\")\n    ] = True,\n) -&gt; Path\n</code></pre> <p>\ud83e\uddc0 Build all project wheels and publish to PyPI</p> Source code in <code>Broken/__main__.py</code> <pre><code>def pypi(self,\n    publish: Annotated[bool, Option(\"--publish\", \"-p\", help=\"Publish the wheel to PyPI\")]=False,\n    output:  Annotated[Path, Option(\"--output\",  \"-o\", help=\"Output directory for wheels\")]=BROKEN.DIRECTORIES.BUILD_WHEELS,\n    all:     Annotated[bool, Option(\"--all\",     \"-a\", help=\"Build all projects\")]=True,\n) -&gt; Path:\n    \"\"\"\ud83e\uddc0 Build all project wheels and publish to PyPI\"\"\"\n    BrokenPath.recreate(output)\n    shell(\"uv\", \"build\", \"--wheel\", (\"--all\"*all), \"--out-dir\", output)\n    shell(\"uv\", \"publish\", f\"{output}/*.whl\", skip=(not publish))\n    return Path(output)\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager.docker","title":"docker","text":"<pre><code>docker(\n    push: Annotated[\n        bool,\n        Option(\n            --push, -p, help=\"Push built images to GHCR\"\n        ),\n    ] = False,\n    clean: Annotated[\n        bool,\n        Option(\n            --clean,\n            -c,\n            help=\"Remove local images after pushing\",\n        ),\n    ] = False,\n) -&gt; None\n</code></pre> <p>\ud83d\udc33 Build and push docker images for all projects</p> Source code in <code>Broken/__main__.py</code> <pre><code>def docker(self,\n    push:  Annotated[bool, Option(\"--push\",  \"-p\", help=\"Push built images to GHCR\")]=False,\n    clean: Annotated[bool, Option(\"--clean\", \"-c\", help=\"Remove local images after pushing\")]=False,\n) -&gt; None:\n    \"\"\"\ud83d\udc33 Build and push docker images for all projects\"\"\"\n    from Broken.Core.BrokenTorch import BrokenTorch\n\n    for build in combinations(\n        base_image=[\"ubuntu:24.04\"],\n        torch=BrokenTorch.docker(),\n    ):\n        # Warn: Must use same env vars as in docker-compose.yml\n        Environment.set(\"BASE_IMAGE\",    build.base_image)\n        Environment.set(\"TORCH_VERSION\", build.torch.number)\n        Environment.set(\"TORCH_FLAVOR\",  build.torch.flavor)\n        shell(\"docker\", \"compose\", \"build\")\n\n        # Assumes all dockerfiles were built by docker compose, fails ok otherwise\n        for dockerfile in BROKEN.DIRECTORIES.REPO_DOCKER.glob(\"*.dockerfile\"):\n            image:  str = dockerfile.stem\n            latest: str = f\"{image}:latest\"\n            flavor: str = build.torch.flavor\n\n            # Tag a latest and versioned flavored images, optional push\n            for tag in (f\"latest-{flavor}\", f\"{__version__}-{flavor}\"):\n                final: str = f\"ghcr.io/brokensource/{image}:{tag}\"\n                shell(\"docker\", \"tag\",  latest, final)\n                shell(\"docker\", \"push\", final,  skip=(not push))\n                shell(\"docker\", \"rmi\",  final,  skip=(not clean))\n\n            # No need for generic latest image\n            shell(\"docker\", \"rmi\", latest)\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager.upgrade","title":"upgrade","text":"<pre><code>upgrade() -&gt; None\n</code></pre> <p>\ud83d\udce6 Temporary solution to bump pyproject versions</p> Source code in <code>Broken/__main__.py</code> <pre><code>def upgrade(self) -&gt; None:\n    \"\"\"\ud83d\udce6 Temporary solution to bump pyproject versions\"\"\"\n    for project in self.projects:\n        project.update()\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager.rust","title":"rust","text":"<pre><code>rust(\n    toolchain: Annotated[\n        str,\n        Option(\n            --toolchain,\n            -t,\n            help=\"(Any    ) Rust toolchain to use (stable, nightly)\",\n        ),\n    ] = \"stable\",\n    build_tools: Annotated[\n        bool,\n        Option(\n            --build - tools,\n            -b,\n            help=\"(Windows) Install Visual C++ Build Tools\",\n        ),\n    ] = True,\n)\n</code></pre> <p>\ud83e\udd80 Installs rustup and a rust toolchain</p> Source code in <code>Broken/__main__.py</code> <pre><code>@staticmethod\ndef rust(\n    toolchain:   Annotated[str,  Option(\"--toolchain\",   \"-t\", help=\"(Any    ) Rust toolchain to use (stable, nightly)\")]=\"stable\",\n    build_tools: Annotated[bool, Option(\"--build-tools\", \"-b\", help=\"(Windows) Install Visual C++ Build Tools\")]=True,\n):\n    \"\"\"\ud83e\udd80 Installs rustup and a rust toolchain\"\"\"\n    import requests\n\n    # Actions has its own workflow setup\n    if (Runtime.GitHub):\n        return\n\n    # Install rustup based on platform\n    if not shutil.which(\"rustup\"):\n        log.info(\"Rustup wasn't found, will install it\")\n\n        if BrokenPlatform.OnWindows:\n            shell(\"winget\", \"install\", \"-e\", \"--id\", \"Rustlang.Rustup\")\n        elif BrokenPlatform.OnUnix:\n            shell(\"sh\", \"-c\", requests.get(\"https://sh.rustup.rs\").text, \"-y\", echo=False)\n\n        # If rustup isn't found, ask user to restart shell\n        BrokenPath.add_to_path(Path.home()/\".cargo\"/\"bin\")\n\n        if not BrokenPath.which(\"rustup\"):\n            log.warning(\"Rustup was likely installed but wasn't found adding '~/.cargo/bin' to Path\")\n            log.warning(\"\u2022 Maybe you changed the CARGO_HOME or RUSTUP_HOME environment variables\")\n            log.warning(\"\u2022 Please restart your shell for Rust toolchain to be on PATH\")\n            exit(0)\n\n    # Install Visual C++ Build Tools on Windows\n    if (BrokenPlatform.OnWindows and build_tools):\n        log.warning(\"You must have Microsoft Visual C++ Build Tools installed to compile Rust projects\")\n        log.warning(\"\u2022 Broken will try installing it, you might need to restart your shell afterwards\")\n        shell(\"winget\", \"install\", \"-e\", \"--id\", \"Microsoft.VisualStudio.2022.BuildTools\", \"--override\", (\n            \" --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64\"\n            \" --add Microsoft.VisualStudio.Component.Windows10SDK\"\n            \" --add Microsoft.VisualStudio.Component.Windows11SDK.22000\"\n            \"--wait --passive\"\n        ))\n\n    class RustToolchain(BrokenEnum):\n        Stable  = \"stable\"\n        Nightly = \"nightly\"\n\n    toolchain = RustToolchain.get(toolchain).value\n\n    # Install or select the correct toolchain\n    for line in shell(\"rustup\", \"toolchain\", \"list\", output=True, echo=False).split(\"\\n\"):\n        if (\"no installed\" in line) or ((\"default\" in line) and (line.split(\"-\")[0] != toolchain)):\n            log.info(f\"Defaulting Rust toolchain to ({toolchain})\")\n            shell(\"rustup\", \"default\", toolchain)\n    else:\n        log.info(f\"Rust toolchain is already the default ({toolchain})\")\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager.clean","title":"clean","text":"<pre><code>clean() -&gt; None\n</code></pre> <p>\ud83e\uddf9 Remove pycaches, common blob directories</p> Source code in <code>Broken/__main__.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"\ud83e\uddf9 Remove pycaches, common blob directories\"\"\"\n    root = BROKEN.DIRECTORIES.REPOSITORY\n\n    for path in root.rglob(\"__pycache__\"):\n        BrokenPath.remove(path)\n\n    # Fixed known blob directories\n    BrokenPath.remove(BROKEN.DIRECTORIES.REPO_RELEASES)\n    BrokenPath.remove(BROKEN.DIRECTORIES.REPO_BUILD)\n    BrokenPath.remove(root/\".cache\")\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.BrokenManager.sync","title":"sync","text":"<pre><code>sync() -&gt; None\n</code></pre> <p>\u267b\ufe0f  Synchronize common resources files across all projects</p> Source code in <code>Broken/__main__.py</code> <pre><code>def sync(self) -&gt; None:\n    \"\"\"\u267b\ufe0f  Synchronize common resources files across all projects\"\"\"\n    root = BROKEN.DIRECTORIES.REPOSITORY\n\n    for project in self.projects[1:]:\n        if (project.path/\".github\"/\".nosync\").exists():\n            continue\n        for file in flatten(\n            ((root/\".github\").glob(ext) for ext in (\"*.md\", \"*.yml\")),\n            (root/\".github\"/\"ISSUE_TEMPLATE\").glob(\"*.yml\"),\n            (root/\".github\"/\"hatch_build.py\"),\n        ):\n            target = project.path/file.relative_to(root)\n            BrokenPath.copy(src=file, dst=target)\n</code></pre>"},{"location":"code/broken/__main__/#Broken.__main__.main","title":"main","text":"<pre><code>main()\n</code></pre> Source code in <code>Broken/__main__.py</code> <pre><code>def main():\n    with BrokenProfiler(\"BROKEN\"):\n        BrokenManager().cli(*sys.argv[1:])\n</code></pre>"},{"location":"code/broken/hatch/","title":"File: <code>Broken/Hatch.py</code>","text":""},{"location":"code/broken/hatch/#Broken.Hatch","title":"Broken.Hatch","text":""},{"location":"code/broken/hatch/#Broken.Hatch.BrokenHook","title":"BrokenHook","text":"<p>               Bases: <code>MetadataHookInterface</code></p> Source code in <code>Broken/Hatch.py</code> <pre><code>class BrokenHook(MetadataHookInterface):\n    def update(self, metadata: dict) -&gt; None:\n        if (monorepo := os.environ.get(\"MONOREPO_ROOT\")):\n            monorepo = Path(monorepo)\n\n            # Get the version from the main package\n            exec((monorepo/\"Broken\"/\"Version.py\").read_text(), (ctx := {}))\n            version = metadata[\"version\"] = ctx[\"__version__\"]\n\n            # Replaces all list items inline\n            def patch(items: list[str]) -&gt; None:\n                for (x, item) in enumerate(items):\n                    item = item.replace(\"0.0.0\", version)\n\n                    # Pin versions on release binaries\n                    if (os.environ.get(\"PYAPP_RELEASE\", \"0\") == \"1\"):\n                        item = item.replace(\"~=\", \"==\")\n                        item = item.replace(\"&gt;=\", \"==\")\n\n                    items[x] = item\n\n            # Patch all normal and optional dependencies\n            list(map(patch, metadata.get(\"optional-dependencies\", {}).values()))\n            patch(metadata.get(\"dependencies\", {}))\n</code></pre>"},{"location":"code/broken/hatch/#Broken.Hatch.BrokenHook.update","title":"update","text":"<pre><code>update(metadata: dict) -&gt; None\n</code></pre> Source code in <code>Broken/Hatch.py</code> <pre><code>def update(self, metadata: dict) -&gt; None:\n    if (monorepo := os.environ.get(\"MONOREPO_ROOT\")):\n        monorepo = Path(monorepo)\n\n        # Get the version from the main package\n        exec((monorepo/\"Broken\"/\"Version.py\").read_text(), (ctx := {}))\n        version = metadata[\"version\"] = ctx[\"__version__\"]\n\n        # Replaces all list items inline\n        def patch(items: list[str]) -&gt; None:\n            for (x, item) in enumerate(items):\n                item = item.replace(\"0.0.0\", version)\n\n                # Pin versions on release binaries\n                if (os.environ.get(\"PYAPP_RELEASE\", \"0\") == \"1\"):\n                    item = item.replace(\"~=\", \"==\")\n                    item = item.replace(\"&gt;=\", \"==\")\n\n                items[x] = item\n\n        # Patch all normal and optional dependencies\n        list(map(patch, metadata.get(\"optional-dependencies\", {}).values()))\n        patch(metadata.get(\"dependencies\", {}))\n</code></pre>"},{"location":"code/broken/loaders/","title":"File: <code>Broken/Loaders.py</code>","text":""},{"location":"code/broken/loaders/#Broken.Loaders","title":"Broken.Loaders","text":""},{"location":"code/broken/loaders/#Broken.Loaders.BrokenLoader","title":"BrokenLoader","text":"<p>               Bases: <code>ABC</code></p> Source code in <code>Broken/Loaders.py</code> <pre><code>@define\nclass BrokenLoader(ABC):\n\n    def __new__(cls, *args, **kwargs) -&gt; Optional[type]:\n        return cls.load(*args, **kwargs)\n\n    @staticmethod\n    @abstractmethod\n    def load(value: Any=None, **kwargs) -&gt; Optional[type]:\n        ...\n</code></pre>"},{"location":"code/broken/loaders/#Broken.Loaders.BrokenLoader.__new__","title":"__new__","text":"<pre><code>__new__(*args, **kwargs) -&gt; Optional[type]\n</code></pre> Source code in <code>Broken/Loaders.py</code> <pre><code>def __new__(cls, *args, **kwargs) -&gt; Optional[type]:\n    return cls.load(*args, **kwargs)\n</code></pre>"},{"location":"code/broken/loaders/#Broken.Loaders.BrokenLoader.load","title":"load","text":"<pre><code>load(value: Any = None, **kwargs) -&gt; Optional[type]\n</code></pre> Source code in <code>Broken/Loaders.py</code> <pre><code>@staticmethod\n@abstractmethod\ndef load(value: Any=None, **kwargs) -&gt; Optional[type]:\n    ...\n</code></pre>"},{"location":"code/broken/loaders/#Broken.Loaders.LoadString","title":"LoadString","text":"<p>               Bases: <code>BrokenLoader</code></p> Source code in <code>Broken/Loaders.py</code> <pre><code>@define\nclass LoadString(BrokenLoader):\n\n    @staticmethod\n    def load(value: Any=None) -&gt; Optional[str]:\n        if (not value):\n            return \"\"\n\n        if isinstance(value, str):\n            return value\n\n        if isinstance(value, bytes):\n            return value.decode()\n\n        if (path := Path(value)).exists():\n            return path.read_text(encoding=\"utf-8\")\n\n        return None\n</code></pre>"},{"location":"code/broken/loaders/#Broken.Loaders.LoadString.load","title":"load","text":"<pre><code>load(value: Any = None) -&gt; Optional[str]\n</code></pre> Source code in <code>Broken/Loaders.py</code> <pre><code>@staticmethod\ndef load(value: Any=None) -&gt; Optional[str]:\n    if (not value):\n        return \"\"\n\n    if isinstance(value, str):\n        return value\n\n    if isinstance(value, bytes):\n        return value.decode()\n\n    if (path := Path(value)).exists():\n        return path.read_text(encoding=\"utf-8\")\n\n    return None\n</code></pre>"},{"location":"code/broken/loaders/#Broken.Loaders.LoadableString","title":"LoadableString","text":"<pre><code>LoadableString: TypeAlias = Union[str, bytes, Path]\n</code></pre>"},{"location":"code/broken/loaders/#Broken.Loaders.LoadBytes","title":"LoadBytes","text":"<p>               Bases: <code>BrokenLoader</code></p> Source code in <code>Broken/Loaders.py</code> <pre><code>@define\nclass LoadBytes(BrokenLoader):\n\n    @staticmethod\n    def load(value: Any=None) -&gt; Optional[bytes]:\n        if (value is None):\n            return None\n\n        if isinstance(value, bytes):\n            return value\n\n        if isinstance(value, str):\n            return value.encode()\n\n        if (path := Path(value)).exists():\n            return path.read_bytes()\n\n        return None\n</code></pre>"},{"location":"code/broken/loaders/#Broken.Loaders.LoadBytes.load","title":"load","text":"<pre><code>load(value: Any = None) -&gt; Optional[bytes]\n</code></pre> Source code in <code>Broken/Loaders.py</code> <pre><code>@staticmethod\ndef load(value: Any=None) -&gt; Optional[bytes]:\n    if (value is None):\n        return None\n\n    if isinstance(value, bytes):\n        return value\n\n    if isinstance(value, str):\n        return value.encode()\n\n    if (path := Path(value)).exists():\n        return path.read_bytes()\n\n    return None\n</code></pre>"},{"location":"code/broken/loaders/#Broken.Loaders.LoadableBytes","title":"LoadableBytes","text":"<pre><code>LoadableBytes: TypeAlias = Union[bytes, str, Path, None]\n</code></pre>"},{"location":"code/broken/loaders/#Broken.Loaders.LoadImage","title":"LoadImage","text":"<p>               Bases: <code>BrokenLoader</code></p> Source code in <code>Broken/Loaders.py</code> <pre><code>@define\nclass LoadImage(BrokenLoader):\n    _cache = None\n\n    @staticmethod\n    def cache() -&gt; Any:\n        with contextlib.suppress(ImportError):\n            LoadImage._cache = (LoadImage._cache or BrokenCache.requests(\n                cache_name=Broken.BROKEN.DIRECTORIES.CACHE/\"LoadImage.sqlite\",\n                expire_after=1800))\n        return LoadImage._cache\n\n    @staticmethod\n    def load(value: Any=None) -&gt; Optional[ImageType]:\n\n        # No value to load\n        if (value is None):\n            return None\n\n        # Passthrough image class\n        if (value is ImageType):\n            return value\n\n        # Already an instance of Image\n        if isinstance(value, ImageType):\n            return value\n\n        # Attempt to load from path\n        if isinstance(value, Path):\n            if (value.exists()):\n                return Image.open(value)\n            return None\n\n        if isinstance(value, str):\n\n            # Load from base64 generic type\n            if (value.startswith(prefix := \"base64:\")):\n                return Image.open(BytesIO(b64decode(value[len(prefix):])))\n\n            # Attempt to load from URL\n            if validators.url(value):\n                import requests\n                get = getattr(LoadImage.cache(), \"get\", requests.get)\n                return Image.open(BytesIO(get(value).content))\n\n            # Load from path, ignore too\n            try:\n                if (path := Path(value)).exists():\n                    return Image.open(path)\n            except OSError as error:\n                if (error.errno != 36):\n                    raise error\n\n            return None\n\n        # Load from bytes\n        if isinstance(value, bytes):\n            return Image.open(BytesIO(value))\n\n        # Load from numpy array\n        if (\"numpy\" in str(type(value))):\n            return Image.fromarray(value)\n\n        return None\n</code></pre>"},{"location":"code/broken/loaders/#Broken.Loaders.LoadImage.cache","title":"cache","text":"<pre><code>cache() -&gt; Any\n</code></pre> Source code in <code>Broken/Loaders.py</code> <pre><code>@staticmethod\ndef cache() -&gt; Any:\n    with contextlib.suppress(ImportError):\n        LoadImage._cache = (LoadImage._cache or BrokenCache.requests(\n            cache_name=Broken.BROKEN.DIRECTORIES.CACHE/\"LoadImage.sqlite\",\n            expire_after=1800))\n    return LoadImage._cache\n</code></pre>"},{"location":"code/broken/loaders/#Broken.Loaders.LoadImage.load","title":"load","text":"<pre><code>load(value: Any = None) -&gt; Optional[ImageType]\n</code></pre> Source code in <code>Broken/Loaders.py</code> <pre><code>@staticmethod\ndef load(value: Any=None) -&gt; Optional[ImageType]:\n\n    # No value to load\n    if (value is None):\n        return None\n\n    # Passthrough image class\n    if (value is ImageType):\n        return value\n\n    # Already an instance of Image\n    if isinstance(value, ImageType):\n        return value\n\n    # Attempt to load from path\n    if isinstance(value, Path):\n        if (value.exists()):\n            return Image.open(value)\n        return None\n\n    if isinstance(value, str):\n\n        # Load from base64 generic type\n        if (value.startswith(prefix := \"base64:\")):\n            return Image.open(BytesIO(b64decode(value[len(prefix):])))\n\n        # Attempt to load from URL\n        if validators.url(value):\n            import requests\n            get = getattr(LoadImage.cache(), \"get\", requests.get)\n            return Image.open(BytesIO(get(value).content))\n\n        # Load from path, ignore too\n        try:\n            if (path := Path(value)).exists():\n                return Image.open(path)\n        except OSError as error:\n            if (error.errno != 36):\n                raise error\n\n        return None\n\n    # Load from bytes\n    if isinstance(value, bytes):\n        return Image.open(BytesIO(value))\n\n    # Load from numpy array\n    if (\"numpy\" in str(type(value))):\n        return Image.fromarray(value)\n\n    return None\n</code></pre>"},{"location":"code/broken/loaders/#Broken.Loaders.LoadableImage","title":"LoadableImage","text":"<pre><code>LoadableImage: TypeAlias = Union[\n    ImageType, Path, \"numpy.ndarray\", bytes, str\n]\n</code></pre>"},{"location":"code/broken/types/","title":"File: <code>Broken/Types.py</code>","text":""},{"location":"code/broken/types/#Broken.Types","title":"Broken.Types","text":""},{"location":"code/broken/types/#Broken.Types.PydanticImage","title":"PydanticImage","text":"<pre><code>PydanticImage = Union[str, Path, HttpUrl]\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.Unchanged","title":"Unchanged","text":"<pre><code>Unchanged: TypeAlias = None\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.Channels","title":"Channels","text":"<pre><code>Channels: TypeAlias = int\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.Seconds","title":"Seconds","text":"<pre><code>Seconds: TypeAlias = float\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.Minutes","title":"Minutes","text":"<pre><code>Minutes: TypeAlias = float\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.Hours","title":"Hours","text":"<pre><code>Hours: TypeAlias = float\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.Hertz","title":"Hertz","text":"<pre><code>Hertz: TypeAlias = float\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.Samples","title":"Samples","text":"<pre><code>Samples: TypeAlias = int\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.Bytes","title":"Bytes","text":"<pre><code>Bytes: TypeAlias = int\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.Degrees","title":"Degrees","text":"<pre><code>Degrees: TypeAlias = float\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.Radians","title":"Radians","text":"<pre><code>Radians: TypeAlias = float\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.BPM","title":"BPM","text":"<pre><code>BPM: TypeAlias = float\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.Pixel","title":"Pixel","text":"<pre><code>Pixel: TypeAlias = int\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.TAU","title":"TAU","text":"<pre><code>TAU: float = 2 * PI\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.SQRT2","title":"SQRT2","text":"<pre><code>SQRT2: float = 2 ** 0.5\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.SQRT3","title":"SQRT3","text":"<pre><code>SQRT3: float = 3 ** 0.5\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.SQRT5","title":"SQRT5","text":"<pre><code>SQRT5: float = 5 ** 0.5\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.SQRT_PI","title":"SQRT_PI","text":"<pre><code>SQRT_PI: float = PI ** 0.5\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.KB","title":"KB","text":"<pre><code>KB: int = 1000\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.MB","title":"MB","text":"<pre><code>MB: int = KB * 1000\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.GB","title":"GB","text":"<pre><code>GB: int = MB * 1000\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.TB","title":"TB","text":"<pre><code>TB: int = GB * 1000\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.KiB","title":"KiB","text":"<pre><code>KiB: int = 1024\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.MiB","title":"MiB","text":"<pre><code>MiB: int = KiB * 1024\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.GiB","title":"GiB","text":"<pre><code>GiB: int = MiB * 1024\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.TiB","title":"TiB","text":"<pre><code>TiB: int = GiB * 1024\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.FileExtensions","title":"FileExtensions","text":"Source code in <code>Broken/Types.py</code> <pre><code>class FileExtensions:\n    Audio:     set[str] = {\".wav\", \".ogg\", \".flac\", \".mp3\"}\n    Image:     set[str] = {\".png\", \".jpg\", \".jpeg\", \".gif\", \".bmp\", \".tiff\", \".webp\"}\n    Video:     set[str] = {\".mp4\", \".mkv\", \".webm\", \".avi\", \".mov\", \".wmv\", \".flv\"}\n    Font:      set[str] = {\".ttf\", \".otf\", \".woff\", \".woff2\"}\n    Midi:      set[str] = {\".mid\", \".midi\"}\n    Soundfont: set[str] = {\".sf2\", \".sf3\"}\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.FileExtensions.Audio","title":"Audio","text":"<pre><code>Audio: set[str] = {'.wav', '.ogg', '.flac', '.mp3'}\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.FileExtensions.Image","title":"Image","text":"<pre><code>Image: set[str] = {\n    \".png\",\n    \".jpg\",\n    \".jpeg\",\n    \".gif\",\n    \".bmp\",\n    \".tiff\",\n    \".webp\",\n}\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.FileExtensions.Video","title":"Video","text":"<pre><code>Video: set[str] = {\n    \".mp4\",\n    \".mkv\",\n    \".webm\",\n    \".avi\",\n    \".mov\",\n    \".wmv\",\n    \".flv\",\n}\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.FileExtensions.Font","title":"Font","text":"<pre><code>Font: set[str] = {'.ttf', '.otf', '.woff', '.woff2'}\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.FileExtensions.Midi","title":"Midi","text":"<pre><code>Midi: set[str] = {'.mid', '.midi'}\n</code></pre>"},{"location":"code/broken/types/#Broken.Types.FileExtensions.Soundfont","title":"Soundfont","text":"<pre><code>Soundfont: set[str] = {'.sf2', '.sf3'}\n</code></pre>"},{"location":"code/broken/version/","title":"File: <code>Broken/Version.py</code>","text":""},{"location":"code/broken/version/#Broken.Version","title":"Broken.Version","text":""},{"location":"code/broken/version/#Broken.Version.__version__","title":"__version__","text":"<pre><code>__version__ = '0.9.0.dev0'\n</code></pre>"},{"location":"code/broken/core/__init__/","title":"File: <code>Broken/Core/__init__.py</code>","text":""},{"location":"code/broken/core/__init__/#Broken.Core","title":"Broken.Core","text":""},{"location":"code/broken/core/__init__/#Broken.Core.flatten","title":"flatten","text":"<pre><code>flatten(\n    *items: Any,\n    cast: type = list,\n    block: Optional[Collection] = (None, \"\"),\n    unpack: Iterable[type] = (\n        list,\n        deque,\n        tuple,\n        map,\n        Generator,\n    )\n) -&gt; Collection[Any]\n</code></pre> <p>Flatten/unpack nested iterables (list, deque, tuple, map, Generator) to a plain 1D list - Removes common falsy values by default, modify with <code>block={None, False, \"\", [], ...}</code></p> Example <pre><code># [1, 2, 3, 4, 5, 6, 7]\nflatten([1, [2, 3], 4, [5, [6, 7]]])\n\n# [0, 1, 2, True, False, \"Hello\"]\nflatten(range(3), (True, False), None, \"Hello\")\n</code></pre> <p>Returns:</p> <ul> <li> <code>Collection[Any]</code>           \u2013            <p><code>cast</code>ed object with all <code>unpack</code>ed <code>items</code> without any of the <code>block</code>ed values</p> </li> </ul> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def flatten(\n    *items: Any,\n    cast: type = list,\n    block: Optional[Collection] = (None, \"\"),\n    unpack: Iterable[type] = (list, deque, tuple, map, Generator),\n) -&gt; Collection[Any]:\n    \"\"\"\n    Flatten/unpack nested iterables (list, deque, tuple, map, Generator) to a plain 1D list\n    - Removes common falsy values by default, modify with `block={None, False, \"\", [], ...}`\n\n    Example:\n        ```python\n        # [1, 2, 3, 4, 5, 6, 7]\n        flatten([1, [2, 3], 4, [5, [6, 7]]])\n\n        # [0, 1, 2, True, False, \"Hello\"]\n        flatten(range(3), (True, False), None, \"Hello\")\n        ```\n\n    Returns:\n        `cast`ed object with all `unpack`ed `items` without any of the `block`ed values\n    \"\"\"\n    def flatten(data):\n        if bool(block):\n            data = filter(lambda item: (item not in block), data)\n        for item in data:\n            if isinstance(item, unpack):\n                yield from flatten(item)\n                continue\n            yield item\n    return cast(flatten(items))\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.every","title":"every","text":"<pre><code>every(\n    *items: Any,\n    cast: type = list,\n    block: Collection[Any] = (None, \"\")\n) -&gt; Optional[Collection]\n</code></pre> <p>Returns the flattened items if not any element is in the block list, else None. Useful when a Model class has a list of optional arguments that doesn't add falsy values to a command</p> Usage <pre><code>every(1, 2, 3) # [1, 2, 3]\nevery(1, 2, 3, None) # None\nevery(\"-arg, \"\") # None\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def every(\n    *items: Any,\n    cast: type = list,\n    block: Collection[Any] = (None, \"\"),\n) -&gt; Optional[Collection]:\n    \"\"\"\n    Returns the flattened items if not any element is in the block list, else None. Useful when\n    a Model class has a list of optional arguments that doesn't add falsy values to a command\n\n    Usage:\n        ```python\n        every(1, 2, 3) # [1, 2, 3]\n        every(1, 2, 3, None) # None\n        every(\"-arg, \"\") # None\n        ```\n    \"\"\"\n    items = flatten(*items, block=None, cast=cast)\n    if any(item in block for item in items):\n        return None\n    return items\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.shell","title":"shell","text":"<pre><code>shell(\n    *args: Any,\n    output: bool = False,\n    Popen: bool = False,\n    env: dict[str, str] = None,\n    confirm: bool = False,\n    skip: bool = False,\n    echo: bool = True,\n    **kwargs\n) -&gt; Optional[\n    Union[\n        subprocess.CompletedProcess, subprocess.Popen, str\n    ]\n]\n</code></pre> <p>Enhanced subprocess runners with many additional features. Flattens the args, converts to str</p> Example <pre><code>shell([\"binary\", \"-m\"], \"arg1\", None, \"arg2\", 3, confirm=True)\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def shell(\n    *args: Any,\n    output: bool = False,\n    Popen: bool = False,\n    env: dict[str, str] = None,\n    confirm: bool = False,\n    skip: bool = False,\n    echo: bool = True,\n    **kwargs\n) -&gt; Optional[Union[\n    subprocess.CompletedProcess,\n    subprocess.Popen,\n    str,\n]]:\n    \"\"\"\n    Enhanced subprocess runners with many additional features. Flattens the args, converts to str\n\n    Example:\n        ```python\n        shell([\"binary\", \"-m\"], \"arg1\", None, \"arg2\", 3, confirm=True)\n        ```\n    \"\"\"\n    if (output and Popen):\n        raise ValueError(log.error(\"Cannot use (output=True) and (Popen=True) at the same time\"))\n\n    args = tuple(map(str, flatten(args)))\n\n    # Assert command won't fail due unknown binary\n    if (not shell) and (not shutil.which(args[0])):\n        raise FileNotFoundError(log.error(f\"Binary doesn't exist or was not found on PATH ({args[0]})\"))\n\n    # Log the command being run, temp variables\n    _log = (log.skip if skip else log.info)\n    _cwd = f\" @ ({kwargs.get('cwd', '') or Path.cwd()})\"\n    _log(f\"{args}{_cwd}\", echo=echo)\n    if skip: return\n\n    if kwargs.get(\"shell\", False):\n        args = ' '.join(args)\n        log.warning((\n            \"Running command with (shell=True), be careful.. \"\n            \"Consider using (confirm=True)\"*(not confirm)\n        ))\n\n    if confirm and not click.confirm(\"\u2022 Confirm running the command above\"):\n        return\n\n    # Update current environ for the command only\n    kwargs[\"env\"] = os.environ | (env or {})\n\n    # Windows: preexec_fn is not supported, remove from kwargs\n    if (os.name == \"nt\") and (kwargs.pop(\"preexec_fn\", None)):\n        log.minor(\"shell(preexec_fn=...) is not supported on Windows, ignoring..\")\n\n    if (output):\n        return subprocess.check_output(args, **kwargs).decode(\"utf-8\")\n\n    if (Popen):\n        return subprocess.Popen(args, **kwargs)\n\n    return subprocess.run(args, **kwargs)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.apply","title":"apply","text":"<pre><code>apply(\n    callback: Callable,\n    iterable: Iterable,\n    *,\n    cast: Callable = list\n) -&gt; Collection\n</code></pre> <p>Applies a callback to all items of an iterable, returning a $cast of the results</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def apply(\n    callback: Callable,\n    iterable: Iterable, *,\n    cast: Callable = list\n) -&gt; Collection:\n    \"\"\"Applies a callback to all items of an iterable, returning a $cast of the results\"\"\"\n    return cast(map(callback, iterable))\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.denum","title":"denum","text":"<pre><code>denum(item: Union[enum.Enum, Any]) -&gt; Any\n</code></pre> <p>De-enumerates an item: if it's an Enum, returns the value, else the item itself</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def denum(item: Union[enum.Enum, Any]) -&gt; Any:\n    \"\"\"De-enumerates an item: if it's an Enum, returns the value, else the item itself\"\"\"\n    return (item.value if isinstance(item, enum.Enum) else item)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.pop_fill","title":"pop_fill","text":"<pre><code>pop_fill(\n    data: Collection, fill: type, length: int\n) -&gt; Collection\n</code></pre> <p>Pop or fill until a data's length is met</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def pop_fill(data: Collection, fill: type, length: int) -&gt; Collection:\n    \"\"\"Pop or fill until a data's length is met\"\"\"\n    while (len(data) &gt; length):\n        data.pop()\n    while (len(data) &lt; length):\n        data.append(fill())\n    return data\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.multi_context","title":"multi_context","text":"<pre><code>multi_context(\n    *contexts: contextlib.AbstractContextManager,\n) -&gt; Generator\n</code></pre> <p>Enter multiple contexts at once</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@contextlib.contextmanager\ndef multi_context(*contexts: contextlib.AbstractContextManager) -&gt; Generator:\n    \"\"\"Enter multiple contexts at once\"\"\"\n    with contextlib.ExitStack() as stack:\n        for context in flatten(contexts):\n            stack.enter_context(context)\n        yield None\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.tempvars","title":"tempvars","text":"<pre><code>tempvars(**variables: str) -&gt; Generator\n</code></pre> <p>Temporarily sets environment variables inside a context</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@contextlib.contextmanager\ndef tempvars(**variables: str) -&gt; Generator:\n    \"\"\"Temporarily sets environment variables inside a context\"\"\"\n    original = os.environ.copy()\n    os.environ.update(variables)\n    try:\n        log.info(f\"Setting environment variables: {tuple(variables.items())}\")\n        yield None\n    finally:\n        log.info(f\"Restoring environment variables: {tuple(variables.keys())}\")\n        os.environ.clear()\n        os.environ.update(original)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.block_modules","title":"block_modules","text":"<pre><code>block_modules(*modules: str) -&gt; Generator\n</code></pre> <p>Pretend a module isn't installed</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@contextlib.contextmanager\ndef block_modules(*modules: str) -&gt; Generator:\n    \"\"\"Pretend a module isn't installed\"\"\"\n    state = sys.modules.copy()\n    try:\n        for module in flatten(modules):\n            sys.modules[module] = None\n        yield None\n    finally:\n        for module in modules:\n            if (module in state):\n                sys.modules[module] = state[module]\n                continue\n            del sys.modules[module]\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.smartproxy","title":"smartproxy","text":"<pre><code>smartproxy(object: Any) -&gt; Any\n</code></pre> <p>Returns a weakref proxy if the object is not already proxied</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def smartproxy(object: Any) -&gt; Any:\n    \"\"\"Returns a weakref proxy if the object is not already proxied\"\"\"\n    from weakref import CallableProxyType, ProxyType, proxy\n\n    if not isinstance(object, (CallableProxyType, ProxyType)):\n        object = proxy(object)\n\n    return object\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.clamp","title":"clamp","text":"<pre><code>clamp(\n    value: float, low: float = 0, high: float = 1\n) -&gt; float\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def clamp(value: float, low: float=0, high: float=1) -&gt; float:\n    return max(low, min(value, high))\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.nearest","title":"nearest","text":"<pre><code>nearest(\n    number: Number,\n    multiple: Number,\n    *,\n    cast=int,\n    operator: Callable = round\n) -&gt; Number\n</code></pre> <p>Finds the nearest multiple of a base number, by default ints but works for floats too</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def nearest(number: Number, multiple: Number, *, cast=int, operator: Callable=round) -&gt; Number:\n    \"\"\"Finds the nearest multiple of a base number, by default ints but works for floats too\"\"\"\n    return cast(multiple * operator(number/multiple))\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.list_get","title":"list_get","text":"<pre><code>list_get(\n    data: list, index: int, default: Any = None\n) -&gt; Optional[Any]\n</code></pre> <p>Returns the item at 'index' or 'default' if out of range</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def list_get(data: list, index: int, default: Any=None) -&gt; Optional[Any]:\n    \"\"\"Returns the item at 'index' or 'default' if out of range\"\"\"\n    if (index &gt;= len(data)):\n        return default\n    return data[index]\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.hyphen_range","title":"hyphen_range","text":"<pre><code>hyphen_range(\n    string: Optional[str], *, inclusive: bool = True\n) -&gt; Iterable[int]\n</code></pre> <p>Yields the numbers in a hyphenated CSV range, just like when selecting what pages to print - Accepts any of (\"-\", \"..\", \"...\", \"_\", \"-&gt;\") as a hyphenated range - Special values:     - \"all\", returns infinite range from 0     - \"even\", returns even numbers     - \"odd\", returns odd numbers</p> Example <pre><code>hyphen_range(\"2,3\") # 2, 3\nhyphen_range(\"2-5\") # 2, 3, 4, 5\nhyphen_range(\"1-3, 5\") # 1, 2, 3, 5\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def hyphen_range(string: Optional[str], *, inclusive: bool=True) -&gt; Iterable[int]:\n    \"\"\"\n    Yields the numbers in a hyphenated CSV range, just like when selecting what pages to print\n    - Accepts any of (\"-\", \"..\", \"...\", \"_\", \"-&gt;\") as a hyphenated range\n    - Special values:\n        - \"all\", returns infinite range from 0\n        - \"even\", returns even numbers\n        - \"odd\", returns odd numbers\n\n    Example:\n        ```python\n        hyphen_range(\"2,3\") # 2, 3\n        hyphen_range(\"2-5\") # 2, 3, 4, 5\n        hyphen_range(\"1-3, 5\") # 1, 2, 3, 5\n        ```\n    \"\"\"\n    if not bool(string):\n        return None\n\n    if (string == \"all\"):\n        yield from itertools.count()\n    elif (string == \"even\"):\n        yield from itertools.count(0, 2)\n    elif (string == \"odd\"):\n        yield from itertools.count(1, 2)\n\n    for part in string.split(\",\"):\n        if (\"-\" in part):\n            start, end = map(int, re.split(r\"_|-|\\.\\.|\\.\\.\\.|\\-\\&gt;\", part))\n            yield from range(start, end + int(inclusive))\n            continue\n        yield int(part)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.limited_ratio","title":"limited_ratio","text":"<pre><code>limited_ratio(\n    number: Optional[float], *, limit: float = None\n) -&gt; Optional[tuple[int, int]]\n</code></pre> <p>Same as Number.as_integer_ratio but with an optional upper limit and optional return</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def limited_ratio(\n    number: Optional[float], *,\n    limit: float = None\n) -&gt; Optional[tuple[int, int]]:\n    \"\"\"Same as Number.as_integer_ratio but with an optional upper limit and optional return\"\"\"\n    if (number is None):\n        return None\n\n    num, den = number.as_integer_ratio()\n\n    if limit and (den &gt; limit or num &gt; limit):\n        normalize = limit/min(num, den)\n        num *= normalize\n        den *= normalize\n\n    return (int(num), int(den))\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.overrides","title":"overrides","text":"<pre><code>overrides(\n    old: Any,\n    new: Optional[Any],\n    default: Optional[Any] = None,\n    resets: Any = -1,\n) -&gt; Optional[Any]\n</code></pre> <p>Returns 'new' if is not None, else keeps 'old' value</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def overrides(\n    old: Any,\n    new: Optional[Any],\n    default: Optional[Any]=None,\n    resets: Any=-1\n) -&gt; Optional[Any]:\n    \"\"\"Returns 'new' if is not None, else keeps 'old' value\"\"\"\n    if (new == resets):\n        return default\n    if (new is None):\n        return old\n    return new\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.install","title":"install","text":"<pre><code>install(\n    *,\n    packages: Union[str, Iterable[str]],\n    pypi: Optional[Union[str, Iterable[str]]] = None,\n    args: Optional[Union[str, Iterable[str]]] = None\n) -&gt; None\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def install(*,\n    packages: Union[str, Iterable[str]],\n    pypi: Optional[Union[str, Iterable[str]]]=None,\n    args: Optional[Union[str, Iterable[str]]]=None\n) -&gt; None:\n    # Ensure arguments are tuples\n    packages = flatten(packages, cast=tuple)\n    pypi = flatten(pypi or packages, cast=tuple)\n    args = flatten(args, cast=tuple)\n\n    caller = inspect.currentframe().f_back.f_globals\n\n    # Import the package and insert on the caller's globals\n    def inject_packages():\n        for package in packages:\n            caller[package] = __import__(package)\n\n    try:\n        return inject_packages()\n    except ImportError:\n        log.info(f\"Installing packages: {packages}..\")\n\n    for method in (\n        (sys.executable, \"-m\", \"uv\", \"pip\", \"install\"),\n        (sys.executable, \"-m\", \"pip\", \"install\")\n    ):\n        if shell(*method, *pypi, *args).returncode == 0:\n            return inject_packages()\n\n    raise RuntimeError(log.error(f\"Failed to install packages: {packages}\"))\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.combinations","title":"combinations","text":"<pre><code>combinations(**options: Any) -&gt; Iterable[DotMap]\n</code></pre> <p>Returns a dictionary of key='this' of itertools.product</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def combinations(**options: Any) -&gt; Iterable[DotMap]:\n    \"\"\"Returns a dictionary of key='this' of itertools.product\"\"\"\n    for items in itertools.product(*options.values()):\n        yield DotMap(zip(options.keys(), items))\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.arguments","title":"arguments","text":"<pre><code>arguments() -&gt; bool\n</code></pre> <p>Returns True if any arguments are present on sys.argv</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def arguments() -&gt; bool:\n    \"\"\"Returns True if any arguments are present on sys.argv\"\"\"\n    return bool(sys.argv[1:])\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.easyloop","title":"easyloop","text":"<pre><code>easyloop(method: Callable = None, *, period: float = 0.0)\n</code></pre> <p>Wraps a method in an infinite loop called every 'period' seconds</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def easyloop(method: Callable=None, *, period: float=0.0):\n    \"\"\"Wraps a method in an infinite loop called every 'period' seconds\"\"\"\n\n    def decorator(method):\n\n        @functools.wraps(method)\n        def wrapper(*args, **kwargs):\n            while True:\n                method(*args, **kwargs)\n                time.sleep(period)\n\n        return wrapper\n\n    if (method is None):\n        return decorator\n\n    return decorator(method)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.Nothing","title":"Nothing","text":"<p>No-operation faster than Mock - A class that does nothing</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>class Nothing:\n    \"\"\"No-operation faster than Mock - A class that does nothing\"\"\"\n    def __nop__(self, *args, **kwargs) -&gt; Self:\n        return self\n    def __call__(self, *args, **kwargs) -&gt; Self:\n        return self\n    def __getattr__(self, _) -&gt; Callable:\n        return self.__nop__\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.Nothing.__nop__","title":"__nop__","text":"<pre><code>__nop__(*args, **kwargs) -&gt; Self\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __nop__(self, *args, **kwargs) -&gt; Self:\n    return self\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.Nothing.__call__","title":"__call__","text":"<pre><code>__call__(*args, **kwargs) -&gt; Self\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __call__(self, *args, **kwargs) -&gt; Self:\n    return self\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.Nothing.__getattr__","title":"__getattr__","text":"<pre><code>__getattr__(_) -&gt; Callable\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __getattr__(self, _) -&gt; Callable:\n    return self.__nop__\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.StaticClass","title":"StaticClass","text":"<p>A class that can't be instantiated directl, only used for static methods (namespace)</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>class StaticClass:\n    \"\"\"A class that can't be instantiated directl, only used for static methods (namespace)\"\"\"\n\n    def __new__(cls, *args, **kwargs):\n        raise TypeError(f\"Can't instantiate static class '{cls.__name__}'\")\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.StaticClass.__new__","title":"__new__","text":"<pre><code>__new__(*args, **kwargs)\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __new__(cls, *args, **kwargs):\n    raise TypeError(f\"Can't instantiate static class '{cls.__name__}'\")\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenSingleton","title":"BrokenSingleton","text":"<p>               Bases: <code>ABC</code></p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>class BrokenSingleton(ABC):\n    def __new__(cls, *args, **kwargs):\n        if not hasattr(cls, \"__instance__\"):\n            self = super().__new__(cls)\n            cls.__instance__ = self\n        return cls.__instance__\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenSingleton.__new__","title":"__new__","text":"<pre><code>__new__(*args, **kwargs)\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __new__(cls, *args, **kwargs):\n    if not hasattr(cls, \"__instance__\"):\n        self = super().__new__(cls)\n        cls.__instance__ = self\n    return cls.__instance__\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenFluent","title":"BrokenFluent","text":"<p>Fluent-like .copy(update) and .(update) setter for classes</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>class BrokenFluent:\n    \"\"\"Fluent-like .copy(**update) and .(**update) setter for classes\"\"\"\n\n    def __call__(self, **update) -&gt; Self:\n        \"\"\"Updates the instance with the provided kwargs\"\"\"\n        for key, value in update.items():\n            setattr(self, key, value)\n        return self\n\n    def copy(self, **update) -&gt; Self:\n        \"\"\"Returns an updated copy of this instance\"\"\"\n        return copy.deepcopy(self)(**update)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenFluent.__call__","title":"__call__","text":"<pre><code>__call__(**update) -&gt; Self\n</code></pre> <p>Updates the instance with the provided kwargs</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __call__(self, **update) -&gt; Self:\n    \"\"\"Updates the instance with the provided kwargs\"\"\"\n    for key, value in update.items():\n        setattr(self, key, value)\n    return self\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenFluent.copy","title":"copy","text":"<pre><code>copy(**update) -&gt; Self\n</code></pre> <p>Returns an updated copy of this instance</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def copy(self, **update) -&gt; Self:\n    \"\"\"Returns an updated copy of this instance\"\"\"\n    return copy.deepcopy(self)(**update)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenAttrs","title":"BrokenAttrs","text":"<p>Walk over an @attrs.defined class and call post on all classes in the MRO Warn: Must NOT define attrs_post_init in an inheriting class Fixme: Can improve by starting on BrokenAttrs itself</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>class BrokenAttrs:\n    \"\"\"\n    Walk over an @attrs.defined class and call __post__ on all classes in the MRO\n    Warn: Must NOT define __attrs_post_init__ in an inheriting class\n    Fixme: Can improve by starting on BrokenAttrs itself\n    \"\"\"\n    def __attrs_post_init__(self):\n        for cls in reversed(type(self).mro()):\n            if method := cls.__dict__.get(\"__post__\"):\n                method(self)\n\n    @abstractmethod\n    def __post__(self) -&gt; None:\n        ...\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenAttrs.__attrs_post_init__","title":"__attrs_post_init__","text":"<pre><code>__attrs_post_init__()\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __attrs_post_init__(self):\n    for cls in reversed(type(self).mro()):\n        if method := cls.__dict__.get(\"__post__\"):\n            method(self)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenAttrs.__post__","title":"__post__","text":"<pre><code>__post__() -&gt; None\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@abstractmethod\ndef __post__(self) -&gt; None:\n    ...\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenModel","title":"BrokenModel","text":"<p>               Bases: <code>BaseModel</code></p> <p>Pydantic model utilities</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>class BrokenModel(BaseModel):\n    \"\"\"Pydantic model utilities\"\"\"\n    model_config = ConfigDict(\n        use_attribute_docstrings=True,\n    )\n\n    def model_post_init(self, __context):\n        for cls in reversed(type(self).mro()):\n            if method := cls.__dict__.get(\"__post__\"):\n                method(self)\n\n    def __post__(self) -&gt; None:\n        ...\n\n    def __hash__(self) -&gt; int:\n        \"\"\"Deterministic hash heuristic, as hash() is random seeded\"\"\"\n        return int(hashlib.sha256(self.json(full=True).encode()).hexdigest(), 16)\n\n    # Serialization\n\n    def json(self, full: bool=True) -&gt; str:\n        return self.model_dump_json(\n            exclude_defaults=(not full),\n            exclude_none=False\n        )\n\n    def dict(self, full: bool=True) -&gt; dict:\n        return self.model_dump(\n            exclude_defaults=(not full),\n            exclude_none=False\n        )\n\n    def schema(self) -&gt; dict:\n        return self.model_json_schema()\n\n    # Deserialization\n\n    @classmethod\n    def load(cls, data: Union[dict, str]) -&gt; Self:\n        if isinstance(data, dict):\n            return cls.model_validate(data)\n        elif isinstance(data, str):\n            return cls.model_validate_json(data)\n        elif isinstance(data, cls):\n            return data\n        raise ValueError(f\"Can't load from value of type {type(data)}\")\n\n    def update(self, **data: Union[dict, str]) -&gt; Self:\n        for (key, value) in data.items():\n            setattr(self, key, value)\n        return self\n\n    # Dict-like utilities\n\n    def keys(self) -&gt; Iterable[str]:\n        yield from self.dict().keys()\n\n    def values(self) -&gt; Iterable[Any]:\n        yield from self.dict().values()\n\n    def items(self) -&gt; Iterable[tuple[str, Any]]:\n        yield from self.dict().items()\n\n    # Special\n\n    def reset(self) -&gt; None:\n        for key, value in self.model_fields.items():\n            setattr(self, key, value.default)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenModel.model_config","title":"model_config","text":"<pre><code>model_config = ConfigDict(use_attribute_docstrings=True)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenModel.model_post_init","title":"model_post_init","text":"<pre><code>model_post_init(__context)\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def model_post_init(self, __context):\n    for cls in reversed(type(self).mro()):\n        if method := cls.__dict__.get(\"__post__\"):\n            method(self)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenModel.__post__","title":"__post__","text":"<pre><code>__post__() -&gt; None\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __post__(self) -&gt; None:\n    ...\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenModel.__hash__","title":"__hash__","text":"<pre><code>__hash__() -&gt; int\n</code></pre> <p>Deterministic hash heuristic, as hash() is random seeded</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __hash__(self) -&gt; int:\n    \"\"\"Deterministic hash heuristic, as hash() is random seeded\"\"\"\n    return int(hashlib.sha256(self.json(full=True).encode()).hexdigest(), 16)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenModel.json","title":"json","text":"<pre><code>json(full: bool = True) -&gt; str\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def json(self, full: bool=True) -&gt; str:\n    return self.model_dump_json(\n        exclude_defaults=(not full),\n        exclude_none=False\n    )\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenModel.dict","title":"dict","text":"<pre><code>dict(full: bool = True) -&gt; dict\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def dict(self, full: bool=True) -&gt; dict:\n    return self.model_dump(\n        exclude_defaults=(not full),\n        exclude_none=False\n    )\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenModel.schema","title":"schema","text":"<pre><code>schema() -&gt; dict\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def schema(self) -&gt; dict:\n    return self.model_json_schema()\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenModel.load","title":"load","text":"<pre><code>load(data: Union[dict, str]) -&gt; Self\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@classmethod\ndef load(cls, data: Union[dict, str]) -&gt; Self:\n    if isinstance(data, dict):\n        return cls.model_validate(data)\n    elif isinstance(data, str):\n        return cls.model_validate_json(data)\n    elif isinstance(data, cls):\n        return data\n    raise ValueError(f\"Can't load from value of type {type(data)}\")\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenModel.update","title":"update","text":"<pre><code>update(**data: Union[dict, str]) -&gt; Self\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def update(self, **data: Union[dict, str]) -&gt; Self:\n    for (key, value) in data.items():\n        setattr(self, key, value)\n    return self\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenModel.keys","title":"keys","text":"<pre><code>keys() -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def keys(self) -&gt; Iterable[str]:\n    yield from self.dict().keys()\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenModel.values","title":"values","text":"<pre><code>values() -&gt; Iterable[Any]\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def values(self) -&gt; Iterable[Any]:\n    yield from self.dict().values()\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenModel.items","title":"items","text":"<pre><code>items() -&gt; Iterable[tuple[str, Any]]\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def items(self) -&gt; Iterable[tuple[str, Any]]:\n    yield from self.dict().items()\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenModel.reset","title":"reset","text":"<pre><code>reset() -&gt; None\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def reset(self) -&gt; None:\n    for key, value in self.model_fields.items():\n        setattr(self, key, value.default)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.FrozenHash","title":"FrozenHash","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>class FrozenHash(BaseModel):\n    hash: int = Field(0, exclude=True)\n\n    def __hash__(self):\n        self.hash = (self.hash or super().__hash__())\n        return self.hash\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.FrozenHash.hash","title":"hash","text":"<pre><code>hash: int = Field(0, exclude=True)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.FrozenHash.__hash__","title":"__hash__","text":"<pre><code>__hash__()\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __hash__(self):\n    self.hash = (self.hash or super().__hash__())\n    return self.hash\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenAttribute","title":"BrokenAttribute","text":"<p>               Bases: <code>StaticClass</code></p> <p>Recursive implementation for getattr and setattr from strings</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>class BrokenAttribute(StaticClass):\n    \"\"\"Recursive implementation for getattr and setattr from strings\"\"\"\n\n    @define\n    class Parts:\n        all: list[str]\n        body: list[str]\n        last: str\n\n    @classmethod\n    def decompose(cls, key: str) -&gt; Parts:\n        parts = str(key).replace(\"-\", \"_\").split(\".\")\n\n        return cls.Parts(\n            all=parts,\n            body=parts[:-1],\n            last=parts[-1]\n        )\n\n    @classmethod\n    def get(cls, root: object, key: str) -&gt; Optional[Any]:\n        parts = cls.decompose(key)\n\n        for part in parts.all:\n            try:\n                root = getattr(root, part)\n            except AttributeError:\n                return None\n\n        return root\n\n    @classmethod\n    def set(cls, object: object, attribute: str, value: Any) -&gt; None:\n        parts = cls.decompose(attribute)\n\n        for part in parts.body:\n            try:\n                object = getattr(object, part)\n            except AttributeError:\n                return None\n\n        setattr(object, parts.last, value)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenAttribute.Parts","title":"Parts","text":"Source code in <code>Broken/Core/__init__.py</code> <pre><code>@define\nclass Parts:\n    all: list[str]\n    body: list[str]\n    last: str\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenAttribute.Parts.all","title":"all","text":"<pre><code>all: list[str]\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenAttribute.Parts.body","title":"body","text":"<pre><code>body: list[str]\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenAttribute.Parts.last","title":"last","text":"<pre><code>last: str\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenAttribute.decompose","title":"decompose","text":"<pre><code>decompose(key: str) -&gt; Parts\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@classmethod\ndef decompose(cls, key: str) -&gt; Parts:\n    parts = str(key).replace(\"-\", \"_\").split(\".\")\n\n    return cls.Parts(\n        all=parts,\n        body=parts[:-1],\n        last=parts[-1]\n    )\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenAttribute.get","title":"get","text":"<pre><code>get(root: object, key: str) -&gt; Optional[Any]\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@classmethod\ndef get(cls, root: object, key: str) -&gt; Optional[Any]:\n    parts = cls.decompose(key)\n\n    for part in parts.all:\n        try:\n            root = getattr(root, part)\n        except AttributeError:\n            return None\n\n    return root\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenAttribute.set","title":"set","text":"<pre><code>set(object: object, attribute: str, value: Any) -&gt; None\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@classmethod\ndef set(cls, object: object, attribute: str, value: Any) -&gt; None:\n    parts = cls.decompose(attribute)\n\n    for part in parts.body:\n        try:\n            object = getattr(object, part)\n        except AttributeError:\n            return None\n\n    setattr(object, parts.last, value)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.StringUtils","title":"StringUtils","text":"<p>               Bases: <code>StaticClass</code></p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>class StringUtils(StaticClass):\n\n    @classmethod\n    def border(cls, string: str, border: str) -&gt; bool:\n        \"\"\"Returns True if 'border' is both a prefix and suffix of 'string'\"\"\"\n        return (string.startswith(border) and string.endswith(reversed(border)))\n\n    @classmethod\n    def dunder(cls, name: str) -&gt; bool:\n        \"\"\"Checks if a string is a double underscore '__name__'\"\"\"\n        return cls.border(name, \"__\")\n\n    @classmethod\n    def sunder(cls, name: str) -&gt; bool:\n        \"\"\"Checks if a string is a single underscore '_name_'\"\"\"\n        return (cls.border(name, \"_\") and not cls.dunder(name))\n\n    @classmethod\n    def private(cls, name: str) -&gt; bool:\n        \"\"\"Checks if a string is a private name\"\"\"\n        return name.startswith(\"_\")\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.StringUtils.border","title":"border","text":"<pre><code>border(string: str, border: str) -&gt; bool\n</code></pre> <p>Returns True if 'border' is both a prefix and suffix of 'string'</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@classmethod\ndef border(cls, string: str, border: str) -&gt; bool:\n    \"\"\"Returns True if 'border' is both a prefix and suffix of 'string'\"\"\"\n    return (string.startswith(border) and string.endswith(reversed(border)))\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.StringUtils.dunder","title":"dunder","text":"<pre><code>dunder(name: str) -&gt; bool\n</code></pre> <p>Checks if a string is a double underscore 'name'</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@classmethod\ndef dunder(cls, name: str) -&gt; bool:\n    \"\"\"Checks if a string is a double underscore '__name__'\"\"\"\n    return cls.border(name, \"__\")\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.StringUtils.sunder","title":"sunder","text":"<pre><code>sunder(name: str) -&gt; bool\n</code></pre> <p>Checks if a string is a single underscore 'name'</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@classmethod\ndef sunder(cls, name: str) -&gt; bool:\n    \"\"\"Checks if a string is a single underscore '_name_'\"\"\"\n    return (cls.border(name, \"_\") and not cls.dunder(name))\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.StringUtils.private","title":"private","text":"<pre><code>private(name: str) -&gt; bool\n</code></pre> <p>Checks if a string is a private name</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@classmethod\ndef private(cls, name: str) -&gt; bool:\n    \"\"\"Checks if a string is a private name\"\"\"\n    return name.startswith(\"_\")\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.DictUtils","title":"DictUtils","text":"<p>               Bases: <code>StaticClass</code></p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>class DictUtils(StaticClass):\n\n    @staticmethod\n    def filter_dict(\n        data: dict[str, Any], *,\n        block: Optional[Collection] = None,\n        allow: Optional[Collection] = None,\n    ) -&gt; dict[str, Any]:\n        \"\"\"Filters a dictionary by removing 'block' or only allowing 'allow' keys\"\"\"\n        if block:\n            data = {key: value for key, value in data.items() if (key not in block)}\n        if allow:\n            data = {key: value for key, value in data.items() if (key in allow)}\n        return data\n\n    @classmethod\n    def ritems(cls, data: dict[str, Any]) -&gt; Iterable[tuple[str, Any]]:\n        \"\"\"Recursively yields all items from a dictionary\"\"\"\n        for (key, value) in data.items():\n            if isinstance(value, dict):\n                yield from cls.ritems(value)\n                continue\n            yield (key, value)\n\n    @classmethod\n    def rvalues(cls, data: dict[str, Any]) -&gt; Iterable[Any]:\n        \"\"\"Recursively yields all values from a dictionary\"\"\"\n        for (key, value) in cls.ritems(data):\n            yield value\n\n    @classmethod\n    def selfless(cls, data: dict) -&gt; dict:\n        \"\"\"Removes the 'self' key from a dictionary (useful for locals() or __dict__)\"\"\"\n        # Note: It's also possible to call Class.method(**locals()) instead!\n        return cls.filter_dict(data, block=[\"self\"])\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.DictUtils.filter_dict","title":"filter_dict","text":"<pre><code>filter_dict(\n    data: dict[str, Any],\n    *,\n    block: Optional[Collection] = None,\n    allow: Optional[Collection] = None\n) -&gt; dict[str, Any]\n</code></pre> <p>Filters a dictionary by removing 'block' or only allowing 'allow' keys</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@staticmethod\ndef filter_dict(\n    data: dict[str, Any], *,\n    block: Optional[Collection] = None,\n    allow: Optional[Collection] = None,\n) -&gt; dict[str, Any]:\n    \"\"\"Filters a dictionary by removing 'block' or only allowing 'allow' keys\"\"\"\n    if block:\n        data = {key: value for key, value in data.items() if (key not in block)}\n    if allow:\n        data = {key: value for key, value in data.items() if (key in allow)}\n    return data\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.DictUtils.ritems","title":"ritems","text":"<pre><code>ritems(data: dict[str, Any]) -&gt; Iterable[tuple[str, Any]]\n</code></pre> <p>Recursively yields all items from a dictionary</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@classmethod\ndef ritems(cls, data: dict[str, Any]) -&gt; Iterable[tuple[str, Any]]:\n    \"\"\"Recursively yields all items from a dictionary\"\"\"\n    for (key, value) in data.items():\n        if isinstance(value, dict):\n            yield from cls.ritems(value)\n            continue\n        yield (key, value)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.DictUtils.rvalues","title":"rvalues","text":"<pre><code>rvalues(data: dict[str, Any]) -&gt; Iterable[Any]\n</code></pre> <p>Recursively yields all values from a dictionary</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@classmethod\ndef rvalues(cls, data: dict[str, Any]) -&gt; Iterable[Any]:\n    \"\"\"Recursively yields all values from a dictionary\"\"\"\n    for (key, value) in cls.ritems(data):\n        yield value\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.DictUtils.selfless","title":"selfless","text":"<pre><code>selfless(data: dict) -&gt; dict\n</code></pre> <p>Removes the 'self' key from a dictionary (useful for locals() or dict)</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@classmethod\ndef selfless(cls, data: dict) -&gt; dict:\n    \"\"\"Removes the 'self' key from a dictionary (useful for locals() or __dict__)\"\"\"\n    # Note: It's also possible to call Class.method(**locals()) instead!\n    return cls.filter_dict(data, block=[\"self\"])\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenCache","title":"BrokenCache","text":"<p>               Bases: <code>StaticClass</code></p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>class BrokenCache(StaticClass):\n\n    @staticmethod\n    @functools.lru_cache\n    @functools.wraps(functools.lru_cache)\n    def lru(*args, **kwargs) -&gt; Callable:\n        \"\"\"Smarter lru_cache consistent with multi-calls\"\"\"\n        return functools.lru_cache(*args, **kwargs)\n\n    @staticmethod\n    def requests(*args, patch: bool=False, **kwargs):\n        import requests\n        import requests_cache\n        session = requests_cache.CachedSession(*args, **kwargs)\n        if patch:\n            requests.Session = session\n        return session\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenCache.lru","title":"lru","text":"<pre><code>lru(*args, **kwargs) -&gt; Callable\n</code></pre> <p>Smarter lru_cache consistent with multi-calls</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@staticmethod\n@functools.lru_cache\n@functools.wraps(functools.lru_cache)\ndef lru(*args, **kwargs) -&gt; Callable:\n    \"\"\"Smarter lru_cache consistent with multi-calls\"\"\"\n    return functools.lru_cache(*args, **kwargs)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenCache.requests","title":"requests","text":"<pre><code>requests(*args, patch: bool = False, **kwargs)\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@staticmethod\ndef requests(*args, patch: bool=False, **kwargs):\n    import requests\n    import requests_cache\n    session = requests_cache.CachedSession(*args, **kwargs)\n    if patch:\n        requests.Session = session\n    return session\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenRelay","title":"BrokenRelay","text":"<p>A utility class for sharing one-to-many callbacks in a 'observer' pattern style. Multiple callabacks can be subscribed to receive the same args and kwargs when an instance of this class is called. Useful cases are to avoid inheritance when sharing callbacks.</p> Example <pre><code>relay = BrokenRelay()\n\n# Basic usage\nrelay.subscribe(callback1, callback2)\nrelay(*args, **kwargs) # Calls callback1 and callback2\n\n# Can also 'inject' us to bound callables\nwindow = moderngl_window(...)\nwindow.key_event_func = relay\nwindow.key_event_func = relay @ (camera.walk, camera.rotate)\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@define\nclass BrokenRelay:\n    \"\"\"\n    A utility class for sharing one-to-many callbacks in a 'observer' pattern style. Multiple\n    callabacks can be subscribed to receive the same args and kwargs when an instance of this class\n    is called. Useful cases are to avoid inheritance when sharing callbacks.\n\n    Example:\n        ```python\n        relay = BrokenRelay()\n\n        # Basic usage\n        relay.subscribe(callback1, callback2)\n        relay(*args, **kwargs) # Calls callback1 and callback2\n\n        # Can also 'inject' us to bound callables\n        window = moderngl_window(...)\n        window.key_event_func = relay\n        window.key_event_func = relay @ (camera.walk, camera.rotate)\n        ```\n    \"\"\"\n    registry: deque[Callable] = Factory(deque)\n\n    def subscribe(self, *methods: Iterable[Callable]) -&gt; Self:\n        \"\"\"Adds callbacks to be called with same arguments as self.__call__\"\"\"\n        self.registry.extend(flatten(methods))\n        return self\n\n    def __call__(self, *args, **kwargs):\n        for callback in self.registry:\n            callback(*args, **kwargs)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenRelay.registry","title":"registry","text":"<pre><code>registry: deque[Callable] = Factory(deque)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenRelay.subscribe","title":"subscribe","text":"<pre><code>subscribe(*methods: Iterable[Callable]) -&gt; Self\n</code></pre> <p>Adds callbacks to be called with same arguments as self.call</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def subscribe(self, *methods: Iterable[Callable]) -&gt; Self:\n    \"\"\"Adds callbacks to be called with same arguments as self.__call__\"\"\"\n    self.registry.extend(flatten(methods))\n    return self\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenRelay.__call__","title":"__call__","text":"<pre><code>__call__(*args, **kwargs)\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __call__(self, *args, **kwargs):\n    for callback in self.registry:\n        callback(*args, **kwargs)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.Patch","title":"Patch","text":"Source code in <code>Broken/Core/__init__.py</code> <pre><code>@define\nclass Patch:\n    file: Path = field(converter=Path)\n    replaces: dict[str, str] = field(factory=dict)\n    _original: str = None\n\n    def __attrs_post_init__(self):\n        self._original = self.file.read_text(\"utf-8\")\n\n    def apply(self):\n        content = self._original\n        for key, value in self.replaces.items():\n            content = content.replace(key, value)\n        self.file.write_text(content, \"utf-8\")\n\n    def revert(self):\n        self.file.write_text(self._original, \"utf-8\")\n\n    def __enter__(self):\n        self.apply()\n    def __exit__(self, *args):\n        self.revert()\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.Patch.file","title":"file","text":"<pre><code>file: Path = field(converter=Path)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.Patch.replaces","title":"replaces","text":"<pre><code>replaces: dict[str, str] = field(factory=dict)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.Patch.__attrs_post_init__","title":"__attrs_post_init__","text":"<pre><code>__attrs_post_init__()\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __attrs_post_init__(self):\n    self._original = self.file.read_text(\"utf-8\")\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.Patch.apply","title":"apply","text":"<pre><code>apply()\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def apply(self):\n    content = self._original\n    for key, value in self.replaces.items():\n        content = content.replace(key, value)\n    self.file.write_text(content, \"utf-8\")\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.Patch.revert","title":"revert","text":"<pre><code>revert()\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def revert(self):\n    self.file.write_text(self._original, \"utf-8\")\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.Patch.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __enter__(self):\n    self.apply()\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.Patch.__exit__","title":"__exit__","text":"<pre><code>__exit__(*args)\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __exit__(self, *args):\n    self.revert()\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenWatchdog","title":"BrokenWatchdog","text":"<p>               Bases: <code>ABC</code></p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>class BrokenWatchdog(ABC):\n\n    @abstractmethod\n    def __changed__(self, key, value) -&gt; None:\n        \"\"\"Called when a property changes\"\"\"\n        ...\n\n    def __setattr__(self, key, value):\n        \"\"\"Calls __changed__ when a property changes\"\"\"\n        super().__setattr__(key, value)\n        self.__changed__(key, value)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenWatchdog.__changed__","title":"__changed__","text":"<pre><code>__changed__(key, value) -&gt; None\n</code></pre> <p>Called when a property changes</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>@abstractmethod\ndef __changed__(self, key, value) -&gt; None:\n    \"\"\"Called when a property changes\"\"\"\n    ...\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.BrokenWatchdog.__setattr__","title":"__setattr__","text":"<pre><code>__setattr__(key, value)\n</code></pre> <p>Calls changed when a property changes</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __setattr__(self, key, value):\n    \"\"\"Calls __changed__ when a property changes\"\"\"\n    super().__setattr__(key, value)\n    self.__changed__(key, value)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.ThreadedStdin","title":"ThreadedStdin","text":"Source code in <code>Broken/Core/__init__.py</code> <pre><code>@define\nclass ThreadedStdin:\n    _process: subprocess.Popen\n    _queue: Queue = Factory(factory=lambda: Queue(maxsize=10))\n    _loop: bool = True\n\n    def __attrs_post_init__(self):\n        Thread(target=self.worker, daemon=True).start()\n        self._process.stdin = self\n    def write(self, data):\n        self._queue.put(data)\n    def worker(self):\n        while self._loop:\n            self._process.stdin.write(self._queue.get())\n            self._queue.task_done()\n    def close(self):\n        self._queue.join()\n        self._loop = False\n        self._process.stdin.close()\n        while self._process.poll() is None:\n            time.sleep(0.01)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.ThreadedStdin.__attrs_post_init__","title":"__attrs_post_init__","text":"<pre><code>__attrs_post_init__()\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __attrs_post_init__(self):\n    Thread(target=self.worker, daemon=True).start()\n    self._process.stdin = self\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.ThreadedStdin.write","title":"write","text":"<pre><code>write(data)\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def write(self, data):\n    self._queue.put(data)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.ThreadedStdin.worker","title":"worker","text":"<pre><code>worker()\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def worker(self):\n    while self._loop:\n        self._process.stdin.write(self._queue.get())\n        self._queue.task_done()\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.ThreadedStdin.close","title":"close","text":"<pre><code>close()\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def close(self):\n    self._queue.join()\n    self._loop = False\n    self._process.stdin.close()\n    while self._process.poll() is None:\n        time.sleep(0.01)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.transcends","title":"transcends","text":"<pre><code>transcends(method, base, generator: bool = False)\n</code></pre> <p>Are you tired of managing and calling super().(args, *kwargs) in your methods? <p>We have just the right solution for you!</p> <p>Introducing transcends, the decorator that crosses your class's MRO and calls the method with the same name as the one you are decorating. It's an automatic super() everywhere!</p> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def transcends(method, base, generator: bool=False):\n    \"\"\"\n    Are you tired of managing and calling super().&lt;name&gt;(*args, **kwargs) in your methods?\n    &gt; We have just the right solution for you!\n\n    Introducing transcends, the decorator that crosses your class's MRO and calls the method\n    with the same name as the one you are decorating. It's an automatic super() everywhere!\n    \"\"\"\n    name = method.__name__\n\n    def decorator(func: Callable) -&gt; Callable:\n        def get_targets(self):\n            for cls in type(self).mro()[:-2]:\n                if cls in (base, object):\n                    continue\n                if (target := cls.__dict__.get(name)):\n                    yield target\n\n        # Note: We can't have a `if generator` else the func becomes a Generator\n        def yields(self, *args, **kwargs):\n            for target in get_targets(self):\n                yield from target(self, *args, **kwargs)\n        def plain(self, *args, **kwargs):\n            for target in get_targets(self):\n                target(self, *args, **kwargs)\n\n        return (yields if generator else plain)\n    return decorator\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.LazyImport","title":"LazyImport","text":"Source code in <code>Broken/Core/__init__.py</code> <pre><code>class LazyImport:\n    __import__ = copy.deepcopy(__import__)\n\n    def __init__(self, _name: str=None):\n        self._lzname_ = _name\n\n    def __load__(self) -&gt; Any:\n        del sys.modules[self._lzname_]\n        module = LazyImport.__import__(self._lzname_)\n        sys.modules[self._lzname_] = module\n\n        # Update the caller's globals with the reloaded\n        sys._getframe(2).f_globals[self._lzname_] = module\n\n        return module\n\n    def __getattr__(self, name) -&gt; Any:\n        return getattr(self.__load__(), name)\n\n    def __str__(self) -&gt; str:\n        return f\"{type(self).__name__}(name='{self._lzname_}')\"\n\n    def __enter__(self):\n\n        @functools.wraps(LazyImport.__import__)\n        def laziest(*args):\n            module = type(self)(_name=args[0])\n            return sys.modules.setdefault(module._lzname_, module)\n\n        # Patch the import function with ours\n        __builtins__[\"__import__\"] = laziest\n\n    def __exit__(self, *args):\n        __builtins__[\"__import__\"] = LazyImport.__import__\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.LazyImport.__import__","title":"__import__","text":"<pre><code>__import__ = copy.deepcopy(__import__)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.LazyImport.__init__","title":"__init__","text":"<pre><code>__init__(_name: str = None)\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __init__(self, _name: str=None):\n    self._lzname_ = _name\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.LazyImport.__load__","title":"__load__","text":"<pre><code>__load__() -&gt; Any\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __load__(self) -&gt; Any:\n    del sys.modules[self._lzname_]\n    module = LazyImport.__import__(self._lzname_)\n    sys.modules[self._lzname_] = module\n\n    # Update the caller's globals with the reloaded\n    sys._getframe(2).f_globals[self._lzname_] = module\n\n    return module\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.LazyImport.__getattr__","title":"__getattr__","text":"<pre><code>__getattr__(name) -&gt; Any\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __getattr__(self, name) -&gt; Any:\n    return getattr(self.__load__(), name)\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.LazyImport.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __str__(self) -&gt; str:\n    return f\"{type(self).__name__}(name='{self._lzname_}')\"\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.LazyImport.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __enter__(self):\n\n    @functools.wraps(LazyImport.__import__)\n    def laziest(*args):\n        module = type(self)(_name=args[0])\n        return sys.modules.setdefault(module._lzname_, module)\n\n    # Patch the import function with ours\n    __builtins__[\"__import__\"] = laziest\n</code></pre>"},{"location":"code/broken/core/__init__/#Broken.Core.LazyImport.__exit__","title":"__exit__","text":"<pre><code>__exit__(*args)\n</code></pre> Source code in <code>Broken/Core/__init__.py</code> <pre><code>def __exit__(self, *args):\n    __builtins__[\"__import__\"] = LazyImport.__import__\n</code></pre>"},{"location":"code/broken/core/brokenenum/","title":"File: <code>Broken/Core/BrokenEnum.py</code>","text":""},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum","title":"Broken.Core.BrokenEnum","text":""},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum.BrokenEnumBase","title":"BrokenEnumBase","text":"Source code in <code>Broken/Core/BrokenEnum.py</code> <pre><code>class BrokenEnumBase:\n\n    @classmethod\n    @functools.lru_cache()\n    def get(cls, /, value: Union[str, enum.Enum, Any], default: Any=None) -&gt; Optional[Self]:\n        \"\"\"Get enum members from their value, name or themselves\"\"\"\n\n        # Value is already a member of the enum\n        if isinstance(value, cls):\n            return value\n\n        # Attempt to get by value\n        with contextlib.suppress(ValueError):\n            return cls(value)\n\n        # Attempt to get by key\n        with contextlib.suppress(KeyError):\n            return cls[value]\n\n        return default\n\n    # Values\n\n    @classmethod\n    def options(cls) -&gt; tuple[enum.Enum]:\n        \"\"\"Get all options (Class.A, Class.B, ...) of the enum\"\"\"\n        return tuple(cls)\n\n    @classmethod\n    def values(cls) -&gt; tuple[Any]:\n        \"\"\"Get all 'values' of the enum (name=value)\"\"\"\n        return tuple(member.value for member in cls)\n\n    # Key/names properties\n\n    @classmethod\n    def keys(cls) -&gt; tuple[str]:\n        \"\"\"Get all 'keys' of the enum (key=value)\"\"\"\n        return tuple(member.name for member in cls)\n\n    # Items and dict-like\n\n    @classmethod\n    def items(cls) -&gt; tuple[tuple[str, Any]]:\n        \"\"\"Get the tuple of (name, value) of all members of the enum\"\"\"\n        return tuple((member.name, member.value) for member in cls)\n\n    @classmethod\n    def as_dict(cls) -&gt; dict[str, Any]:\n        \"\"\"Get the dictionary of all key=value of the enum\"\"\"\n        return dict(cls.items())\n\n    def __getitem__(self, index: int) -&gt; enum.Enum:\n        return self.members[index]\n\n    # # Smart methods\n\n    @functools.lru_cache()\n    def next(self, value: Union[str, enum.Enum]=None, *, offset: int=1) -&gt; Self:\n        \"\"\"Get the next enum member defined in the class\"\"\"\n        cls   = type(self)\n        value = cls.get(value or self)\n        return cls.options()[(cls.options().index(value) + offset) % len(cls)]\n\n    def __next__(self) -&gt; Self:\n        return self.next()\n\n    @functools.lru_cache()\n    def previous(self, value: Union[str, enum.Enum]=None, *, offset: int=1) -&gt; Self:\n        \"\"\"Get the previous enum member defined in the class\"\"\"\n        cls   = type(self)\n        value = cls.get(value or self)\n        return cls.options()[(cls.options().index(value) - offset) % len(cls)]\n\n    # # Advanced functions\n\n    def field(self, **kwargs: dict[str, Any]) -&gt; attrs.Attribute:\n        \"\"\"Get an attrs.field() with this option as default and Enum.get as converter\"\"\"\n        return attrs.field(\n            default=self,\n            converter=type(self).get,\n            **kwargs\n        )\n\n    @classmethod\n    def extend(cls, name: str, value: Any) -&gt; Self:\n        \"\"\"Dynamically extend the enum with a new member (name=value)\"\"\"\n        raise NotImplementedError(\"This method is not implemented yet\")\n</code></pre>"},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum.BrokenEnumBase.get","title":"get","text":"<pre><code>get(\n    value: Union[str, enum.Enum, Any], default: Any = None\n) -&gt; Optional[Self]\n</code></pre> <p>Get enum members from their value, name or themselves</p> Source code in <code>Broken/Core/BrokenEnum.py</code> <pre><code>@classmethod\n@functools.lru_cache()\ndef get(cls, /, value: Union[str, enum.Enum, Any], default: Any=None) -&gt; Optional[Self]:\n    \"\"\"Get enum members from their value, name or themselves\"\"\"\n\n    # Value is already a member of the enum\n    if isinstance(value, cls):\n        return value\n\n    # Attempt to get by value\n    with contextlib.suppress(ValueError):\n        return cls(value)\n\n    # Attempt to get by key\n    with contextlib.suppress(KeyError):\n        return cls[value]\n\n    return default\n</code></pre>"},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum.BrokenEnumBase.options","title":"options","text":"<pre><code>options() -&gt; tuple[enum.Enum]\n</code></pre> <p>Get all options (Class.A, Class.B, ...) of the enum</p> Source code in <code>Broken/Core/BrokenEnum.py</code> <pre><code>@classmethod\ndef options(cls) -&gt; tuple[enum.Enum]:\n    \"\"\"Get all options (Class.A, Class.B, ...) of the enum\"\"\"\n    return tuple(cls)\n</code></pre>"},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum.BrokenEnumBase.values","title":"values","text":"<pre><code>values() -&gt; tuple[Any]\n</code></pre> <p>Get all 'values' of the enum (name=value)</p> Source code in <code>Broken/Core/BrokenEnum.py</code> <pre><code>@classmethod\ndef values(cls) -&gt; tuple[Any]:\n    \"\"\"Get all 'values' of the enum (name=value)\"\"\"\n    return tuple(member.value for member in cls)\n</code></pre>"},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum.BrokenEnumBase.keys","title":"keys","text":"<pre><code>keys() -&gt; tuple[str]\n</code></pre> <p>Get all 'keys' of the enum (key=value)</p> Source code in <code>Broken/Core/BrokenEnum.py</code> <pre><code>@classmethod\ndef keys(cls) -&gt; tuple[str]:\n    \"\"\"Get all 'keys' of the enum (key=value)\"\"\"\n    return tuple(member.name for member in cls)\n</code></pre>"},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum.BrokenEnumBase.items","title":"items","text":"<pre><code>items() -&gt; tuple[tuple[str, Any]]\n</code></pre> <p>Get the tuple of (name, value) of all members of the enum</p> Source code in <code>Broken/Core/BrokenEnum.py</code> <pre><code>@classmethod\ndef items(cls) -&gt; tuple[tuple[str, Any]]:\n    \"\"\"Get the tuple of (name, value) of all members of the enum\"\"\"\n    return tuple((member.name, member.value) for member in cls)\n</code></pre>"},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum.BrokenEnumBase.as_dict","title":"as_dict","text":"<pre><code>as_dict() -&gt; dict[str, Any]\n</code></pre> <p>Get the dictionary of all key=value of the enum</p> Source code in <code>Broken/Core/BrokenEnum.py</code> <pre><code>@classmethod\ndef as_dict(cls) -&gt; dict[str, Any]:\n    \"\"\"Get the dictionary of all key=value of the enum\"\"\"\n    return dict(cls.items())\n</code></pre>"},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum.BrokenEnumBase.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(index: int) -&gt; enum.Enum\n</code></pre> Source code in <code>Broken/Core/BrokenEnum.py</code> <pre><code>def __getitem__(self, index: int) -&gt; enum.Enum:\n    return self.members[index]\n</code></pre>"},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum.BrokenEnumBase.next","title":"next","text":"<pre><code>next(\n    value: Union[str, enum.Enum] = None, *, offset: int = 1\n) -&gt; Self\n</code></pre> <p>Get the next enum member defined in the class</p> Source code in <code>Broken/Core/BrokenEnum.py</code> <pre><code>@functools.lru_cache()\ndef next(self, value: Union[str, enum.Enum]=None, *, offset: int=1) -&gt; Self:\n    \"\"\"Get the next enum member defined in the class\"\"\"\n    cls   = type(self)\n    value = cls.get(value or self)\n    return cls.options()[(cls.options().index(value) + offset) % len(cls)]\n</code></pre>"},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum.BrokenEnumBase.__next__","title":"__next__","text":"<pre><code>__next__() -&gt; Self\n</code></pre> Source code in <code>Broken/Core/BrokenEnum.py</code> <pre><code>def __next__(self) -&gt; Self:\n    return self.next()\n</code></pre>"},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum.BrokenEnumBase.previous","title":"previous","text":"<pre><code>previous(\n    value: Union[str, enum.Enum] = None, *, offset: int = 1\n) -&gt; Self\n</code></pre> <p>Get the previous enum member defined in the class</p> Source code in <code>Broken/Core/BrokenEnum.py</code> <pre><code>@functools.lru_cache()\ndef previous(self, value: Union[str, enum.Enum]=None, *, offset: int=1) -&gt; Self:\n    \"\"\"Get the previous enum member defined in the class\"\"\"\n    cls   = type(self)\n    value = cls.get(value or self)\n    return cls.options()[(cls.options().index(value) - offset) % len(cls)]\n</code></pre>"},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum.BrokenEnumBase.field","title":"field","text":"<pre><code>field(**kwargs: dict[str, Any]) -&gt; attrs.Attribute\n</code></pre> <p>Get an attrs.field() with this option as default and Enum.get as converter</p> Source code in <code>Broken/Core/BrokenEnum.py</code> <pre><code>def field(self, **kwargs: dict[str, Any]) -&gt; attrs.Attribute:\n    \"\"\"Get an attrs.field() with this option as default and Enum.get as converter\"\"\"\n    return attrs.field(\n        default=self,\n        converter=type(self).get,\n        **kwargs\n    )\n</code></pre>"},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum.BrokenEnumBase.extend","title":"extend","text":"<pre><code>extend(name: str, value: Any) -&gt; Self\n</code></pre> <p>Dynamically extend the enum with a new member (name=value)</p> Source code in <code>Broken/Core/BrokenEnum.py</code> <pre><code>@classmethod\ndef extend(cls, name: str, value: Any) -&gt; Self:\n    \"\"\"Dynamically extend the enum with a new member (name=value)\"\"\"\n    raise NotImplementedError(\"This method is not implemented yet\")\n</code></pre>"},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum.BrokenEnum","title":"BrokenEnum","text":"<p>               Bases: <code>BrokenEnumBase</code>, <code>enum.Enum</code></p> Source code in <code>Broken/Core/BrokenEnum.py</code> <pre><code>class BrokenEnum(BrokenEnumBase, enum.Enum):\n    ...\n</code></pre>"},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum.MultiEnum","title":"MultiEnum","text":"<p>               Bases: <code>BrokenEnumBase</code>, <code>MultiValueEnum</code></p> Source code in <code>Broken/Core/BrokenEnum.py</code> <pre><code>class MultiEnum(BrokenEnumBase, MultiValueEnum):\n    ...\n</code></pre>"},{"location":"code/broken/core/brokenenum/#Broken.Core.BrokenEnum.FlagEnum","title":"FlagEnum","text":"<p>               Bases: <code>BrokenEnumBase</code>, <code>Flag</code></p> Source code in <code>Broken/Core/BrokenEnum.py</code> <pre><code>class FlagEnum(BrokenEnumBase, Flag):\n    ...\n</code></pre>"},{"location":"code/broken/core/brokenfastapi/","title":"File: <code>Broken/Core/BrokenFastAPI.py</code>","text":""},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI","title":"Broken.Core.BrokenFastAPI","text":""},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.Hosts","title":"Hosts","text":"Source code in <code>Broken/Core/BrokenFastAPI.py</code> <pre><code>class Hosts:\n    LOOPBACK: str = \"127.0.0.1\"\n    WILDCARD: str = \"0.0.0.0\"\n</code></pre>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.Hosts.LOOPBACK","title":"LOOPBACK","text":"<pre><code>LOOPBACK: str = '127.0.0.1'\n</code></pre>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.Hosts.WILDCARD","title":"WILDCARD","text":"<pre><code>WILDCARD: str = '0.0.0.0'\n</code></pre>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.DEFAULT_HOST","title":"DEFAULT_HOST","text":"<pre><code>DEFAULT_HOST: str = (\n    Hosts.WILDCARD\n    if BrokenPlatform.OnUnix\n    else Hosts.LOOPBACK\n)\n</code></pre>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.DEFAULT_PORT","title":"DEFAULT_PORT","text":"<pre><code>DEFAULT_PORT: int = 8000\n</code></pre>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.HostType","title":"HostType","text":"<pre><code>HostType = Annotated[\n    str,\n    Option(\n        \"--host\",\n        \"-h\",\n        help=\"Target Hostname to run the server on\",\n    ),\n]\n</code></pre>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.PortType","title":"PortType","text":"<pre><code>PortType = Annotated[\n    int,\n    Option(\n        \"--port\",\n        \"-p\",\n        help=\"Target Port to run the server on\",\n    ),\n]\n</code></pre>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.WorkersType","title":"WorkersType","text":"<pre><code>WorkersType = Annotated[\n    int,\n    Option(\n        \"--workers\",\n        \"-w\",\n        min=1,\n        help=\"Maximum number of simultaneous renders\",\n    ),\n]\n</code></pre>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.QueueType","title":"QueueType","text":"<pre><code>QueueType = Annotated[\n    int,\n    Option(\n        \"--queue\",\n        \"-q\",\n        min=1,\n        help=\"Maximum number of requests until 503 (back-pressure)\",\n    ),\n]\n</code></pre>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.BlockType","title":"BlockType","text":"<pre><code>BlockType = Annotated[\n    bool,\n    Option(\n        \"--block\",\n        \"-b\",\n        \" /--free\",\n        \" /-f\",\n        help=\"Block the current thread until the server stops\",\n    ),\n]\n</code></pre>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.BrokenAPI","title":"BrokenAPI","text":"Source code in <code>Broken/Core/BrokenFastAPI.py</code> <pre><code>@define\nclass BrokenAPI:\n    api: FastAPI = Factory(FastAPI)\n    \"\"\"The main FastAPI instance\"\"\"\n\n    host: str = DEFAULT_HOST\n    \"\"\"Hostname currently being used by the server\"\"\"\n\n    port: int = DEFAULT_PORT\n    \"\"\"Port currently being used by the server\"\"\"\n\n    # -------------------------------------------|\n    # Utilities\n\n    @property\n    def api_url(self) -&gt; str:\n        return f\"http://{self.host}:{self.port}\"\n\n    @property\n    def openapi(self) -&gt; dict:\n        return self.api.openapi()\n\n    @property\n    def openapi_json(self) -&gt; str:\n        return json.dumps(self.openapi, ensure_ascii=False)\n\n    # -------------------------------------------|\n    # Actions\n\n    def launch(self,\n        host: HostType=DEFAULT_HOST,\n        port: PortType=DEFAULT_PORT,\n        queue: QueueType=20,\n        block: BlockType=True,\n    ) -&gt; None:\n        \"\"\"Serve an instance of the api\"\"\"\n        self.host, self.port = (host, port)\n\n        # Proxy async converter\n        async def serve():\n            await uvicorn.Server(uvicorn.Config(\n                host=self.host, port=self.port,\n                app=self.api, loop=\"uvloop\",\n                limit_concurrency=queue,\n            )).serve()\n\n        # Start the server\n        BrokenWorker.thread(asyncio.run, serve())\n\n        # Hold main thread\n        while bool(block):\n            time.sleep(1)\n\n    # -------------------------------------------|\n    # Cloud providers\n\n    def runpod(self,\n        workers: WorkersType=3,\n        queue: QueueType=20,\n    ) -&gt; None:\n        \"\"\"Run a serverless instance at runpod.io\"\"\"\n        import runpod\n\n        # Use the cool features of the local server\n        BrokenAPI.launch(**locals(), block=False)\n\n        async def wrapper(config: dict) -&gt; dict:\n            response = (await self.render(config[\"input\"]))\n\n            # Convert video to base64 for json transportation\n            if any(type in response.media_type for type in (\"video\", \"image\")):\n                response.body = b64encode(response.body).decode(\"utf-8\")\n\n            return dict(\n                status_code=response.status_code,\n                media_type=response.media_type,\n                headers=response.headers,\n                content=response.body,\n            )\n\n        # Call the render route directly\n        runpod.serverless.start(dict(\n            handler=wrapper\n        ))\n</code></pre>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.BrokenAPI.api","title":"api","text":"<pre><code>api: FastAPI = Factory(FastAPI)\n</code></pre> <p>The main FastAPI instance</p>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.BrokenAPI.host","title":"host","text":"<pre><code>host: str = DEFAULT_HOST\n</code></pre> <p>Hostname currently being used by the server</p>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.BrokenAPI.port","title":"port","text":"<pre><code>port: int = DEFAULT_PORT\n</code></pre> <p>Port currently being used by the server</p>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.BrokenAPI.api_url","title":"api_url","text":"<pre><code>api_url: str\n</code></pre>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.BrokenAPI.openapi","title":"openapi","text":"<pre><code>openapi: dict\n</code></pre>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.BrokenAPI.openapi_json","title":"openapi_json","text":"<pre><code>openapi_json: str\n</code></pre>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.BrokenAPI.launch","title":"launch","text":"<pre><code>launch(\n    host: HostType = DEFAULT_HOST,\n    port: PortType = DEFAULT_PORT,\n    queue: QueueType = 20,\n    block: BlockType = True,\n) -&gt; None\n</code></pre> <p>Serve an instance of the api</p> Source code in <code>Broken/Core/BrokenFastAPI.py</code> <pre><code>def launch(self,\n    host: HostType=DEFAULT_HOST,\n    port: PortType=DEFAULT_PORT,\n    queue: QueueType=20,\n    block: BlockType=True,\n) -&gt; None:\n    \"\"\"Serve an instance of the api\"\"\"\n    self.host, self.port = (host, port)\n\n    # Proxy async converter\n    async def serve():\n        await uvicorn.Server(uvicorn.Config(\n            host=self.host, port=self.port,\n            app=self.api, loop=\"uvloop\",\n            limit_concurrency=queue,\n        )).serve()\n\n    # Start the server\n    BrokenWorker.thread(asyncio.run, serve())\n\n    # Hold main thread\n    while bool(block):\n        time.sleep(1)\n</code></pre>"},{"location":"code/broken/core/brokenfastapi/#Broken.Core.BrokenFastAPI.BrokenAPI.runpod","title":"runpod","text":"<pre><code>runpod(\n    workers: WorkersType = 3, queue: QueueType = 20\n) -&gt; None\n</code></pre> <p>Run a serverless instance at runpod.io</p> Source code in <code>Broken/Core/BrokenFastAPI.py</code> <pre><code>def runpod(self,\n    workers: WorkersType=3,\n    queue: QueueType=20,\n) -&gt; None:\n    \"\"\"Run a serverless instance at runpod.io\"\"\"\n    import runpod\n\n    # Use the cool features of the local server\n    BrokenAPI.launch(**locals(), block=False)\n\n    async def wrapper(config: dict) -&gt; dict:\n        response = (await self.render(config[\"input\"]))\n\n        # Convert video to base64 for json transportation\n        if any(type in response.media_type for type in (\"video\", \"image\")):\n            response.body = b64encode(response.body).decode(\"utf-8\")\n\n        return dict(\n            status_code=response.status_code,\n            media_type=response.media_type,\n            headers=response.headers,\n            content=response.body,\n        )\n\n    # Call the render route directly\n    runpod.serverless.start(dict(\n        handler=wrapper\n    ))\n</code></pre>"},{"location":"code/broken/core/brokenlogging/","title":"File: <code>Broken/Core/BrokenLogging.py</code>","text":""},{"location":"code/broken/core/brokenlogging/#Broken.Core.BrokenLogging","title":"Broken.Core.BrokenLogging","text":""},{"location":"code/broken/core/brokenlogging/#Broken.Core.BrokenLogging.console","title":"console","text":"<pre><code>console = rich.get_console()\n</code></pre>"},{"location":"code/broken/core/brokenlogging/#Broken.Core.BrokenLogging.BrokenLogging","title":"BrokenLogging","text":"<p>               Bases: <code>BrokenSingleton</code></p> Source code in <code>Broken/Core/BrokenLogging.py</code> <pre><code>class BrokenLogging(BrokenSingleton):\n    def __init__(self):\n        self.reset()\n\n    @staticmethod\n    def project() -&gt; str:\n        return Environment.get(\"BROKEN_APP_NAME\", \"Broken\")\n\n    @staticmethod\n    def set_project(name: str, *, force: bool=False) -&gt; None:\n        if (BrokenLogging.project() == \"Broken\") or force:\n            Environment.set(\"BROKEN_APP_NAME\", name)\n\n    def format(self, data: dict) -&gt; str:\n        when = time.absolute()\n        data[\"time\"] = f\"{int(when//60)}'{(when%60):06.3f}\"\n        data[\"project\"] = self.project()\n\n        # Simpler logging for non UTF or workflows\n        if Runtime.GitHub or Environment.flag(\"SIMPLE_LOGGING\", 0):\n            return (\"[{project}][{time}][{level:7}] {message}\").format(**data)\n\n        elif Environment.flag(\"PLAIN_LOGGING\", 0):\n            return (\"[{level:7}] {message}\").format(**data)\n\n        return (\n            f\"\u2502[dodger_blue3]{self.project()}[/]\u251c\"\n            \"\u2524[green]{time}[/]\u251c\"\n            \"\u2524[{level.icon}]{level:7}[/{level.icon}]\u2502 \"\n            \"\u25b8 {message}\"\n        ).format(**data)\n\n    @property\n    def level(self) -&gt; str:\n        return Environment.get(\"LOGLEVEL\", \"INFO\").upper()\n\n    @level.setter\n    def level(self, level: str) -&gt; None:\n        Environment.set(\"LOGLEVEL\", level.upper())\n        self.reset()\n\n    @property\n    def sink(self) -&gt; Callable:\n        if Runtime.GitHub:\n            return print\n        return rich.print\n\n    def reset(self) -&gt; None:\n        log.remove()\n        log.add(\n            sink=self.sink,\n            format=self.format,\n            level=Environment.get(\"LOGLEVEL\", \"INFO\").upper(),\n            colorize=False,\n            backtrace=True,\n            diagnose=True,\n            catch=True,\n        )\n        self._make_level(\"TRACE\", None, \"dark_turquoise\")\n        self._make_level(\"DEBUG\", None, \"turquoise4\")\n        self._make_level(\"INFO\", None, \"bright_white\")\n        self._make_level(\"NOTE\", 25, \"bright_blue\")\n        self._make_level(\"SPECIAL\", 25, \"bright_blue\")\n        self._make_level(\"TIP\", 25, \"dark_cyan\")\n        self._make_level(\"SUCCESS\", None, \"green\")\n        self._make_level(\"MINOR\", 25, \"grey42\")\n        self._make_level(\"SKIP\", 25, \"grey42\")\n        self._make_level(\"FIXME\", 25, \"cyan\")\n        self._make_level(\"TODO\", 25, \"dark_blue\")\n        self._make_level(\"WARNING\", None, \"yellow\")\n        self._make_level(\"ERROR\", None, \"red\")\n        self._make_level(\"CRITICAL\", None, \"red\")\n\n    def _make_level(self, level: str, loglevel: int=0, color: str=None) -&gt; None:\n        \"\"\"Create or update a loglevel `.{name.lower()}` on the logger\"\"\"\n        def wrapper(\n            *args: str,\n            dedent: bool=False,\n            echo: bool=True,\n        ) -&gt; str:\n            message = \" \".join(map(str, args))\n            if dedent:\n                message = textwrap.dedent(message)\n            if not echo:\n                return message\n            for line in message.splitlines():\n                log.log(level, line)\n            return message\n\n        # Assign log function to logger. Workaround to set icon=color\n        log.level(level, loglevel, icon=color)\n        setattr(log, level.lower(), wrapper)\n</code></pre>"},{"location":"code/broken/core/brokenlogging/#Broken.Core.BrokenLogging.BrokenLogging.__init__","title":"__init__","text":"<pre><code>__init__()\n</code></pre> Source code in <code>Broken/Core/BrokenLogging.py</code> <pre><code>def __init__(self):\n    self.reset()\n</code></pre>"},{"location":"code/broken/core/brokenlogging/#Broken.Core.BrokenLogging.BrokenLogging.project","title":"project","text":"<pre><code>project() -&gt; str\n</code></pre> Source code in <code>Broken/Core/BrokenLogging.py</code> <pre><code>@staticmethod\ndef project() -&gt; str:\n    return Environment.get(\"BROKEN_APP_NAME\", \"Broken\")\n</code></pre>"},{"location":"code/broken/core/brokenlogging/#Broken.Core.BrokenLogging.BrokenLogging.set_project","title":"set_project","text":"<pre><code>set_project(name: str, *, force: bool = False) -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenLogging.py</code> <pre><code>@staticmethod\ndef set_project(name: str, *, force: bool=False) -&gt; None:\n    if (BrokenLogging.project() == \"Broken\") or force:\n        Environment.set(\"BROKEN_APP_NAME\", name)\n</code></pre>"},{"location":"code/broken/core/brokenlogging/#Broken.Core.BrokenLogging.BrokenLogging.format","title":"format","text":"<pre><code>format(data: dict) -&gt; str\n</code></pre> Source code in <code>Broken/Core/BrokenLogging.py</code> <pre><code>def format(self, data: dict) -&gt; str:\n    when = time.absolute()\n    data[\"time\"] = f\"{int(when//60)}'{(when%60):06.3f}\"\n    data[\"project\"] = self.project()\n\n    # Simpler logging for non UTF or workflows\n    if Runtime.GitHub or Environment.flag(\"SIMPLE_LOGGING\", 0):\n        return (\"[{project}][{time}][{level:7}] {message}\").format(**data)\n\n    elif Environment.flag(\"PLAIN_LOGGING\", 0):\n        return (\"[{level:7}] {message}\").format(**data)\n\n    return (\n        f\"\u2502[dodger_blue3]{self.project()}[/]\u251c\"\n        \"\u2524[green]{time}[/]\u251c\"\n        \"\u2524[{level.icon}]{level:7}[/{level.icon}]\u2502 \"\n        \"\u25b8 {message}\"\n    ).format(**data)\n</code></pre>"},{"location":"code/broken/core/brokenlogging/#Broken.Core.BrokenLogging.BrokenLogging.level","title":"level","text":"<pre><code>level: str\n</code></pre>"},{"location":"code/broken/core/brokenlogging/#Broken.Core.BrokenLogging.BrokenLogging.sink","title":"sink","text":"<pre><code>sink: Callable\n</code></pre>"},{"location":"code/broken/core/brokenlogging/#Broken.Core.BrokenLogging.BrokenLogging.reset","title":"reset","text":"<pre><code>reset() -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenLogging.py</code> <pre><code>def reset(self) -&gt; None:\n    log.remove()\n    log.add(\n        sink=self.sink,\n        format=self.format,\n        level=Environment.get(\"LOGLEVEL\", \"INFO\").upper(),\n        colorize=False,\n        backtrace=True,\n        diagnose=True,\n        catch=True,\n    )\n    self._make_level(\"TRACE\", None, \"dark_turquoise\")\n    self._make_level(\"DEBUG\", None, \"turquoise4\")\n    self._make_level(\"INFO\", None, \"bright_white\")\n    self._make_level(\"NOTE\", 25, \"bright_blue\")\n    self._make_level(\"SPECIAL\", 25, \"bright_blue\")\n    self._make_level(\"TIP\", 25, \"dark_cyan\")\n    self._make_level(\"SUCCESS\", None, \"green\")\n    self._make_level(\"MINOR\", 25, \"grey42\")\n    self._make_level(\"SKIP\", 25, \"grey42\")\n    self._make_level(\"FIXME\", 25, \"cyan\")\n    self._make_level(\"TODO\", 25, \"dark_blue\")\n    self._make_level(\"WARNING\", None, \"yellow\")\n    self._make_level(\"ERROR\", None, \"red\")\n    self._make_level(\"CRITICAL\", None, \"red\")\n</code></pre>"},{"location":"code/broken/core/brokenpath/","title":"File: <code>Broken/Core/BrokenPath.py</code>","text":""},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath","title":"Broken.Core.BrokenPath","text":""},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.ShutilFormat","title":"ShutilFormat","text":"<p>               Bases: <code>BrokenEnum</code></p> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>class ShutilFormat(BrokenEnum):\n    Zip   = \"zip\"\n    Tar   = \"tar\"\n    TarGz = \"tar.gz\"\n    TarBz = \"tar.bz2\"\n    TarXz = \"tar.xz\"\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.ShutilFormat.Zip","title":"Zip","text":"<pre><code>Zip = 'zip'\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.ShutilFormat.Tar","title":"Tar","text":"<pre><code>Tar = 'tar'\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.ShutilFormat.TarGz","title":"TarGz","text":"<pre><code>TarGz = 'tar.gz'\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.ShutilFormat.TarBz","title":"TarBz","text":"<pre><code>TarBz = 'tar.bz2'\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.ShutilFormat.TarXz","title":"TarXz","text":"<pre><code>TarXz = 'tar.xz'\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath","title":"BrokenPath","text":"<p>               Bases: <code>StaticClass</code></p> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>class BrokenPath(StaticClass):\n\n    def get(*parts: Any,\n        absolute: bool=True,\n        exists: bool=False,\n        raises: bool=False,\n    ) -&gt; Optional[Path]:\n\n        # Return None if all parts are falsy\n        if not (parts := list(filter(None, parts))):\n            return None\n\n        # Create instance as normal\n        path = Path(*map(str, parts))\n\n        # Note that we do not want to .resolve() as having symlink paths _can_ be wanted\n        path = (path.expanduser().absolute() if absolute else path)\n\n        # Handle existence requirements\n        if ((exists or raises) and not path.exists()):\n            if raises:\n                raise FileNotFoundError(f\"Path ({path}) doesn't exist\")\n            return None\n\n        return path\n\n    def copy(src: Path, dst: Path, *, echo=True) -&gt; Path:\n        src, dst = BrokenPath.get(src), BrokenPath.get(dst)\n        BrokenPath.mkdir(dst.parent, echo=False)\n        if src.is_dir():\n            log.info(f\"Copying Directory ({src})\\n\u2192 ({dst})\", echo=echo)\n            shutil.copytree(src, dst)\n        else:\n            log.info(f\"Copying File ({src})\\n\u2192 ({dst})\", echo=echo)\n            shutil.copy2(src, dst)\n        return dst\n\n    def move(src: Path, dst: Path, *, echo=True) -&gt; Path:\n        src, dst = BrokenPath.get(src), BrokenPath.get(dst)\n        log.info(f\"Moving ({src})\\n\u2192 ({dst})\", echo=echo)\n        shutil.move(src, dst)\n        return dst\n\n    def remove(path: Path, *, confirm=False, echo=True) -&gt; Path:\n\n        # Already removed or doesn't exist\n        if not (path := BrokenPath.get(path)).exists():\n            return path\n\n        log.info(f\"Removing Path ({path})\", echo=echo)\n\n        # Safety: Must not be common\n        if path in (Path.cwd(), Path.home()):\n            log.error(f\"Avoided catastrophic failure by not removing ({path})\")\n            exit(1)\n\n        # Symlinks are safe to remove\n        if path.is_symlink():\n            path.unlink()\n            return path\n\n        from rich.prompt import Prompt\n\n        # Confirm removal: directory contains data\n        if confirm and Prompt.ask(\n            prompt=f\"\u2022 Confirm removing path ({path})\",\n            choices=[\"y\", \"n\"], default=\"n\",\n        ) == \"n\":\n            return path\n\n        # Remove the path\n        if path.is_dir():\n            shutil.rmtree(path, ignore_errors=True)\n        else:\n            path.unlink()\n\n        return path\n\n    def mkdir(path: Path, parent: bool=False, *, echo=True) -&gt; Path:\n        \"\"\"Creates a directory and its parents, fail safe\u2122\"\"\"\n        path = BrokenPath.get(path)\n        make = path.parent if parent else path\n        if make.exists():\n            log.success(f\"Directory ({make}) already exists\", echo=echo)\n            return path\n        log.info(f\"Creating directory {make}\", echo=echo)\n        make.mkdir(parents=True, exist_ok=True)\n        return path\n\n    def recreate(path: Path, *, echo=True) -&gt; Path:\n        \"\"\"Delete and re-create a directory\"\"\"\n        return BrokenPath.mkdir(BrokenPath.remove(path, echo=echo), echo=echo)\n\n    @contextlib.contextmanager\n    def pushd(path: Path, *, echo: bool=True) -&gt; Generator[Path, None, None]:\n        \"\"\"Change directory, then change back when done\"\"\"\n        path = BrokenPath.get(path)\n        cwd = os.getcwd()\n        log.minor(f\"Enter directory ({path})\", echo=echo)\n        os.chdir(path)\n        yield path\n        log.minor(f\"Leave directory ({path})\", echo=echo)\n        os.chdir(cwd)\n\n    def symlink(virtual: Path, real: Path, *, echo: bool=True) -&gt; Path:\n        \"\"\"\n        Symlink [virtual] -&gt; [real], `virtual` being the symlink file and `real` the true path\n\n        Args:\n            virtual (Path): Symlink path (file)\n            real (Path): Target path (real path)\n\n        Returns:\n            None if it fails, else `virtual` Path\n        \"\"\"\n        log.info(f\"Symlinking ({virtual})\\n\u2192 ({real})\", echo=echo)\n\n        # Return if already symlinked\n        if (BrokenPath.get(virtual) == BrokenPath.get(real)):\n            return virtual\n\n        # Make Virtual's parent directory\n        BrokenPath.mkdir(virtual.parent, echo=False)\n\n        # Remove old symlink if it points to a non existing directory\n        if virtual.is_symlink() and (not virtual.resolve().exists()):\n            virtual.unlink()\n\n        # Virtual doesn't exist, ok to create\n        elif not virtual.exists():\n            pass\n\n        # File exists and is a symlink - safe to remove\n        elif virtual.is_symlink():\n            virtual.unlink()\n\n        # Virtual is a directory and not empty\n        elif virtual.is_dir() and (not os.listdir(virtual)):\n            BrokenPath.remove(virtual, echo=False)\n\n        else:\n            if click.confirm('\\n'.join((\n                f\"Path ({virtual}) exists, but Broken wants to create a symlink to ({real})\",\n                \"\u2022 Confirm removing the 'virtual' path and continuing? (It might contain data or be a important symlink)\"\n            ))):\n                BrokenPath.remove(virtual, echo=False)\n            else:\n                return\n\n        try:\n            virtual.symlink_to(real)\n        except Exception as error:\n            if BrokenPlatform.OnWindows:\n                log.minor(\"Failed to create Symlink. Consider enabling 'Developer Mode' on Windows (https://rye.astral.sh/guide/faq/#windows-developer-mode)\")\n            else:\n                raise error\n\n        return virtual\n\n    def make_executable(path: Path, *, echo=True) -&gt; Path:\n        \"\"\"Make a file executable\"\"\"\n        if BrokenPlatform.OnUnix:\n            shell(\"chmod\", \"+x\", path, echo=echo)\n        elif BrokenPlatform.OnWindows:\n            shell(\"attrib\", \"+x\", path, echo=echo)\n        return path\n\n    def zip(path: Path, output: Path=None, *, format: ShutilFormat=\"zip\", echo: bool=True, **options) -&gt; Path:\n        format = ShutilFormat.get(format).value\n        output = BrokenPath.get(output or path).with_suffix(f\".{format}\")\n        path   = BrokenPath.get(path)\n        log.info(f\"Zipping ({path})\\n\u2192 ({output})\", echo=echo)\n        BrokenPath.remove(output, echo=echo)\n        shutil.make_archive(\n            base_name=output.with_suffix(\"\"),\n            format=format,\n            root_dir=path,\n            **options\n        )\n        return output\n\n    def zstd(path: Path, output: Path=None, *, remove: bool=False, echo: bool=True) -&gt; Path:\n        output = BrokenPath.get(output or path).with_suffix(\".zst\")\n        path   = BrokenPath.get(path)\n\n        import tarfile\n\n        import zstandard as zstd\n\n        with Halo(log.info(f\"Compressing ({path}) \u2192 ({output})\", echo=echo)):\n            with open(output, \"wb\") as compressed:\n                cctx = zstd.ZstdCompressor(level=3, threads=-1)\n                with cctx.stream_writer(compressed) as compressor:\n                    with tarfile.open(fileobj=compressor, mode=\"w|\") as tar:\n                        if path.is_dir():\n                            for file in path.rglob(\"*\"):\n                                tar.add(file, arcname=file.relative_to(path))\n                        else:\n                            tar.add(path, arcname=path.name)\n        if remove:\n            BrokenPath.remove(path, echo=echo)\n\n        return output\n\n    def gzip(path: Path, output: Path=None, *, remove: bool=False, echo: bool=True) -&gt; Path:\n        output = BrokenPath.get(output or path).with_suffix(\".tar.gz\")\n        path   = BrokenPath.get(path)\n\n        import tarfile\n\n        with Halo(log.info(f\"Compressing ({path}) \u2192 ({output})\", echo=echo)):\n            with tarfile.open(output, \"w:gz\") as tar:\n                if path.is_dir():\n                    for file in path.rglob(\"*\"):\n                        tar.add(file, arcname=file.relative_to(path))\n                else:\n                    tar.add(path, arcname=path.name)\n        if remove:\n            BrokenPath.remove(path, echo=echo)\n\n        return output\n\n    def merge_zips(*zips: Path, output: Path, echo: bool=True) -&gt; Path:\n        \"\"\"Merge multiple ZIP files into a single one\"\"\"\n        import zipfile\n        with zipfile.ZipFile(output, \"w\") as archive:\n            for path in flatten(zips):\n                with zipfile.ZipFile(path, \"r\") as other:\n                    for file in other.filelist:\n                        archive.writestr(file, other.read(file))\n        return output\n\n    def stem(path: Path) -&gt; str:\n        \"\"\"\n        Get the \"true stem\" of a path, as pathlib's only gets the last dot one\n        \u2022 \"/path/with/many.ext.ens.ions\" -&gt; \"many\" instead of \"many.ext.ens\"\n        \"\"\"\n        stem = Path(Path(path).stem)\n        while (stem := Path(stem).with_suffix(\"\")).suffix:\n            continue\n        return str(stem)\n\n    def sha256sum(data: Union[Path, str, bytes]) -&gt; Optional[str]:\n        \"\"\"Get the sha256sum of a file, directory or bytes\"\"\"\n\n        # Nibble the bytes !\n        if isinstance(data, bytes):\n            return hashlib.sha256(data).hexdigest()\n\n        # String or Path is a valid path\n        elif (path := BrokenPath.get(data)).exists():\n            with Halo(log.info(f\"Calculating sha256sum of ({path})\")):\n                if path.is_file():\n                    return hashlib.sha256(path.read_bytes()).hexdigest()\n\n                # Iterate on all files for low memory footprint\n                feed = hashlib.sha256()\n                for file in path.rglob(\"*\"):\n                    if not file.is_file():\n                        continue\n                    with open(file, \"rb\") as file:\n                        while (chunk := file.read(8192)):\n                            feed.update(chunk)\n                return feed.hexdigest()\n\n        elif isinstance(data, str):\n            return hashlib.sha256(data.encode(\"utf-8\")).hexdigest()\n\n        return\n\n    def extract(\n        path: Path,\n        output: Path=None,\n        *,\n        overwrite: bool=False,\n        echo: bool=True\n    ) -&gt; Path:\n        path, output = BrokenPath.get(path), BrokenPath.get(output)\n\n        # Extract to the same directory by default\n        if (output is None):\n            output = path.parent\n\n        # Add stem to the output as some archives might be flat\n        output /= BrokenPath.stem(path)\n\n        # Re-extract on order\n        if overwrite:\n            BrokenPath.remove(output)\n\n        # A file to skip if it exists, created after successful extraction\n        if (extract_flag := (output/\"BrokenPath.extract.ok\")).exists():\n            log.minor(f\"Already extracted ({output})\", echo=echo)\n        else:\n            # Show progress as this might take a while on slower IOs\n            log.info(f\"Extracting ({path})\\n\u2192 ({output})\", echo=echo)\n            with Halo(\"Extracting archive..\"):\n                shutil.unpack_archive(path, output)\n            extract_flag.touch()\n\n        return output\n\n    def url_filename(url: str) -&gt; Path:\n        return Path(url.split(\"#\")[0].split(\"?\")[0].split(\"/\")[-1])\n\n    def download(\n        url: str,\n        output: Path=None,\n        *,\n        size_check: bool=True,\n        chunk: int=1024,\n        echo: bool=True\n    ) -&gt; Optional[Path]:\n        \"\"\"\n        Note: If the output is a directory, the url's file name will be appended to it\n        Note: The output will default to Broken Project's Download directory\n        \"\"\"\n\n        # Link must be valid\n        if not validators.url(url):\n            import click\n            if not click.confirm(log.error(f\"The following string doesn't look like a valid download URL on validator's eyes\\n\u2022 ({url})\\nContinue normally?\")):\n                return None\n\n        # Default to Broken's Download directory\n        if (output is None):\n            output = Broken.BROKEN.DIRECTORIES.DOWNLOADS\n\n        # Append url's file name to the output path\n        if (output := BrokenPath.get(output)).is_dir():\n            output /= BrokenPath.url_filename(url)\n\n        log.info(f\"Downloading\\n\u2022 URL:  ({url})\\n\u2022 Path: ({output})\", echo=echo)\n\n        # Without size check, the existence of the file is enough\n        if (not size_check) and output.exists():\n            log.minor(\"\u2022 File exists and Size check was skipped\", echo=echo)\n            return None\n\n        try:\n            import requests\n            response = requests.get(url, stream=True, headers={\"Accept-Encoding\": None})\n        except requests.exceptions.RequestException as error:\n            log.error(f\"\u2022 Failed to download: {error}\", echo=echo)\n            # Note: Return output as it might be downloaded but we're without internet\n            return output\n\n        # Note: The length header is not always present, if that, just check for existence\n        if not (expected_size := int(response.headers.get('content-length', 0))):\n            log.minor(\"The Download doesn't advertise a size, just checking for existence\", echo=echo)\n            if output.exists():\n                return output\n\n        # The file might already be (partially) downloaded\n        if (expected_size and size_check) and output.exists():\n            if (output.stat().st_size == expected_size):\n                return output\n            if (len(output.read_bytes()) == expected_size):\n                return output\n            log.warning(\"\u2022 Wrong Download size\", echo=echo)\n\n        log.info(\"Downloading\", echo=echo)\n\n        # It is binary prefix, right? kibi, mebi, gibi, etc. as we're dealing with raw bytes\n        with open(output, \"wb\") as file, tqdm.tqdm(\n            desc=f\"Downloading ({output.name})\",\n            total=expected_size, unit=\"iB\", unit_scale=True, unit_divisor=1024,\n            mininterval=1/30, maxinterval=0.5, leave=False\n        ) as progress:\n            for data in response.iter_content(chunk_size=chunk):\n                progress.update(file.write(data))\n\n        # Url was invalid or something\n        if (response.status_code != 200):\n            log.error(f\"Failed to Download File at ({url}):\", echo=echo)\n            log.error(f\"\u2022 HTTP Error: {response.status_code}\", echo=echo)\n            return\n\n        # Wrong downloaded and expected size\n        elif (expected_size and size_check) and (output.stat().st_size != expected_size):\n            log.error(f\"File ({output}) was not downloaded correctly ({output.stat().st_size} != {expected_size})\", echo=echo)\n            return\n\n        log.success(f\"Downloaded file ({output}) from ({url})\", echo=echo)\n        return output\n\n    def redirect(url: str) -&gt; str:\n        import requests\n        return requests.head(url, allow_redirects=True).url\n\n    def get_external(\n        url: str, *,\n        subdir: str=\"\",\n        redirect: bool=False,\n        echo: bool=True\n    ) -&gt; Path:\n        url  = BrokenPath.redirect(url) if redirect else url\n        file = BrokenPath.url_filename(denum(url))\n\n        # Is this file a .zip, .tar, etc..?\n        ARCHIVE = any((str(file).endswith(ext) for ext in ShutilFormat.values()))\n\n        # File is some known type, move to their own external directory\n        if bool(subdir):\n            directory = Broken.BROKEN.DIRECTORIES.EXTERNALS/subdir\n        elif ARCHIVE:\n            directory = Broken.BROKEN.DIRECTORIES.EXTERNAL_ARCHIVES\n        elif (file.suffix in FileExtensions.Audio):\n            directory = Broken.BROKEN.DIRECTORIES.EXTERNAL_AUDIO\n        elif (file.suffix in FileExtensions.Image):\n            directory = Broken.BROKEN.DIRECTORIES.EXTERNAL_IMAGES\n        elif (file.suffix in FileExtensions.Font):\n            directory = Broken.BROKEN.DIRECTORIES.EXTERNAL_FONTS\n        elif (file.suffix in FileExtensions.Soundfont):\n            directory = Broken.BROKEN.DIRECTORIES.EXTERNAL_SOUNDFONTS\n        elif (file.suffix in FileExtensions.Midi):\n            directory = Broken.BROKEN.DIRECTORIES.EXTERNAL_MIDIS\n        else:\n            directory = Broken.BROKEN.DIRECTORIES.EXTERNALS\n\n        # Download to target directory, avoiding a move/copy, be known on future calls\n        if not ARCHIVE:\n            directory = (directory/subdir/file.name)\n\n        # Finally download the file\n        file = BrokenPath.download(denum(url), directory, echo=echo)\n\n        # Maybe extract the downloaded file\n        if ARCHIVE:\n            file = BrokenPath.extract(file, echo=echo)\n\n        return BrokenPath.add_to_path(path=file, recurse=True, echo=echo)\n\n    def which(name: str) -&gt; Optional[Path]:\n        BrokenPath.update_externals_path()\n        return BrokenPath.get(shutil.which(name))\n\n    def update_externals_path(path: Path=None, *, echo: bool=True) -&gt; Optional[Path]:\n        path = (path or Broken.BROKEN.DIRECTORIES.EXTERNALS)\n        return BrokenPath.add_to_path(path, recurse=True, echo=echo)\n\n    def on_path(path: Path) -&gt; bool:\n        \"\"\"Check if a path is on PATH, works with symlinks\"\"\"\n        return (Path(path) in map(Path, Environment.get(\"PATH\", \"\").split(os.pathsep)))\n\n    def add_to_path(\n        path: Path,\n        *,\n        recurse: bool=False,\n        persistent: bool=False,\n        prepend: bool=True,\n        echo: bool=True\n    ) -&gt; Path:\n        \"\"\"\n        Add a path, recursively or not, to System's Path or this Python process's Path\n\n        Args:\n            recurse: Also add all subdirectories of the given path\n            persistent: Use 'userpath' package to add to the Shell's or Registry PATH\n            preferential: Prepends the path for less priority on system binaries\n\n        Returns:\n            The Path argument itself\n        \"\"\"\n        original = path = BrokenPath.get(path)\n\n        if (path.is_file()):\n            path = path.parent\n            recurse = False\n\n        # Can't recurse on non existing directories\n        if (not path.exists()) and recurse:\n            log.warning(f\"Not adding to PATH as directory doesn't exist ({path})\", echo=echo)\n            return path\n\n        log.debug(f\"Adding to Path (Recursively: {recurse}, Persistent: {persistent}): ({path})\", echo=echo)\n\n        for other in list(path.rglob(\"*\") if recurse else []) + [path]:\n\n            # Skip conditions\n            if other.is_file():\n                continue\n            if BrokenPath.on_path(other):\n                continue\n\n            # Actual logic\n            if persistent:\n                import userpath\n                userpath.append(str(other))\n            else:\n                if prepend:\n                    log.debug(f\"\u2022 Prepending: ({other})\", echo=echo)\n                    Environment.set(\"PATH\", str(other) + os.pathsep + Environment.get(\"PATH\"))\n                    sys.path.insert(0, str(other))\n                else:\n                    log.debug(f\"\u2022 Appending: ({other})\", echo=echo)\n                    Environment.set(\"PATH\", Environment.get(\"PATH\") + os.pathsep + str(other))\n                    sys.path.append(str(other))\n\n        return original\n\n    @staticmethod\n    def directories(path: Union[Path, Iterable]) -&gt; Iterable[Path]:\n        if isinstance(path, Path):\n            path = Path(path).glob(\"*\")\n        for item in map(Path, path):\n            if item.is_dir():\n                yield item\n\n    @staticmethod\n    def files(path: Union[Path, Iterable]) -&gt; Iterable[Path]:\n        if isinstance(path, Path):\n            path = Path(path).glob(\"*\")\n        for item in map(Path, path):\n            if item.is_file():\n                yield item\n\n    @staticmethod\n    def delete_old_files(path: Path, maximum: int=20) -&gt; None:\n        files = list(os.scandir(path))\n\n        if (overflow := (len(files) - maximum)) &gt; 0:\n            files = sorted(files, key=os.path.getmtime)\n\n            for file in itertools.islice(files, overflow):\n                os.unlink(file.path)\n\n    # # Specific / \"Utils\"\n\n    def explore(path: Path):\n        \"\"\"Opens a path in the file explorer\"\"\"\n        path = Path(path)\n        if path.is_file():\n            path = path.parent\n        if BrokenPlatform.OnWindows:\n            os.startfile(str(path))\n        elif BrokenPlatform.OnLinux:\n            shell(\"xdg-open\", path, Popen=True)\n        elif BrokenPlatform.OnMacOS:\n            shell(\"open\", path, Popen=True)\n\n    class Windows:\n        class Magic:\n            \"\"\"Values got from https://learn.microsoft.com/en-us/previous-versions/windows/embedded/aa453707(v=msdn.10)\"\"\"\n            Documents: int = 0x05\n            Music:     int = 0x0D\n            Video:     int = 0x0E\n            Desktop:   int = 0x10\n            Roaming:   int = 0x1A\n            Local:     int = 0x1C\n            Pictures:  int = 0x27\n            Home:      int = 0x28\n\n        class Type(Enum):\n            Current = 0\n            Default = 1\n\n        @staticmethod\n        def get(csidl: int, *, type: Type=Type.Current) -&gt; Path:\n            if (os.name != \"nt\"):\n                raise RuntimeError(\"BrokenPath.Windows only makes sense on Windows\")\n            buffer = ctypes.create_unicode_buffer(ctypes.wintypes.MAX_PATH)\n            ctypes.windll.shell32.SHGetFolderPathW(None, csidl, None, type.value, buffer)\n            return Path(buffer.value)\n\n        @functools.lru_cache\n        def Documents(*, type: Type=Type.Current) -&gt; Path:\n            return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Documents, type=type)\n\n        @functools.lru_cache\n        def Music(*, type: Type=Type.Current) -&gt; Path:\n            return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Music, type=type)\n\n        @functools.lru_cache\n        def Video(*, type: Type=Type.Current) -&gt; Path:\n            return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Video, type=type)\n\n        @functools.lru_cache\n        def Desktop(*, type: Type=Type.Current) -&gt; Path:\n            return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Desktop, type=type)\n\n        @functools.lru_cache\n        def Roaming(*, type: Type=Type.Current) -&gt; Path:\n            return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Roaming, type=type)\n\n        @functools.lru_cache\n        def Local(*, type: Type=Type.Current) -&gt; Path:\n            return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Local, type=type)\n\n        @functools.lru_cache\n        def Pictures(*, type: Type=Type.Current) -&gt; Path:\n            return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Pictures, type=type)\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.get","title":"get","text":"<pre><code>get(\n    *parts: Any,\n    absolute: bool = True,\n    exists: bool = False,\n    raises: bool = False\n) -&gt; Optional[Path]\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def get(*parts: Any,\n    absolute: bool=True,\n    exists: bool=False,\n    raises: bool=False,\n) -&gt; Optional[Path]:\n\n    # Return None if all parts are falsy\n    if not (parts := list(filter(None, parts))):\n        return None\n\n    # Create instance as normal\n    path = Path(*map(str, parts))\n\n    # Note that we do not want to .resolve() as having symlink paths _can_ be wanted\n    path = (path.expanduser().absolute() if absolute else path)\n\n    # Handle existence requirements\n    if ((exists or raises) and not path.exists()):\n        if raises:\n            raise FileNotFoundError(f\"Path ({path}) doesn't exist\")\n        return None\n\n    return path\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.copy","title":"copy","text":"<pre><code>copy(src: Path, dst: Path, *, echo=True) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def copy(src: Path, dst: Path, *, echo=True) -&gt; Path:\n    src, dst = BrokenPath.get(src), BrokenPath.get(dst)\n    BrokenPath.mkdir(dst.parent, echo=False)\n    if src.is_dir():\n        log.info(f\"Copying Directory ({src})\\n\u2192 ({dst})\", echo=echo)\n        shutil.copytree(src, dst)\n    else:\n        log.info(f\"Copying File ({src})\\n\u2192 ({dst})\", echo=echo)\n        shutil.copy2(src, dst)\n    return dst\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.move","title":"move","text":"<pre><code>move(src: Path, dst: Path, *, echo=True) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def move(src: Path, dst: Path, *, echo=True) -&gt; Path:\n    src, dst = BrokenPath.get(src), BrokenPath.get(dst)\n    log.info(f\"Moving ({src})\\n\u2192 ({dst})\", echo=echo)\n    shutil.move(src, dst)\n    return dst\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.remove","title":"remove","text":"<pre><code>remove(path: Path, *, confirm=False, echo=True) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def remove(path: Path, *, confirm=False, echo=True) -&gt; Path:\n\n    # Already removed or doesn't exist\n    if not (path := BrokenPath.get(path)).exists():\n        return path\n\n    log.info(f\"Removing Path ({path})\", echo=echo)\n\n    # Safety: Must not be common\n    if path in (Path.cwd(), Path.home()):\n        log.error(f\"Avoided catastrophic failure by not removing ({path})\")\n        exit(1)\n\n    # Symlinks are safe to remove\n    if path.is_symlink():\n        path.unlink()\n        return path\n\n    from rich.prompt import Prompt\n\n    # Confirm removal: directory contains data\n    if confirm and Prompt.ask(\n        prompt=f\"\u2022 Confirm removing path ({path})\",\n        choices=[\"y\", \"n\"], default=\"n\",\n    ) == \"n\":\n        return path\n\n    # Remove the path\n    if path.is_dir():\n        shutil.rmtree(path, ignore_errors=True)\n    else:\n        path.unlink()\n\n    return path\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.mkdir","title":"mkdir","text":"<pre><code>mkdir(\n    path: Path, parent: bool = False, *, echo=True\n) -&gt; Path\n</code></pre> <p>Creates a directory and its parents, fail safe\u2122</p> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def mkdir(path: Path, parent: bool=False, *, echo=True) -&gt; Path:\n    \"\"\"Creates a directory and its parents, fail safe\u2122\"\"\"\n    path = BrokenPath.get(path)\n    make = path.parent if parent else path\n    if make.exists():\n        log.success(f\"Directory ({make}) already exists\", echo=echo)\n        return path\n    log.info(f\"Creating directory {make}\", echo=echo)\n    make.mkdir(parents=True, exist_ok=True)\n    return path\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.recreate","title":"recreate","text":"<pre><code>recreate(path: Path, *, echo=True) -&gt; Path\n</code></pre> <p>Delete and re-create a directory</p> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def recreate(path: Path, *, echo=True) -&gt; Path:\n    \"\"\"Delete and re-create a directory\"\"\"\n    return BrokenPath.mkdir(BrokenPath.remove(path, echo=echo), echo=echo)\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.pushd","title":"pushd","text":"<pre><code>pushd(\n    path: Path, *, echo: bool = True\n) -&gt; Generator[Path, None, None]\n</code></pre> <p>Change directory, then change back when done</p> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>@contextlib.contextmanager\ndef pushd(path: Path, *, echo: bool=True) -&gt; Generator[Path, None, None]:\n    \"\"\"Change directory, then change back when done\"\"\"\n    path = BrokenPath.get(path)\n    cwd = os.getcwd()\n    log.minor(f\"Enter directory ({path})\", echo=echo)\n    os.chdir(path)\n    yield path\n    log.minor(f\"Leave directory ({path})\", echo=echo)\n    os.chdir(cwd)\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.symlink","title":"symlink","text":"<pre><code>symlink(\n    virtual: Path, real: Path, *, echo: bool = True\n) -&gt; Path\n</code></pre> <p>Symlink [virtual] -&gt; [real], <code>virtual</code> being the symlink file and <code>real</code> the true path</p> <p>Parameters:</p> <ul> <li> <code>virtual</code>               (<code>Path</code>)           \u2013            <p>Symlink path (file)</p> </li> <li> <code>real</code>               (<code>Path</code>)           \u2013            <p>Target path (real path)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Path</code>           \u2013            <p>None if it fails, else <code>virtual</code> Path</p> </li> </ul> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def symlink(virtual: Path, real: Path, *, echo: bool=True) -&gt; Path:\n    \"\"\"\n    Symlink [virtual] -&gt; [real], `virtual` being the symlink file and `real` the true path\n\n    Args:\n        virtual (Path): Symlink path (file)\n        real (Path): Target path (real path)\n\n    Returns:\n        None if it fails, else `virtual` Path\n    \"\"\"\n    log.info(f\"Symlinking ({virtual})\\n\u2192 ({real})\", echo=echo)\n\n    # Return if already symlinked\n    if (BrokenPath.get(virtual) == BrokenPath.get(real)):\n        return virtual\n\n    # Make Virtual's parent directory\n    BrokenPath.mkdir(virtual.parent, echo=False)\n\n    # Remove old symlink if it points to a non existing directory\n    if virtual.is_symlink() and (not virtual.resolve().exists()):\n        virtual.unlink()\n\n    # Virtual doesn't exist, ok to create\n    elif not virtual.exists():\n        pass\n\n    # File exists and is a symlink - safe to remove\n    elif virtual.is_symlink():\n        virtual.unlink()\n\n    # Virtual is a directory and not empty\n    elif virtual.is_dir() and (not os.listdir(virtual)):\n        BrokenPath.remove(virtual, echo=False)\n\n    else:\n        if click.confirm('\\n'.join((\n            f\"Path ({virtual}) exists, but Broken wants to create a symlink to ({real})\",\n            \"\u2022 Confirm removing the 'virtual' path and continuing? (It might contain data or be a important symlink)\"\n        ))):\n            BrokenPath.remove(virtual, echo=False)\n        else:\n            return\n\n    try:\n        virtual.symlink_to(real)\n    except Exception as error:\n        if BrokenPlatform.OnWindows:\n            log.minor(\"Failed to create Symlink. Consider enabling 'Developer Mode' on Windows (https://rye.astral.sh/guide/faq/#windows-developer-mode)\")\n        else:\n            raise error\n\n    return virtual\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.make_executable","title":"make_executable","text":"<pre><code>make_executable(path: Path, *, echo=True) -&gt; Path\n</code></pre> <p>Make a file executable</p> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def make_executable(path: Path, *, echo=True) -&gt; Path:\n    \"\"\"Make a file executable\"\"\"\n    if BrokenPlatform.OnUnix:\n        shell(\"chmod\", \"+x\", path, echo=echo)\n    elif BrokenPlatform.OnWindows:\n        shell(\"attrib\", \"+x\", path, echo=echo)\n    return path\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.zip","title":"zip","text":"<pre><code>zip(\n    path: Path,\n    output: Path = None,\n    *,\n    format: ShutilFormat = \"zip\",\n    echo: bool = True,\n    **options\n) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def zip(path: Path, output: Path=None, *, format: ShutilFormat=\"zip\", echo: bool=True, **options) -&gt; Path:\n    format = ShutilFormat.get(format).value\n    output = BrokenPath.get(output or path).with_suffix(f\".{format}\")\n    path   = BrokenPath.get(path)\n    log.info(f\"Zipping ({path})\\n\u2192 ({output})\", echo=echo)\n    BrokenPath.remove(output, echo=echo)\n    shutil.make_archive(\n        base_name=output.with_suffix(\"\"),\n        format=format,\n        root_dir=path,\n        **options\n    )\n    return output\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.zstd","title":"zstd","text":"<pre><code>zstd(\n    path: Path,\n    output: Path = None,\n    *,\n    remove: bool = False,\n    echo: bool = True\n) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def zstd(path: Path, output: Path=None, *, remove: bool=False, echo: bool=True) -&gt; Path:\n    output = BrokenPath.get(output or path).with_suffix(\".zst\")\n    path   = BrokenPath.get(path)\n\n    import tarfile\n\n    import zstandard as zstd\n\n    with Halo(log.info(f\"Compressing ({path}) \u2192 ({output})\", echo=echo)):\n        with open(output, \"wb\") as compressed:\n            cctx = zstd.ZstdCompressor(level=3, threads=-1)\n            with cctx.stream_writer(compressed) as compressor:\n                with tarfile.open(fileobj=compressor, mode=\"w|\") as tar:\n                    if path.is_dir():\n                        for file in path.rglob(\"*\"):\n                            tar.add(file, arcname=file.relative_to(path))\n                    else:\n                        tar.add(path, arcname=path.name)\n    if remove:\n        BrokenPath.remove(path, echo=echo)\n\n    return output\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.gzip","title":"gzip","text":"<pre><code>gzip(\n    path: Path,\n    output: Path = None,\n    *,\n    remove: bool = False,\n    echo: bool = True\n) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def gzip(path: Path, output: Path=None, *, remove: bool=False, echo: bool=True) -&gt; Path:\n    output = BrokenPath.get(output or path).with_suffix(\".tar.gz\")\n    path   = BrokenPath.get(path)\n\n    import tarfile\n\n    with Halo(log.info(f\"Compressing ({path}) \u2192 ({output})\", echo=echo)):\n        with tarfile.open(output, \"w:gz\") as tar:\n            if path.is_dir():\n                for file in path.rglob(\"*\"):\n                    tar.add(file, arcname=file.relative_to(path))\n            else:\n                tar.add(path, arcname=path.name)\n    if remove:\n        BrokenPath.remove(path, echo=echo)\n\n    return output\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.merge_zips","title":"merge_zips","text":"<pre><code>merge_zips(\n    *zips: Path, output: Path, echo: bool = True\n) -&gt; Path\n</code></pre> <p>Merge multiple ZIP files into a single one</p> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def merge_zips(*zips: Path, output: Path, echo: bool=True) -&gt; Path:\n    \"\"\"Merge multiple ZIP files into a single one\"\"\"\n    import zipfile\n    with zipfile.ZipFile(output, \"w\") as archive:\n        for path in flatten(zips):\n            with zipfile.ZipFile(path, \"r\") as other:\n                for file in other.filelist:\n                    archive.writestr(file, other.read(file))\n    return output\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.stem","title":"stem","text":"<pre><code>stem(path: Path) -&gt; str\n</code></pre> <p>Get the \"true stem\" of a path, as pathlib's only gets the last dot one \u2022 \"/path/with/many.ext.ens.ions\" -&gt; \"many\" instead of \"many.ext.ens\"</p> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def stem(path: Path) -&gt; str:\n    \"\"\"\n    Get the \"true stem\" of a path, as pathlib's only gets the last dot one\n    \u2022 \"/path/with/many.ext.ens.ions\" -&gt; \"many\" instead of \"many.ext.ens\"\n    \"\"\"\n    stem = Path(Path(path).stem)\n    while (stem := Path(stem).with_suffix(\"\")).suffix:\n        continue\n    return str(stem)\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.sha256sum","title":"sha256sum","text":"<pre><code>sha256sum(data: Union[Path, str, bytes]) -&gt; Optional[str]\n</code></pre> <p>Get the sha256sum of a file, directory or bytes</p> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def sha256sum(data: Union[Path, str, bytes]) -&gt; Optional[str]:\n    \"\"\"Get the sha256sum of a file, directory or bytes\"\"\"\n\n    # Nibble the bytes !\n    if isinstance(data, bytes):\n        return hashlib.sha256(data).hexdigest()\n\n    # String or Path is a valid path\n    elif (path := BrokenPath.get(data)).exists():\n        with Halo(log.info(f\"Calculating sha256sum of ({path})\")):\n            if path.is_file():\n                return hashlib.sha256(path.read_bytes()).hexdigest()\n\n            # Iterate on all files for low memory footprint\n            feed = hashlib.sha256()\n            for file in path.rglob(\"*\"):\n                if not file.is_file():\n                    continue\n                with open(file, \"rb\") as file:\n                    while (chunk := file.read(8192)):\n                        feed.update(chunk)\n            return feed.hexdigest()\n\n    elif isinstance(data, str):\n        return hashlib.sha256(data.encode(\"utf-8\")).hexdigest()\n\n    return\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.extract","title":"extract","text":"<pre><code>extract(\n    path: Path,\n    output: Path = None,\n    *,\n    overwrite: bool = False,\n    echo: bool = True\n) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def extract(\n    path: Path,\n    output: Path=None,\n    *,\n    overwrite: bool=False,\n    echo: bool=True\n) -&gt; Path:\n    path, output = BrokenPath.get(path), BrokenPath.get(output)\n\n    # Extract to the same directory by default\n    if (output is None):\n        output = path.parent\n\n    # Add stem to the output as some archives might be flat\n    output /= BrokenPath.stem(path)\n\n    # Re-extract on order\n    if overwrite:\n        BrokenPath.remove(output)\n\n    # A file to skip if it exists, created after successful extraction\n    if (extract_flag := (output/\"BrokenPath.extract.ok\")).exists():\n        log.minor(f\"Already extracted ({output})\", echo=echo)\n    else:\n        # Show progress as this might take a while on slower IOs\n        log.info(f\"Extracting ({path})\\n\u2192 ({output})\", echo=echo)\n        with Halo(\"Extracting archive..\"):\n            shutil.unpack_archive(path, output)\n        extract_flag.touch()\n\n    return output\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.url_filename","title":"url_filename","text":"<pre><code>url_filename(url: str) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def url_filename(url: str) -&gt; Path:\n    return Path(url.split(\"#\")[0].split(\"?\")[0].split(\"/\")[-1])\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.download","title":"download","text":"<pre><code>download(\n    url: str,\n    output: Path = None,\n    *,\n    size_check: bool = True,\n    chunk: int = 1024,\n    echo: bool = True\n) -&gt; Optional[Path]\n</code></pre> <p>Note: If the output is a directory, the url's file name will be appended to it Note: The output will default to Broken Project's Download directory</p> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def download(\n    url: str,\n    output: Path=None,\n    *,\n    size_check: bool=True,\n    chunk: int=1024,\n    echo: bool=True\n) -&gt; Optional[Path]:\n    \"\"\"\n    Note: If the output is a directory, the url's file name will be appended to it\n    Note: The output will default to Broken Project's Download directory\n    \"\"\"\n\n    # Link must be valid\n    if not validators.url(url):\n        import click\n        if not click.confirm(log.error(f\"The following string doesn't look like a valid download URL on validator's eyes\\n\u2022 ({url})\\nContinue normally?\")):\n            return None\n\n    # Default to Broken's Download directory\n    if (output is None):\n        output = Broken.BROKEN.DIRECTORIES.DOWNLOADS\n\n    # Append url's file name to the output path\n    if (output := BrokenPath.get(output)).is_dir():\n        output /= BrokenPath.url_filename(url)\n\n    log.info(f\"Downloading\\n\u2022 URL:  ({url})\\n\u2022 Path: ({output})\", echo=echo)\n\n    # Without size check, the existence of the file is enough\n    if (not size_check) and output.exists():\n        log.minor(\"\u2022 File exists and Size check was skipped\", echo=echo)\n        return None\n\n    try:\n        import requests\n        response = requests.get(url, stream=True, headers={\"Accept-Encoding\": None})\n    except requests.exceptions.RequestException as error:\n        log.error(f\"\u2022 Failed to download: {error}\", echo=echo)\n        # Note: Return output as it might be downloaded but we're without internet\n        return output\n\n    # Note: The length header is not always present, if that, just check for existence\n    if not (expected_size := int(response.headers.get('content-length', 0))):\n        log.minor(\"The Download doesn't advertise a size, just checking for existence\", echo=echo)\n        if output.exists():\n            return output\n\n    # The file might already be (partially) downloaded\n    if (expected_size and size_check) and output.exists():\n        if (output.stat().st_size == expected_size):\n            return output\n        if (len(output.read_bytes()) == expected_size):\n            return output\n        log.warning(\"\u2022 Wrong Download size\", echo=echo)\n\n    log.info(\"Downloading\", echo=echo)\n\n    # It is binary prefix, right? kibi, mebi, gibi, etc. as we're dealing with raw bytes\n    with open(output, \"wb\") as file, tqdm.tqdm(\n        desc=f\"Downloading ({output.name})\",\n        total=expected_size, unit=\"iB\", unit_scale=True, unit_divisor=1024,\n        mininterval=1/30, maxinterval=0.5, leave=False\n    ) as progress:\n        for data in response.iter_content(chunk_size=chunk):\n            progress.update(file.write(data))\n\n    # Url was invalid or something\n    if (response.status_code != 200):\n        log.error(f\"Failed to Download File at ({url}):\", echo=echo)\n        log.error(f\"\u2022 HTTP Error: {response.status_code}\", echo=echo)\n        return\n\n    # Wrong downloaded and expected size\n    elif (expected_size and size_check) and (output.stat().st_size != expected_size):\n        log.error(f\"File ({output}) was not downloaded correctly ({output.stat().st_size} != {expected_size})\", echo=echo)\n        return\n\n    log.success(f\"Downloaded file ({output}) from ({url})\", echo=echo)\n    return output\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.redirect","title":"redirect","text":"<pre><code>redirect(url: str) -&gt; str\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def redirect(url: str) -&gt; str:\n    import requests\n    return requests.head(url, allow_redirects=True).url\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.get_external","title":"get_external","text":"<pre><code>get_external(\n    url: str,\n    *,\n    subdir: str = \"\",\n    redirect: bool = False,\n    echo: bool = True\n) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def get_external(\n    url: str, *,\n    subdir: str=\"\",\n    redirect: bool=False,\n    echo: bool=True\n) -&gt; Path:\n    url  = BrokenPath.redirect(url) if redirect else url\n    file = BrokenPath.url_filename(denum(url))\n\n    # Is this file a .zip, .tar, etc..?\n    ARCHIVE = any((str(file).endswith(ext) for ext in ShutilFormat.values()))\n\n    # File is some known type, move to their own external directory\n    if bool(subdir):\n        directory = Broken.BROKEN.DIRECTORIES.EXTERNALS/subdir\n    elif ARCHIVE:\n        directory = Broken.BROKEN.DIRECTORIES.EXTERNAL_ARCHIVES\n    elif (file.suffix in FileExtensions.Audio):\n        directory = Broken.BROKEN.DIRECTORIES.EXTERNAL_AUDIO\n    elif (file.suffix in FileExtensions.Image):\n        directory = Broken.BROKEN.DIRECTORIES.EXTERNAL_IMAGES\n    elif (file.suffix in FileExtensions.Font):\n        directory = Broken.BROKEN.DIRECTORIES.EXTERNAL_FONTS\n    elif (file.suffix in FileExtensions.Soundfont):\n        directory = Broken.BROKEN.DIRECTORIES.EXTERNAL_SOUNDFONTS\n    elif (file.suffix in FileExtensions.Midi):\n        directory = Broken.BROKEN.DIRECTORIES.EXTERNAL_MIDIS\n    else:\n        directory = Broken.BROKEN.DIRECTORIES.EXTERNALS\n\n    # Download to target directory, avoiding a move/copy, be known on future calls\n    if not ARCHIVE:\n        directory = (directory/subdir/file.name)\n\n    # Finally download the file\n    file = BrokenPath.download(denum(url), directory, echo=echo)\n\n    # Maybe extract the downloaded file\n    if ARCHIVE:\n        file = BrokenPath.extract(file, echo=echo)\n\n    return BrokenPath.add_to_path(path=file, recurse=True, echo=echo)\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.which","title":"which","text":"<pre><code>which(name: str) -&gt; Optional[Path]\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def which(name: str) -&gt; Optional[Path]:\n    BrokenPath.update_externals_path()\n    return BrokenPath.get(shutil.which(name))\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.update_externals_path","title":"update_externals_path","text":"<pre><code>update_externals_path(\n    path: Path = None, *, echo: bool = True\n) -&gt; Optional[Path]\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def update_externals_path(path: Path=None, *, echo: bool=True) -&gt; Optional[Path]:\n    path = (path or Broken.BROKEN.DIRECTORIES.EXTERNALS)\n    return BrokenPath.add_to_path(path, recurse=True, echo=echo)\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.on_path","title":"on_path","text":"<pre><code>on_path(path: Path) -&gt; bool\n</code></pre> <p>Check if a path is on PATH, works with symlinks</p> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def on_path(path: Path) -&gt; bool:\n    \"\"\"Check if a path is on PATH, works with symlinks\"\"\"\n    return (Path(path) in map(Path, Environment.get(\"PATH\", \"\").split(os.pathsep)))\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.add_to_path","title":"add_to_path","text":"<pre><code>add_to_path(\n    path: Path,\n    *,\n    recurse: bool = False,\n    persistent: bool = False,\n    prepend: bool = True,\n    echo: bool = True\n) -&gt; Path\n</code></pre> <p>Add a path, recursively or not, to System's Path or this Python process's Path</p> <p>Parameters:</p> <ul> <li> <code>recurse</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Also add all subdirectories of the given path</p> </li> <li> <code>persistent</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Use 'userpath' package to add to the Shell's or Registry PATH</p> </li> <li> <code>preferential</code>           \u2013            <p>Prepends the path for less priority on system binaries</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Path</code>           \u2013            <p>The Path argument itself</p> </li> </ul> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def add_to_path(\n    path: Path,\n    *,\n    recurse: bool=False,\n    persistent: bool=False,\n    prepend: bool=True,\n    echo: bool=True\n) -&gt; Path:\n    \"\"\"\n    Add a path, recursively or not, to System's Path or this Python process's Path\n\n    Args:\n        recurse: Also add all subdirectories of the given path\n        persistent: Use 'userpath' package to add to the Shell's or Registry PATH\n        preferential: Prepends the path for less priority on system binaries\n\n    Returns:\n        The Path argument itself\n    \"\"\"\n    original = path = BrokenPath.get(path)\n\n    if (path.is_file()):\n        path = path.parent\n        recurse = False\n\n    # Can't recurse on non existing directories\n    if (not path.exists()) and recurse:\n        log.warning(f\"Not adding to PATH as directory doesn't exist ({path})\", echo=echo)\n        return path\n\n    log.debug(f\"Adding to Path (Recursively: {recurse}, Persistent: {persistent}): ({path})\", echo=echo)\n\n    for other in list(path.rglob(\"*\") if recurse else []) + [path]:\n\n        # Skip conditions\n        if other.is_file():\n            continue\n        if BrokenPath.on_path(other):\n            continue\n\n        # Actual logic\n        if persistent:\n            import userpath\n            userpath.append(str(other))\n        else:\n            if prepend:\n                log.debug(f\"\u2022 Prepending: ({other})\", echo=echo)\n                Environment.set(\"PATH\", str(other) + os.pathsep + Environment.get(\"PATH\"))\n                sys.path.insert(0, str(other))\n            else:\n                log.debug(f\"\u2022 Appending: ({other})\", echo=echo)\n                Environment.set(\"PATH\", Environment.get(\"PATH\") + os.pathsep + str(other))\n                sys.path.append(str(other))\n\n    return original\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.directories","title":"directories","text":"<pre><code>directories(path: Union[Path, Iterable]) -&gt; Iterable[Path]\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>@staticmethod\ndef directories(path: Union[Path, Iterable]) -&gt; Iterable[Path]:\n    if isinstance(path, Path):\n        path = Path(path).glob(\"*\")\n    for item in map(Path, path):\n        if item.is_dir():\n            yield item\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.files","title":"files","text":"<pre><code>files(path: Union[Path, Iterable]) -&gt; Iterable[Path]\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>@staticmethod\ndef files(path: Union[Path, Iterable]) -&gt; Iterable[Path]:\n    if isinstance(path, Path):\n        path = Path(path).glob(\"*\")\n    for item in map(Path, path):\n        if item.is_file():\n            yield item\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.delete_old_files","title":"delete_old_files","text":"<pre><code>delete_old_files(path: Path, maximum: int = 20) -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>@staticmethod\ndef delete_old_files(path: Path, maximum: int=20) -&gt; None:\n    files = list(os.scandir(path))\n\n    if (overflow := (len(files) - maximum)) &gt; 0:\n        files = sorted(files, key=os.path.getmtime)\n\n        for file in itertools.islice(files, overflow):\n            os.unlink(file.path)\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.explore","title":"explore","text":"<pre><code>explore(path: Path)\n</code></pre> <p>Opens a path in the file explorer</p> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>def explore(path: Path):\n    \"\"\"Opens a path in the file explorer\"\"\"\n    path = Path(path)\n    if path.is_file():\n        path = path.parent\n    if BrokenPlatform.OnWindows:\n        os.startfile(str(path))\n    elif BrokenPlatform.OnLinux:\n        shell(\"xdg-open\", path, Popen=True)\n    elif BrokenPlatform.OnMacOS:\n        shell(\"open\", path, Popen=True)\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows","title":"Windows","text":"Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>class Windows:\n    class Magic:\n        \"\"\"Values got from https://learn.microsoft.com/en-us/previous-versions/windows/embedded/aa453707(v=msdn.10)\"\"\"\n        Documents: int = 0x05\n        Music:     int = 0x0D\n        Video:     int = 0x0E\n        Desktop:   int = 0x10\n        Roaming:   int = 0x1A\n        Local:     int = 0x1C\n        Pictures:  int = 0x27\n        Home:      int = 0x28\n\n    class Type(Enum):\n        Current = 0\n        Default = 1\n\n    @staticmethod\n    def get(csidl: int, *, type: Type=Type.Current) -&gt; Path:\n        if (os.name != \"nt\"):\n            raise RuntimeError(\"BrokenPath.Windows only makes sense on Windows\")\n        buffer = ctypes.create_unicode_buffer(ctypes.wintypes.MAX_PATH)\n        ctypes.windll.shell32.SHGetFolderPathW(None, csidl, None, type.value, buffer)\n        return Path(buffer.value)\n\n    @functools.lru_cache\n    def Documents(*, type: Type=Type.Current) -&gt; Path:\n        return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Documents, type=type)\n\n    @functools.lru_cache\n    def Music(*, type: Type=Type.Current) -&gt; Path:\n        return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Music, type=type)\n\n    @functools.lru_cache\n    def Video(*, type: Type=Type.Current) -&gt; Path:\n        return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Video, type=type)\n\n    @functools.lru_cache\n    def Desktop(*, type: Type=Type.Current) -&gt; Path:\n        return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Desktop, type=type)\n\n    @functools.lru_cache\n    def Roaming(*, type: Type=Type.Current) -&gt; Path:\n        return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Roaming, type=type)\n\n    @functools.lru_cache\n    def Local(*, type: Type=Type.Current) -&gt; Path:\n        return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Local, type=type)\n\n    @functools.lru_cache\n    def Pictures(*, type: Type=Type.Current) -&gt; Path:\n        return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Pictures, type=type)\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Magic","title":"Magic","text":"<p>Values got from https://learn.microsoft.com/en-us/previous-versions/windows/embedded/aa453707(v=msdn.10)</p> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>class Magic:\n    \"\"\"Values got from https://learn.microsoft.com/en-us/previous-versions/windows/embedded/aa453707(v=msdn.10)\"\"\"\n    Documents: int = 0x05\n    Music:     int = 0x0D\n    Video:     int = 0x0E\n    Desktop:   int = 0x10\n    Roaming:   int = 0x1A\n    Local:     int = 0x1C\n    Pictures:  int = 0x27\n    Home:      int = 0x28\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Magic.Documents","title":"Documents","text":"<pre><code>Documents: int = 5\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Magic.Music","title":"Music","text":"<pre><code>Music: int = 13\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Magic.Video","title":"Video","text":"<pre><code>Video: int = 14\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Magic.Desktop","title":"Desktop","text":"<pre><code>Desktop: int = 16\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Magic.Roaming","title":"Roaming","text":"<pre><code>Roaming: int = 26\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Magic.Local","title":"Local","text":"<pre><code>Local: int = 28\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Magic.Pictures","title":"Pictures","text":"<pre><code>Pictures: int = 39\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Magic.Home","title":"Home","text":"<pre><code>Home: int = 40\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Type","title":"Type","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>class Type(Enum):\n    Current = 0\n    Default = 1\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Type.Current","title":"Current","text":"<pre><code>Current = 0\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Type.Default","title":"Default","text":"<pre><code>Default = 1\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.get","title":"get","text":"<pre><code>get(csidl: int, *, type: Type = Type.Current) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>@staticmethod\ndef get(csidl: int, *, type: Type=Type.Current) -&gt; Path:\n    if (os.name != \"nt\"):\n        raise RuntimeError(\"BrokenPath.Windows only makes sense on Windows\")\n    buffer = ctypes.create_unicode_buffer(ctypes.wintypes.MAX_PATH)\n    ctypes.windll.shell32.SHGetFolderPathW(None, csidl, None, type.value, buffer)\n    return Path(buffer.value)\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Documents","title":"Documents","text":"<pre><code>Documents(*, type: Type = Type.Current) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>@functools.lru_cache\ndef Documents(*, type: Type=Type.Current) -&gt; Path:\n    return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Documents, type=type)\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Music","title":"Music","text":"<pre><code>Music(*, type: Type = Type.Current) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>@functools.lru_cache\ndef Music(*, type: Type=Type.Current) -&gt; Path:\n    return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Music, type=type)\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Video","title":"Video","text":"<pre><code>Video(*, type: Type = Type.Current) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>@functools.lru_cache\ndef Video(*, type: Type=Type.Current) -&gt; Path:\n    return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Video, type=type)\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Desktop","title":"Desktop","text":"<pre><code>Desktop(*, type: Type = Type.Current) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>@functools.lru_cache\ndef Desktop(*, type: Type=Type.Current) -&gt; Path:\n    return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Desktop, type=type)\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Roaming","title":"Roaming","text":"<pre><code>Roaming(*, type: Type = Type.Current) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>@functools.lru_cache\ndef Roaming(*, type: Type=Type.Current) -&gt; Path:\n    return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Roaming, type=type)\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Local","title":"Local","text":"<pre><code>Local(*, type: Type = Type.Current) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>@functools.lru_cache\ndef Local(*, type: Type=Type.Current) -&gt; Path:\n    return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Local, type=type)\n</code></pre>"},{"location":"code/broken/core/brokenpath/#Broken.Core.BrokenPath.BrokenPath.Windows.Pictures","title":"Pictures","text":"<pre><code>Pictures(*, type: Type = Type.Current) -&gt; Path\n</code></pre> Source code in <code>Broken/Core/BrokenPath.py</code> <pre><code>@functools.lru_cache\ndef Pictures(*, type: Type=Type.Current) -&gt; Path:\n    return BrokenPath.Windows.get(BrokenPath.Windows.Magic.Pictures, type=type)\n</code></pre>"},{"location":"code/broken/core/brokenplatform/","title":"File: <code>Broken/Core/BrokenPlatform.py</code>","text":""},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform","title":"Broken.Core.BrokenPlatform","text":""},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.SystemEnum","title":"SystemEnum","text":"<p>               Bases: <code>str</code>, <code>MultiEnum</code></p> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>class SystemEnum(str, MultiEnum):\n    Linux:   str = \"linux\"\n    Windows: str = (\"windows\", \"win\")\n    MacOS:   str = (\"macos\", \"darwin\", \"osx\")\n    BSD:     str = (\"bsd\", \"freebsd\", \"openbsd\", \"netbsd\")\n\n    @property\n    def extension(self) -&gt; str:\n        if (self == self.Windows):\n            return \".exe\"\n        return \".bin\"\n\n    def is_linux(self) -&gt; bool:\n        return (self == self.Linux)\n\n    def is_windows(self) -&gt; bool:\n        return (self == self.Windows)\n\n    def is_macos(self) -&gt; bool:\n        return (self == self.MacOS)\n\n    def is_bsd(self) -&gt; bool:\n        return (self == self.BSD)\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.SystemEnum.Linux","title":"Linux","text":"<pre><code>Linux: str = 'linux'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.SystemEnum.Windows","title":"Windows","text":"<pre><code>Windows: str = ('windows', 'win')\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.SystemEnum.MacOS","title":"MacOS","text":"<pre><code>MacOS: str = ('macos', 'darwin', 'osx')\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.SystemEnum.BSD","title":"BSD","text":"<pre><code>BSD: str = ('bsd', 'freebsd', 'openbsd', 'netbsd')\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.SystemEnum.extension","title":"extension","text":"<pre><code>extension: str\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.SystemEnum.is_linux","title":"is_linux","text":"<pre><code>is_linux() -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>def is_linux(self) -&gt; bool:\n    return (self == self.Linux)\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.SystemEnum.is_windows","title":"is_windows","text":"<pre><code>is_windows() -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>def is_windows(self) -&gt; bool:\n    return (self == self.Windows)\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.SystemEnum.is_macos","title":"is_macos","text":"<pre><code>is_macos() -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>def is_macos(self) -&gt; bool:\n    return (self == self.MacOS)\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.SystemEnum.is_bsd","title":"is_bsd","text":"<pre><code>is_bsd() -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>def is_bsd(self) -&gt; bool:\n    return (self == self.BSD)\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.ArchEnum","title":"ArchEnum","text":"<p>               Bases: <code>str</code>, <code>MultiEnum</code></p> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>class ArchEnum(str, MultiEnum):\n    AMD32: str = (\"amd32\", \"x86\", \"i686\")\n    AMD64: str = (\"amd64\", \"x86_64\")\n    ARM32: str = \"arm32\"\n    ARM64: str = \"arm64\"\n\n    def is_arm(self) -&gt; bool:\n        return (\"arm\" in self.value)\n\n    def is_amd(self) -&gt; bool:\n        return (\"amd\" in self.value)\n\n    def is_32_bits(self) -&gt; bool:\n        return (\"32\" in self.value)\n\n    def is_64_bits(self) -&gt; bool:\n        return (\"64\" in self.value)\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.ArchEnum.AMD32","title":"AMD32","text":"<pre><code>AMD32: str = ('amd32', 'x86', 'i686')\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.ArchEnum.AMD64","title":"AMD64","text":"<pre><code>AMD64: str = ('amd64', 'x86_64')\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.ArchEnum.ARM32","title":"ARM32","text":"<pre><code>ARM32: str = 'arm32'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.ArchEnum.ARM64","title":"ARM64","text":"<pre><code>ARM64: str = 'arm64'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.ArchEnum.is_arm","title":"is_arm","text":"<pre><code>is_arm() -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>def is_arm(self) -&gt; bool:\n    return (\"arm\" in self.value)\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.ArchEnum.is_amd","title":"is_amd","text":"<pre><code>is_amd() -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>def is_amd(self) -&gt; bool:\n    return (\"amd\" in self.value)\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.ArchEnum.is_32_bits","title":"is_32_bits","text":"<pre><code>is_32_bits() -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>def is_32_bits(self) -&gt; bool:\n    return (\"32\" in self.value)\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.ArchEnum.is_64_bits","title":"is_64_bits","text":"<pre><code>is_64_bits() -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>def is_64_bits(self) -&gt; bool:\n    return (\"64\" in self.value)\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.PlatformEnum","title":"PlatformEnum","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> <p>List of common platforms targets for releases</p> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>class PlatformEnum(str, BrokenEnum):\n    \"\"\"List of common platforms targets for releases\"\"\"\n    WindowsAMD64: str = \"windows-amd64\"\n    WindowsARM64: str = \"windows-arm64\"\n    LinuxAMD64:   str = \"linux-amd64\"\n    LinuxARM64:   str = \"linux-arm64\"\n    MacosAMD64:   str = \"macos-amd64\"\n    MacosARM64:   str = \"macos-arm64\"\n\n    @property\n    def system(self) -&gt; SystemEnum:\n        return SystemEnum(self.value.split(\"-\")[0])\n\n    @property\n    def arch(self) -&gt; ArchEnum:\n        return ArchEnum(self.value.split(\"-\")[1])\n\n    @property\n    def extension(self) -&gt; str:\n        return self.system.extension\n\n    @property\n    def triple(self) -&gt; str:\n        \"\"\"Get the Rust target triple\"\"\"\n        return {\n            self.WindowsAMD64: \"x86_64-pc-windows-\" + (\"msvc\" if BrokenPlatform.OnWindows else \"gnu\"),\n            self.WindowsARM64: \"aarch64-pc-windows-\" + (\"msvc\" if BrokenPlatform.OnWindows else \"gnullvm\"),\n            self.LinuxAMD64:   \"x86_64-unknown-linux-gnu\",\n            self.LinuxARM64:   \"aarch64-unknown-linux-gnu\",\n            self.MacosAMD64:   \"x86_64-apple-darwin\",\n            self.MacosARM64:   \"aarch64-apple-darwin\",\n        }[self]\n\n    @property\n    def pip_platform(self) -&gt; Iterable[str]:\n\n        # https://en.wikipedia.org/wiki/MacOS_version_history\n        def mac_versions() -&gt; Iterable[str]:\n            for minor in range(0, 16):\n                yield (10, minor)\n            for major in range(11, 16):\n                yield (major, 0)\n\n        # We MUST output ALL the platforms\n        if (self == self.WindowsAMD64):\n            yield \"win_amd64\"\n\n        elif (self == self.WindowsARM64):\n            yield \"win_arm64\"\n\n        elif (self == self.LinuxAMD64):\n            yield \"linux_x86_64\"\n            yield \"manylinux2014_x86_64\"\n            yield \"manylinux2010_x86_64\"\n            yield \"manylinux1_x86_64\"\n\n        elif (self == self.LinuxARM64):\n            yield \"manylinux2014_aarch64\"\n            yield \"linux_aarch64\"\n\n        elif (self == self.MacosAMD64):\n            for (major, minor) in reversed(list(mac_versions())):\n                yield f\"macosx_{major}_{minor}_x86_64\"\n\n        elif (self == self.MacosARM64):\n            for (major, minor) in reversed(list(mac_versions())):\n                yield f\"macosx_{major}_{minor}_arm64\"\n\n    _AllAMD64: str = \"all-amd64\"\n    _AllARM64: str = \"all-arm64\"\n    _AllHost:  str = \"all-host\"\n    _All:      str = \"all\"\n\n    def get_all(self) -&gt; Iterable[Self]:\n        if (\"all\" in self.value):\n            for option in PlatformEnum.options():\n                if (\"all\" in option.value):\n                    continue\n                elif (self == self._All):\n                    yield option\n                elif (self == self._AllAMD64):\n                    if (option.arch == ArchEnum.AMD64):\n                        yield option\n                elif (self == self._AllARM64):\n                    if (option.arch == ArchEnum.ARM64):\n                        yield option\n                elif (self == self._AllHost):\n                    if (option.system == BrokenPlatform.System):\n                        yield option\n        else:\n            yield self\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.PlatformEnum.WindowsAMD64","title":"WindowsAMD64","text":"<pre><code>WindowsAMD64: str = 'windows-amd64'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.PlatformEnum.WindowsARM64","title":"WindowsARM64","text":"<pre><code>WindowsARM64: str = 'windows-arm64'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.PlatformEnum.LinuxAMD64","title":"LinuxAMD64","text":"<pre><code>LinuxAMD64: str = 'linux-amd64'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.PlatformEnum.LinuxARM64","title":"LinuxARM64","text":"<pre><code>LinuxARM64: str = 'linux-arm64'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.PlatformEnum.MacosAMD64","title":"MacosAMD64","text":"<pre><code>MacosAMD64: str = 'macos-amd64'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.PlatformEnum.MacosARM64","title":"MacosARM64","text":"<pre><code>MacosARM64: str = 'macos-arm64'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.PlatformEnum.system","title":"system","text":"<pre><code>system: SystemEnum\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.PlatformEnum.arch","title":"arch","text":"<pre><code>arch: ArchEnum\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.PlatformEnum.extension","title":"extension","text":"<pre><code>extension: str\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.PlatformEnum.triple","title":"triple","text":"<pre><code>triple: str\n</code></pre> <p>Get the Rust target triple</p>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.PlatformEnum.pip_platform","title":"pip_platform","text":"<pre><code>pip_platform: Iterable[str]\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.PlatformEnum.get_all","title":"get_all","text":"<pre><code>get_all() -&gt; Iterable[Self]\n</code></pre> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>def get_all(self) -&gt; Iterable[Self]:\n    if (\"all\" in self.value):\n        for option in PlatformEnum.options():\n            if (\"all\" in option.value):\n                continue\n            elif (self == self._All):\n                yield option\n            elif (self == self._AllAMD64):\n                if (option.arch == ArchEnum.AMD64):\n                    yield option\n            elif (self == self._AllARM64):\n                if (option.arch == ArchEnum.ARM64):\n                    yield option\n            elif (self == self._AllHost):\n                if (option.system == BrokenPlatform.System):\n                    yield option\n    else:\n        yield self\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform","title":"BrokenPlatform","text":"Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>class BrokenPlatform:\n    Arch: ArchEnum = ArchEnum.get(\n        platform.machine().lower())\n    \"\"\"The current machine's architecture\"\"\"\n\n    System: SystemEnum = SystemEnum.get(\n        platform.system().lower())\n    \"\"\"The current machine's operating system\"\"\"\n\n    Host: PlatformEnum = PlatformEnum.get(\n        f\"{System.value}-{Arch.value}\")\n    \"\"\"The current machine's full platform\"\"\"\n\n    # Primary platforms\n    OnLinux:   bool = (System == SystemEnum.Linux)\n    OnWindows: bool = (System == SystemEnum.Windows)\n    OnMacOS:   bool = (System == SystemEnum.MacOS)\n    OnBSD:     bool = (System == SystemEnum.BSD)\n\n    # Distro IDs: https://distro.readthedocs.io/en/latest/\n    LinuxDistro: str = distro.id()\n\n    # Family of platforms\n    OnUnix: bool = (OnLinux or OnMacOS or OnBSD)\n\n    # Ubuntu family\n    OnUbuntu:    bool = (LinuxDistro == \"ubuntu\")\n    OnDebian:    bool = (LinuxDistro == \"debian\")\n    OnMint:      bool = (LinuxDistro == \"linuxmint\")\n    OnRaspberry: bool = (LinuxDistro == \"raspbian\")\n    UbuntuLike:  bool = (OnUbuntu or OnDebian or OnMint or OnRaspberry)\n\n    # Arch Linux family\n    OnArch:    bool = (LinuxDistro == \"arch\")\n    OnManjaro: bool = (LinuxDistro == \"manjaro\")\n    ArchLike:  bool = (OnArch or OnManjaro)\n\n    # RedHat family\n    OnFedora:   bool = (LinuxDistro == \"fedora\")\n    OnCentOS:   bool = (LinuxDistro == \"centos\")\n    OnRedHat:   bool = (LinuxDistro == \"rhel\")\n    FedoraLike: bool = (OnFedora or OnCentOS or OnRedHat)\n\n    # Others\n    OnGentoo: bool = (LinuxDistro == \"gentoo\")\n\n    # BSD family\n    OnOpenBSD: bool = (LinuxDistro == \"openbsd\")\n    OnFreeBSD: bool = (LinuxDistro == \"freebsd\")\n    OnNetBSD:  bool = (LinuxDistro == \"netbsd\")\n    OnBSDLike: bool = (OnFreeBSD or OnOpenBSD)\n\n    @staticmethod\n    def log_system_info() -&gt; None:\n        log.info(f\"\u2022 System Info: {platform.system()} {platform.release()}, Python {platform.python_version()} {platform.machine()}\")\n\n    @staticmethod\n    def clear_terminal() -&gt; None:\n        os.system(\"cls\" if BrokenPlatform.OnWindows else \"clear\")\n\n    # Literally, why Windows/Python have different directory names for scripts? ...\n    # https://github.com/pypa/virtualenv/commit/993ba1316a83b760370f5a3872b3f5ef4dd904c1\n    PyBinDir = (\"Scripts\" if OnWindows else \"bin\")\n\n    try:\n        Root: bool = (os.getuid() == 0)\n    except AttributeError:\n        Root: bool = ctypes.windll.shell32.IsUserAnAdmin() != 0\n\n    class DeveloperMode:\n        # https://learn.microsoft.com/en-us/windows/apps/get-started/developer-mode-features-and-debugging\n\n        @staticmethod\n        def status() -&gt; bool:\n            import winreg\n            key_path = r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock\"\n            key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key_path, 0, winreg.KEY_READ)\n            value, _ = winreg.QueryValueEx(key, \"AllowDevelopmentWithoutDevLicense\")\n            winreg.CloseKey(key)\n            return bool(value)\n\n        @staticmethod\n        def set(state: bool=True):\n            import winreg\n            if (not BrokenPlatform.Root):\n                raise PermissionError(\"Administrator privileges are required to enable Developer Mode\")\n            key_path = r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock\"\n            key = winreg.CreateKeyEx(winreg.HKEY_LOCAL_MACHINE, key_path, 0, winreg.KEY_ALL_ACCESS)\n            winreg.SetValueEx(key, \"AllowDevelopmentWithoutDevLicense\", 0, winreg.REG_DWORD, int(state))\n            winreg.CloseKey(key)\n\n        @staticmethod\n        def enable() -&gt; bool:\n            return BrokenPlatform.DeveloperMode.set(True)\n\n        @staticmethod\n        def enabled() -&gt; bool:\n            return BrokenPlatform.DeveloperMode.status()\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.Arch","title":"Arch","text":"<pre><code>Arch: ArchEnum = ArchEnum.get(platform.machine().lower())\n</code></pre> <p>The current machine's architecture</p>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.System","title":"System","text":"<pre><code>System: SystemEnum = SystemEnum.get(\n    platform.system().lower()\n)\n</code></pre> <p>The current machine's operating system</p>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.Host","title":"Host","text":"<pre><code>Host: PlatformEnum = PlatformEnum.get(\n    f\"{System.value}-{Arch.value}\"\n)\n</code></pre> <p>The current machine's full platform</p>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnLinux","title":"OnLinux","text":"<pre><code>OnLinux: bool = System == SystemEnum.Linux\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnWindows","title":"OnWindows","text":"<pre><code>OnWindows: bool = System == SystemEnum.Windows\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnMacOS","title":"OnMacOS","text":"<pre><code>OnMacOS: bool = System == SystemEnum.MacOS\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnBSD","title":"OnBSD","text":"<pre><code>OnBSD: bool = System == SystemEnum.BSD\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.LinuxDistro","title":"LinuxDistro","text":"<pre><code>LinuxDistro: str = distro.id()\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnUnix","title":"OnUnix","text":"<pre><code>OnUnix: bool = OnLinux or OnMacOS or OnBSD\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnUbuntu","title":"OnUbuntu","text":"<pre><code>OnUbuntu: bool = LinuxDistro == 'ubuntu'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnDebian","title":"OnDebian","text":"<pre><code>OnDebian: bool = LinuxDistro == 'debian'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnMint","title":"OnMint","text":"<pre><code>OnMint: bool = LinuxDistro == 'linuxmint'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnRaspberry","title":"OnRaspberry","text":"<pre><code>OnRaspberry: bool = LinuxDistro == 'raspbian'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.UbuntuLike","title":"UbuntuLike","text":"<pre><code>UbuntuLike: bool = (\n    OnUbuntu or OnDebian or OnMint or OnRaspberry\n)\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnArch","title":"OnArch","text":"<pre><code>OnArch: bool = LinuxDistro == 'arch'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnManjaro","title":"OnManjaro","text":"<pre><code>OnManjaro: bool = LinuxDistro == 'manjaro'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.ArchLike","title":"ArchLike","text":"<pre><code>ArchLike: bool = OnArch or OnManjaro\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnFedora","title":"OnFedora","text":"<pre><code>OnFedora: bool = LinuxDistro == 'fedora'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnCentOS","title":"OnCentOS","text":"<pre><code>OnCentOS: bool = LinuxDistro == 'centos'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnRedHat","title":"OnRedHat","text":"<pre><code>OnRedHat: bool = LinuxDistro == 'rhel'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.FedoraLike","title":"FedoraLike","text":"<pre><code>FedoraLike: bool = OnFedora or OnCentOS or OnRedHat\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnGentoo","title":"OnGentoo","text":"<pre><code>OnGentoo: bool = LinuxDistro == 'gentoo'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnOpenBSD","title":"OnOpenBSD","text":"<pre><code>OnOpenBSD: bool = LinuxDistro == 'openbsd'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnFreeBSD","title":"OnFreeBSD","text":"<pre><code>OnFreeBSD: bool = LinuxDistro == 'freebsd'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnNetBSD","title":"OnNetBSD","text":"<pre><code>OnNetBSD: bool = LinuxDistro == 'netbsd'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.OnBSDLike","title":"OnBSDLike","text":"<pre><code>OnBSDLike: bool = OnFreeBSD or OnOpenBSD\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.log_system_info","title":"log_system_info","text":"<pre><code>log_system_info() -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>@staticmethod\ndef log_system_info() -&gt; None:\n    log.info(f\"\u2022 System Info: {platform.system()} {platform.release()}, Python {platform.python_version()} {platform.machine()}\")\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.clear_terminal","title":"clear_terminal","text":"<pre><code>clear_terminal() -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>@staticmethod\ndef clear_terminal() -&gt; None:\n    os.system(\"cls\" if BrokenPlatform.OnWindows else \"clear\")\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.PyBinDir","title":"PyBinDir","text":"<pre><code>PyBinDir = 'Scripts' if OnWindows else 'bin'\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.Root","title":"Root","text":"<pre><code>Root: bool = os.getuid() == 0\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.DeveloperMode","title":"DeveloperMode","text":"Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>class DeveloperMode:\n    # https://learn.microsoft.com/en-us/windows/apps/get-started/developer-mode-features-and-debugging\n\n    @staticmethod\n    def status() -&gt; bool:\n        import winreg\n        key_path = r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock\"\n        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key_path, 0, winreg.KEY_READ)\n        value, _ = winreg.QueryValueEx(key, \"AllowDevelopmentWithoutDevLicense\")\n        winreg.CloseKey(key)\n        return bool(value)\n\n    @staticmethod\n    def set(state: bool=True):\n        import winreg\n        if (not BrokenPlatform.Root):\n            raise PermissionError(\"Administrator privileges are required to enable Developer Mode\")\n        key_path = r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock\"\n        key = winreg.CreateKeyEx(winreg.HKEY_LOCAL_MACHINE, key_path, 0, winreg.KEY_ALL_ACCESS)\n        winreg.SetValueEx(key, \"AllowDevelopmentWithoutDevLicense\", 0, winreg.REG_DWORD, int(state))\n        winreg.CloseKey(key)\n\n    @staticmethod\n    def enable() -&gt; bool:\n        return BrokenPlatform.DeveloperMode.set(True)\n\n    @staticmethod\n    def enabled() -&gt; bool:\n        return BrokenPlatform.DeveloperMode.status()\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.DeveloperMode.status","title":"status","text":"<pre><code>status() -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>@staticmethod\ndef status() -&gt; bool:\n    import winreg\n    key_path = r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock\"\n    key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key_path, 0, winreg.KEY_READ)\n    value, _ = winreg.QueryValueEx(key, \"AllowDevelopmentWithoutDevLicense\")\n    winreg.CloseKey(key)\n    return bool(value)\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.DeveloperMode.set","title":"set","text":"<pre><code>set(state: bool = True)\n</code></pre> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>@staticmethod\ndef set(state: bool=True):\n    import winreg\n    if (not BrokenPlatform.Root):\n        raise PermissionError(\"Administrator privileges are required to enable Developer Mode\")\n    key_path = r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock\"\n    key = winreg.CreateKeyEx(winreg.HKEY_LOCAL_MACHINE, key_path, 0, winreg.KEY_ALL_ACCESS)\n    winreg.SetValueEx(key, \"AllowDevelopmentWithoutDevLicense\", 0, winreg.REG_DWORD, int(state))\n    winreg.CloseKey(key)\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.DeveloperMode.enable","title":"enable","text":"<pre><code>enable() -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>@staticmethod\ndef enable() -&gt; bool:\n    return BrokenPlatform.DeveloperMode.set(True)\n</code></pre>"},{"location":"code/broken/core/brokenplatform/#Broken.Core.BrokenPlatform.BrokenPlatform.DeveloperMode.enabled","title":"enabled","text":"<pre><code>enabled() -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenPlatform.py</code> <pre><code>@staticmethod\ndef enabled() -&gt; bool:\n    return BrokenPlatform.DeveloperMode.status()\n</code></pre>"},{"location":"code/broken/core/brokenprofiler/","title":"File: <code>Broken/Core/BrokenProfiler.py</code>","text":""},{"location":"code/broken/core/brokenprofiler/#Broken.Core.BrokenProfiler","title":"Broken.Core.BrokenProfiler","text":""},{"location":"code/broken/core/brokenprofiler/#Broken.Core.BrokenProfiler.BrokenProfiler","title":"BrokenProfiler","text":"Source code in <code>Broken/Core/BrokenProfiler.py</code> <pre><code>@define\nclass BrokenProfiler:\n    name: str = \"NONE\"\n\n    class Profiler(BrokenEnum):\n        cprofile      = \"cprofile\"\n        # imports       = \"imports\"\n        # pyinstrument  = \"pyinstrument\"\n\n    profiler: Profiler = Profiler.cprofile\n\n    @property\n    def label(self) -&gt; str:\n        return self.name.upper()\n\n    def __attrs_post_init__(self):\n        profiler = Environment.get(f\"{self.label}_PROFILER\", self.profiler)\n        self.profiler = self.Profiler.get(profiler)\n\n    @property\n    def enabled(self) -&gt; bool:\n        return Environment.flag(f\"{self.label}_PROFILE\", 0)\n\n    @property\n    def output(self) -&gt; Path:\n        return Path(tempfile.gettempdir())/f\"{self.label}.prof\"\n\n    __profiler__: Any = None\n\n    def __enter__(self) -&gt; Self:\n        if (not self.enabled):\n            pass\n        elif (self.profiler == self.Profiler.cprofile):\n            log.trace(\"Profiling with cProfile\")\n            import cProfile\n            self.__profiler__ = cProfile.Profile()\n            self.__profiler__.enable()\n        return self\n\n    def __exit__(self, *args) -&gt; None:\n        if (not self.enabled):\n            return None\n\n        if (self.profiler == self.Profiler.cprofile):\n            log.trace(\"Finishing cProfile\")\n            output = self.output.with_suffix(\".prof\")\n            self.__profiler__.disable()\n            self.__profiler__.dump_stats(output)\n            try:\n                shell(\"snakeviz\", output)\n            except KeyboardInterrupt:\n                pass\n            output.unlink()\n</code></pre>"},{"location":"code/broken/core/brokenprofiler/#Broken.Core.BrokenProfiler.BrokenProfiler.name","title":"name","text":"<pre><code>name: str = 'NONE'\n</code></pre>"},{"location":"code/broken/core/brokenprofiler/#Broken.Core.BrokenProfiler.BrokenProfiler.Profiler","title":"Profiler","text":"<p>               Bases: <code>BrokenEnum</code></p> Source code in <code>Broken/Core/BrokenProfiler.py</code> <pre><code>class Profiler(BrokenEnum):\n    cprofile      = \"cprofile\"\n</code></pre>"},{"location":"code/broken/core/brokenprofiler/#Broken.Core.BrokenProfiler.BrokenProfiler.Profiler.cprofile","title":"cprofile","text":"<pre><code>cprofile = 'cprofile'\n</code></pre>"},{"location":"code/broken/core/brokenprofiler/#Broken.Core.BrokenProfiler.BrokenProfiler.profiler","title":"profiler","text":"<pre><code>profiler: Profiler = Profiler.cprofile\n</code></pre>"},{"location":"code/broken/core/brokenprofiler/#Broken.Core.BrokenProfiler.BrokenProfiler.label","title":"label","text":"<pre><code>label: str\n</code></pre>"},{"location":"code/broken/core/brokenprofiler/#Broken.Core.BrokenProfiler.BrokenProfiler.__attrs_post_init__","title":"__attrs_post_init__","text":"<pre><code>__attrs_post_init__()\n</code></pre> Source code in <code>Broken/Core/BrokenProfiler.py</code> <pre><code>def __attrs_post_init__(self):\n    profiler = Environment.get(f\"{self.label}_PROFILER\", self.profiler)\n    self.profiler = self.Profiler.get(profiler)\n</code></pre>"},{"location":"code/broken/core/brokenprofiler/#Broken.Core.BrokenProfiler.BrokenProfiler.enabled","title":"enabled","text":"<pre><code>enabled: bool\n</code></pre>"},{"location":"code/broken/core/brokenprofiler/#Broken.Core.BrokenProfiler.BrokenProfiler.output","title":"output","text":"<pre><code>output: Path\n</code></pre>"},{"location":"code/broken/core/brokenprofiler/#Broken.Core.BrokenProfiler.BrokenProfiler.__profiler__","title":"__profiler__","text":"<pre><code>__profiler__: Any = None\n</code></pre>"},{"location":"code/broken/core/brokenprofiler/#Broken.Core.BrokenProfiler.BrokenProfiler.__enter__","title":"__enter__","text":"<pre><code>__enter__() -&gt; Self\n</code></pre> Source code in <code>Broken/Core/BrokenProfiler.py</code> <pre><code>def __enter__(self) -&gt; Self:\n    if (not self.enabled):\n        pass\n    elif (self.profiler == self.Profiler.cprofile):\n        log.trace(\"Profiling with cProfile\")\n        import cProfile\n        self.__profiler__ = cProfile.Profile()\n        self.__profiler__.enable()\n    return self\n</code></pre>"},{"location":"code/broken/core/brokenprofiler/#Broken.Core.BrokenProfiler.BrokenProfiler.__exit__","title":"__exit__","text":"<pre><code>__exit__(*args) -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenProfiler.py</code> <pre><code>def __exit__(self, *args) -&gt; None:\n    if (not self.enabled):\n        return None\n\n    if (self.profiler == self.Profiler.cprofile):\n        log.trace(\"Finishing cProfile\")\n        output = self.output.with_suffix(\".prof\")\n        self.__profiler__.disable()\n        self.__profiler__.dump_stats(output)\n        try:\n            shell(\"snakeviz\", output)\n        except KeyboardInterrupt:\n            pass\n        output.unlink()\n</code></pre>"},{"location":"code/broken/core/brokenproject/","title":"File: <code>Broken/Core/BrokenProject.py</code>","text":""},{"location":"code/broken/core/brokenproject/#Broken.Core.BrokenProject","title":"Broken.Core.BrokenProject","text":""},{"location":"code/broken/core/brokenproject/#Broken.Core.BrokenProject.BrokenProject","title":"BrokenProject","text":"Source code in <code>Broken/Core/BrokenProject.py</code> <pre><code>@define(slots=False)\nclass BrokenProject:\n    PACKAGE: Path = field(converter=lambda x: Path(x).parent)\n    \"\"\"Send the importer's __init__.py's __file__ variable\"\"\"\n\n    # App information\n    APP_NAME: str\n    APP_AUTHOR: str\n    VERSION: str = Runtime.Version\n    ABOUT: str = \"No description provided\"\n\n    # Standard Broken objects for a project\n    DIRECTORIES: _Directories = None\n    RESOURCES: _Resources = None\n\n    def __attrs_post_init__(self):\n        self.DIRECTORIES = _Directories(PROJECT=self)\n        self.RESOURCES = _Resources(PROJECT=self)\n        BrokenLogging.set_project(self.APP_NAME)\n\n        # Print version information on \"--version/-V\"\n        if (list_get(sys.argv, 1) in (\"--version\", \"-V\")):\n            print(f\"{self.APP_NAME} {self.VERSION} {BrokenPlatform.Host.value}\")\n            sys.exit(0)\n\n        # Replace Broken.PROJECT with the first initialized project\n        if (project := getattr(Broken, \"PROJECT\", None)):\n            if (project is Broken.BROKEN):\n                if (BrokenPlatform.Root and not Runtime.Docker):\n                    log.warning(\"Running as [bold blink red]Administrator or Root[/] is discouraged unless necessary!\")\n                self._pyapp_management()\n                Broken.PROJECT = self\n\n        # Convenience symlink the project's workspace\n        if Runtime.Source and Environment.flag(\"WORKSPACE_SYMLINK\", 0):\n            BrokenPath.symlink(\n                virtual=self.DIRECTORIES.REPOSITORY/\"Workspace\",\n                real=self.DIRECTORIES.WORKSPACE, echo=False\n            )\n\n        # Load dotenv files in common directories\n        for path in self.DIRECTORIES.REPOSITORY.glob(\"*.env\"):\n            dotenv.load_dotenv(path, override=True)\n\n    def chdir(self) -&gt; Self:\n        \"\"\"Change directory to the project's root\"\"\"\n        return os.chdir(self.PACKAGE.parent.parent) or self\n\n    def welcome(self) -&gt; None:\n        import pyfiglet # noqa\n        from Broken import BrokenTorch\n        torch = BrokenTorch.version()\n        ascii = pyfiglet.figlet_format(self.APP_NAME)\n        ascii = '\\n'.join((x for x in ascii.split('\\n') if x.strip()))\n        rprint(Panel(\n            Align.center(ascii + \"\\n\"),\n            subtitle=''.join((\n                \"[bold dim]\ud83d\udce6 \"\n                f\"Version {self.VERSION} \",\n                f\"\u2022 Python {sys.version.split()[0]} \",\n                f\"\u2022 Torch {torch.value} \" if torch else \"\",\n                \"\ud83d\udce6[/]\",\n            )),\n        ))\n\n    def _pyapp_management(self) -&gt; None:\n\n        # Skip if not executing within a binary release\n        if not (executable := Environment.get(\"PYAPP\")):\n            return None\n\n        # ---------------------------------------------------------------------------------------- #\n\n        import hashlib\n        venv_path = Path(Environment.get(\"VIRTUAL_ENV\"))\n        hash_file = (venv_path/\"version.sha256\")\n        this_hash = hashlib.sha256(open(executable, \"rb\").read()).hexdigest()\n        old_hash  = (hash_file.read_text() if hash_file.exists() else None)\n        hash_file.write_text(this_hash)\n\n        # Fixme (#ntfs): https://superuser.com/questions/488127\n        # Fixme (#ntfs): https://unix.stackexchange.com/questions/49299\n        ntfs_workaround = venv_path.with_name(\"0.0.0\")\n\n        # \"If (not on the first run) and (hash differs)\"\n        if (old_hash is not None) and (old_hash != this_hash):\n            print(\"-\"*shutil.get_terminal_size().columns + \"\\n\")\n            log.info(f\"Detected different hash for this release version [bold blue]v{self.VERSION}[/], reinstalling..\")\n            log.info(f\"\u2022 {venv_path}\")\n\n            if BrokenPlatform.OnWindows:\n                BrokenPath.remove(ntfs_workaround)\n                venv_path.rename(ntfs_workaround)\n                try:\n                    rprint(\"\\n[bold orange3 blink](Warning)[/] Please, reopen this executable to continue! Press Enter to exit..\", end='')\n                    input()\n                except KeyboardInterrupt:\n                    pass\n                exit(0)\n            else:\n                shell(executable, \"self\", \"restore\", stdout=subprocess.DEVNULL)\n                print(\"\\n\" + \"-\"*shutil.get_terminal_size().columns + \"\\n\")\n                try:\n                    sys.exit(shell(executable, sys.argv[1:], echo=False).returncode)\n                except KeyboardInterrupt:\n                    exit(0)\n\n        # Note: Remove before unused version checking\n        BrokenPath.remove(ntfs_workaround, echo=False)\n\n        # ---------------------------------------------------------------------------------------- #\n\n        if (not arguments()):\n            self.welcome()\n\n        def check_new_version():\n            from packaging.version import Version\n\n            # Skip development binaries, as they aren't on PyPI\n            if (current := Version(self.VERSION)).is_prerelease:\n                return None\n\n            with BrokenCache.requests(\n                cache_name=(venv_path/\"version.check\"),\n                expire_after=(3600),\n            ) as requests:\n                import json\n\n                with contextlib.suppress(Exception):\n                    _api   = f\"https://pypi.org/pypi/{self.APP_NAME.lower()}/json\"\n                    latest = Version(json.loads(requests.get(_api).text)[\"info\"][\"version\"])\n\n                # Newer version available\n                if (current &lt; latest):\n                    log.minor((\n                        f\"A newer version of the project [bold blue]v{latest}[/] is available! \"\n                        f\"Get it at https://brokensrc.dev/get/releases/ (Current: v{current})\"\n                    ))\n\n                # Back to the future!\n                elif (current &gt; latest):\n                    log.error(f\"[bold indian_red]For whatever reason, the current version [bold blue]v{self.VERSION}[/] is newer than the latest [bold blue]v{latest}[/][/]\")\n                    log.error(\"[bold indian_red]\u2022 This is fine if you're running a development or pre-release version, don't worry;[/]\")\n                    log.error(\"[bold indian_red]\u2022 Otherwise, it was likely recalled for whatever reason, consider downgrading![/]\")\n\n        # Warn: Must not interrupt user if actions are being taken (argv)\n        if Environment.flag(\"VERSION_CHECK\", 1) and (not arguments()):\n            with contextlib.suppress(Exception):\n                check_new_version()\n\n        # ---------------------------------------------------------------------------------------- #\n\n        def manage_install(version: Path):\n            tracker = FileTracker(version/\"version.tracker\")\n            tracker.retention.days = 7\n\n            # Running a new version, prune previous cache\n            if (tracker.first):\n                shell(sys.executable, \"-m\", \"uv\", \"cache\", \"prune\", \"--quiet\", echo=False)\n\n            # Skip in-use versions\n            if (not tracker.trigger()):\n                return None\n\n            # Late-update current tracker\n            if (version == venv_path):\n                return tracker.update()\n\n            from rich.prompt import Prompt\n\n            log.warning((\n                f\"The version [bold green]v{version.name}[/] of the projects \"\n                f\"hasn't been used for {tracker.sleeping}, unninstall it to save space!\"\n                f\"\\n[bold bright_black]\u2022 Files at: {version}[/]\"\n            ))\n\n            try:\n                answer = Prompt.ask(\n                    prompt=\"\\n:: Choose an action:\",\n                    choices=(\"keep\", \"delete\"),\n                    default=\"delete\",\n                )\n                print()\n                if (answer == \"delete\"):\n                    with Halo(f\"Deleting unused version v{version.name}..\"):\n                        shutil.rmtree(version, ignore_errors=True)\n                if (answer == \"keep\"):\n                    log.minor(\"Keeping the version for now, will check again later!\")\n                    return tracker.update()\n            except KeyboardInterrupt:\n                exit(0)\n\n        # Note: Avoid interactive prompts if running with arguments\n        if Environment.flag(\"UNUSED_CHECK\", 1) and (not arguments()):\n            for version in (x for x in venv_path.parent.glob(\"*\") if x.is_dir()):\n                with contextlib.suppress(Exception):\n                    manage_install(version)\n\n    def uninstall(self) -&gt; None:\n        ...\n</code></pre>"},{"location":"code/broken/core/brokenproject/#Broken.Core.BrokenProject.BrokenProject.PACKAGE","title":"PACKAGE","text":"<pre><code>PACKAGE: Path = field(converter=lambda x: Path(x).parent)\n</code></pre> <p>Send the importer's init.py's file variable</p>"},{"location":"code/broken/core/brokenproject/#Broken.Core.BrokenProject.BrokenProject.APP_NAME","title":"APP_NAME","text":"<pre><code>APP_NAME: str\n</code></pre>"},{"location":"code/broken/core/brokenproject/#Broken.Core.BrokenProject.BrokenProject.APP_AUTHOR","title":"APP_AUTHOR","text":"<pre><code>APP_AUTHOR: str\n</code></pre>"},{"location":"code/broken/core/brokenproject/#Broken.Core.BrokenProject.BrokenProject.VERSION","title":"VERSION","text":"<pre><code>VERSION: str = Runtime.Version\n</code></pre>"},{"location":"code/broken/core/brokenproject/#Broken.Core.BrokenProject.BrokenProject.ABOUT","title":"ABOUT","text":"<pre><code>ABOUT: str = 'No description provided'\n</code></pre>"},{"location":"code/broken/core/brokenproject/#Broken.Core.BrokenProject.BrokenProject.DIRECTORIES","title":"DIRECTORIES","text":"<pre><code>DIRECTORIES: _Directories = None\n</code></pre>"},{"location":"code/broken/core/brokenproject/#Broken.Core.BrokenProject.BrokenProject.RESOURCES","title":"RESOURCES","text":"<pre><code>RESOURCES: _Resources = None\n</code></pre>"},{"location":"code/broken/core/brokenproject/#Broken.Core.BrokenProject.BrokenProject.__attrs_post_init__","title":"__attrs_post_init__","text":"<pre><code>__attrs_post_init__()\n</code></pre> Source code in <code>Broken/Core/BrokenProject.py</code> <pre><code>def __attrs_post_init__(self):\n    self.DIRECTORIES = _Directories(PROJECT=self)\n    self.RESOURCES = _Resources(PROJECT=self)\n    BrokenLogging.set_project(self.APP_NAME)\n\n    # Print version information on \"--version/-V\"\n    if (list_get(sys.argv, 1) in (\"--version\", \"-V\")):\n        print(f\"{self.APP_NAME} {self.VERSION} {BrokenPlatform.Host.value}\")\n        sys.exit(0)\n\n    # Replace Broken.PROJECT with the first initialized project\n    if (project := getattr(Broken, \"PROJECT\", None)):\n        if (project is Broken.BROKEN):\n            if (BrokenPlatform.Root and not Runtime.Docker):\n                log.warning(\"Running as [bold blink red]Administrator or Root[/] is discouraged unless necessary!\")\n            self._pyapp_management()\n            Broken.PROJECT = self\n\n    # Convenience symlink the project's workspace\n    if Runtime.Source and Environment.flag(\"WORKSPACE_SYMLINK\", 0):\n        BrokenPath.symlink(\n            virtual=self.DIRECTORIES.REPOSITORY/\"Workspace\",\n            real=self.DIRECTORIES.WORKSPACE, echo=False\n        )\n\n    # Load dotenv files in common directories\n    for path in self.DIRECTORIES.REPOSITORY.glob(\"*.env\"):\n        dotenv.load_dotenv(path, override=True)\n</code></pre>"},{"location":"code/broken/core/brokenproject/#Broken.Core.BrokenProject.BrokenProject.chdir","title":"chdir","text":"<pre><code>chdir() -&gt; Self\n</code></pre> <p>Change directory to the project's root</p> Source code in <code>Broken/Core/BrokenProject.py</code> <pre><code>def chdir(self) -&gt; Self:\n    \"\"\"Change directory to the project's root\"\"\"\n    return os.chdir(self.PACKAGE.parent.parent) or self\n</code></pre>"},{"location":"code/broken/core/brokenproject/#Broken.Core.BrokenProject.BrokenProject.welcome","title":"welcome","text":"<pre><code>welcome() -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenProject.py</code> <pre><code>def welcome(self) -&gt; None:\n    import pyfiglet # noqa\n    from Broken import BrokenTorch\n    torch = BrokenTorch.version()\n    ascii = pyfiglet.figlet_format(self.APP_NAME)\n    ascii = '\\n'.join((x for x in ascii.split('\\n') if x.strip()))\n    rprint(Panel(\n        Align.center(ascii + \"\\n\"),\n        subtitle=''.join((\n            \"[bold dim]\ud83d\udce6 \"\n            f\"Version {self.VERSION} \",\n            f\"\u2022 Python {sys.version.split()[0]} \",\n            f\"\u2022 Torch {torch.value} \" if torch else \"\",\n            \"\ud83d\udce6[/]\",\n        )),\n    ))\n</code></pre>"},{"location":"code/broken/core/brokenproject/#Broken.Core.BrokenProject.BrokenProject.uninstall","title":"uninstall","text":"<pre><code>uninstall() -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenProject.py</code> <pre><code>def uninstall(self) -&gt; None:\n    ...\n</code></pre>"},{"location":"code/broken/core/brokenproject/#Broken.Core.BrokenProject.mkdir","title":"mkdir","text":"<pre><code>mkdir(path: Path, resolve: bool = True) -&gt; Path\n</code></pre> <p>Make a directory and return it</p> Source code in <code>Broken/Core/BrokenProject.py</code> <pre><code>def mkdir(path: Path, resolve: bool=True) -&gt; Path:\n    \"\"\"Make a directory and return it\"\"\"\n    path = Path(path).resolve() if resolve else Path(path)\n    if not path.exists():\n        log.info(f\"Creating directory: {path}\")\n        path.mkdir(parents=True, exist_ok=True)\n    return path\n</code></pre>"},{"location":"code/broken/core/brokenresolution/","title":"File: <code>Broken/Core/BrokenResolution.py</code>","text":""},{"location":"code/broken/core/brokenresolution/#Broken.Core.BrokenResolution","title":"Broken.Core.BrokenResolution","text":""},{"location":"code/broken/core/brokenresolution/#Broken.Core.BrokenResolution.BrokenResolution","title":"BrokenResolution","text":"Source code in <code>Broken/Core/BrokenResolution.py</code> <pre><code>class BrokenResolution:\n\n    @staticmethod\n    def round(*numbers: Number, multiple: int=2) -&gt; Union[int, tuple[int, ...]]:\n        \"\"\"Round to the nearest multiple of 2, returns a single value or a tuple of values\"\"\"\n        values = tuple(max(multiple, multiple*round(value/multiple)) for value in numbers)\n        return (values[0] if (len(values) == 1) else values)\n\n    @classmethod\n    def fit(cls,\n        old: Optional[tuple[int, int]] = None,\n        new: Optional[tuple[int, int]] = None,\n        max: Optional[tuple[int, int]] = None,\n        ar: Optional[float] = None,\n        scale: float = 1.0,\n        multiple: int = 2,\n    ) -&gt; tuple[int, int]:\n        \"\"\"Fit, Scale and optionally force Aspect Ratio on a base to a (un)limited target resolution\n\n        This method solves the following problem:\n            \"A window is at some initial size (ow, oh) and a resize was asked to (nw, nh); what\n            final resolution the window should be, optionally enforcing an aspect ratio (ar),\n            and limited by the monitor resolution (mw, mh)?\"\n\n        To which, the behavior is as follows in the two branches:\n            No aspect ratio (ar=None) is send:\n                - Returns the original resolution overridden by any new (nw, nh)\n\n            Aspect ratio (ar!=None) is send:\n                - If any of the new (nw, nh) is missing, find the other based on the aspect ratio;\n                - Else, prioritize width changes, and downscale/upscale accordingly;\n                - Post-limits resolution to (mw, mh) by multiplying both components to max fit it\n\n        Notes\n        -----\n            - The resolution is rounded to the nearest multiple of 2, so FFmpeg is happy\n\n        Parameters\n        ----------\n        old : tuple[int, int] or None\n            Old resolution\n        new : tuple[int, int] or None\n            New resolution\n        max : tuple[int, int] or None\n            Maximum resolution\n        scale : float or None\n            Scale factor\n        ar : float or None\n            Force aspect ratio, if any\n\n        Returns\n        -------\n        (int, int)\n            The new best-fit width and height\n        \"\"\"\n        old_width, old_height = (old or (None, None))\n        new_width, new_height = (new or (None, None))\n        max_width, max_height = (max or (None, None))\n\n        log.debug(f\"Fit resolution: ({old_width}, {old_height}) -&gt; ({new_width}, {new_height})^({max_width}, {max_height}), AR {ar}\")\n\n        # Force or keep either component\n        (width, height) = ((new_width or old_width), (new_height or old_height))\n\n        if not all((width, height)):\n            raise ValueError(f\"Can't build a resolution with missing component(s): ({width=}, {height=})\")\n\n        if (ar is not None):\n\n            # Build from width (W) or from height (H)\n            from_width  = (width, width/ar)\n            from_height = (height*ar, height)\n\n            # Pick the non missing component's\n            if (new_height is None):\n                (width, height) = from_width\n            elif (new_width is None):\n                (width, height) = from_height\n\n            # Based on upscale or downscale\n            elif (new_width != old_width):\n                (width, height) = from_width\n            elif (new_height != old_height):\n                (width, height) = from_height\n            else:\n                (width, height) = from_width\n\n            # Limit the resolution to (mw, mh) bounding box and keep aspect ratio\n            # - The idea is to find the maximum reduce factor for either component so it normalizes\n            #   to the respective (mw, mh), and apply it to both components to scale down\n            reduce = __builtins__[\"max\"](\n                width/(min(width, max_width or math.inf) or 1),\n                height/(min(height, max_height or math.inf) or 1)\n            ) or 1\n\n            width, height = (width/reduce, height/reduce)\n\n        else:\n            # Limit each component independently\n            width  = min(width,  max_width or math.inf)\n            height = min(height, max_height or math.inf)\n\n        return cls.round(width*scale, height*scale, multiple=multiple)\n</code></pre>"},{"location":"code/broken/core/brokenresolution/#Broken.Core.BrokenResolution.BrokenResolution.round","title":"round","text":"<pre><code>round(\n    *numbers: Number, multiple: int = 2\n) -&gt; Union[int, tuple[int, ...]]\n</code></pre> <p>Round to the nearest multiple of 2, returns a single value or a tuple of values</p> Source code in <code>Broken/Core/BrokenResolution.py</code> <pre><code>@staticmethod\ndef round(*numbers: Number, multiple: int=2) -&gt; Union[int, tuple[int, ...]]:\n    \"\"\"Round to the nearest multiple of 2, returns a single value or a tuple of values\"\"\"\n    values = tuple(max(multiple, multiple*round(value/multiple)) for value in numbers)\n    return (values[0] if (len(values) == 1) else values)\n</code></pre>"},{"location":"code/broken/core/brokenresolution/#Broken.Core.BrokenResolution.BrokenResolution.fit","title":"fit","text":"<pre><code>fit(\n    old: Optional[tuple[int, int]] = None,\n    new: Optional[tuple[int, int]] = None,\n    max: Optional[tuple[int, int]] = None,\n    ar: Optional[float] = None,\n    scale: float = 1.0,\n    multiple: int = 2,\n) -&gt; tuple[int, int]\n</code></pre> <p>Fit, Scale and optionally force Aspect Ratio on a base to a (un)limited target resolution</p> This method solves the following problem <p>\"A window is at some initial size (ow, oh) and a resize was asked to (nw, nh); what final resolution the window should be, optionally enforcing an aspect ratio (ar), and limited by the monitor resolution (mw, mh)?\"</p> <p>To which, the behavior is as follows in the two branches:     No aspect ratio (ar=None) is send:         - Returns the original resolution overridden by any new (nw, nh)</p> <pre><code>Aspect ratio (ar!=None) is send:\n    - If any of the new (nw, nh) is missing, find the other based on the aspect ratio;\n    - Else, prioritize width changes, and downscale/upscale accordingly;\n    - Post-limits resolution to (mw, mh) by multiplying both components to max fit it\n</code></pre>"},{"location":"code/broken/core/brokenresolution/#Broken.Core.BrokenResolution.BrokenResolution.fit--notes","title":"Notes","text":"<pre><code>- The resolution is rounded to the nearest multiple of 2, so FFmpeg is happy\n</code></pre>"},{"location":"code/broken/core/brokenresolution/#Broken.Core.BrokenResolution.BrokenResolution.fit--parameters","title":"Parameters","text":"<p>old : tuple[int, int] or None     Old resolution new : tuple[int, int] or None     New resolution max : tuple[int, int] or None     Maximum resolution scale : float or None     Scale factor ar : float or None     Force aspect ratio, if any</p>"},{"location":"code/broken/core/brokenresolution/#Broken.Core.BrokenResolution.BrokenResolution.fit--returns","title":"Returns","text":"<p>(int, int)     The new best-fit width and height</p> Source code in <code>Broken/Core/BrokenResolution.py</code> <pre><code>@classmethod\ndef fit(cls,\n    old: Optional[tuple[int, int]] = None,\n    new: Optional[tuple[int, int]] = None,\n    max: Optional[tuple[int, int]] = None,\n    ar: Optional[float] = None,\n    scale: float = 1.0,\n    multiple: int = 2,\n) -&gt; tuple[int, int]:\n    \"\"\"Fit, Scale and optionally force Aspect Ratio on a base to a (un)limited target resolution\n\n    This method solves the following problem:\n        \"A window is at some initial size (ow, oh) and a resize was asked to (nw, nh); what\n        final resolution the window should be, optionally enforcing an aspect ratio (ar),\n        and limited by the monitor resolution (mw, mh)?\"\n\n    To which, the behavior is as follows in the two branches:\n        No aspect ratio (ar=None) is send:\n            - Returns the original resolution overridden by any new (nw, nh)\n\n        Aspect ratio (ar!=None) is send:\n            - If any of the new (nw, nh) is missing, find the other based on the aspect ratio;\n            - Else, prioritize width changes, and downscale/upscale accordingly;\n            - Post-limits resolution to (mw, mh) by multiplying both components to max fit it\n\n    Notes\n    -----\n        - The resolution is rounded to the nearest multiple of 2, so FFmpeg is happy\n\n    Parameters\n    ----------\n    old : tuple[int, int] or None\n        Old resolution\n    new : tuple[int, int] or None\n        New resolution\n    max : tuple[int, int] or None\n        Maximum resolution\n    scale : float or None\n        Scale factor\n    ar : float or None\n        Force aspect ratio, if any\n\n    Returns\n    -------\n    (int, int)\n        The new best-fit width and height\n    \"\"\"\n    old_width, old_height = (old or (None, None))\n    new_width, new_height = (new or (None, None))\n    max_width, max_height = (max or (None, None))\n\n    log.debug(f\"Fit resolution: ({old_width}, {old_height}) -&gt; ({new_width}, {new_height})^({max_width}, {max_height}), AR {ar}\")\n\n    # Force or keep either component\n    (width, height) = ((new_width or old_width), (new_height or old_height))\n\n    if not all((width, height)):\n        raise ValueError(f\"Can't build a resolution with missing component(s): ({width=}, {height=})\")\n\n    if (ar is not None):\n\n        # Build from width (W) or from height (H)\n        from_width  = (width, width/ar)\n        from_height = (height*ar, height)\n\n        # Pick the non missing component's\n        if (new_height is None):\n            (width, height) = from_width\n        elif (new_width is None):\n            (width, height) = from_height\n\n        # Based on upscale or downscale\n        elif (new_width != old_width):\n            (width, height) = from_width\n        elif (new_height != old_height):\n            (width, height) = from_height\n        else:\n            (width, height) = from_width\n\n        # Limit the resolution to (mw, mh) bounding box and keep aspect ratio\n        # - The idea is to find the maximum reduce factor for either component so it normalizes\n        #   to the respective (mw, mh), and apply it to both components to scale down\n        reduce = __builtins__[\"max\"](\n            width/(min(width, max_width or math.inf) or 1),\n            height/(min(height, max_height or math.inf) or 1)\n        ) or 1\n\n        width, height = (width/reduce, height/reduce)\n\n    else:\n        # Limit each component independently\n        width  = min(width,  max_width or math.inf)\n        height = min(height, max_height or math.inf)\n\n    return cls.round(width*scale, height*scale, multiple=multiple)\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/","title":"File: <code>Broken/Core/BrokenScheduler.py</code>","text":""},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler","title":"Broken.Core.BrokenScheduler","text":""},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.precise","title":"precise","text":"<pre><code>precise(sleep: float, *, error: float = 0.001) -&gt; None\n</code></pre> <p>A precise alternative of time.sleep(), low cpu near-end thread spin. Increases CPU usage.</p> Source code in <code>Broken/Core/BrokenScheduler.py</code> <pre><code>def precise(sleep: float, *, error: float=0.001) -&gt; None:\n    \"\"\"A precise alternative of time.sleep(), low cpu near-end thread spin. Increases CPU usage.\"\"\"\n    start = time.perf_counter()\n\n    # Sleep close to the due time\n    if (ahead := max(0, sleep - error)):\n        time.sleep(ahead)\n    else:\n        return\n\n    # Spin the thread until the time is up (precise Sleep)\n    while (time.perf_counter() - start) &lt; sleep:\n        pass\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.NULL_CONTEXT","title":"NULL_CONTEXT","text":"<pre><code>NULL_CONTEXT = contextlib.nullcontext()\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask","title":"SchedulerTask","text":"Source code in <code>Broken/Core/BrokenScheduler.py</code> <pre><code>@define\nclass SchedulerTask:\n\n    # # Basic\n\n    task: Callable = None\n    \"\"\"Function callable to call every synchronization. Automatically sends a 'time' or 'dt'\n    argument if the function's signature contains it\"\"\"\n\n    args: list[Any] = field(factory=list, repr=False)\n    \"\"\"Method's positional arguments\"\"\"\n\n    kwargs: dict[str, Any] = field(factory=dict, repr=False)\n    \"\"\"Method's keyword arguments\"\"\"\n\n    output: Any = field(default=None, repr=False)\n    \"\"\"Method's return value of the last call\"\"\"\n\n    context: Any = None\n    \"\"\"Context to use when calling task (with statement)\"\"\"\n\n    lock: Lock = None\n    \"\"\"Threading Lock to use when calling task (with statement)\"\"\"\n\n    enabled: bool = True\n    \"\"\"Whether to enable this client or not\"\"\"\n\n    once: bool = False\n    \"\"\"Client will be removed after next call\"\"\"\n\n    # # Synchronization\n\n    frequency: float = 60.0\n    \"\"\"Ideal frequency of task calls\"\"\"\n\n    frameskip: bool = True\n    \"\"\"Constant deltatime mode (False) or real deltatime mode (True)\"\"\"\n\n    freewheel: bool = False\n    \"\"\"\"Rendering\" mode, do not sleep on real time, exact virtual frametimes\"\"\"\n\n    precise: bool = False\n    \"\"\"Use precise time sleeping for near-perfect frametimes\"\"\"\n\n    # # Timing\n\n    started: float = Factory(lambda: time.absolute())\n    \"\"\"Time when client was started (initializes $now+started, value in now() seconds)\"\"\"\n\n    next_call: float = None\n    \"\"\"Next time to call task (initializes $now+next_call, value in now() seconds)\"\"\"\n\n    last_call: float = None\n    \"\"\"Last time task was called (initializes $now+last_call, value in now() seconds)\"\"\"\n\n    # # Flags\n\n    _dt: bool = False\n\n    def __attrs_post_init__(self):\n        signature = inspect.signature(self.task)\n        self._dt = (\"dt\" in signature.parameters)\n\n        # Assign idealistic values for decoupled\n        if self.freewheel: self.started = time.zero\n        self.last_call = (self.last_call or self.started) - self.period\n        self.next_call = (self.next_call or self.started)\n\n    # # Useful properties\n\n    @property\n    def fps(self) -&gt; float:\n        return self.frequency\n\n    @fps.setter\n    def fps(self, value: float):\n        self.frequency = value\n\n    @property\n    def period(self) -&gt; float:\n        return (1.0 / self.frequency)\n\n    @period.setter\n    def period(self, value: float):\n        self.frequency = (1 / value)\n\n    @property\n    def should_delete(self) -&gt; bool:\n        return (self.once and (not self.enabled))\n\n    @property\n    def should_live(self) -&gt; bool:\n        return (not self.should_delete)\n\n    # # Sorting (prioritizes 'once' clients)\n\n    def __lt__(self, other: Self) -&gt; bool:\n        if (self.once and not other.once):\n            return True\n        return (self.next_call &lt; other.next_call)\n\n    def __gt__(self, other: Self) -&gt; bool:\n        if (not self.once and other.once):\n            return True\n        return (self.next_call &gt; other.next_call)\n\n    # # Implementation\n\n    def next(self, block: bool=True) -&gt; Self:\n\n        # Time to wait for next call if block\n        wait = max(0, (self.next_call - time.absolute()))\n\n        # Rendering is instant\n        if self.freewheel:\n            pass\n\n        # Block until due\n        elif block:\n            if self.precise:\n                time.precise(wait)\n            else:\n                time.sleep(wait)\n\n        # Non-blocking not due yet\n        elif wait &gt; 0:\n            return None\n\n        # The assumed instant the code below will run instantly\n        now = (self.next_call if self.freewheel else time.absolute())\n\n        if (self._dt):\n            self.kwargs[\"dt\"] = (now - self.last_call)\n\n            # Frameskip limits maximum dt to period\n            if (not self.frameskip):\n                self.kwargs[\"dt\"] = min(self.kwargs[\"dt\"], self.period)\n\n        self.last_call = now\n\n        # Enter contexts, call task with args and kwargs\n        with (self.lock or NULL_CONTEXT):\n            with (self.context or NULL_CONTEXT):\n                self.output = self.task(*self.args, **self.kwargs)\n\n        # Find a future multiple of period\n        while (self.next_call &lt;= now):\n            self.next_call += self.period\n\n        # (Disabled &amp;&amp; Once) clients gets deleted\n        self.enabled = (not self.once)\n        return self\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.task","title":"task","text":"<pre><code>task: Callable = None\n</code></pre> <p>Function callable to call every synchronization. Automatically sends a 'time' or 'dt' argument if the function's signature contains it</p>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.args","title":"args","text":"<pre><code>args: list[Any] = field(factory=list, repr=False)\n</code></pre> <p>Method's positional arguments</p>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.kwargs","title":"kwargs","text":"<pre><code>kwargs: dict[str, Any] = field(factory=dict, repr=False)\n</code></pre> <p>Method's keyword arguments</p>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.output","title":"output","text":"<pre><code>output: Any = field(default=None, repr=False)\n</code></pre> <p>Method's return value of the last call</p>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.context","title":"context","text":"<pre><code>context: Any = None\n</code></pre> <p>Context to use when calling task (with statement)</p>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.lock","title":"lock","text":"<pre><code>lock: Lock = None\n</code></pre> <p>Threading Lock to use when calling task (with statement)</p>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.enabled","title":"enabled","text":"<pre><code>enabled: bool = True\n</code></pre> <p>Whether to enable this client or not</p>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.once","title":"once","text":"<pre><code>once: bool = False\n</code></pre> <p>Client will be removed after next call</p>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.frequency","title":"frequency","text":"<pre><code>frequency: float = 60.0\n</code></pre> <p>Ideal frequency of task calls</p>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.frameskip","title":"frameskip","text":"<pre><code>frameskip: bool = True\n</code></pre> <p>Constant deltatime mode (False) or real deltatime mode (True)</p>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.freewheel","title":"freewheel","text":"<pre><code>freewheel: bool = False\n</code></pre> <p>\"Rendering\" mode, do not sleep on real time, exact virtual frametimes</p>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.precise","title":"precise","text":"<pre><code>precise: bool = False\n</code></pre> <p>Use precise time sleeping for near-perfect frametimes</p>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.started","title":"started","text":"<pre><code>started: float = Factory(lambda: time.absolute())\n</code></pre> <p>Time when client was started (initializes $now+started, value in now() seconds)</p>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.next_call","title":"next_call","text":"<pre><code>next_call: float = None\n</code></pre> <p>Next time to call task (initializes $now+next_call, value in now() seconds)</p>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.last_call","title":"last_call","text":"<pre><code>last_call: float = None\n</code></pre> <p>Last time task was called (initializes $now+last_call, value in now() seconds)</p>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.__attrs_post_init__","title":"__attrs_post_init__","text":"<pre><code>__attrs_post_init__()\n</code></pre> Source code in <code>Broken/Core/BrokenScheduler.py</code> <pre><code>def __attrs_post_init__(self):\n    signature = inspect.signature(self.task)\n    self._dt = (\"dt\" in signature.parameters)\n\n    # Assign idealistic values for decoupled\n    if self.freewheel: self.started = time.zero\n    self.last_call = (self.last_call or self.started) - self.period\n    self.next_call = (self.next_call or self.started)\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.fps","title":"fps","text":"<pre><code>fps: float\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.period","title":"period","text":"<pre><code>period: float\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.should_delete","title":"should_delete","text":"<pre><code>should_delete: bool\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.should_live","title":"should_live","text":"<pre><code>should_live: bool\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.__lt__","title":"__lt__","text":"<pre><code>__lt__(other: Self) -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenScheduler.py</code> <pre><code>def __lt__(self, other: Self) -&gt; bool:\n    if (self.once and not other.once):\n        return True\n    return (self.next_call &lt; other.next_call)\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.__gt__","title":"__gt__","text":"<pre><code>__gt__(other: Self) -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenScheduler.py</code> <pre><code>def __gt__(self, other: Self) -&gt; bool:\n    if (not self.once and other.once):\n        return True\n    return (self.next_call &gt; other.next_call)\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.SchedulerTask.next","title":"next","text":"<pre><code>next(block: bool = True) -&gt; Self\n</code></pre> Source code in <code>Broken/Core/BrokenScheduler.py</code> <pre><code>def next(self, block: bool=True) -&gt; Self:\n\n    # Time to wait for next call if block\n    wait = max(0, (self.next_call - time.absolute()))\n\n    # Rendering is instant\n    if self.freewheel:\n        pass\n\n    # Block until due\n    elif block:\n        if self.precise:\n            time.precise(wait)\n        else:\n            time.sleep(wait)\n\n    # Non-blocking not due yet\n    elif wait &gt; 0:\n        return None\n\n    # The assumed instant the code below will run instantly\n    now = (self.next_call if self.freewheel else time.absolute())\n\n    if (self._dt):\n        self.kwargs[\"dt\"] = (now - self.last_call)\n\n        # Frameskip limits maximum dt to period\n        if (not self.frameskip):\n            self.kwargs[\"dt\"] = min(self.kwargs[\"dt\"], self.period)\n\n    self.last_call = now\n\n    # Enter contexts, call task with args and kwargs\n    with (self.lock or NULL_CONTEXT):\n        with (self.context or NULL_CONTEXT):\n            self.output = self.task(*self.args, **self.kwargs)\n\n    # Find a future multiple of period\n    while (self.next_call &lt;= now):\n        self.next_call += self.period\n\n    # (Disabled &amp;&amp; Once) clients gets deleted\n    self.enabled = (not self.once)\n    return self\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.BrokenScheduler","title":"BrokenScheduler","text":"Source code in <code>Broken/Core/BrokenScheduler.py</code> <pre><code>@define\nclass BrokenScheduler:\n    tasks: deque[SchedulerTask] = Factory(deque)\n\n    def add(self, task: SchedulerTask) -&gt; SchedulerTask:\n        \"\"\"Adds a task to the scheduler with immediate next call\"\"\"\n        self.tasks.append(task)\n        return task\n\n    def new(self, task: Callable, **options) -&gt; SchedulerTask:\n        \"\"\"Add a new task to the scheduler\"\"\"\n        return self.add(SchedulerTask(task=task, **options))\n\n    def once(self, task: Callable, **options) -&gt; SchedulerTask:\n        \"\"\"Add a new task that shall only run once and immediately\"\"\"\n        return self.add(SchedulerTask(task=task, **options, once=True))\n\n    def delete(self, task: SchedulerTask) -&gt; None:\n        \"\"\"Removes a task from the scheduler\"\"\"\n        self.tasks.remove(task)\n\n    def clear(self) -&gt; None:\n        \"\"\"Removes all tasks\"\"\"\n        self.tasks.clear()\n\n    @property\n    def enabled_tasks(self) -&gt; Iterable[SchedulerTask]:\n        for task in self.tasks:\n            if task.enabled:\n                yield task\n\n    @property\n    def next_task(self) -&gt; Optional[SchedulerTask]:\n        \"\"\"Returns the next client to be called\"\"\"\n        return min(self.enabled_tasks, default=None)\n\n    def _sanitize(self) -&gt; None:\n        \"\"\"Removes disabled 'once' clients\"\"\"\n        # Optimization: Replace first N clients with valid ones, then pop remaining pointers\n        move = 0\n        for task in self.tasks:\n            if task.should_live:\n                self.tasks[move] = task\n                move += 1\n        for _ in range(len(self.tasks) - move):\n            self.tasks.pop()\n\n    def next(self, block=True) -&gt; Optional[SchedulerTask]:\n        if (task := self.next_task) is None:\n            return None\n        try:\n            return task.next(block=block)\n        finally:\n            if task.should_delete:\n                self._sanitize()\n\n    def all_once(self) -&gt; None:\n        \"\"\"Calls all 'once' clients. Useful for @partial calls on the main thread\"\"\"\n        for task in self.tasks:\n            if task.once:\n                task.next()\n        self._sanitize()\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.BrokenScheduler.tasks","title":"tasks","text":"<pre><code>tasks: deque[SchedulerTask] = Factory(deque)\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.BrokenScheduler.add","title":"add","text":"<pre><code>add(task: SchedulerTask) -&gt; SchedulerTask\n</code></pre> <p>Adds a task to the scheduler with immediate next call</p> Source code in <code>Broken/Core/BrokenScheduler.py</code> <pre><code>def add(self, task: SchedulerTask) -&gt; SchedulerTask:\n    \"\"\"Adds a task to the scheduler with immediate next call\"\"\"\n    self.tasks.append(task)\n    return task\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.BrokenScheduler.new","title":"new","text":"<pre><code>new(task: Callable, **options) -&gt; SchedulerTask\n</code></pre> <p>Add a new task to the scheduler</p> Source code in <code>Broken/Core/BrokenScheduler.py</code> <pre><code>def new(self, task: Callable, **options) -&gt; SchedulerTask:\n    \"\"\"Add a new task to the scheduler\"\"\"\n    return self.add(SchedulerTask(task=task, **options))\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.BrokenScheduler.once","title":"once","text":"<pre><code>once(task: Callable, **options) -&gt; SchedulerTask\n</code></pre> <p>Add a new task that shall only run once and immediately</p> Source code in <code>Broken/Core/BrokenScheduler.py</code> <pre><code>def once(self, task: Callable, **options) -&gt; SchedulerTask:\n    \"\"\"Add a new task that shall only run once and immediately\"\"\"\n    return self.add(SchedulerTask(task=task, **options, once=True))\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.BrokenScheduler.delete","title":"delete","text":"<pre><code>delete(task: SchedulerTask) -&gt; None\n</code></pre> <p>Removes a task from the scheduler</p> Source code in <code>Broken/Core/BrokenScheduler.py</code> <pre><code>def delete(self, task: SchedulerTask) -&gt; None:\n    \"\"\"Removes a task from the scheduler\"\"\"\n    self.tasks.remove(task)\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.BrokenScheduler.clear","title":"clear","text":"<pre><code>clear() -&gt; None\n</code></pre> <p>Removes all tasks</p> Source code in <code>Broken/Core/BrokenScheduler.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"Removes all tasks\"\"\"\n    self.tasks.clear()\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.BrokenScheduler.enabled_tasks","title":"enabled_tasks","text":"<pre><code>enabled_tasks: Iterable[SchedulerTask]\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.BrokenScheduler.next_task","title":"next_task","text":"<pre><code>next_task: Optional[SchedulerTask]\n</code></pre> <p>Returns the next client to be called</p>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.BrokenScheduler.next","title":"next","text":"<pre><code>next(block=True) -&gt; Optional[SchedulerTask]\n</code></pre> Source code in <code>Broken/Core/BrokenScheduler.py</code> <pre><code>def next(self, block=True) -&gt; Optional[SchedulerTask]:\n    if (task := self.next_task) is None:\n        return None\n    try:\n        return task.next(block=block)\n    finally:\n        if task.should_delete:\n            self._sanitize()\n</code></pre>"},{"location":"code/broken/core/brokenscheduler/#Broken.Core.BrokenScheduler.BrokenScheduler.all_once","title":"all_once","text":"<pre><code>all_once() -&gt; None\n</code></pre> <p>Calls all 'once' clients. Useful for @partial calls on the main thread</p> Source code in <code>Broken/Core/BrokenScheduler.py</code> <pre><code>def all_once(self) -&gt; None:\n    \"\"\"Calls all 'once' clients. Useful for @partial calls on the main thread\"\"\"\n    for task in self.tasks:\n        if task.once:\n            task.next()\n    self._sanitize()\n</code></pre>"},{"location":"code/broken/core/brokentorch/","title":"File: <code>Broken/Core/BrokenTorch.py</code>","text":""},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch","title":"Broken.Core.BrokenTorch","text":""},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TORCH_INDEX_URL_NIGHTLY","title":"TORCH_INDEX_URL_NIGHTLY","text":"<pre><code>TORCH_INDEX_URL_NIGHTLY: str = (\n    \"https://download.pytorch.org/whl/nightly/\"\n)\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TORCH_INDEX_URL_STABLE","title":"TORCH_INDEX_URL_STABLE","text":"<pre><code>TORCH_INDEX_URL_STABLE: str = (\n    \"https://download.pytorch.org/whl/\"\n)\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TORCH_VERSION","title":"TORCH_VERSION","text":"<pre><code>TORCH_VERSION: str = '2.6.0'\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease","title":"TorchRelease","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Core/BrokenTorch.py</code> <pre><code>class TorchRelease(str, BrokenEnum):\n    TORCH_251_MACOS    = \"2.5.1\"\n    TORCH_251_CPU      = \"2.5.1+cpu\"\n    TORCH_251_CUDA_118 = \"2.5.1+cu118\"\n    TORCH_251_CUDA_121 = \"2.5.1+cu121\"\n    TORCH_251_CUDA_124 = \"2.5.1+cu124\"\n    TORCH_251_ROCM_610 = \"2.5.1+rocm6.1\"\n    TORCH_251_ROCM_620 = \"2.5.1+rocm6.2\"\n    TORCH_260_MACOS    = \"2.6.0\"\n    TORCH_260_CPU      = \"2.6.0+cpu\"\n    TORCH_260_CUDA_118 = \"2.6.0+cu118\"\n    TORCH_260_CUDA_124 = \"2.6.0+cu124\"\n    TORCH_260_CUDA_126 = \"2.6.0+cu126\"\n    TORCH_260_ROCM_610 = \"2.6.0+rocm6.1\"\n    TORCH_260_ROCM_624 = \"2.6.0+rocm6.2.4\"\n    TORCH_260_XPU      = \"2.6.0+xpu\"\n\n    # Installation\n\n    @property\n    def index(self) -&gt; Optional[str]:\n        if (not self.is_plain):\n            return TORCH_INDEX_URL_STABLE + (self.flavor or '')\n\n    @property\n    def packages(self) -&gt; tuple[str]:\n        return (f\"torch=={self.value}\", \"torchvision\")\n\n    def install(self) -&gt; None:\n        log.special(f\"Installing PyTorch version ({self.value})\")\n        shell(Tools.pip, \"install\", self.packages, every(\"--index-url\", self.index))\n\n    def uninstall(self) -&gt; None:\n        shell(Tools.pip, \"uninstall\", \"--quiet\", self.packages)\n\n    # Differentiators\n\n    @property\n    def number(self) -&gt; str:\n        return self.value.split(\"+\")[0]\n\n    @property\n    def flavor(self) -&gt; Optional[str]:\n        if len(parts := self.value.split(\"+\")) &gt; 1:\n            return parts[1]\n\n    # Util properties\n\n    @property\n    def is_plain(self) -&gt; bool:\n        return (\"+\" not in self.value)\n\n    @property\n    def is_cuda(self) -&gt; bool:\n        return (\"+cu\" in self.value)\n\n    @property\n    def is_rocm(self) -&gt; bool:\n        return (\"+rocm\" in self.value)\n\n    @property\n    def is_cpu(self) -&gt; bool:\n        return (\"+cpu\" in self.value)\n\n    @property\n    def is_xpu(self) -&gt; bool:\n        return (\"+xpu\" in self.value)\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.TORCH_251_MACOS","title":"TORCH_251_MACOS","text":"<pre><code>TORCH_251_MACOS = '2.5.1'\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.TORCH_251_CPU","title":"TORCH_251_CPU","text":"<pre><code>TORCH_251_CPU = '2.5.1+cpu'\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.TORCH_251_CUDA_118","title":"TORCH_251_CUDA_118","text":"<pre><code>TORCH_251_CUDA_118 = '2.5.1+cu118'\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.TORCH_251_CUDA_121","title":"TORCH_251_CUDA_121","text":"<pre><code>TORCH_251_CUDA_121 = '2.5.1+cu121'\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.TORCH_251_CUDA_124","title":"TORCH_251_CUDA_124","text":"<pre><code>TORCH_251_CUDA_124 = '2.5.1+cu124'\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.TORCH_251_ROCM_610","title":"TORCH_251_ROCM_610","text":"<pre><code>TORCH_251_ROCM_610 = '2.5.1+rocm6.1'\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.TORCH_251_ROCM_620","title":"TORCH_251_ROCM_620","text":"<pre><code>TORCH_251_ROCM_620 = '2.5.1+rocm6.2'\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.TORCH_260_MACOS","title":"TORCH_260_MACOS","text":"<pre><code>TORCH_260_MACOS = '2.6.0'\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.TORCH_260_CPU","title":"TORCH_260_CPU","text":"<pre><code>TORCH_260_CPU = '2.6.0+cpu'\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.TORCH_260_CUDA_118","title":"TORCH_260_CUDA_118","text":"<pre><code>TORCH_260_CUDA_118 = '2.6.0+cu118'\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.TORCH_260_CUDA_124","title":"TORCH_260_CUDA_124","text":"<pre><code>TORCH_260_CUDA_124 = '2.6.0+cu124'\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.TORCH_260_CUDA_126","title":"TORCH_260_CUDA_126","text":"<pre><code>TORCH_260_CUDA_126 = '2.6.0+cu126'\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.TORCH_260_ROCM_610","title":"TORCH_260_ROCM_610","text":"<pre><code>TORCH_260_ROCM_610 = '2.6.0+rocm6.1'\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.TORCH_260_ROCM_624","title":"TORCH_260_ROCM_624","text":"<pre><code>TORCH_260_ROCM_624 = '2.6.0+rocm6.2.4'\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.TORCH_260_XPU","title":"TORCH_260_XPU","text":"<pre><code>TORCH_260_XPU = '2.6.0+xpu'\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.index","title":"index","text":"<pre><code>index: Optional[str]\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.packages","title":"packages","text":"<pre><code>packages: tuple[str]\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.install","title":"install","text":"<pre><code>install() -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenTorch.py</code> <pre><code>def install(self) -&gt; None:\n    log.special(f\"Installing PyTorch version ({self.value})\")\n    shell(Tools.pip, \"install\", self.packages, every(\"--index-url\", self.index))\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.uninstall","title":"uninstall","text":"<pre><code>uninstall() -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenTorch.py</code> <pre><code>def uninstall(self) -&gt; None:\n    shell(Tools.pip, \"uninstall\", \"--quiet\", self.packages)\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.number","title":"number","text":"<pre><code>number: str\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.flavor","title":"flavor","text":"<pre><code>flavor: Optional[str]\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.is_plain","title":"is_plain","text":"<pre><code>is_plain: bool\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.is_cuda","title":"is_cuda","text":"<pre><code>is_cuda: bool\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.is_rocm","title":"is_rocm","text":"<pre><code>is_rocm: bool\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.is_cpu","title":"is_cpu","text":"<pre><code>is_cpu: bool\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.TorchRelease.is_xpu","title":"is_xpu","text":"<pre><code>is_xpu: bool\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.SimpleTorch","title":"SimpleTorch","text":"<p>               Bases: <code>BrokenEnum</code></p> <p>Global torch versions target and suggestions</p> Source code in <code>Broken/Core/BrokenTorch.py</code> <pre><code>class SimpleTorch(BrokenEnum):\n    \"\"\"Global torch versions target and suggestions\"\"\"\n    CPU   = TorchRelease.TORCH_260_CPU\n    MACOS = TorchRelease.TORCH_260_MACOS\n    CUDA  = TorchRelease.TORCH_260_CUDA_124\n    ROCM  = TorchRelease.TORCH_260_ROCM_624\n    XPU   = TorchRelease.TORCH_260_XPU\n\n    @classmethod\n    def prompt_choices(cls) -&gt; Iterable[str]:\n        for option in cls:\n            if (option is cls.MACOS):\n                continue\n            yield option.name.lower()\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.SimpleTorch.CPU","title":"CPU","text":"<pre><code>CPU = TorchRelease.TORCH_260_CPU\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.SimpleTorch.MACOS","title":"MACOS","text":"<pre><code>MACOS = TorchRelease.TORCH_260_MACOS\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.SimpleTorch.CUDA","title":"CUDA","text":"<pre><code>CUDA = TorchRelease.TORCH_260_CUDA_124\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.SimpleTorch.ROCM","title":"ROCM","text":"<pre><code>ROCM = TorchRelease.TORCH_260_ROCM_624\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.SimpleTorch.XPU","title":"XPU","text":"<pre><code>XPU = TorchRelease.TORCH_260_XPU\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.SimpleTorch.prompt_choices","title":"prompt_choices","text":"<pre><code>prompt_choices() -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Core/BrokenTorch.py</code> <pre><code>@classmethod\ndef prompt_choices(cls) -&gt; Iterable[str]:\n    for option in cls:\n        if (option is cls.MACOS):\n            continue\n        yield option.name.lower()\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.BrokenTorch","title":"BrokenTorch","text":"Source code in <code>Broken/Core/BrokenTorch.py</code> <pre><code>class BrokenTorch:\n\n    @staticmethod\n    def docker() -&gt; Iterable[TorchRelease]:\n        \"\"\"List of versions for docker images builds\"\"\"\n        yield SimpleTorch.CUDA.value\n        yield SimpleTorch.CPU.value\n\n    @staticmethod\n    def version() -&gt; Optional[Union[TorchRelease, str]]:\n        \"\"\"Current torch version if any, may return a string if not part of known enum\"\"\"\n\n        # Note: Reversed as Windows lists system first, and we might have multiple on Docker\n        for site_packages in map(Path, reversed(site.getsitepackages())):\n            if (script := (site_packages/\"torch\"/\"version.py\")).exists():\n                exec(script.read_text(\"utf-8\"), namespace := {})\n                version = namespace.get(\"__version__\")\n                return TorchRelease.get(version) or version\n\n    @BrokenWorker.easy_lock\n    @staticmethod\n    def install(\n        version: Annotated[TorchRelease,\n            Option(\"--version\", \"-v\",\n            help=\"Torch version and flavor to install\"\n        )]=None,\n\n        exists_ok: Annotated[bool, BrokenTyper.exclude()]=False\n    ) -&gt; None:\n        \"\"\"\ud83d\udce6 Install or modify PyTorch versions\"\"\"\n\n        # Global opt-out of torch management\n        if not Environment.flag(\"BROKEN_TORCH\", True):\n            return None\n\n        installed = BrokenTorch.version()\n\n        # Only skip if installed and exists_ok, but not 'torch' in sys.argv\n        if (exists_ok and (installed or \"torch\" in sys.argv)):\n            return None\n\n        log.special(f\"Currently installed PyTorch version: {denum(installed)}\")\n\n        # Ask interactively if no flavor was provided\n        if not (version := TorchRelease.get(version)):\n\n            # Assume it's a Linux server on NVIDIA\n            if (not Runtime.Interactive):\n                version = SimpleTorch.CUDA\n\n            # Fixed single version for macOS\n            if BrokenPlatform.OnMacOS:\n                version = SimpleTorch.MACOS\n\n            else:\n                version = BrokenTorch.prompt_flavor()\n\n        if (installed == version):\n            log.special(\"\u2022 Requested torch version matches current one!\")\n            return\n\n        version.install()\n\n    @staticmethod\n    def prompt_flavor() -&gt; TorchRelease:\n        from rich.prompt import Prompt\n\n        log.special(\"\"\"\n            Generally speaking, you should chose for:\n            \u2022 [royal_blue1](Windows or Linux)[/] NVIDIA GPU: 'cuda'\n            \u2022 [royal_blue1](Windows or Linux)[/] Intel ARC: 'xpu'\n            \u2022 [royal_blue1](Linux)[/] AMD GPU (&gt;= RX 5000): 'rocm'\n            \u2022 [royal_blue1](Other)[/] Others or CPU: 'cpu'\n\n            [dim]Tip: Set 'HSA_OVERRIDE_GFX_VERSION=10.3.0' for RX 5000 Series[/]\n        \"\"\", dedent=True)\n\n        try:\n            choice = SimpleTorch.get(Prompt.ask(\n                prompt=\"\\n:: What PyTorch version do you want to install?\\n\\n\",\n                choices=list(SimpleTorch.prompt_choices()),\n                default=\"cuda\"\n            ).upper())\n            print()\n        except KeyboardInterrupt:\n            exit(0)\n\n        return choice.value\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.BrokenTorch.docker","title":"docker","text":"<pre><code>docker() -&gt; Iterable[TorchRelease]\n</code></pre> <p>List of versions for docker images builds</p> Source code in <code>Broken/Core/BrokenTorch.py</code> <pre><code>@staticmethod\ndef docker() -&gt; Iterable[TorchRelease]:\n    \"\"\"List of versions for docker images builds\"\"\"\n    yield SimpleTorch.CUDA.value\n    yield SimpleTorch.CPU.value\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.BrokenTorch.version","title":"version","text":"<pre><code>version() -&gt; Optional[Union[TorchRelease, str]]\n</code></pre> <p>Current torch version if any, may return a string if not part of known enum</p> Source code in <code>Broken/Core/BrokenTorch.py</code> <pre><code>@staticmethod\ndef version() -&gt; Optional[Union[TorchRelease, str]]:\n    \"\"\"Current torch version if any, may return a string if not part of known enum\"\"\"\n\n    # Note: Reversed as Windows lists system first, and we might have multiple on Docker\n    for site_packages in map(Path, reversed(site.getsitepackages())):\n        if (script := (site_packages/\"torch\"/\"version.py\")).exists():\n            exec(script.read_text(\"utf-8\"), namespace := {})\n            version = namespace.get(\"__version__\")\n            return TorchRelease.get(version) or version\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.BrokenTorch.install","title":"install","text":"<pre><code>install(\n    version: Annotated[\n        TorchRelease,\n        Option(\n            --version,\n            -v,\n            help=\"Torch version and flavor to install\",\n        ),\n    ] = None,\n    exists_ok: Annotated[\n        bool, BrokenTyper.exclude()\n    ] = False,\n) -&gt; None\n</code></pre> <p>\ud83d\udce6 Install or modify PyTorch versions</p> Source code in <code>Broken/Core/BrokenTorch.py</code> <pre><code>@BrokenWorker.easy_lock\n@staticmethod\ndef install(\n    version: Annotated[TorchRelease,\n        Option(\"--version\", \"-v\",\n        help=\"Torch version and flavor to install\"\n    )]=None,\n\n    exists_ok: Annotated[bool, BrokenTyper.exclude()]=False\n) -&gt; None:\n    \"\"\"\ud83d\udce6 Install or modify PyTorch versions\"\"\"\n\n    # Global opt-out of torch management\n    if not Environment.flag(\"BROKEN_TORCH\", True):\n        return None\n\n    installed = BrokenTorch.version()\n\n    # Only skip if installed and exists_ok, but not 'torch' in sys.argv\n    if (exists_ok and (installed or \"torch\" in sys.argv)):\n        return None\n\n    log.special(f\"Currently installed PyTorch version: {denum(installed)}\")\n\n    # Ask interactively if no flavor was provided\n    if not (version := TorchRelease.get(version)):\n\n        # Assume it's a Linux server on NVIDIA\n        if (not Runtime.Interactive):\n            version = SimpleTorch.CUDA\n\n        # Fixed single version for macOS\n        if BrokenPlatform.OnMacOS:\n            version = SimpleTorch.MACOS\n\n        else:\n            version = BrokenTorch.prompt_flavor()\n\n    if (installed == version):\n        log.special(\"\u2022 Requested torch version matches current one!\")\n        return\n\n    version.install()\n</code></pre>"},{"location":"code/broken/core/brokentorch/#Broken.Core.BrokenTorch.BrokenTorch.prompt_flavor","title":"prompt_flavor","text":"<pre><code>prompt_flavor() -&gt; TorchRelease\n</code></pre> Source code in <code>Broken/Core/BrokenTorch.py</code> <pre><code>@staticmethod\ndef prompt_flavor() -&gt; TorchRelease:\n    from rich.prompt import Prompt\n\n    log.special(\"\"\"\n        Generally speaking, you should chose for:\n        \u2022 [royal_blue1](Windows or Linux)[/] NVIDIA GPU: 'cuda'\n        \u2022 [royal_blue1](Windows or Linux)[/] Intel ARC: 'xpu'\n        \u2022 [royal_blue1](Linux)[/] AMD GPU (&gt;= RX 5000): 'rocm'\n        \u2022 [royal_blue1](Other)[/] Others or CPU: 'cpu'\n\n        [dim]Tip: Set 'HSA_OVERRIDE_GFX_VERSION=10.3.0' for RX 5000 Series[/]\n    \"\"\", dedent=True)\n\n    try:\n        choice = SimpleTorch.get(Prompt.ask(\n            prompt=\"\\n:: What PyTorch version do you want to install?\\n\\n\",\n            choices=list(SimpleTorch.prompt_choices()),\n            default=\"cuda\"\n        ).upper())\n        print()\n    except KeyboardInterrupt:\n        exit(0)\n\n    return choice.value\n</code></pre>"},{"location":"code/broken/core/brokentrackers/","title":"File: <code>Broken/Core/BrokenTrackers.py</code>","text":""},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers","title":"Broken.Core.BrokenTrackers","text":""},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.SameTracker","title":"SameTracker","text":"<p>Doumo same desu. If a value is the same, returns True, else updates it and returns False \u2022 Useful on ignoring expensive calls where parameters doesn't changes</p> Source code in <code>Broken/Core/BrokenTrackers.py</code> <pre><code>@define\nclass SameTracker:\n    \"\"\"Doumo same desu. If a value is the same, returns True, else updates it and returns False\n    \u2022 Useful on ignoring expensive calls where parameters doesn't changes\"\"\"\n    value: Any = None\n\n    def __call__(self, value: Any=True) -&gt; bool:\n        if self.value != value:\n            self.value = value\n            return False\n        return True\n</code></pre>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.SameTracker.value","title":"value","text":"<pre><code>value: Any = None\n</code></pre>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.SameTracker.__call__","title":"__call__","text":"<pre><code>__call__(value: Any = True) -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenTrackers.py</code> <pre><code>def __call__(self, value: Any=True) -&gt; bool:\n    if self.value != value:\n        self.value = value\n        return False\n    return True\n</code></pre>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.OnceTracker","title":"OnceTracker","text":"<p>Returns False the first time it's called, never nest style: <code>if once/already(): return</code></p> Source code in <code>Broken/Core/BrokenTrackers.py</code> <pre><code>@define\nclass OnceTracker:\n    \"\"\"Returns False the first time it's called, never nest style: `if once/already(): return`\"\"\"\n    _first: bool = False\n\n    def __call__(self) -&gt; bool:\n        if (not self._first):\n            self._first = True\n            return False\n        return True\n</code></pre>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.OnceTracker.__call__","title":"__call__","text":"<pre><code>__call__() -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenTrackers.py</code> <pre><code>def __call__(self) -&gt; bool:\n    if (not self._first):\n        self._first = True\n        return False\n    return True\n</code></pre>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.PlainTracker","title":"PlainTracker","text":"Source code in <code>Broken/Core/BrokenTrackers.py</code> <pre><code>@define\nclass PlainTracker:\n    value: Any = None\n\n    def __call__(self, set: bool=None) -&gt; bool:\n        \"\"\"Returns value if None else sets it\"\"\"\n        if (set is not None):\n            self.value = set\n        return self.value\n</code></pre>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.PlainTracker.value","title":"value","text":"<pre><code>value: Any = None\n</code></pre>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.PlainTracker.__call__","title":"__call__","text":"<pre><code>__call__(set: bool = None) -&gt; bool\n</code></pre> <p>Returns value if None else sets it</p> Source code in <code>Broken/Core/BrokenTrackers.py</code> <pre><code>def __call__(self, set: bool=None) -&gt; bool:\n    \"\"\"Returns value if None else sets it\"\"\"\n    if (set is not None):\n        self.value = set\n    return self.value\n</code></pre>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.FileTracker","title":"FileTracker","text":"Source code in <code>Broken/Core/BrokenTrackers.py</code> <pre><code>@define\nclass FileTracker:\n    file: Path = field(converter=Path)\n    retention: DotMap = Factory(lambda: DotMap(days=1, hours=0))\n\n    def __attrs_post_init__(self):\n        self.file.touch()\n\n        # Initialize new or empty trackers\n        if (not self.file.read_text(\"utf-8\")):\n            self._first = True\n            self.update()\n\n    _first: bool = False\n\n    @property\n    def first(self) -&gt; bool:\n        \"\"\"True if initializing the tracker for the first time\"\"\"\n        return self._first\n\n    def __enter__(self) -&gt; Self:\n        return self\n\n    def __exit__(self, *args) -&gt; None:\n        return None\n\n    @property\n    def last(self) -&gt; \"arrow.Arrow\":\n        \"\"\"How long it's been since the last run\"\"\"\n        import arrow\n        return arrow.get(self.file.read_text(\"utf-8\"))\n\n    @property\n    def sleeping(self, granularity: tuple[str]=(\"day\")) -&gt; str:\n        \"\"\"How long it's been since the last run, for printing purposes\"\"\"\n        return self.last.humanize(only_distance=True, granularity=granularity)\n\n    def trigger(self, update: bool=False) -&gt; bool:\n        \"\"\"True if it's been more than 'self.retention' since the last run\"\"\"\n        import arrow\n        trigger = (self.last.shift(**self.retention) &lt; arrow.utcnow())\n        if (trigger and update):\n            self.update()\n        return trigger\n\n    def update(self, **shift: dict) -&gt; None:\n        import arrow\n        time = arrow.utcnow().shift(**(shift or {}))\n        self.file.write_text(str(time), \"utf-8\")\n</code></pre>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.FileTracker.file","title":"file","text":"<pre><code>file: Path = field(converter=Path)\n</code></pre>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.FileTracker.retention","title":"retention","text":"<pre><code>retention: DotMap = Factory(lambda: DotMap(days=1, hours=0))\n</code></pre>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.FileTracker.__attrs_post_init__","title":"__attrs_post_init__","text":"<pre><code>__attrs_post_init__()\n</code></pre> Source code in <code>Broken/Core/BrokenTrackers.py</code> <pre><code>def __attrs_post_init__(self):\n    self.file.touch()\n\n    # Initialize new or empty trackers\n    if (not self.file.read_text(\"utf-8\")):\n        self._first = True\n        self.update()\n</code></pre>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.FileTracker.first","title":"first","text":"<pre><code>first: bool\n</code></pre> <p>True if initializing the tracker for the first time</p>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.FileTracker.__enter__","title":"__enter__","text":"<pre><code>__enter__() -&gt; Self\n</code></pre> Source code in <code>Broken/Core/BrokenTrackers.py</code> <pre><code>def __enter__(self) -&gt; Self:\n    return self\n</code></pre>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.FileTracker.__exit__","title":"__exit__","text":"<pre><code>__exit__(*args) -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenTrackers.py</code> <pre><code>def __exit__(self, *args) -&gt; None:\n    return None\n</code></pre>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.FileTracker.last","title":"last","text":"<pre><code>last: arrow.Arrow\n</code></pre> <p>How long it's been since the last run</p>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.FileTracker.sleeping","title":"sleeping","text":"<pre><code>sleeping: str\n</code></pre> <p>How long it's been since the last run, for printing purposes</p>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.FileTracker.trigger","title":"trigger","text":"<pre><code>trigger(update: bool = False) -&gt; bool\n</code></pre> <p>True if it's been more than 'self.retention' since the last run</p> Source code in <code>Broken/Core/BrokenTrackers.py</code> <pre><code>def trigger(self, update: bool=False) -&gt; bool:\n    \"\"\"True if it's been more than 'self.retention' since the last run\"\"\"\n    import arrow\n    trigger = (self.last.shift(**self.retention) &lt; arrow.utcnow())\n    if (trigger and update):\n        self.update()\n    return trigger\n</code></pre>"},{"location":"code/broken/core/brokentrackers/#Broken.Core.BrokenTrackers.FileTracker.update","title":"update","text":"<pre><code>update(**shift: dict) -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenTrackers.py</code> <pre><code>def update(self, **shift: dict) -&gt; None:\n    import arrow\n    time = arrow.utcnow().shift(**(shift or {}))\n    self.file.write_text(str(time), \"utf-8\")\n</code></pre>"},{"location":"code/broken/core/brokentyper/","title":"File: <code>Broken/Core/BrokenTyper.py</code>","text":""},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper","title":"Broken.Core.BrokenTyper","text":""},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.console","title":"console","text":"<pre><code>console = get_console()\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper","title":"BrokenTyper","text":"<p>Yet another Typer wrapper, with goodies</p> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>@define\nclass BrokenTyper:\n    \"\"\"Yet another Typer wrapper, with goodies\"\"\"\n\n    description: str = \"\"\n    \"\"\"The default 'help' message of the CLI\"\"\"\n\n    app: typer.Typer = None\n    \"\"\"The main managed typer.Typer instance\"\"\"\n\n    chain: bool = False\n    \"\"\"Same as Typer.chain\"\"\"\n\n    commands: set[str] = Factory(set)\n    \"\"\"List of known commands\"\"\"\n\n    default: str = None\n    \"\"\"Default command to run if none is provided\"\"\"\n\n    prehook: Callable = lambda: None\n    \"\"\"Function to run before any command\"\"\"\n\n    posthook: Callable = lambda: None\n    \"\"\"Function to run after any command\"\"\"\n\n    shell: bool = False\n    \"\"\"If True, will run a REPL when no arguments are provided\"\"\"\n\n    naih: bool = True\n    \"\"\"No args is help\"\"\"\n\n    help: bool = True\n    \"\"\"Add an --help option to the CLI\"\"\"\n\n    credits: str = (\n        f\"\u2022 Made by [green][link=https://github.com/Tremeschin]Tremeschin[/link][/] [yellow]{Runtime.Method} v{Runtime.Version}[/]\\n\\n\"\n        \"[italic grey53]\u2192 Consider [blue][link=https://brokensrc.dev/about/sponsors/]Supporting[/link][/blue] my work [red]:heart:[/]\"\n    )\n\n    @staticmethod\n    def exclude() -&gt; typer.Option:\n        return typer.Option(\n            parser=(lambda type: type),\n            expose_value=False,\n            hidden=True,\n        )\n\n    def __attrs_post_init__(self):\n        self.app = typer.Typer(\n            add_help_option=self.help,\n            pretty_exceptions_enable=False,\n            no_args_is_help=self.naih,\n            add_completion=False,\n            rich_markup_mode=\"rich\",\n            chain=self.chain,\n            epilog=self.credits,\n        )\n\n    _panel: str = None\n\n    @contextlib.contextmanager\n    def panel(self, name: str) -&gt; Generator:\n        try:\n            previous = self._panel\n            self._panel = name\n            yield None\n        finally:\n            self._panel = previous\n\n    def command(self,\n        target: Union[Callable, BaseModel],\n        description: str=None,\n        help: bool=True,\n        naih: bool=False,\n        name: str=None,\n        context: bool=False,\n        default: bool=False,\n        panel: str=None,\n        post: Callable=None,\n        hidden: bool=False,\n        **kwargs,\n    ) -&gt; None:\n\n        # Method must be implemented, ignore and fail ok else\n        if getattr(target, \"__isabstractmethod__\", False):\n            return None\n\n        cls = (target if isinstance(target, type) else type(target))\n\n        # Convert pydantic to a wrapper with same signature\n        if issubclass(cls, BaseModel):\n            target = BrokenTyper.pydantic2typer(cls=target, post=post)\n            name = (name or cls.__name__)\n            naih = True # (Complex command)\n        else:\n            name = (name or target.__name__)\n\n        # Add to known or default commands, create it\n        name = name.replace(\"_\", \"-\").lower()\n        self.default = (name if default else self.default)\n        self.commands.add(name)\n        self.app.command(\n            name=(name),\n            help=(description or target.__doc__),\n            add_help_option=(help),\n            no_args_is_help=(naih),\n            rich_help_panel=(panel or self._panel),\n            context_settings=dict(\n                allow_extra_args=True,\n                ignore_unknown_options=True,\n            ) if context else None,\n            hidden=(hidden),\n            **kwargs,\n        )(target)\n\n    @staticmethod\n    def pydantic2typer(\n        cls: Union[BaseModel, type[BaseModel]],\n        post: Callable=None\n    ) -&gt; Callable:\n        \"\"\"Makes a Pydantic BaseModel class signature Typer compatible, creating a class and sending\n        it to the 'post' method for back-communication/catching the new object instance\"\"\"\n\n        # Assert object derives from BaseModel\n        if isinstance(cls, type):\n            if (not issubclass(cls, BaseModel)):\n                raise TypeError(f\"Class type {cls} is not a pydantic BaseModel\")\n            signature = cls\n        else:\n            if (not isinstance(cls, BaseModel)):\n                raise TypeError(f\"Class instance {cls} is not a pydantic BaseModel\")\n            signature = type(cls)\n\n        def wrapper(**kwargs):\n            nonlocal cls, post\n\n            # Instantiate if type\n            if isinstance(cls, type):\n                cls = cls()\n\n            # Copy new values to the instance\n            for name, value in kwargs.items():\n                field = cls.model_fields[name]\n\n                # Idea: Deal with nested models?\n\n                # Skip factory fields, not our business\n                if (field.default_factory is not None):\n                    continue\n\n                setattr(cls, name, value)\n\n            # Call the post method if provided\n            if post: post(cls)\n\n        # Copy the signatures to the wrapper function (the new initializer)\n        wrapper.__signature__ = inspect.signature(signature)\n        wrapper.__doc__ = cls.__doc__\n\n        # Note: Requires ConfigDict(use_attribute_docstrings=True)\n        # Inject docstring into typer's help\n        for value in cls.model_fields.values():\n            for metadata in value.metadata:\n                if isinstance(metadata, OptionInfo):\n                    metadata.help = (metadata.help or value.description)\n\n        return wrapper\n\n    @property\n    def _shell(self) -&gt; bool:\n        return (self.shell and Environment.flag(\"REPL\", 1))\n\n    def should_shell(self) -&gt; Self:\n        self.shell = all((\n            (Runtime.Binary),\n            (not BrokenPlatform.OnLinux),\n            (not arguments()),\n        ))\n        return self\n\n    @staticmethod\n    def simple(*commands: Callable) -&gt; None:\n        app = BrokenTyper()\n        apply(app.command, commands)\n        return app(*sys.argv[1:])\n\n    @staticmethod\n    def proxy(callable: Callable) -&gt; Callable:\n        \"\"\"Redirects a ctx to sys.argv and calls the method\"\"\"\n        def wrapper(ctx: typer.Context):\n            sys.argv[1:] = ctx.args\n            return callable()\n        return wrapper\n\n    @staticmethod\n    def complex(\n        main: Callable,\n        nested: Optional[Iterable[Callable]]=None,\n        simple: Optional[Iterable[Callable]]=None,\n    ) -&gt; None:\n        app = BrokenTyper(description=(\n            \"[bold orange3]Note:[/] The default command is implicit when only arguments are provided\\n\\n\"\n            \"[bold grey58]\u2192 This means [orange3]'entry (default) (args)'[/] is the same as [orange3]'entry (args)'[/]\\n\"\n        ), help=False).should_shell()\n\n        # Preprocess arguments\n        nested = flatten(nested)\n        simple = flatten(simple)\n\n        for target in flatten(main, nested, simple):\n            method:  bool = (target in simple)\n            default: bool = (target is main)\n\n            # Mark the default command\n            description = ' '.join((\n                (target.__doc__ or \"No help provided\"),\n                (default*\"[bold indian_red](default)[/]\"),\n            ))\n\n            # Nested typer apps must be used with sys.argv\n            _target = (target if method else BrokenTyper.proxy(target))\n\n            app.command(\n                target=_target,\n                name=target.__name__,\n                description=description,\n                default=default,\n                context=True,\n                help=method,\n            )\n\n        return app(*sys.argv[1:])\n\n    def shell_welcome(self) -&gt; None:\n        console.print(Panel(\n            title=\"\u2b50\ufe0f Tips\",\n            title_align=\"left\",\n            border_style=\"bold grey42\",\n            expand=False,\n            padding=(1, 1),\n            renderable=Text.from_markup(\n                \"\u2022 Press [spring_green1]'Ctrl+C'[/] to exit [bold bright_black](or close this window)[/]\\n\"\n                \"\u2022 Run any [spring_green1]'{command} --help'[/] for more info\\n\"\n                \"\u2022 Press [royal_blue1]Enter[/] for a command list [bold bright_black](above)[/]\",\n            )\n        ))\n        console.print(Text.from_markup(\n            \"\\n[bold grey58]\u2192 Write a command from the list above and run it![/]\"\n        ))\n\n    def shell_prompt(self) -&gt; bool:\n        try:\n            sys.argv[1:] = shlex.split(typer.prompt(\n                text=\"\", prompt_suffix=\"\\n\u276f\",\n                show_default=False,\n                default=\"\"\n            ))\n            return True\n        except (click.exceptions.Abort, KeyboardInterrupt):\n            log.trace(\"BrokenTyper Repl exit KeyboardInterrupt\")\n        return False\n\n    def __call__(self, *args: Any) -&gt; None:\n        \"\"\"\n        Run the Typer app with the provided arguments\n\n        Warn:\n            Send sys.argv[1:] if running directly from user input\n        \"\"\"\n        if (not self.commands):\n            log.warning(\"No commands were added to the Typer app\")\n            return None\n\n        # Minor pre-processing\n        self.app.info.help = (self.description or \"No help provided for this CLI\")\n        sys.argv[1:] = apply(str, flatten(args))\n\n        for index in itertools.count(0):\n\n            # On subsequent runs, prompt for command\n            if (self._shell) and (index &gt; 0):\n                if not self.shell_prompt():\n                    return\n\n            # Allow repl users to use the same commands as python entry point scripts,\n            # like 'depthflow gradio' where 'depthflow' isn't the package __main__.py\n            if (list_get(sys.argv, 1, \"\") == self.default):\n                sys.argv.pop(1)\n\n            # Defines a default, arguments are present, and no known commands were provided\n            if (self.default and arguments()) and all((x not in sys.argv for x in self.commands)):\n                sys.argv.insert(1, self.default)\n\n            try:\n                self.prehook()\n                self.app(sys.argv[1:])\n                self.posthook()\n            except SystemExit:\n                log.trace(\"Skipping SystemExit on BrokenTyper\")\n            except KeyboardInterrupt:\n                log.success(\"BrokenTyper exit KeyboardInterrupt\")\n            except Exception as error:\n                if (not self.shell):\n                    raise error\n                console.print_exception(); print() # noqa\n                log.error(f\"BrokenTyper exited with error: {repr(error)}\")\n                input(\"\\nPress Enter to continue..\")\n\n            # Exit out non-repl mode\n            if (not self._shell):\n                return\n\n            # Some action was taken, like 'depthflow main -o ./video.mp4'\n            if (index == 0) and arguments():\n                return\n\n            # Pretty welcome message on the first 'empty' run\n            if (index == 0):\n                self.shell_welcome()\n\n            # The args were \"consumed\"\n            sys.argv = [sys.argv[0]]\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.description","title":"description","text":"<pre><code>description: str = ''\n</code></pre> <p>The default 'help' message of the CLI</p>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.app","title":"app","text":"<pre><code>app: typer.Typer = None\n</code></pre> <p>The main managed typer.Typer instance</p>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.chain","title":"chain","text":"<pre><code>chain: bool = False\n</code></pre> <p>Same as Typer.chain</p>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.commands","title":"commands","text":"<pre><code>commands: set[str] = Factory(set)\n</code></pre> <p>List of known commands</p>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.default","title":"default","text":"<pre><code>default: str = None\n</code></pre> <p>Default command to run if none is provided</p>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.prehook","title":"prehook","text":"<pre><code>prehook: Callable = lambda: None\n</code></pre> <p>Function to run before any command</p>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.posthook","title":"posthook","text":"<pre><code>posthook: Callable = lambda: None\n</code></pre> <p>Function to run after any command</p>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.shell","title":"shell","text":"<pre><code>shell: bool = False\n</code></pre> <p>If True, will run a REPL when no arguments are provided</p>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.naih","title":"naih","text":"<pre><code>naih: bool = True\n</code></pre> <p>No args is help</p>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.help","title":"help","text":"<pre><code>help: bool = True\n</code></pre> <p>Add an --help option to the CLI</p>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.credits","title":"credits","text":"<pre><code>credits: str = (\n    f\"\u2022 Made by [green][link=https://github.com/Tremeschin]Tremeschin[/link][/] [yellow]{Runtime.Method} v{Runtime.Version}[/]\n\n[italic grey53]\u2192 Consider [blue][link=https://brokensrc.dev/about/sponsors/]Supporting[/link][/blue] my work [red]:heart:[/]\"\n)\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.exclude","title":"exclude","text":"<pre><code>exclude() -&gt; typer.Option\n</code></pre> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>@staticmethod\ndef exclude() -&gt; typer.Option:\n    return typer.Option(\n        parser=(lambda type: type),\n        expose_value=False,\n        hidden=True,\n    )\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.__attrs_post_init__","title":"__attrs_post_init__","text":"<pre><code>__attrs_post_init__()\n</code></pre> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>def __attrs_post_init__(self):\n    self.app = typer.Typer(\n        add_help_option=self.help,\n        pretty_exceptions_enable=False,\n        no_args_is_help=self.naih,\n        add_completion=False,\n        rich_markup_mode=\"rich\",\n        chain=self.chain,\n        epilog=self.credits,\n    )\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.panel","title":"panel","text":"<pre><code>panel(name: str) -&gt; Generator\n</code></pre> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>@contextlib.contextmanager\ndef panel(self, name: str) -&gt; Generator:\n    try:\n        previous = self._panel\n        self._panel = name\n        yield None\n    finally:\n        self._panel = previous\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.command","title":"command","text":"<pre><code>command(\n    target: Union[Callable, BaseModel],\n    description: str = None,\n    help: bool = True,\n    naih: bool = False,\n    name: str = None,\n    context: bool = False,\n    default: bool = False,\n    panel: str = None,\n    post: Callable = None,\n    hidden: bool = False,\n    **kwargs\n) -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>def command(self,\n    target: Union[Callable, BaseModel],\n    description: str=None,\n    help: bool=True,\n    naih: bool=False,\n    name: str=None,\n    context: bool=False,\n    default: bool=False,\n    panel: str=None,\n    post: Callable=None,\n    hidden: bool=False,\n    **kwargs,\n) -&gt; None:\n\n    # Method must be implemented, ignore and fail ok else\n    if getattr(target, \"__isabstractmethod__\", False):\n        return None\n\n    cls = (target if isinstance(target, type) else type(target))\n\n    # Convert pydantic to a wrapper with same signature\n    if issubclass(cls, BaseModel):\n        target = BrokenTyper.pydantic2typer(cls=target, post=post)\n        name = (name or cls.__name__)\n        naih = True # (Complex command)\n    else:\n        name = (name or target.__name__)\n\n    # Add to known or default commands, create it\n    name = name.replace(\"_\", \"-\").lower()\n    self.default = (name if default else self.default)\n    self.commands.add(name)\n    self.app.command(\n        name=(name),\n        help=(description or target.__doc__),\n        add_help_option=(help),\n        no_args_is_help=(naih),\n        rich_help_panel=(panel or self._panel),\n        context_settings=dict(\n            allow_extra_args=True,\n            ignore_unknown_options=True,\n        ) if context else None,\n        hidden=(hidden),\n        **kwargs,\n    )(target)\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.pydantic2typer","title":"pydantic2typer","text":"<pre><code>pydantic2typer(post: Callable = None) -&gt; Callable\n</code></pre> <p>Makes a Pydantic BaseModel class signature Typer compatible, creating a class and sending it to the 'post' method for back-communication/catching the new object instance</p> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>@staticmethod\ndef pydantic2typer(\n    cls: Union[BaseModel, type[BaseModel]],\n    post: Callable=None\n) -&gt; Callable:\n    \"\"\"Makes a Pydantic BaseModel class signature Typer compatible, creating a class and sending\n    it to the 'post' method for back-communication/catching the new object instance\"\"\"\n\n    # Assert object derives from BaseModel\n    if isinstance(cls, type):\n        if (not issubclass(cls, BaseModel)):\n            raise TypeError(f\"Class type {cls} is not a pydantic BaseModel\")\n        signature = cls\n    else:\n        if (not isinstance(cls, BaseModel)):\n            raise TypeError(f\"Class instance {cls} is not a pydantic BaseModel\")\n        signature = type(cls)\n\n    def wrapper(**kwargs):\n        nonlocal cls, post\n\n        # Instantiate if type\n        if isinstance(cls, type):\n            cls = cls()\n\n        # Copy new values to the instance\n        for name, value in kwargs.items():\n            field = cls.model_fields[name]\n\n            # Idea: Deal with nested models?\n\n            # Skip factory fields, not our business\n            if (field.default_factory is not None):\n                continue\n\n            setattr(cls, name, value)\n\n        # Call the post method if provided\n        if post: post(cls)\n\n    # Copy the signatures to the wrapper function (the new initializer)\n    wrapper.__signature__ = inspect.signature(signature)\n    wrapper.__doc__ = cls.__doc__\n\n    # Note: Requires ConfigDict(use_attribute_docstrings=True)\n    # Inject docstring into typer's help\n    for value in cls.model_fields.values():\n        for metadata in value.metadata:\n            if isinstance(metadata, OptionInfo):\n                metadata.help = (metadata.help or value.description)\n\n    return wrapper\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.should_shell","title":"should_shell","text":"<pre><code>should_shell() -&gt; Self\n</code></pre> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>def should_shell(self) -&gt; Self:\n    self.shell = all((\n        (Runtime.Binary),\n        (not BrokenPlatform.OnLinux),\n        (not arguments()),\n    ))\n    return self\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.simple","title":"simple","text":"<pre><code>simple(*commands: Callable) -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>@staticmethod\ndef simple(*commands: Callable) -&gt; None:\n    app = BrokenTyper()\n    apply(app.command, commands)\n    return app(*sys.argv[1:])\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.proxy","title":"proxy","text":"<pre><code>proxy(callable: Callable) -&gt; Callable\n</code></pre> <p>Redirects a ctx to sys.argv and calls the method</p> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>@staticmethod\ndef proxy(callable: Callable) -&gt; Callable:\n    \"\"\"Redirects a ctx to sys.argv and calls the method\"\"\"\n    def wrapper(ctx: typer.Context):\n        sys.argv[1:] = ctx.args\n        return callable()\n    return wrapper\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.complex","title":"complex","text":"<pre><code>complex(\n    main: Callable,\n    nested: Optional[Iterable[Callable]] = None,\n    simple: Optional[Iterable[Callable]] = None,\n) -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>@staticmethod\ndef complex(\n    main: Callable,\n    nested: Optional[Iterable[Callable]]=None,\n    simple: Optional[Iterable[Callable]]=None,\n) -&gt; None:\n    app = BrokenTyper(description=(\n        \"[bold orange3]Note:[/] The default command is implicit when only arguments are provided\\n\\n\"\n        \"[bold grey58]\u2192 This means [orange3]'entry (default) (args)'[/] is the same as [orange3]'entry (args)'[/]\\n\"\n    ), help=False).should_shell()\n\n    # Preprocess arguments\n    nested = flatten(nested)\n    simple = flatten(simple)\n\n    for target in flatten(main, nested, simple):\n        method:  bool = (target in simple)\n        default: bool = (target is main)\n\n        # Mark the default command\n        description = ' '.join((\n            (target.__doc__ or \"No help provided\"),\n            (default*\"[bold indian_red](default)[/]\"),\n        ))\n\n        # Nested typer apps must be used with sys.argv\n        _target = (target if method else BrokenTyper.proxy(target))\n\n        app.command(\n            target=_target,\n            name=target.__name__,\n            description=description,\n            default=default,\n            context=True,\n            help=method,\n        )\n\n    return app(*sys.argv[1:])\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.shell_welcome","title":"shell_welcome","text":"<pre><code>shell_welcome() -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>def shell_welcome(self) -&gt; None:\n    console.print(Panel(\n        title=\"\u2b50\ufe0f Tips\",\n        title_align=\"left\",\n        border_style=\"bold grey42\",\n        expand=False,\n        padding=(1, 1),\n        renderable=Text.from_markup(\n            \"\u2022 Press [spring_green1]'Ctrl+C'[/] to exit [bold bright_black](or close this window)[/]\\n\"\n            \"\u2022 Run any [spring_green1]'{command} --help'[/] for more info\\n\"\n            \"\u2022 Press [royal_blue1]Enter[/] for a command list [bold bright_black](above)[/]\",\n        )\n    ))\n    console.print(Text.from_markup(\n        \"\\n[bold grey58]\u2192 Write a command from the list above and run it![/]\"\n    ))\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.shell_prompt","title":"shell_prompt","text":"<pre><code>shell_prompt() -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>def shell_prompt(self) -&gt; bool:\n    try:\n        sys.argv[1:] = shlex.split(typer.prompt(\n            text=\"\", prompt_suffix=\"\\n\u276f\",\n            show_default=False,\n            default=\"\"\n        ))\n        return True\n    except (click.exceptions.Abort, KeyboardInterrupt):\n        log.trace(\"BrokenTyper Repl exit KeyboardInterrupt\")\n    return False\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenTyper.__call__","title":"__call__","text":"<pre><code>__call__(*args: Any) -&gt; None\n</code></pre> <p>Run the Typer app with the provided arguments</p> Warn <p>Send sys.argv[1:] if running directly from user input</p> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>def __call__(self, *args: Any) -&gt; None:\n    \"\"\"\n    Run the Typer app with the provided arguments\n\n    Warn:\n        Send sys.argv[1:] if running directly from user input\n    \"\"\"\n    if (not self.commands):\n        log.warning(\"No commands were added to the Typer app\")\n        return None\n\n    # Minor pre-processing\n    self.app.info.help = (self.description or \"No help provided for this CLI\")\n    sys.argv[1:] = apply(str, flatten(args))\n\n    for index in itertools.count(0):\n\n        # On subsequent runs, prompt for command\n        if (self._shell) and (index &gt; 0):\n            if not self.shell_prompt():\n                return\n\n        # Allow repl users to use the same commands as python entry point scripts,\n        # like 'depthflow gradio' where 'depthflow' isn't the package __main__.py\n        if (list_get(sys.argv, 1, \"\") == self.default):\n            sys.argv.pop(1)\n\n        # Defines a default, arguments are present, and no known commands were provided\n        if (self.default and arguments()) and all((x not in sys.argv for x in self.commands)):\n            sys.argv.insert(1, self.default)\n\n        try:\n            self.prehook()\n            self.app(sys.argv[1:])\n            self.posthook()\n        except SystemExit:\n            log.trace(\"Skipping SystemExit on BrokenTyper\")\n        except KeyboardInterrupt:\n            log.success(\"BrokenTyper exit KeyboardInterrupt\")\n        except Exception as error:\n            if (not self.shell):\n                raise error\n            console.print_exception(); print() # noqa\n            log.error(f\"BrokenTyper exited with error: {repr(error)}\")\n            input(\"\\nPress Enter to continue..\")\n\n        # Exit out non-repl mode\n        if (not self._shell):\n            return\n\n        # Some action was taken, like 'depthflow main -o ./video.mp4'\n        if (index == 0) and arguments():\n            return\n\n        # Pretty welcome message on the first 'empty' run\n        if (index == 0):\n            self.shell_welcome()\n\n        # The args were \"consumed\"\n        sys.argv = [sys.argv[0]]\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenLauncher","title":"BrokenLauncher","text":"<p>               Bases: <code>ABC</code>, <code>BrokenAttrs</code></p> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>@define\nclass BrokenLauncher(ABC, BrokenAttrs):\n    PROJECT: BrokenProject\n    cli: BrokenTyper = Factory(BrokenTyper)\n\n    def __post__(self):\n        self.cli.should_shell()\n        self.cli.description = self.PROJECT.ABOUT\n\n        with BrokenProfiler(self.PROJECT.APP_NAME):\n            self.main()\n\n    @abstractmethod\n    def main(self) -&gt; None:\n        pass\n\n    def find_projects(self, tag: str=\"Project\") -&gt; None:\n        \"\"\"Find Python files in common directories (direct call, cwd) that any class inherits from\n        something that contains the substring of `tag` and add as a command to this Typer app\"\"\"\n        search = deque()\n\n        # Note: Safe get argv[1], pop if valid, else a null path\n        if (direct := Path(dict(enumerate(sys.argv)).get(1, \"\\0\"))).exists():\n            direct = Path(sys.argv.pop(1))\n\n        # The project file was sent directly\n        if (direct.suffix == \".py\"):\n            search.append(direct)\n\n        # It can be a glob pattern\n        elif (\"*\" in direct.name):\n            search.extend(Path.cwd().glob(direct.name))\n\n        # A directory of projects was sent\n        elif direct.is_dir():\n            search.extend(direct.glob(\"*.py\"))\n\n        # Scan common directories\n        else:\n            if (Runtime.Source):\n                search.extend(self.PROJECT.DIRECTORIES.REPO_PROJECTS.rglob(\"*.py\"))\n                search.extend(self.PROJECT.DIRECTORIES.REPO_EXAMPLES.rglob(\"*.py\"))\n            search.extend(self.PROJECT.DIRECTORIES.PROJECTS.rglob(\"*.py\"))\n            search.extend(Path.cwd().glob(\"*.py\"))\n\n        # Add commands of all files, warn if none was sucessfully added\n        if (sum(self.add_project(python=file, tag=tag) for file in search) == 0):\n            log.warning(f\"No {self.PROJECT.APP_NAME} {tag}s found, searched in:\")\n            log.warning('\\n'.join(f\"\u2022 {file}\" for file in search))\n\n    def _regex(self, tag: str) -&gt; re.Pattern:\n        \"\"\"Generates the self.regex for matching any valid Python class that contains \"tag\" on the\n        inheritance substring, and its optional docstring on the next line\"\"\"\n        return re.compile(\n            r\"^class\\s+(\\w+)\\s*\\(.*?(?:\" + tag + r\").*\\):\\s*(?:\\\"\\\"\\\"((?:\\n|.)*?)\\\"\\\"\\\")?\",\n            re.MULTILINE\n        )\n\n    def add_project(self, python: Path, tag: str=\"Project\") -&gt; bool:\n        if (not python.exists()):\n            return False\n\n        def wrapper(code: str, file: Path, class_name: str):\n            def run(ctx: typer.Context):\n                # Note: Point of trust transfer to the file the user is running\n                exec(compile(code, file, \"exec\"), (namespace := {}))\n                namespace[class_name]().cli(*ctx.args)\n            return run\n\n        # Match all projects and their optional docstrings\n        code = python.read_text(\"utf-8\")\n        matches = list(self._regex(tag).finditer(code))\n\n        # Add a command for each match\n        for match in matches:\n            class_name, docstring = match.groups()\n            self.cli.command(\n                target=wrapper(code, python, class_name),\n                name=class_name.lower(),\n                description=(docstring or \"No description provided\"),\n                panel=f\"\ud83d\udce6 {tag}s at ({python})\",\n                context=True,\n                help=False,\n            )\n\n        return bool(matches)\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenLauncher.PROJECT","title":"PROJECT","text":"<pre><code>PROJECT: BrokenProject\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenLauncher.cli","title":"cli","text":"<pre><code>cli: BrokenTyper = Factory(BrokenTyper)\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenLauncher.__post__","title":"__post__","text":"<pre><code>__post__()\n</code></pre> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>def __post__(self):\n    self.cli.should_shell()\n    self.cli.description = self.PROJECT.ABOUT\n\n    with BrokenProfiler(self.PROJECT.APP_NAME):\n        self.main()\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenLauncher.main","title":"main","text":"<pre><code>main() -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>@abstractmethod\ndef main(self) -&gt; None:\n    pass\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenLauncher.find_projects","title":"find_projects","text":"<pre><code>find_projects(tag: str = 'Project') -&gt; None\n</code></pre> <p>Find Python files in common directories (direct call, cwd) that any class inherits from something that contains the substring of <code>tag</code> and add as a command to this Typer app</p> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>def find_projects(self, tag: str=\"Project\") -&gt; None:\n    \"\"\"Find Python files in common directories (direct call, cwd) that any class inherits from\n    something that contains the substring of `tag` and add as a command to this Typer app\"\"\"\n    search = deque()\n\n    # Note: Safe get argv[1], pop if valid, else a null path\n    if (direct := Path(dict(enumerate(sys.argv)).get(1, \"\\0\"))).exists():\n        direct = Path(sys.argv.pop(1))\n\n    # The project file was sent directly\n    if (direct.suffix == \".py\"):\n        search.append(direct)\n\n    # It can be a glob pattern\n    elif (\"*\" in direct.name):\n        search.extend(Path.cwd().glob(direct.name))\n\n    # A directory of projects was sent\n    elif direct.is_dir():\n        search.extend(direct.glob(\"*.py\"))\n\n    # Scan common directories\n    else:\n        if (Runtime.Source):\n            search.extend(self.PROJECT.DIRECTORIES.REPO_PROJECTS.rglob(\"*.py\"))\n            search.extend(self.PROJECT.DIRECTORIES.REPO_EXAMPLES.rglob(\"*.py\"))\n        search.extend(self.PROJECT.DIRECTORIES.PROJECTS.rglob(\"*.py\"))\n        search.extend(Path.cwd().glob(\"*.py\"))\n\n    # Add commands of all files, warn if none was sucessfully added\n    if (sum(self.add_project(python=file, tag=tag) for file in search) == 0):\n        log.warning(f\"No {self.PROJECT.APP_NAME} {tag}s found, searched in:\")\n        log.warning('\\n'.join(f\"\u2022 {file}\" for file in search))\n</code></pre>"},{"location":"code/broken/core/brokentyper/#Broken.Core.BrokenTyper.BrokenLauncher.add_project","title":"add_project","text":"<pre><code>add_project(python: Path, tag: str = 'Project') -&gt; bool\n</code></pre> Source code in <code>Broken/Core/BrokenTyper.py</code> <pre><code>def add_project(self, python: Path, tag: str=\"Project\") -&gt; bool:\n    if (not python.exists()):\n        return False\n\n    def wrapper(code: str, file: Path, class_name: str):\n        def run(ctx: typer.Context):\n            # Note: Point of trust transfer to the file the user is running\n            exec(compile(code, file, \"exec\"), (namespace := {}))\n            namespace[class_name]().cli(*ctx.args)\n        return run\n\n    # Match all projects and their optional docstrings\n    code = python.read_text(\"utf-8\")\n    matches = list(self._regex(tag).finditer(code))\n\n    # Add a command for each match\n    for match in matches:\n        class_name, docstring = match.groups()\n        self.cli.command(\n            target=wrapper(code, python, class_name),\n            name=class_name.lower(),\n            description=(docstring or \"No description provided\"),\n            panel=f\"\ud83d\udce6 {tag}s at ({python})\",\n            context=True,\n            help=False,\n        )\n\n    return bool(matches)\n</code></pre>"},{"location":"code/broken/core/brokenworker/","title":"File: <code>Broken/Core/BrokenWorker.py</code>","text":""},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker","title":"Broken.Core.BrokenWorker","text":""},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.WorkerType","title":"WorkerType","text":"<pre><code>WorkerType: TypeAlias = Union[Thread, Process]\n</code></pre> <p>Any stdlib parallelizable primitive</p>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.MANAGER","title":"MANAGER","text":"<pre><code>MANAGER = Manager()\n</code></pre> <p>Global multiprocessing manager</p>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker","title":"BrokenWorker","text":"<p>A semi-complete Thread and Process manager for easy parallelization primitives, smart task queueing, caching results and more.</p> <p>References: - Independently reinvented https://en.wikipedia.org/wiki/Thread_pool</p> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>@define(eq=False)\nclass BrokenWorker:\n    \"\"\"\n    A semi-complete Thread and Process manager for easy parallelization primitives, smart task\n    queueing, caching results and more.\n\n    References:\n    - Independently reinvented https://en.wikipedia.org/wiki/Thread_pool\n    \"\"\"\n\n    # # Static utilities\n\n    @staticmethod\n    def _spawn(\n        target: Callable,\n        *args: Any,\n        daemon: bool=True,\n        _type: WorkerType=Thread,\n        **kwargs,\n    ) -&gt; WorkerType:\n        worker = _type(\n            target=target,\n            daemon=daemon,\n            kwargs=kwargs,\n            args=args,\n        )\n        worker.start()\n        return worker\n\n    @classmethod\n    @functools.wraps(_spawn)\n    def thread(cls, *args, **kwargs) -&gt; Thread:\n        return cls._spawn(*args, **kwargs, _type=Thread)\n\n    @classmethod\n    @functools.wraps(_spawn)\n    def process(cls, *args, **kwargs) -&gt; Process:\n        return cls._spawn(*args, **kwargs, _type=Process)\n\n    # # Easy lock\n\n    @staticmethod\n    @functools.cache\n    def easy_lock(method: Callable) -&gt; Callable:\n        \"\"\"Get a wrapper with a common threading.Lock for a method, multi-call safe\"\"\"\n\n        shared_lock = Lock()\n\n        @functools.wraps(method)\n        def wrapped(*args, **kwargs) -&gt; Any:\n            with shared_lock:\n                return method(*args, **kwargs)\n\n        return wrapped\n\n    # # Initialization\n\n    type: WorkerType = Thread\n    \"\"\"The primitive to use for parallelization\"\"\"\n\n    size: int = field(default=1, converter=int)\n    \"\"\"How many workers to keep alive\"\"\"\n\n    workers: set[WorkerType] = Factory(set)\n    \"\"\"The currently alive workers\"\"\"\n\n    queue: Union[ThreadQueue, ProcessQueue] = None\n    \"\"\"The list of tasks to be processed\"\"\"\n\n    @property\n    def queue_type(self) -&gt; type[Queue]:\n        if (self.type is Thread):\n            return ThreadQueue\n        return ProcessQueue\n\n    @property\n    def diskcache_enabled(self) -&gt; bool:\n        return (self.cache_size and self.cache_path)\n\n    @property\n    def cache_dict_type(self) -&gt; type[dict]:\n        return (dict if (self.type is Thread) else MANAGER.dict)\n\n    def __attrs_post_init__(self):\n\n        # Initialize DiskCache or dict cache\n        if (self.diskcache_enabled):\n            self.cache_data = DiskCache(\n                directory=Path(self.cache_path),\n                size_limit=int(self.cache_size)*MB,\n            )\n        else:\n            self.cache_data = self.cache_dict_type()\n\n        # Initialize remaining items\n        self.queue = self.queue_type()\n        BrokenWorker.thread(self.keep_alive_thread)\n\n    # # Worker management\n\n    @property\n    def alive(self) -&gt; Iterable[WorkerType]:\n        \"\"\"Iterates over the alive workers\"\"\"\n        for worker in self.workers:\n            if worker.is_alive():\n                yield worker\n\n    @property\n    def still_alive(self) -&gt; int:\n        \"\"\"Believe me, I am still alive\"\"\"\n        return sum(1 for _ in self.alive)\n\n    def sanitize(self) -&gt; None:\n        \"\"\"Removes dead workers on the set\"\"\"\n        self.workers = set(self.alive)\n\n    def join_workers(self, timeout: Optional[float]=None) -&gt; None:\n        \"\"\"Waits for all workers to finish\"\"\"\n        for worker in copy.copy(self.workers):\n            worker.join(timeout)\n\n    # # Caching\n\n    cache_data: Union[dict, DiskCache] = None\n    \"\"\"The cached results database\"\"\"\n\n    cache_path: Path = None\n    \"\"\"(DiskCache) Path to the cache directory, disabled if None\"\"\"\n\n    cache_size: int = 500\n    \"\"\"(DiskCache) Maximum size of the cache in megabytes\"\"\"\n\n    def clear_cache(self) -&gt; None:\n        self.cache_data.clear()\n\n    # # Serde middleware for Process\n\n    def __serialize__(self, object: Any) -&gt; Any:\n        if (self.type is Process):\n            return dill.dumps(object, recurse=True)\n        return object\n\n    def __deserialize__(self, object: Any) -&gt; Any:\n        if (self.type is Process):\n            return dill.loads(object)\n        return object\n\n    # # Tasks\n\n    def join_tasks(self) -&gt; None:\n        \"\"\"Waits for all tasks to finish\"\"\"\n        self.queue.join()\n\n    def put(self, task: Hashable) -&gt; Hashable:\n        \"\"\"Submit a new task directly to the queue\"\"\"\n        return (self.queue.put(self.__serialize__(task)) or task)\n\n    @abstractmethod\n    def get(self, task: Hashable) -&gt; Optional[Any]:\n        \"\"\"Get the result of a task, keeping it on cache (non-blocking)\"\"\"\n        result = self.cache_data.get(hash(task), None)\n\n        # Remove errors from cache to allow re-queueing\n        if isinstance(result, Exception):\n            return self.pop(task)\n\n        return result\n\n    def get_blocking(self, task: Hashable) -&gt; Any:\n        \"\"\"Get the result of a task, keeping it on cache (waits to finish)\"\"\"\n        while (result := self.get(hash(task))) is None:\n            time.sleep(0.1)\n        return result\n\n    def pop(self, task: Hashable) -&gt; Any:\n        \"\"\"Get the result of a task, removing it from cache\"\"\"\n        return self.cache_data.pop(hash(task))\n\n    def call(self, method: Callable, *args, **kwargs) -&gt; Hashable:\n        \"\"\"Submit a new task to call a method with args and kwargs\"\"\"\n        return self.put(functools.partial(method, *args, **kwargs))\n\n    def get_smart(self, task: Hashable) -&gt; Any:\n        \"\"\"Queues the task if not on cache, returns the result (blocking)\"\"\"\n        if (result := self.get(task)) is None:\n            return self.get_blocking(self.put(task))\n        return result\n\n    def map(self, *tasks: Hashable) -&gt; List:\n        \"\"\"Puts all tasks in the queue and returns the results in order\"\"\"\n        tasks = flatten(tasks)\n\n        # Queues tasks not present in cache\n        for task, result in zip(tasks, map(self.get, tasks)):\n            if (result is None):\n                self.put(task)\n\n        # Returns the results in order\n        return list(map(self.get_blocking, tasks))\n\n    def map_call(self, method: Callable, inputs: Iterable, **kwargs) -&gt; List:\n        \"\"\"Maps a method to a list of inputs, returns the results in order\"\"\"\n        return self.map((\n            functools.partial(method, item, **kwargs)\n            for item in inputs\n        ))\n\n    # # Context\n\n    def __enter__(self) -&gt; Self:\n        return self\n\n    def __exit__(self, *args) -&gt; None:\n        self.close()\n\n    def close(self) -&gt; None:\n        self.join_tasks()\n        self.size = 0\n\n        # Poison pill until it all ends\n        while self.still_alive:\n            while (self.queue.qsize() &gt; 0):\n                if (not self.still_alive):\n                    break\n                time.sleep(0.001)\n            self.queue.put(None)\n\n        # Avoid queue leftovers next use\n        self.queue = self.queue_type()\n        self.join_workers()\n\n    # # Automation\n\n    @easyloop\n    def keep_alive_thread(self) -&gt; None:\n        \"\"\"Ensures 'size' workers are running the supervisor\"\"\"\n        while (self.still_alive &lt; self.size):\n            self.workers.add(self._spawn(\n                target=self.__supervisor__,\n                _type=self.type\n            ))\n        time.sleep(0.5)\n\n    def __supervisor__(self) -&gt; None:\n        \"\"\"Automatically handle getting tasks and storing results\"\"\"\n        task: Any = None\n\n        # Tracks new current 'task's, stops on None\n        def get_tasks() -&gt; Generator:\n            nonlocal task\n\n            while True:\n                try:\n                    if (task := self.queue.get(block=True)) is not None:\n                        yield (task := self.__deserialize__(task))\n                        continue\n                    break\n                finally:\n                    self.queue.task_done()\n\n        # Optional results are 'yielded', fail on non-generator main\n        if not inspect.isgeneratorfunction(self.main):\n            raise TypeError((\n                f\"{type(self).__name__}.main() function must be a generator, \"\n                \"either 'yield result' or 'yield None' on the code.\"\n            ))\n\n        try:\n            # Wraps 'main' outputs and store results\n            for result in self.main(get_tasks()):\n                self.store(task, result)\n        except GeneratorExit:\n            pass\n        except Exception as error:\n            self.store(task, error)\n            raise error\n\n    def store(self, task: Hashable, result: Optional[Any]) -&gt; None:\n        if (result is not None):\n            self.cache_data[hash(task)] = result\n\n    # # Specific implementations\n\n    @abstractmethod\n    def main(self, tasks: Iterable) -&gt; Generator:\n        \"\"\"A worker gets tasks and yields optional results to be cached\"\"\"\n        log.success(f\"Worker {self.type.__name__} started\")\n\n        for task in tasks:\n            yield task()\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.thread","title":"thread","text":"<pre><code>thread(*args, **kwargs) -&gt; Thread\n</code></pre> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>@classmethod\n@functools.wraps(_spawn)\ndef thread(cls, *args, **kwargs) -&gt; Thread:\n    return cls._spawn(*args, **kwargs, _type=Thread)\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.process","title":"process","text":"<pre><code>process(*args, **kwargs) -&gt; Process\n</code></pre> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>@classmethod\n@functools.wraps(_spawn)\ndef process(cls, *args, **kwargs) -&gt; Process:\n    return cls._spawn(*args, **kwargs, _type=Process)\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.easy_lock","title":"easy_lock","text":"<pre><code>easy_lock(method: Callable) -&gt; Callable\n</code></pre> <p>Get a wrapper with a common threading.Lock for a method, multi-call safe</p> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>@staticmethod\n@functools.cache\ndef easy_lock(method: Callable) -&gt; Callable:\n    \"\"\"Get a wrapper with a common threading.Lock for a method, multi-call safe\"\"\"\n\n    shared_lock = Lock()\n\n    @functools.wraps(method)\n    def wrapped(*args, **kwargs) -&gt; Any:\n        with shared_lock:\n            return method(*args, **kwargs)\n\n    return wrapped\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.type","title":"type","text":"<pre><code>type: WorkerType = Thread\n</code></pre> <p>The primitive to use for parallelization</p>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.size","title":"size","text":"<pre><code>size: int = field(default=1, converter=int)\n</code></pre> <p>How many workers to keep alive</p>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.workers","title":"workers","text":"<pre><code>workers: set[WorkerType] = Factory(set)\n</code></pre> <p>The currently alive workers</p>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.queue","title":"queue","text":"<pre><code>queue: Union[ThreadQueue, ProcessQueue] = None\n</code></pre> <p>The list of tasks to be processed</p>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.queue_type","title":"queue_type","text":"<pre><code>queue_type: type[Queue]\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.diskcache_enabled","title":"diskcache_enabled","text":"<pre><code>diskcache_enabled: bool\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.cache_dict_type","title":"cache_dict_type","text":"<pre><code>cache_dict_type: type[dict]\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.__attrs_post_init__","title":"__attrs_post_init__","text":"<pre><code>__attrs_post_init__()\n</code></pre> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def __attrs_post_init__(self):\n\n    # Initialize DiskCache or dict cache\n    if (self.diskcache_enabled):\n        self.cache_data = DiskCache(\n            directory=Path(self.cache_path),\n            size_limit=int(self.cache_size)*MB,\n        )\n    else:\n        self.cache_data = self.cache_dict_type()\n\n    # Initialize remaining items\n    self.queue = self.queue_type()\n    BrokenWorker.thread(self.keep_alive_thread)\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.alive","title":"alive","text":"<pre><code>alive: Iterable[WorkerType]\n</code></pre> <p>Iterates over the alive workers</p>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.still_alive","title":"still_alive","text":"<pre><code>still_alive: int\n</code></pre> <p>Believe me, I am still alive</p>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.sanitize","title":"sanitize","text":"<pre><code>sanitize() -&gt; None\n</code></pre> <p>Removes dead workers on the set</p> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def sanitize(self) -&gt; None:\n    \"\"\"Removes dead workers on the set\"\"\"\n    self.workers = set(self.alive)\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.join_workers","title":"join_workers","text":"<pre><code>join_workers(timeout: Optional[float] = None) -&gt; None\n</code></pre> <p>Waits for all workers to finish</p> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def join_workers(self, timeout: Optional[float]=None) -&gt; None:\n    \"\"\"Waits for all workers to finish\"\"\"\n    for worker in copy.copy(self.workers):\n        worker.join(timeout)\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.cache_data","title":"cache_data","text":"<pre><code>cache_data: Union[dict, DiskCache] = None\n</code></pre> <p>The cached results database</p>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.cache_path","title":"cache_path","text":"<pre><code>cache_path: Path = None\n</code></pre> <p>(DiskCache) Path to the cache directory, disabled if None</p>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.cache_size","title":"cache_size","text":"<pre><code>cache_size: int = 500\n</code></pre> <p>(DiskCache) Maximum size of the cache in megabytes</p>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.clear_cache","title":"clear_cache","text":"<pre><code>clear_cache() -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def clear_cache(self) -&gt; None:\n    self.cache_data.clear()\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.__serialize__","title":"__serialize__","text":"<pre><code>__serialize__(object: Any) -&gt; Any\n</code></pre> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def __serialize__(self, object: Any) -&gt; Any:\n    if (self.type is Process):\n        return dill.dumps(object, recurse=True)\n    return object\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.__deserialize__","title":"__deserialize__","text":"<pre><code>__deserialize__(object: Any) -&gt; Any\n</code></pre> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def __deserialize__(self, object: Any) -&gt; Any:\n    if (self.type is Process):\n        return dill.loads(object)\n    return object\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.join_tasks","title":"join_tasks","text":"<pre><code>join_tasks() -&gt; None\n</code></pre> <p>Waits for all tasks to finish</p> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def join_tasks(self) -&gt; None:\n    \"\"\"Waits for all tasks to finish\"\"\"\n    self.queue.join()\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.put","title":"put","text":"<pre><code>put(task: Hashable) -&gt; Hashable\n</code></pre> <p>Submit a new task directly to the queue</p> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def put(self, task: Hashable) -&gt; Hashable:\n    \"\"\"Submit a new task directly to the queue\"\"\"\n    return (self.queue.put(self.__serialize__(task)) or task)\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.get","title":"get","text":"<pre><code>get(task: Hashable) -&gt; Optional[Any]\n</code></pre> <p>Get the result of a task, keeping it on cache (non-blocking)</p> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>@abstractmethod\ndef get(self, task: Hashable) -&gt; Optional[Any]:\n    \"\"\"Get the result of a task, keeping it on cache (non-blocking)\"\"\"\n    result = self.cache_data.get(hash(task), None)\n\n    # Remove errors from cache to allow re-queueing\n    if isinstance(result, Exception):\n        return self.pop(task)\n\n    return result\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.get_blocking","title":"get_blocking","text":"<pre><code>get_blocking(task: Hashable) -&gt; Any\n</code></pre> <p>Get the result of a task, keeping it on cache (waits to finish)</p> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def get_blocking(self, task: Hashable) -&gt; Any:\n    \"\"\"Get the result of a task, keeping it on cache (waits to finish)\"\"\"\n    while (result := self.get(hash(task))) is None:\n        time.sleep(0.1)\n    return result\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.pop","title":"pop","text":"<pre><code>pop(task: Hashable) -&gt; Any\n</code></pre> <p>Get the result of a task, removing it from cache</p> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def pop(self, task: Hashable) -&gt; Any:\n    \"\"\"Get the result of a task, removing it from cache\"\"\"\n    return self.cache_data.pop(hash(task))\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.call","title":"call","text":"<pre><code>call(method: Callable, *args, **kwargs) -&gt; Hashable\n</code></pre> <p>Submit a new task to call a method with args and kwargs</p> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def call(self, method: Callable, *args, **kwargs) -&gt; Hashable:\n    \"\"\"Submit a new task to call a method with args and kwargs\"\"\"\n    return self.put(functools.partial(method, *args, **kwargs))\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.get_smart","title":"get_smart","text":"<pre><code>get_smart(task: Hashable) -&gt; Any\n</code></pre> <p>Queues the task if not on cache, returns the result (blocking)</p> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def get_smart(self, task: Hashable) -&gt; Any:\n    \"\"\"Queues the task if not on cache, returns the result (blocking)\"\"\"\n    if (result := self.get(task)) is None:\n        return self.get_blocking(self.put(task))\n    return result\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.map","title":"map","text":"<pre><code>map(*tasks: Hashable) -&gt; List\n</code></pre> <p>Puts all tasks in the queue and returns the results in order</p> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def map(self, *tasks: Hashable) -&gt; List:\n    \"\"\"Puts all tasks in the queue and returns the results in order\"\"\"\n    tasks = flatten(tasks)\n\n    # Queues tasks not present in cache\n    for task, result in zip(tasks, map(self.get, tasks)):\n        if (result is None):\n            self.put(task)\n\n    # Returns the results in order\n    return list(map(self.get_blocking, tasks))\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.map_call","title":"map_call","text":"<pre><code>map_call(\n    method: Callable, inputs: Iterable, **kwargs\n) -&gt; List\n</code></pre> <p>Maps a method to a list of inputs, returns the results in order</p> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def map_call(self, method: Callable, inputs: Iterable, **kwargs) -&gt; List:\n    \"\"\"Maps a method to a list of inputs, returns the results in order\"\"\"\n    return self.map((\n        functools.partial(method, item, **kwargs)\n        for item in inputs\n    ))\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.__enter__","title":"__enter__","text":"<pre><code>__enter__() -&gt; Self\n</code></pre> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def __enter__(self) -&gt; Self:\n    return self\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.__exit__","title":"__exit__","text":"<pre><code>__exit__(*args) -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def __exit__(self, *args) -&gt; None:\n    self.close()\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.close","title":"close","text":"<pre><code>close() -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def close(self) -&gt; None:\n    self.join_tasks()\n    self.size = 0\n\n    # Poison pill until it all ends\n    while self.still_alive:\n        while (self.queue.qsize() &gt; 0):\n            if (not self.still_alive):\n                break\n            time.sleep(0.001)\n        self.queue.put(None)\n\n    # Avoid queue leftovers next use\n    self.queue = self.queue_type()\n    self.join_workers()\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.keep_alive_thread","title":"keep_alive_thread","text":"<pre><code>keep_alive_thread() -&gt; None\n</code></pre> <p>Ensures 'size' workers are running the supervisor</p> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>@easyloop\ndef keep_alive_thread(self) -&gt; None:\n    \"\"\"Ensures 'size' workers are running the supervisor\"\"\"\n    while (self.still_alive &lt; self.size):\n        self.workers.add(self._spawn(\n            target=self.__supervisor__,\n            _type=self.type\n        ))\n    time.sleep(0.5)\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.__supervisor__","title":"__supervisor__","text":"<pre><code>__supervisor__() -&gt; None\n</code></pre> <p>Automatically handle getting tasks and storing results</p> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def __supervisor__(self) -&gt; None:\n    \"\"\"Automatically handle getting tasks and storing results\"\"\"\n    task: Any = None\n\n    # Tracks new current 'task's, stops on None\n    def get_tasks() -&gt; Generator:\n        nonlocal task\n\n        while True:\n            try:\n                if (task := self.queue.get(block=True)) is not None:\n                    yield (task := self.__deserialize__(task))\n                    continue\n                break\n            finally:\n                self.queue.task_done()\n\n    # Optional results are 'yielded', fail on non-generator main\n    if not inspect.isgeneratorfunction(self.main):\n        raise TypeError((\n            f\"{type(self).__name__}.main() function must be a generator, \"\n            \"either 'yield result' or 'yield None' on the code.\"\n        ))\n\n    try:\n        # Wraps 'main' outputs and store results\n        for result in self.main(get_tasks()):\n            self.store(task, result)\n    except GeneratorExit:\n        pass\n    except Exception as error:\n        self.store(task, error)\n        raise error\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.store","title":"store","text":"<pre><code>store(task: Hashable, result: Optional[Any]) -&gt; None\n</code></pre> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>def store(self, task: Hashable, result: Optional[Any]) -&gt; None:\n    if (result is not None):\n        self.cache_data[hash(task)] = result\n</code></pre>"},{"location":"code/broken/core/brokenworker/#Broken.Core.BrokenWorker.BrokenWorker.main","title":"main","text":"<pre><code>main(tasks: Iterable) -&gt; Generator\n</code></pre> <p>A worker gets tasks and yields optional results to be cached</p> Source code in <code>Broken/Core/BrokenWorker.py</code> <pre><code>@abstractmethod\ndef main(self, tasks: Iterable) -&gt; Generator:\n    \"\"\"A worker gets tasks and yields optional results to be cached\"\"\"\n    log.success(f\"Worker {self.type.__name__} started\")\n\n    for task in tasks:\n        yield task()\n</code></pre>"},{"location":"code/broken/externals/__init__/","title":"File: <code>Broken/Externals/__init__.py</code>","text":""},{"location":"code/broken/externals/__init__/#Broken.Externals","title":"Broken.Externals","text":""},{"location":"code/broken/externals/__init__/#Broken.Externals.ExternalTorchBase","title":"ExternalTorchBase","text":"<p>               Bases: <code>BrokenModel</code></p> Source code in <code>Broken/Externals/__init__.py</code> <pre><code>class ExternalTorchBase(BrokenModel):\n\n    @property\n    def device(self) -&gt; str:\n        self.load_torch()\n        if (device := Environment.get(\"TORCH_DEVICE\")):\n            return device\n        if torch.cuda.is_available():\n            return \"cuda\"\n        if torch.backends.mps.is_available():\n            return \"mps\"\n        return \"cpu\"\n\n    def load_torch(self) -&gt; None:\n        \"\"\"Install and inject torch in the caller's globals\"\"\"\n        BrokenTorch.install(exists_ok=True)\n        inspect.currentframe().f_back.f_globals[\"torch\"] = __import__(\"torch\")\n</code></pre>"},{"location":"code/broken/externals/__init__/#Broken.Externals.ExternalTorchBase.device","title":"device","text":"<pre><code>device: str\n</code></pre>"},{"location":"code/broken/externals/__init__/#Broken.Externals.ExternalTorchBase.load_torch","title":"load_torch","text":"<pre><code>load_torch() -&gt; None\n</code></pre> <p>Install and inject torch in the caller's globals</p> Source code in <code>Broken/Externals/__init__.py</code> <pre><code>def load_torch(self) -&gt; None:\n    \"\"\"Install and inject torch in the caller's globals\"\"\"\n    BrokenTorch.install(exists_ok=True)\n    inspect.currentframe().f_back.f_globals[\"torch\"] = __import__(\"torch\")\n</code></pre>"},{"location":"code/broken/externals/__init__/#Broken.Externals.ExternalModelsBase","title":"ExternalModelsBase","text":"<p>               Bases: <code>BrokenModel</code>, <code>ABC</code></p> Source code in <code>Broken/Externals/__init__.py</code> <pre><code>class ExternalModelsBase(BrokenModel, ABC):\n    model_config = ConfigDict(\n        arbitrary_types_allowed=True,\n        validate_assignment=True\n    )\n\n    model: str = Field(\"any\")\n\n    _model: Any = PrivateAttr(None)\n    \"\"\"The true loaded model object\"\"\"\n\n    _loaded: SameTracker = PrivateAttr(default_factory=SameTracker)\n    \"\"\"Keeps track of the current loaded model name, to avoid reloading\"\"\"\n\n    @BrokenWorker.easy_lock\n    def load_model(self) -&gt; Self:\n        if self._loaded(self.model):\n            return\n        if self._model:\n            del self._model\n        self._load_model()\n        return self\n\n    @abstractmethod\n    def _load_model(self) -&gt; None:\n        ...\n</code></pre>"},{"location":"code/broken/externals/__init__/#Broken.Externals.ExternalModelsBase.model_config","title":"model_config","text":"<pre><code>model_config = ConfigDict(\n    arbitrary_types_allowed=True, validate_assignment=True\n)\n</code></pre>"},{"location":"code/broken/externals/__init__/#Broken.Externals.ExternalModelsBase.model","title":"model","text":"<pre><code>model: str = Field('any')\n</code></pre>"},{"location":"code/broken/externals/__init__/#Broken.Externals.ExternalModelsBase.load_model","title":"load_model","text":"<pre><code>load_model() -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/__init__.py</code> <pre><code>@BrokenWorker.easy_lock\ndef load_model(self) -&gt; Self:\n    if self._loaded(self.model):\n        return\n    if self._model:\n        del self._model\n    self._load_model()\n    return self\n</code></pre>"},{"location":"code/broken/externals/depthmap/","title":"File: <code>Broken/Externals/Depthmap.py</code>","text":""},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap","title":"Broken.Externals.Depthmap","text":""},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthEstimatorBase","title":"DepthEstimatorBase","text":"<p>               Bases: <code>ExternalTorchBase</code>, <code>ExternalModelsBase</code>, <code>ABC</code></p> Source code in <code>Broken/Externals/Depthmap.py</code> <pre><code>class DepthEstimatorBase(\n    ExternalTorchBase,\n    ExternalModelsBase,\n    ABC\n):\n    _cache: DiskCache = PrivateAttr(default_factory=lambda: DiskCache(\n        directory=(Broken.PROJECT.DIRECTORIES.CACHE/\"DepthEstimator\"),\n        size_limit=int(Environment.float(\"DEPTHMAP_CACHE_SIZE_MB\", 50)*MiB),\n    ))\n    \"\"\"DiskCache object for caching depth maps\"\"\"\n\n    _format: str = PrivateAttr(\"png\")\n    \"\"\"The format to save the depth map as\"\"\"\n\n    @staticmethod\n    def normalize(array: numpy.ndarray) -&gt; numpy.ndarray: # Fixme: Better place?\n        return (array - array.min()) / ((array.max() - array.min()) or 1)\n\n    @classmethod\n    def normalize_uint16(cls, array: numpy.ndarray) -&gt; numpy.ndarray: # Fixme: Better place?\n        return ((2**16 - 1) * cls.normalize(array.astype(numpy.float32))).astype(numpy.uint16)\n\n    @staticmethod\n    def image_hash(image: LoadableImage) -&gt; int: # Fixme: Better place?\n        # Fixme: Speed gains on improving this heuristic, but it's good enough for now\n        return int(hashlib.sha256(LoadImage(image).tobytes()).hexdigest(), 16)\n\n    def estimate(self,\n        image: LoadableImage,\n        cache: bool=True\n    ) -&gt; numpy.ndarray:\n\n        # Hashlib for deterministic hashes, join class name, model, and image hash\n        image: ImageType = numpy.array(LoadImage(image).convert(\"RGB\"))\n        image_hash: str = f\"{hash(self)}{DepthEstimatorBase.image_hash(image)}\"\n        image_hash: int = int(hashlib.sha256(image_hash.encode()).hexdigest(), 16)\n\n        # Estimate if not on cache\n        if (not cache) or (depth := self._cache.get(image_hash)) is None:\n            self.load_torch()\n            self.load_model()\n            torch.set_num_threads(multiprocessing.cpu_count())\n            depth = DepthEstimatorBase.normalize_uint16(self._estimate(image))\n            Image.fromarray(depth).save(buffer := BytesIO(), format=self._format)\n            self._cache.set(key=image_hash, value=buffer.getvalue())\n        else:\n            # Load the virtual file raw bytes as numpy\n            depth = numpy.array(Image.open(BytesIO(depth)))\n\n        return DepthEstimatorBase.normalize(self._post_processing(depth))\n\n    @functools.wraps(estimate)\n    @abstractmethod\n    def _estimate(self):\n        \"\"\"The implementation shall return a normalized numpy f32 array of the depth map\"\"\"\n        ...\n\n    @abstractmethod\n    def _post_processing(self, depth: numpy.ndarray) -&gt; numpy.ndarray:\n        \"\"\"A step to apply post processing on the depth map if needed\"\"\"\n        return depth\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthEstimatorBase.normalize","title":"normalize","text":"<pre><code>normalize(array: numpy.ndarray) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Broken/Externals/Depthmap.py</code> <pre><code>@staticmethod\ndef normalize(array: numpy.ndarray) -&gt; numpy.ndarray: # Fixme: Better place?\n    return (array - array.min()) / ((array.max() - array.min()) or 1)\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthEstimatorBase.normalize_uint16","title":"normalize_uint16","text":"<pre><code>normalize_uint16(array: numpy.ndarray) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Broken/Externals/Depthmap.py</code> <pre><code>@classmethod\ndef normalize_uint16(cls, array: numpy.ndarray) -&gt; numpy.ndarray: # Fixme: Better place?\n    return ((2**16 - 1) * cls.normalize(array.astype(numpy.float32))).astype(numpy.uint16)\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthEstimatorBase.image_hash","title":"image_hash","text":"<pre><code>image_hash(image: LoadableImage) -&gt; int\n</code></pre> Source code in <code>Broken/Externals/Depthmap.py</code> <pre><code>@staticmethod\ndef image_hash(image: LoadableImage) -&gt; int: # Fixme: Better place?\n    # Fixme: Speed gains on improving this heuristic, but it's good enough for now\n    return int(hashlib.sha256(LoadImage(image).tobytes()).hexdigest(), 16)\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthEstimatorBase.estimate","title":"estimate","text":"<pre><code>estimate(\n    image: LoadableImage, cache: bool = True\n) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Broken/Externals/Depthmap.py</code> <pre><code>def estimate(self,\n    image: LoadableImage,\n    cache: bool=True\n) -&gt; numpy.ndarray:\n\n    # Hashlib for deterministic hashes, join class name, model, and image hash\n    image: ImageType = numpy.array(LoadImage(image).convert(\"RGB\"))\n    image_hash: str = f\"{hash(self)}{DepthEstimatorBase.image_hash(image)}\"\n    image_hash: int = int(hashlib.sha256(image_hash.encode()).hexdigest(), 16)\n\n    # Estimate if not on cache\n    if (not cache) or (depth := self._cache.get(image_hash)) is None:\n        self.load_torch()\n        self.load_model()\n        torch.set_num_threads(multiprocessing.cpu_count())\n        depth = DepthEstimatorBase.normalize_uint16(self._estimate(image))\n        Image.fromarray(depth).save(buffer := BytesIO(), format=self._format)\n        self._cache.set(key=image_hash, value=buffer.getvalue())\n    else:\n        # Load the virtual file raw bytes as numpy\n        depth = numpy.array(Image.open(BytesIO(depth)))\n\n    return DepthEstimatorBase.normalize(self._post_processing(depth))\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthAnythingBase","title":"DepthAnythingBase","text":"<p>               Bases: <code>DepthEstimatorBase</code></p> Source code in <code>Broken/Externals/Depthmap.py</code> <pre><code>class DepthAnythingBase(DepthEstimatorBase):\n    class Model(str, BrokenEnum):\n        Small = \"small\"\n        Base  = \"base\"\n        Large = \"large\"\n\n    model: Annotated[Model, Option(\"--model\", \"-m\",\n        help=\"[bold red](\ud83d\udd34 Basic)[/] What model of DepthAnythingV2 to use\")] = \\\n        Field(Model.Small)\n\n    _processor: Any = PrivateAttr(None)\n\n    @property\n    @abstractmethod\n    def _huggingface_model(self) -&gt; str:\n        ...\n\n    def _load_model(self) -&gt; None:\n        import transformers\n        log.info(f\"Loading Depth Estimator model ({self._huggingface_model})\")\n        self._processor = BrokenCache.lru(transformers.AutoImageProcessor.from_pretrained)(self._huggingface_model, use_fast=False)\n        self._model = BrokenCache.lru(transformers.AutoModelForDepthEstimation.from_pretrained)(self._huggingface_model)\n        self._model.to(self.device)\n\n    def _estimate(self, image: numpy.ndarray) -&gt; numpy.ndarray:\n        inputs = self._processor(images=image, return_tensors=\"pt\")\n        inputs = {key: value.to(self.device) for key, value in inputs.items()}\n        with torch.no_grad():\n            depth = self._model(**inputs).predicted_depth\n        return depth.squeeze(1).cpu().numpy()[0]\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthAnythingBase.Model","title":"Model","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/Depthmap.py</code> <pre><code>class Model(str, BrokenEnum):\n    Small = \"small\"\n    Base  = \"base\"\n    Large = \"large\"\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthAnythingBase.Model.Small","title":"Small","text":"<pre><code>Small = 'small'\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthAnythingBase.Model.Base","title":"Base","text":"<pre><code>Base = 'base'\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthAnythingBase.Model.Large","title":"Large","text":"<pre><code>Large = 'large'\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthAnythingBase.model","title":"model","text":"<pre><code>model: Annotated[\n    Model,\n    Option(\n        --model,\n        -m,\n        help=\"[bold red](\ud83d\udd34 Basic)[/] What model of DepthAnythingV2 to use\",\n    ),\n] = Field(Model.Small)\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthAnythingV1","title":"DepthAnythingV1","text":"<p>               Bases: <code>DepthAnythingBase</code></p> <p>Configure and use DepthAnythingV1 dim[/]</p> Source code in <code>Broken/Externals/Depthmap.py</code> <pre><code>class DepthAnythingV1(DepthAnythingBase):\n    \"\"\"Configure and use DepthAnythingV1 [dim](by https://github.com/LiheYoung/Depth-Anything)[/]\"\"\"\n    type: Annotated[Literal[\"depthanything\"], BrokenTyper.exclude()] = \"depthanything\"\n\n    @property\n    def _huggingface_model(self) -&gt; str:\n        return f\"LiheYoung/depth-anything-{self.model.value}-hf\"\n\n    def _post_processing(self, depth: numpy.ndarray) -&gt; numpy.ndarray:\n        from scipy.ndimage import gaussian_filter, maximum_filter\n        depth = gaussian_filter(input=depth, sigma=0.3)\n        depth = maximum_filter(input=depth, size=5)\n        return depth\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthAnythingV1.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"depthanything\"], BrokenTyper.exclude()\n] = \"depthanything\"\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthAnythingV2","title":"DepthAnythingV2","text":"<p>               Bases: <code>DepthAnythingBase</code></p> <p>Configure and use DepthAnythingV2 dim[/]</p> Source code in <code>Broken/Externals/Depthmap.py</code> <pre><code>class DepthAnythingV2(DepthAnythingBase):\n    \"\"\"Configure and use DepthAnythingV2 [dim](by https://github.com/DepthAnything/Depth-Anything-V2)[/]\"\"\"\n    type: Annotated[Literal[\"depthanything2\"], BrokenTyper.exclude()] = \"depthanything2\"\n    indoor:  bool = Field(False, help=\"Use an indoor fine-tuned metric model\")\n    outdoor: bool = Field(False, help=\"Use an outdoor fine-tuned metric model\")\n\n    @property\n    def _huggingface_model(self) -&gt; str:\n        if (self.indoor):\n            return f\"depth-anything/Depth-Anything-V2-Metric-Indoor-{self.model.value}-hf\"\n        elif (self.outdoor):\n            return f\"depth-anything/Depth-Anything-V2-Metric-Outdoor-{self.model.value}-hf\"\n        else:\n            return f\"depth-anything/Depth-Anything-V2-{self.model.value}-hf\"\n\n    def _post_processing(self, depth: numpy.ndarray) -&gt; numpy.ndarray:\n        from scipy.ndimage import gaussian_filter, maximum_filter\n        if (self.indoor or self.outdoor):\n            depth = (numpy.max(depth) - depth)\n        depth = gaussian_filter(input=depth, sigma=0.6)\n        depth = maximum_filter(input=depth, size=5)\n        return depth\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthAnythingV2.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"depthanything2\"], BrokenTyper.exclude()\n] = \"depthanything2\"\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthAnythingV2.indoor","title":"indoor","text":"<pre><code>indoor: bool = Field(\n    False, help=\"Use an indoor fine-tuned metric model\"\n)\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthAnythingV2.outdoor","title":"outdoor","text":"<pre><code>outdoor: bool = Field(\n    False, help=\"Use an outdoor fine-tuned metric model\"\n)\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthPro","title":"DepthPro","text":"<p>               Bases: <code>DepthEstimatorBase</code></p> <p>Configure and use DepthPro        dim[/]</p> Source code in <code>Broken/Externals/Depthmap.py</code> <pre><code>class DepthPro(DepthEstimatorBase):\n    \"\"\"Configure and use DepthPro        [dim](by Apple https://github.com/apple/ml-depth-pro)[/]\"\"\"\n    type: Annotated[Literal[\"depthpro\"], BrokenTyper.exclude()] = \"depthpro\"\n\n    _model: Any = PrivateAttr(None)\n    _transform: Any = PrivateAttr(None)\n\n    def _load_model(self) -&gt; None:\n        log.info(\"Loading Depth Estimator model (DepthPro)\")\n        install(packages=\"depth_pro\", pypi=\"git+https://github.com/apple/ml-depth-pro\")\n\n        # Download external checkpoint model\n        checkpoint = BrokenPath.get_external(\"https://ml-site.cdn-apple.com/models/depth-pro/depth_pro.pt\")\n\n        import torch\n        from depth_pro import create_model_and_transforms\n        from depth_pro.depth_pro import DEFAULT_MONODEPTH_CONFIG_DICT\n\n        # Change the checkpoint URI to the downloaded checkpoint\n        config = copy.deepcopy(DEFAULT_MONODEPTH_CONFIG_DICT)\n        config.checkpoint_uri = checkpoint\n\n        with Halo(\"Creating DepthPro model\"):\n            self._model, self._transform = BrokenCache.lru(\n                create_model_and_transforms\n            )(\n                precision=torch.float16,\n                device=self.device,\n                config=config\n            )\n            self._model.eval()\n\n    def _estimate(self, image: numpy.ndarray) -&gt; numpy.ndarray:\n\n        # Infer, transfer to CPU, invert depth values\n        depth = self._model.infer(self._transform(image))[\"depth\"]\n        depth = depth.detach().cpu().numpy().squeeze()\n        depth = (numpy.max(depth) - depth)\n\n        # Limit resolution to 1024 as there's no gains in interpoilation\n        depth = numpy.array(Image.fromarray(depth).resize(BrokenResolution.fit(\n            old=depth.shape, max=(1024, 1024),\n            ar=(depth.shape[1]/depth.shape[0]),\n        ), resample=Image.LANCZOS))\n\n        return depth\n\n    def _post_processing(self, depth: numpy.ndarray) -&gt; numpy.ndarray:\n        from scipy.ndimage import maximum_filter\n        depth = maximum_filter(input=depth, size=5)\n        return depth\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthPro.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"depthpro\"], BrokenTyper.exclude()\n] = \"depthpro\"\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.ZoeDepth","title":"ZoeDepth","text":"<p>               Bases: <code>DepthEstimatorBase</code></p> <p>Configure and use ZoeDepth        dim[/]</p> Source code in <code>Broken/Externals/Depthmap.py</code> <pre><code>class ZoeDepth(DepthEstimatorBase):\n    \"\"\"Configure and use ZoeDepth        [dim](by https://github.com/isl-org/ZoeDepth)[/]\"\"\"\n    type: Annotated[Literal[\"zoedepth\"], BrokenTyper.exclude()] = \"zoedepth\"\n\n    class Model(str, BrokenEnum):\n        N  = \"n\"\n        K  = \"k\"\n        NK = \"nk\"\n\n    model: Annotated[Model, Option(\"--model\", \"-m\",\n        help=\"[bold red](\ud83d\udd34 Basic)[/] What model of ZoeDepth to use\")] = \\\n        Field(Model.N)\n\n    def _load_model(self) -&gt; None:\n        install(packages=\"timm\", pypi=\"timm==0.6.7\", args=\"--no-deps\")\n\n        log.info(f\"Loading Depth Estimator model (ZoeDepth-{self.model.value})\")\n        self._model = BrokenCache.lru(torch.hub.load)(\n            \"isl-org/ZoeDepth\", f\"ZoeD_{self.model.value.upper()}\",\n            pretrained=True, trust_repo=True\n        ).to(self.device)\n\n    # Downscale for the largest component to be 512 pixels (Zoe precision), invert for 0=infinity\n    def _estimate(self, image: numpy.ndarray) -&gt; numpy.ndarray:\n        depth = Image.fromarray(1 - DepthEstimatorBase.normalize(self._model.infer_pil(image)))\n        new = BrokenResolution.fit(old=depth.size, max=(512, 512), ar=depth.size[0]/depth.size[1])\n        return numpy.array(depth.resize(new, resample=Image.LANCZOS)).astype(numpy.float32)\n\n    def _post_processing(self, depth: numpy.ndarray) -&gt; numpy.ndarray:\n        return depth\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.ZoeDepth.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"zoedepth\"], BrokenTyper.exclude()\n] = \"zoedepth\"\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.ZoeDepth.Model","title":"Model","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/Depthmap.py</code> <pre><code>class Model(str, BrokenEnum):\n    N  = \"n\"\n    K  = \"k\"\n    NK = \"nk\"\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.ZoeDepth.Model.N","title":"N","text":"<pre><code>N = 'n'\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.ZoeDepth.Model.K","title":"K","text":"<pre><code>K = 'k'\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.ZoeDepth.Model.NK","title":"NK","text":"<pre><code>NK = 'nk'\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.ZoeDepth.model","title":"model","text":"<pre><code>model: Annotated[\n    Model,\n    Option(\n        --model,\n        -m,\n        help=\"[bold red](\ud83d\udd34 Basic)[/] What model of ZoeDepth to use\",\n    ),\n] = Field(Model.N)\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.Marigold","title":"Marigold","text":"<p>               Bases: <code>DepthEstimatorBase</code></p> <p>Configure and use Marigold        dim[/]</p> Source code in <code>Broken/Externals/Depthmap.py</code> <pre><code>class Marigold(DepthEstimatorBase):\n    \"\"\"Configure and use Marigold        [dim](by https://github.com/prs-eth/Marigold)[/]\"\"\"\n    type: Annotated[Literal[\"marigold\"], BrokenTyper.exclude()] = \"marigold\"\n\n    class Variant(str, BrokenEnum):\n        FP16 = \"fp16\"\n        FP32 = \"fp32\"\n\n    variant: Annotated[Variant, Option(\"--variant\", \"-v\",\n        help=\"What variant of Marigold to use\")] = \\\n        Field(Variant.FP16)\n\n    def _load_model(self) -&gt; None:\n        install(packages=(\"accelerate\", \"diffusers\", \"matplotlib\"))\n\n        from diffusers import DiffusionPipeline\n\n        log.info(\"Loading Depth Estimator model (Marigold)\")\n        log.warning(\"Note: Use FP16 for CPU, but it's VERY SLOW\")\n        self._model = BrokenCache.lru(DiffusionPipeline.from_pretrained)(\n            \"prs-eth/marigold-depth-lcm-v1-0\",\n            custom_pipeline=\"marigold_depth_estimation\",\n            torch_dtype=dict(\n                fp16=torch.float16,\n                fp32=torch.float32,\n            )[self.variant.value],\n            variant=self.variant.value,\n        ).to(self.device)\n\n    def _estimate(self, image: numpy.ndarray) -&gt; numpy.ndarray:\n        return (1 - self._model(\n            Image.fromarray(image),\n            match_input_res=False,\n            show_progress_bar=True,\n            color_map=None,\n        ).depth_np)\n\n    def _post_processing(self, depth: numpy.ndarray) -&gt; numpy.ndarray:\n        from scipy.ndimage import gaussian_filter, maximum_filter\n        depth = gaussian_filter(input=depth, sigma=0.6)\n        depth = maximum_filter(input=depth, size=5)\n        return depth\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.Marigold.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"marigold\"], BrokenTyper.exclude()\n] = \"marigold\"\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.Marigold.Variant","title":"Variant","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/Depthmap.py</code> <pre><code>class Variant(str, BrokenEnum):\n    FP16 = \"fp16\"\n    FP32 = \"fp32\"\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.Marigold.Variant.FP16","title":"FP16","text":"<pre><code>FP16 = 'fp16'\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.Marigold.Variant.FP32","title":"FP32","text":"<pre><code>FP32 = 'fp32'\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.Marigold.variant","title":"variant","text":"<pre><code>variant: Annotated[\n    Variant,\n    Option(\n        --variant,\n        -v,\n        help=\"What variant of Marigold to use\",\n    ),\n] = Field(Variant.FP16)\n</code></pre>"},{"location":"code/broken/externals/depthmap/#Broken.Externals.Depthmap.DepthEstimator","title":"DepthEstimator","text":"<pre><code>DepthEstimator: TypeAlias = Union[\n    DepthEstimatorBase,\n    DepthAnythingV1,\n    DepthAnythingV2,\n    DepthPro,\n    ZoeDepth,\n    Marigold,\n]\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/","title":"File: <code>Broken/Externals/FFmpeg.py</code>","text":""},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg","title":"Broken.Externals.FFmpeg","text":""},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegModuleBase","title":"FFmpegModuleBase","text":"<p>               Bases: <code>BrokenModel</code>, <code>ABC</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegModuleBase(BrokenModel, ABC):\n    model_config = ConfigDict(\n        use_attribute_docstrings=True,\n        validate_assignment=True,\n    )\n\n    @abstractmethod\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        ...\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegModuleBase.model_config","title":"model_config","text":"<pre><code>model_config = ConfigDict(\n    use_attribute_docstrings=True, validate_assignment=True\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegModuleBase.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@abstractmethod\ndef command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    ...\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPath","title":"FFmpegInputPath","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegInputPath(FFmpegModuleBase):\n    type: Annotated[Literal[\"path\"], BrokenTyper.exclude()] = \"path\"\n    path: Path\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        return (\"-i\", self.path)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPath.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"path\"], BrokenTyper.exclude()] = (\n    \"path\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPath.path","title":"path","text":"<pre><code>path: Path\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPath.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    return (\"-i\", self.path)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe","title":"FFmpegInputPipe","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegInputPipe(FFmpegModuleBase):\n    type: Annotated[Literal[\"pipe\"], BrokenTyper.exclude()] = \"pipe\"\n\n    class Format(str, BrokenEnum):\n        Rawvideo   = \"rawvideo\"\n        Image2Pipe = \"image2pipe\"\n        Null       = \"null\"\n\n    format: Annotated[Optional[Format],\n        Option(\"--format\", \"-f\")] = \\\n        Field(Format.Rawvideo)\n\n    class PixelFormat(str, BrokenEnum):\n        YUV420P = \"yuv420p\"\n        YUV444P = \"yuv444p\"\n        RGB24   = \"rgb24\"\n        RGBA    = \"rgba\"\n\n    pixel_format: Annotated[PixelFormat,\n        Option(\"--pixel-format\", \"-p\")] = \\\n        Field(PixelFormat.RGB24)\n\n    width: int = Field(1920, gt=0)\n    height: int = Field(1080, gt=0)\n    framerate: float = Field(60.0, ge=1.0)\n\n    @field_validator(\"framerate\", mode=\"plain\")\n    def validate_framerate(cls, value: Union[float, str]) -&gt; float:\n        return eval(str(value))\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield (\"-f\", denum(self.format))\n        yield (\"-s\", f\"{self.width}x{self.height}\")\n        yield (\"-pix_fmt\", denum(self.pixel_format))\n        yield (\"-r\", self.framerate)\n        yield (\"-i\", \"-\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"pipe\"], BrokenTyper.exclude()] = (\n    \"pipe\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.Format","title":"Format","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Format(str, BrokenEnum):\n    Rawvideo   = \"rawvideo\"\n    Image2Pipe = \"image2pipe\"\n    Null       = \"null\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.Format.Rawvideo","title":"Rawvideo","text":"<pre><code>Rawvideo = 'rawvideo'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.Format.Image2Pipe","title":"Image2Pipe","text":"<pre><code>Image2Pipe = 'image2pipe'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.Format.Null","title":"Null","text":"<pre><code>Null = 'null'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.format","title":"format","text":"<pre><code>format: Annotated[\n    Optional[Format], Option(\"--format\", \"-f\")\n] = Field(Format.Rawvideo)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.PixelFormat","title":"PixelFormat","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class PixelFormat(str, BrokenEnum):\n    YUV420P = \"yuv420p\"\n    YUV444P = \"yuv444p\"\n    RGB24   = \"rgb24\"\n    RGBA    = \"rgba\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.PixelFormat.YUV420P","title":"YUV420P","text":"<pre><code>YUV420P = 'yuv420p'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.PixelFormat.YUV444P","title":"YUV444P","text":"<pre><code>YUV444P = 'yuv444p'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.PixelFormat.RGB24","title":"RGB24","text":"<pre><code>RGB24 = 'rgb24'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.PixelFormat.RGBA","title":"RGBA","text":"<pre><code>RGBA = 'rgba'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.pixel_format","title":"pixel_format","text":"<pre><code>pixel_format: Annotated[\n    PixelFormat, Option(\"--pixel-format\", \"-p\")\n] = Field(PixelFormat.RGB24)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.width","title":"width","text":"<pre><code>width: int = Field(1920, gt=0)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.height","title":"height","text":"<pre><code>height: int = Field(1080, gt=0)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.framerate","title":"framerate","text":"<pre><code>framerate: float = Field(60.0, ge=1.0)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.validate_framerate","title":"validate_framerate","text":"<pre><code>validate_framerate(value: Union[float, str]) -&gt; float\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@field_validator(\"framerate\", mode=\"plain\")\ndef validate_framerate(cls, value: Union[float, str]) -&gt; float:\n    return eval(str(value))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputPipe.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield (\"-f\", denum(self.format))\n    yield (\"-s\", f\"{self.width}x{self.height}\")\n    yield (\"-pix_fmt\", denum(self.pixel_format))\n    yield (\"-r\", self.framerate)\n    yield (\"-i\", \"-\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegInputType","title":"FFmpegInputType","text":"<pre><code>FFmpegInputType: TypeAlias = Union[\n    FFmpegInputPath, FFmpegInputPipe\n]\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPath","title":"FFmpegOutputPath","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegOutputPath(FFmpegModuleBase):\n    type: Annotated[Literal[\"path\"], BrokenTyper.exclude()] = \"path\"\n\n    overwrite: Annotated[bool,\n        Option(\"--overwrite\", \"-y\", \" /--no-overwrite\", \" /-n\")] = \\\n        Field(True)\n\n    path: Annotated[Path,\n        typer.Argument(help=\"The output file path\")] = \\\n        Field(...)\n\n    class PixelFormat(str, BrokenEnum):\n        YUV420P = \"yuv420p\"\n        YUV444P = \"yuv444p\"\n\n    pixel_format: Annotated[Optional[PixelFormat],\n        Option(\"--pixel-format\", \"-p\")] = \\\n        Field(PixelFormat.YUV420P)\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield every(\"-pix_fmt\", denum(self.pixel_format))\n        yield (self.path, self.overwrite*\"-y\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPath.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"path\"], BrokenTyper.exclude()] = (\n    \"path\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPath.overwrite","title":"overwrite","text":"<pre><code>overwrite: Annotated[\n    bool,\n    Option(\"--overwrite\", \"-y\", \" /--no-overwrite\", \" /-n\"),\n] = Field(True)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPath.path","title":"path","text":"<pre><code>path: Annotated[\n    Path, typer.Argument(help=\"The output file path\")\n] = Field(...)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPath.PixelFormat","title":"PixelFormat","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class PixelFormat(str, BrokenEnum):\n    YUV420P = \"yuv420p\"\n    YUV444P = \"yuv444p\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPath.PixelFormat.YUV420P","title":"YUV420P","text":"<pre><code>YUV420P = 'yuv420p'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPath.PixelFormat.YUV444P","title":"YUV444P","text":"<pre><code>YUV444P = 'yuv444p'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPath.pixel_format","title":"pixel_format","text":"<pre><code>pixel_format: Annotated[\n    Optional[PixelFormat], Option(\"--pixel-format\", \"-p\")\n] = Field(PixelFormat.YUV420P)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPath.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield every(\"-pix_fmt\", denum(self.pixel_format))\n    yield (self.path, self.overwrite*\"-y\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPipe","title":"FFmpegOutputPipe","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegOutputPipe(FFmpegModuleBase):\n    type: Annotated[Literal[\"pipe\"], BrokenTyper.exclude()] = \"pipe\"\n\n    class Format(str, BrokenEnum):\n        Rawvideo   = \"rawvideo\"\n        Image2Pipe = \"image2pipe\"\n        Matroska   = \"matroska\"\n        Mpegts     = \"mpegts\"\n        Null       = \"null\"\n\n    format: Annotated[Optional[Format],\n        Option(\"--format\", \"-f\")] = \\\n        Field(None)\n\n    class PixelFormat(str, BrokenEnum):\n        RGB24 = \"rgb24\"\n        RGBA  = \"rgba\"\n\n    pixel_format: Annotated[Optional[PixelFormat],\n        Option(\"--pixel-format\", \"-p\")] = \\\n        Field(None)\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield every(\"-f\", denum(self.format))\n        yield every(\"-pix_fmt\", denum(self.pixel_format))\n        yield \"-\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPipe.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"pipe\"], BrokenTyper.exclude()] = (\n    \"pipe\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPipe.Format","title":"Format","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Format(str, BrokenEnum):\n    Rawvideo   = \"rawvideo\"\n    Image2Pipe = \"image2pipe\"\n    Matroska   = \"matroska\"\n    Mpegts     = \"mpegts\"\n    Null       = \"null\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPipe.Format.Rawvideo","title":"Rawvideo","text":"<pre><code>Rawvideo = 'rawvideo'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPipe.Format.Image2Pipe","title":"Image2Pipe","text":"<pre><code>Image2Pipe = 'image2pipe'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPipe.Format.Matroska","title":"Matroska","text":"<pre><code>Matroska = 'matroska'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPipe.Format.Mpegts","title":"Mpegts","text":"<pre><code>Mpegts = 'mpegts'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPipe.Format.Null","title":"Null","text":"<pre><code>Null = 'null'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPipe.format","title":"format","text":"<pre><code>format: Annotated[\n    Optional[Format], Option(\"--format\", \"-f\")\n] = Field(None)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPipe.PixelFormat","title":"PixelFormat","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class PixelFormat(str, BrokenEnum):\n    RGB24 = \"rgb24\"\n    RGBA  = \"rgba\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPipe.PixelFormat.RGB24","title":"RGB24","text":"<pre><code>RGB24 = 'rgb24'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPipe.PixelFormat.RGBA","title":"RGBA","text":"<pre><code>RGBA = 'rgba'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPipe.pixel_format","title":"pixel_format","text":"<pre><code>pixel_format: Annotated[\n    Optional[PixelFormat], Option(\"--pixel-format\", \"-p\")\n] = Field(None)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputPipe.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield every(\"-f\", denum(self.format))\n    yield every(\"-pix_fmt\", denum(self.pixel_format))\n    yield \"-\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegOutputType","title":"FFmpegOutputType","text":"<pre><code>FFmpegOutputType = Union[FFmpegOutputPipe, FFmpegOutputPath]\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264","title":"FFmpegVideoCodecH264","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> <p>Use bold orange3VideoLAN's/link bluelibx264/link</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecH264(FFmpegModuleBase):\n    \"\"\"Use [bold orange3][link=https://www.videolan.org/developers/x264.html]VideoLAN's[/link][/] [blue][link=https://trac.ffmpeg.org/wiki/Encode/H.264]libx264[/link][/]\"\"\"\n    type: Annotated[Literal[\"h264\"], BrokenTyper.exclude()] = \"h264\"\n\n    class Preset(str, BrokenEnum):\n        None_     = None\n        UltraFast = \"ultrafast\"\n        SuperFast = \"superfast\"\n        VeryFast  = \"veryfast\"\n        Faster    = \"faster\"\n        Fast      = \"fast\"\n        Medium    = \"medium\"\n        Slow      = \"slow\"\n        Slower    = \"slower\"\n        VerySlow  = \"veryslow\"\n\n    preset: Annotated[Optional[Preset],\n        Option(\"--preset\", \"-p\")] = \\\n        Field(Preset.Slow)\n    \"\"\"How much time to spend on encoding. Slower options gives better compression\n    [blue link=https://trac.ffmpeg.org/wiki/Encode/H.264#Preset]\u2192 Documentation[/]\"\"\"\n\n    class Tune(str, BrokenEnum):\n        None_       = None\n        Film        = \"film\"\n        Animation   = \"animation\"\n        Grain       = \"grain\"\n        StillImage  = \"stillimage\"\n        FastDecode  = \"fastdecode\"\n        ZeroLatency = \"zerolatency\"\n\n    tune: Annotated[Optional[Tune],\n        Option(\"--tune\", \"-t\")] = \\\n        Field(None)\n    \"\"\"Tune x264 to keep and optimize for certain aspects of the input media\n    [blue link=https://trac.ffmpeg.org/wiki/Encode/H.264#Tune]\u2192 Documentation[/]\"\"\"\n\n    class Profile(str, BrokenEnum):\n        None_    = None\n        Baseline = \"baseline\"\n        Main     = \"main\"\n        High     = \"high\"\n        High10   = \"high10\"\n        High422  = \"high422\"\n        High444p = \"high444p\"\n\n    profile: Annotated[Optional[Profile],\n        Option(\"--profile\", \"-p\")] = \\\n        Field(None)\n    \"\"\"How many features the encoder can use, the playback device must support them\n    [blue link=https://trac.ffmpeg.org/wiki/Encode/H.264#Profile]\u2192 Documentation[/]\"\"\"\n\n    faststart: Annotated[bool,\n        Option(\"--faststart\", \" /--no-faststart\", hidden=True)] = \\\n        Field(True)\n    \"\"\"Move the index (moov atom) to the beginning of the file for faster initial playback\"\"\"\n\n    rgb: Annotated[bool,\n        Option(\"--rgb\", \" /--yuv\")] = \\\n        Field(False)\n    \"\"\"Use RGB colorspace instead of YUV\"\"\"\n\n    crf: int = Field(20, ge=0, le=51)\n    \"\"\"Constant Rate Factor. 0 is lossless, 51 is the worst quality\n    [blue link=https://trac.ffmpeg.org/wiki/Encode/H.264#a1.ChooseaCRFvalue]\u2192 Documentation[/]\"\"\"\n\n    crf: Annotated[int,\n        Option(\"--crf\", \"-c\", min=0, max=51)] = \\\n        Field(20, ge=0, le=51)\n    \"\"\"Constant Rate Factor. 0 is lossless, 51 is the worst quality\n    [blue link=https://trac.ffmpeg.org/wiki/Encode/H.264#a1.ChooseaCRFvalue]\u2192 Documentation[/]\"\"\"\n\n    bitrate: Annotated[Optional[int],\n        Option(\"--bitrate\", \"-b\", min=0)] = \\\n        Field(None, ge=0)\n    \"\"\"Bitrate in kilobits per second, the higher the better quality and file size\"\"\"\n\n    x264params: Annotated[Optional[list[str]],\n        Option(\"--x264-params\", hidden=True)] = \\\n        Field(None)\n    \"\"\"Additional options to pass to x264\"\"\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield every(\"-c:v\", \"libx264rgb\" if self.rgb else \"libx264\")\n        yield every(\"-movflags\", \"+faststart\"*self.faststart)\n        yield every(\"-profile\", denum(self.profile))\n        yield every(\"-preset\", denum(self.preset))\n        yield every(\"-tune\", denum(self.tune))\n        yield every(\"-b:v\", self.bitrate)\n        yield every(\"-crf\", self.crf)\n        yield every(\"-x264opts\", \":\".join(self.x264params or []))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"h264\"], BrokenTyper.exclude()] = (\n    \"h264\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Preset","title":"Preset","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Preset(str, BrokenEnum):\n    None_     = None\n    UltraFast = \"ultrafast\"\n    SuperFast = \"superfast\"\n    VeryFast  = \"veryfast\"\n    Faster    = \"faster\"\n    Fast      = \"fast\"\n    Medium    = \"medium\"\n    Slow      = \"slow\"\n    Slower    = \"slower\"\n    VerySlow  = \"veryslow\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Preset.None_","title":"None_","text":"<pre><code>None_ = None\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Preset.UltraFast","title":"UltraFast","text":"<pre><code>UltraFast = 'ultrafast'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Preset.SuperFast","title":"SuperFast","text":"<pre><code>SuperFast = 'superfast'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Preset.VeryFast","title":"VeryFast","text":"<pre><code>VeryFast = 'veryfast'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Preset.Faster","title":"Faster","text":"<pre><code>Faster = 'faster'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Preset.Fast","title":"Fast","text":"<pre><code>Fast = 'fast'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Preset.Medium","title":"Medium","text":"<pre><code>Medium = 'medium'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Preset.Slow","title":"Slow","text":"<pre><code>Slow = 'slow'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Preset.Slower","title":"Slower","text":"<pre><code>Slower = 'slower'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Preset.VerySlow","title":"VerySlow","text":"<pre><code>VerySlow = 'veryslow'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.preset","title":"preset","text":"<pre><code>preset: Annotated[\n    Optional[Preset], Option(\"--preset\", \"-p\")\n] = Field(Preset.Slow)\n</code></pre> <p>How much time to spend on encoding. Slower options gives better compression [blue link=https://trac.ffmpeg.org/wiki/Encode/H.264#Preset]\u2192 Documentation[/]</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Tune","title":"Tune","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Tune(str, BrokenEnum):\n    None_       = None\n    Film        = \"film\"\n    Animation   = \"animation\"\n    Grain       = \"grain\"\n    StillImage  = \"stillimage\"\n    FastDecode  = \"fastdecode\"\n    ZeroLatency = \"zerolatency\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Tune.None_","title":"None_","text":"<pre><code>None_ = None\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Tune.Film","title":"Film","text":"<pre><code>Film = 'film'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Tune.Animation","title":"Animation","text":"<pre><code>Animation = 'animation'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Tune.Grain","title":"Grain","text":"<pre><code>Grain = 'grain'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Tune.StillImage","title":"StillImage","text":"<pre><code>StillImage = 'stillimage'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Tune.FastDecode","title":"FastDecode","text":"<pre><code>FastDecode = 'fastdecode'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Tune.ZeroLatency","title":"ZeroLatency","text":"<pre><code>ZeroLatency = 'zerolatency'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.tune","title":"tune","text":"<pre><code>tune: Annotated[Optional[Tune], Option(\"--tune\", \"-t\")] = (\n    Field(None)\n)\n</code></pre> <p>Tune x264 to keep and optimize for certain aspects of the input media [blue link=https://trac.ffmpeg.org/wiki/Encode/H.264#Tune]\u2192 Documentation[/]</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Profile","title":"Profile","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Profile(str, BrokenEnum):\n    None_    = None\n    Baseline = \"baseline\"\n    Main     = \"main\"\n    High     = \"high\"\n    High10   = \"high10\"\n    High422  = \"high422\"\n    High444p = \"high444p\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Profile.None_","title":"None_","text":"<pre><code>None_ = None\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Profile.Baseline","title":"Baseline","text":"<pre><code>Baseline = 'baseline'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Profile.Main","title":"Main","text":"<pre><code>Main = 'main'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Profile.High","title":"High","text":"<pre><code>High = 'high'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Profile.High10","title":"High10","text":"<pre><code>High10 = 'high10'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Profile.High422","title":"High422","text":"<pre><code>High422 = 'high422'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.Profile.High444p","title":"High444p","text":"<pre><code>High444p = 'high444p'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.profile","title":"profile","text":"<pre><code>profile: Annotated[\n    Optional[Profile], Option(\"--profile\", \"-p\")\n] = Field(None)\n</code></pre> <p>How many features the encoder can use, the playback device must support them [blue link=https://trac.ffmpeg.org/wiki/Encode/H.264#Profile]\u2192 Documentation[/]</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.faststart","title":"faststart","text":"<pre><code>faststart: Annotated[\n    bool,\n    Option(\"--faststart\", \" /--no-faststart\", hidden=True),\n] = Field(True)\n</code></pre> <p>Move the index (moov atom) to the beginning of the file for faster initial playback</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.rgb","title":"rgb","text":"<pre><code>rgb: Annotated[bool, Option(\"--rgb\", \" /--yuv\")] = Field(\n    False\n)\n</code></pre> <p>Use RGB colorspace instead of YUV</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.crf","title":"crf","text":"<pre><code>crf: Annotated[\n    int, Option(\"--crf\", \"-c\", min=0, max=51)\n] = Field(20, ge=0, le=51)\n</code></pre> <p>Constant Rate Factor. 0 is lossless, 51 is the worst quality [blue link=https://trac.ffmpeg.org/wiki/Encode/H.264#a1.ChooseaCRFvalue]\u2192 Documentation[/]</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.bitrate","title":"bitrate","text":"<pre><code>bitrate: Annotated[\n    Optional[int], Option(\"--bitrate\", \"-b\", min=0)\n] = Field(None, ge=0)\n</code></pre> <p>Bitrate in kilobits per second, the higher the better quality and file size</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.x264params","title":"x264params","text":"<pre><code>x264params: Annotated[\n    Optional[list[str]],\n    Option(\"--x264-params\", hidden=True),\n] = Field(None)\n</code></pre> <p>Additional options to pass to x264</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield every(\"-c:v\", \"libx264rgb\" if self.rgb else \"libx264\")\n    yield every(\"-movflags\", \"+faststart\"*self.faststart)\n    yield every(\"-profile\", denum(self.profile))\n    yield every(\"-preset\", denum(self.preset))\n    yield every(\"-tune\", denum(self.tune))\n    yield every(\"-b:v\", self.bitrate)\n    yield every(\"-crf\", self.crf)\n    yield every(\"-x264opts\", \":\".join(self.x264params or []))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC","title":"FFmpegVideoCodecH264_NVENC","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> <p>Use bold greenNVIDIA/link blueNVENC H.264/link</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecH264_NVENC(FFmpegModuleBase):\n    \"\"\"Use [bold green][link=https://en.wikipedia.org/wiki/Nvidia_NVENC]NVIDIA[/link][/] [blue][link=https://trac.ffmpeg.org/wiki/HWAccelIntro]NVENC H.264[/link][/]\"\"\"\n    type: Annotated[Literal[\"h264-nvenc\"], BrokenTyper.exclude()] = \"h264-nvenc\"\n\n    class Preset(str, BrokenEnum):\n        None_                     = None\n        HighQuality2Passes        = \"slow\"\n        HighQuality1Pass          = \"medium\"\n        HighPerformance1Pass      = \"fast\"\n        HighPerformance           = \"hp\"\n        HighQuality               = \"hq\"\n        Balanced                  = \"bd\"\n        LowLatency                = \"ll\"\n        LowLatencyHighQuality     = \"llhq\"\n        LowLatencyHighPerformance = \"llhp\"\n        Lossless                  = \"lossless\"\n        LosslessHighPerformance   = \"losslesshp\"\n        Fastest                   = \"p1\"\n        Faster                    = \"p2\"\n        Fast                      = \"p3\"\n        Medium                    = \"p4\"\n        Slow                      = \"p5\"\n        Slower                    = \"p6\"\n        Slowest                   = \"p7\"\n\n    preset: Annotated[Optional[Preset],\n        Option(\"--preset\", \"-p\")] = \\\n        Field(Preset.Medium)\n    \"\"\"How much time to spend on encoding. Slower options gives better compression\"\"\"\n\n    class Tune(str, BrokenEnum):\n        None_           = None\n        HighQuality     = \"hq\"\n        LowLatency      = \"ll\"\n        UltraLowLatency = \"ull\"\n        Lossless        = \"lossless\"\n\n    tune: Annotated[Optional[Tune],\n        Option(\"--tune\", \"-t\")] = \\\n        Field(Tune.HighQuality)\n    \"\"\"Tune the encoder for a specific tier of performance\"\"\"\n\n    class Profile(str, BrokenEnum):\n        None_    = None\n        Baseline = \"baseline\"\n        Main     = \"main\"\n        High     = \"high\"\n        High444p = \"high444p\"\n\n    profile: Annotated[Optional[Profile],\n        Option(\"--profile\", \"-p\")] = \\\n        Field(Profile.High)\n    \"\"\"How many features the encoder can use, the playback device must support them\"\"\"\n\n    class RateControl(str, BrokenEnum):\n        None_ = None\n        ConstantQuality = \"constqp\"\n        VariableBitrate = \"vbr\"\n        ConstantBitrate = \"cbr\"\n\n    rate_control: Annotated[Optional[RateControl],\n        Option(\"--rc\", \"-r\", hidden=True)] = \\\n        Field(RateControl.VariableBitrate)\n    \"\"\"Rate control mode of the bitrate\"\"\"\n\n    rc_lookahead: Annotated[Optional[int],\n        Option(\"--rc-lookahead\", \"-l\", hidden=True, min=0)] = \\\n        Field(32, ge=0)\n    \"\"\"Number of frames to look ahead for the rate control\"\"\"\n\n    cbr: Annotated[bool,\n        Option(\"--cbr\", \"-c\", \" /--no-cbr\", \" /-nc\", hidden=True)] = \\\n        Field(False)\n    \"\"\"Enable Constant Bitrate mode\"\"\"\n\n    gpu: Annotated[Optional[int],\n        Option(\"--gpu\", \"-g\", min=-1)] = \\\n        Field(-1, ge=-1)\n    \"\"\"Use the Nth NVENC capable GPU for encoding, -1 to pick the first device available\"\"\"\n\n    cq: Annotated[Optional[int],\n        Option(\"--cq\", \"-q\", min=0)] = \\\n        Field(25, ge=0)\n    \"\"\"(VBR) Similar to CRF, 0 is automatic, 1 is 'lossless', 51 is the worst quality\"\"\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield every(\"-c:v\", \"h264_nvenc\")\n        yield every(\"-b:v\", 0)\n        yield every(\"-preset\", denum(self.preset))\n        yield every(\"-tune\", denum(self.tune))\n        yield every(\"-profile:v\", denum(self.profile))\n        yield every(\"-rc\", denum(self.rate_control))\n        yield every(\"-rc-lookahead\", self.rc_lookahead)\n        yield every(\"-cbr\", int(self.cbr))\n        yield every(\"-cq\", self.cq)\n        yield every(\"-gpu\", self.gpu)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"h264-nvenc\"], BrokenTyper.exclude()\n] = \"h264-nvenc\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset","title":"Preset","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Preset(str, BrokenEnum):\n    None_                     = None\n    HighQuality2Passes        = \"slow\"\n    HighQuality1Pass          = \"medium\"\n    HighPerformance1Pass      = \"fast\"\n    HighPerformance           = \"hp\"\n    HighQuality               = \"hq\"\n    Balanced                  = \"bd\"\n    LowLatency                = \"ll\"\n    LowLatencyHighQuality     = \"llhq\"\n    LowLatencyHighPerformance = \"llhp\"\n    Lossless                  = \"lossless\"\n    LosslessHighPerformance   = \"losslesshp\"\n    Fastest                   = \"p1\"\n    Faster                    = \"p2\"\n    Fast                      = \"p3\"\n    Medium                    = \"p4\"\n    Slow                      = \"p5\"\n    Slower                    = \"p6\"\n    Slowest                   = \"p7\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.None_","title":"None_","text":"<pre><code>None_ = None\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.HighQuality2Passes","title":"HighQuality2Passes","text":"<pre><code>HighQuality2Passes = 'slow'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.HighQuality1Pass","title":"HighQuality1Pass","text":"<pre><code>HighQuality1Pass = 'medium'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.HighPerformance1Pass","title":"HighPerformance1Pass","text":"<pre><code>HighPerformance1Pass = 'fast'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.HighPerformance","title":"HighPerformance","text":"<pre><code>HighPerformance = 'hp'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.HighQuality","title":"HighQuality","text":"<pre><code>HighQuality = 'hq'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.Balanced","title":"Balanced","text":"<pre><code>Balanced = 'bd'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.LowLatency","title":"LowLatency","text":"<pre><code>LowLatency = 'll'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.LowLatencyHighQuality","title":"LowLatencyHighQuality","text":"<pre><code>LowLatencyHighQuality = 'llhq'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.LowLatencyHighPerformance","title":"LowLatencyHighPerformance","text":"<pre><code>LowLatencyHighPerformance = 'llhp'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.Lossless","title":"Lossless","text":"<pre><code>Lossless = 'lossless'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.LosslessHighPerformance","title":"LosslessHighPerformance","text":"<pre><code>LosslessHighPerformance = 'losslesshp'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.Fastest","title":"Fastest","text":"<pre><code>Fastest = 'p1'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.Faster","title":"Faster","text":"<pre><code>Faster = 'p2'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.Fast","title":"Fast","text":"<pre><code>Fast = 'p3'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.Medium","title":"Medium","text":"<pre><code>Medium = 'p4'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.Slow","title":"Slow","text":"<pre><code>Slow = 'p5'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.Slower","title":"Slower","text":"<pre><code>Slower = 'p6'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Preset.Slowest","title":"Slowest","text":"<pre><code>Slowest = 'p7'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.preset","title":"preset","text":"<pre><code>preset: Annotated[\n    Optional[Preset], Option(\"--preset\", \"-p\")\n] = Field(Preset.Medium)\n</code></pre> <p>How much time to spend on encoding. Slower options gives better compression</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Tune","title":"Tune","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Tune(str, BrokenEnum):\n    None_           = None\n    HighQuality     = \"hq\"\n    LowLatency      = \"ll\"\n    UltraLowLatency = \"ull\"\n    Lossless        = \"lossless\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Tune.None_","title":"None_","text":"<pre><code>None_ = None\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Tune.HighQuality","title":"HighQuality","text":"<pre><code>HighQuality = 'hq'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Tune.LowLatency","title":"LowLatency","text":"<pre><code>LowLatency = 'll'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Tune.UltraLowLatency","title":"UltraLowLatency","text":"<pre><code>UltraLowLatency = 'ull'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Tune.Lossless","title":"Lossless","text":"<pre><code>Lossless = 'lossless'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.tune","title":"tune","text":"<pre><code>tune: Annotated[Optional[Tune], Option(\"--tune\", \"-t\")] = (\n    Field(Tune.HighQuality)\n)\n</code></pre> <p>Tune the encoder for a specific tier of performance</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Profile","title":"Profile","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Profile(str, BrokenEnum):\n    None_    = None\n    Baseline = \"baseline\"\n    Main     = \"main\"\n    High     = \"high\"\n    High444p = \"high444p\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Profile.None_","title":"None_","text":"<pre><code>None_ = None\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Profile.Baseline","title":"Baseline","text":"<pre><code>Baseline = 'baseline'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Profile.Main","title":"Main","text":"<pre><code>Main = 'main'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Profile.High","title":"High","text":"<pre><code>High = 'high'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.Profile.High444p","title":"High444p","text":"<pre><code>High444p = 'high444p'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.profile","title":"profile","text":"<pre><code>profile: Annotated[\n    Optional[Profile], Option(\"--profile\", \"-p\")\n] = Field(Profile.High)\n</code></pre> <p>How many features the encoder can use, the playback device must support them</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.RateControl","title":"RateControl","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class RateControl(str, BrokenEnum):\n    None_ = None\n    ConstantQuality = \"constqp\"\n    VariableBitrate = \"vbr\"\n    ConstantBitrate = \"cbr\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.RateControl.None_","title":"None_","text":"<pre><code>None_ = None\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.RateControl.ConstantQuality","title":"ConstantQuality","text":"<pre><code>ConstantQuality = 'constqp'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.RateControl.VariableBitrate","title":"VariableBitrate","text":"<pre><code>VariableBitrate = 'vbr'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.RateControl.ConstantBitrate","title":"ConstantBitrate","text":"<pre><code>ConstantBitrate = 'cbr'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.rate_control","title":"rate_control","text":"<pre><code>rate_control: Annotated[\n    Optional[RateControl], Option(\"--rc\", \"-r\", hidden=True)\n] = Field(RateControl.VariableBitrate)\n</code></pre> <p>Rate control mode of the bitrate</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.rc_lookahead","title":"rc_lookahead","text":"<pre><code>rc_lookahead: Annotated[\n    Optional[int],\n    Option(\"--rc-lookahead\", \"-l\", hidden=True, min=0),\n] = Field(32, ge=0)\n</code></pre> <p>Number of frames to look ahead for the rate control</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.cbr","title":"cbr","text":"<pre><code>cbr: Annotated[\n    bool,\n    Option(\n        \"--cbr\", \"-c\", \" /--no-cbr\", \" /-nc\", hidden=True\n    ),\n] = Field(False)\n</code></pre> <p>Enable Constant Bitrate mode</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.gpu","title":"gpu","text":"<pre><code>gpu: Annotated[\n    Optional[int], Option(\"--gpu\", \"-g\", min=-1)\n] = Field(-1, ge=-1)\n</code></pre> <p>Use the Nth NVENC capable GPU for encoding, -1 to pick the first device available</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.cq","title":"cq","text":"<pre><code>cq: Annotated[\n    Optional[int], Option(\"--cq\", \"-q\", min=0)\n] = Field(25, ge=0)\n</code></pre> <p>(VBR) Similar to CRF, 0 is automatic, 1 is 'lossless', 51 is the worst quality</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_NVENC.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield every(\"-c:v\", \"h264_nvenc\")\n    yield every(\"-b:v\", 0)\n    yield every(\"-preset\", denum(self.preset))\n    yield every(\"-tune\", denum(self.tune))\n    yield every(\"-profile:v\", denum(self.profile))\n    yield every(\"-rc\", denum(self.rate_control))\n    yield every(\"-rc-lookahead\", self.rc_lookahead)\n    yield every(\"-cbr\", int(self.cbr))\n    yield every(\"-cq\", self.cq)\n    yield every(\"-gpu\", self.gpu)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_QSV","title":"FFmpegVideoCodecH264_QSV","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecH264_QSV(FFmpegModuleBase):\n    ... # Todo\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH264_AMF","title":"FFmpegVideoCodecH264_AMF","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecH264_AMF(FFmpegModuleBase):\n    ... # Todo\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265","title":"FFmpegVideoCodecH265","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> <p>Use bold orange3VideoLAN's/link bluelibx265/link</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecH265(FFmpegModuleBase):\n    \"\"\"Use [bold orange3][link=https://www.videolan.org/developers/x265.html]VideoLAN's[/link][/] [blue][link=https://trac.ffmpeg.org/wiki/Encode/H.265]libx265[/link][/]\"\"\"\n    type: Annotated[Literal[\"h265\"], BrokenTyper.exclude()] = \"h265\"\n\n    crf: Annotated[Optional[int],\n        Option(\"--crf\", \"-c\", min=0, max=51)] = \\\n        Field(25, ge=0, le=51)\n    \"\"\"Constant Rate Factor (perceptual quality). 0 is lossless, 51 is the worst quality\"\"\"\n\n    bitrate: Annotated[Optional[int],\n        Option(\"--bitrate\", \"-b\", min=0)] = \\\n        Field(None, ge=1)\n    \"\"\"Bitrate in kilobits per second, the higher the better quality and file size\"\"\"\n\n    class Preset(str, BrokenEnum):\n        None_     = None\n        UltraFast = \"ultrafast\"\n        SuperFast = \"superfast\"\n        VeryFast  = \"veryfast\"\n        Faster    = \"faster\"\n        Fast      = \"fast\"\n        Medium    = \"medium\"\n        Slow      = \"slow\"\n        Slower    = \"slower\"\n        VerySlow  = \"veryslow\"\n\n    preset: Annotated[Optional[Preset],\n        Option(\"--preset\", \"-p\")] = \\\n        Field(Preset.Slow)\n    \"\"\"How much time to spend on encoding. Slower options gives better compression\"\"\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield every(\"-c:v\", \"libx265\")\n        yield every(\"-preset\", denum(self.preset))\n        yield every(\"-crf\", self.crf)\n        yield every(\"-b:v\", self.bitrate)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"h265\"], BrokenTyper.exclude()] = (\n    \"h265\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265.crf","title":"crf","text":"<pre><code>crf: Annotated[\n    Optional[int], Option(\"--crf\", \"-c\", min=0, max=51)\n] = Field(25, ge=0, le=51)\n</code></pre> <p>Constant Rate Factor (perceptual quality). 0 is lossless, 51 is the worst quality</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265.bitrate","title":"bitrate","text":"<pre><code>bitrate: Annotated[\n    Optional[int], Option(\"--bitrate\", \"-b\", min=0)\n] = Field(None, ge=1)\n</code></pre> <p>Bitrate in kilobits per second, the higher the better quality and file size</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265.Preset","title":"Preset","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Preset(str, BrokenEnum):\n    None_     = None\n    UltraFast = \"ultrafast\"\n    SuperFast = \"superfast\"\n    VeryFast  = \"veryfast\"\n    Faster    = \"faster\"\n    Fast      = \"fast\"\n    Medium    = \"medium\"\n    Slow      = \"slow\"\n    Slower    = \"slower\"\n    VerySlow  = \"veryslow\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265.Preset.None_","title":"None_","text":"<pre><code>None_ = None\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265.Preset.UltraFast","title":"UltraFast","text":"<pre><code>UltraFast = 'ultrafast'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265.Preset.SuperFast","title":"SuperFast","text":"<pre><code>SuperFast = 'superfast'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265.Preset.VeryFast","title":"VeryFast","text":"<pre><code>VeryFast = 'veryfast'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265.Preset.Faster","title":"Faster","text":"<pre><code>Faster = 'faster'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265.Preset.Fast","title":"Fast","text":"<pre><code>Fast = 'fast'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265.Preset.Medium","title":"Medium","text":"<pre><code>Medium = 'medium'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265.Preset.Slow","title":"Slow","text":"<pre><code>Slow = 'slow'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265.Preset.Slower","title":"Slower","text":"<pre><code>Slower = 'slower'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265.Preset.VerySlow","title":"VerySlow","text":"<pre><code>VerySlow = 'veryslow'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265.preset","title":"preset","text":"<pre><code>preset: Annotated[\n    Optional[Preset], Option(\"--preset\", \"-p\")\n] = Field(Preset.Slow)\n</code></pre> <p>How much time to spend on encoding. Slower options gives better compression</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield every(\"-c:v\", \"libx265\")\n    yield every(\"-preset\", denum(self.preset))\n    yield every(\"-crf\", self.crf)\n    yield every(\"-b:v\", self.bitrate)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC","title":"FFmpegVideoCodecH265_NVENC","text":"<p>               Bases: <code>FFmpegVideoCodecH265</code></p> <p>Use bold greenNVIDIA/link blueNVENC H.265/link</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecH265_NVENC(FFmpegVideoCodecH265):\n    \"\"\"Use [bold green][link=https://en.wikipedia.org/wiki/Nvidia_NVENC]NVIDIA[/link][/] [blue][link=https://trac.ffmpeg.org/wiki/HWAccelIntro]NVENC H.265[/link][/]\"\"\"\n    type: Annotated[Literal[\"h265-nvenc\"], BrokenTyper.exclude()] = \"h265-nvenc\"\n\n    class Preset(str, BrokenEnum):\n        HighQuality2Passes        = \"slow\"\n        HighQuality1Pass          = \"medium\"\n        HighPerformance1Pass      = \"fast\"\n        HighPerformance           = \"hp\"\n        HighQuality               = \"hq\"\n        Balanced                  = \"bd\"\n        LowLatency                = \"ll\"\n        LowLatencyHighQuality     = \"llhq\"\n        LowLatencyHighPerformance = \"llhp\"\n        Lossless                  = \"lossless\"\n        LosslessHighPerformance   = \"losslesshp\"\n        Fastest                   = \"p1\"\n        Faster                    = \"p2\"\n        Fast                      = \"p3\"\n        Medium                    = \"p4\"\n        Slow                      = \"p5\"\n        Slower                    = \"p6\"\n        Slowest                   = \"p7\"\n\n    preset: Annotated[Preset,\n        Option(\"--preset\", \"-p\")] = \\\n        Field(Preset.Medium)\n    \"\"\"How much time to spend on encoding. Slower options gives better compression\"\"\"\n\n    class Tune(str, BrokenEnum):\n        None_           = None\n        HighQuality     = \"hq\"\n        LowLatency      = \"ll\"\n        UltraLowLatency = \"ull\"\n        Lossless        = \"lossless\"\n\n    tune: Annotated[Optional[Tune],\n        Option(\"--tune\", \"-t\")] = \\\n        Field(Tune.HighQuality)\n\n    class Profile(str, BrokenEnum):\n        None_  = None\n        Main   = \"main\"\n        Main10 = \"main10\"\n        ReXT   = \"rext\"\n\n    profile: Annotated[Optional[Profile],\n        Option(\"--profile\", \"-p\")] = \\\n        Field(Profile.Main)\n\n    class Tier(str, BrokenEnum):\n        None_ = None\n        Main  = \"main\"\n        High  = \"high\"\n\n    tier: Annotated[Optional[Tier],\n        Option(\"--tier\", \"-t\")] = \\\n        Field(Tier.High)\n\n    class RateControl(str, BrokenEnum):\n        None_           = None\n        ConstantQuality = \"constqp\"\n        VariableBitrate = \"vbr\"\n        ConstantBitrate = \"cbr\"\n\n    rate_control: Annotated[Optional[RateControl],\n        Option(\"--rc\", \"-r\", hidden=True)] = \\\n        Field(RateControl.VariableBitrate)\n\n    rc_lookahead: Annotated[Optional[int],\n        Option(\"--rc-lookahead\", \"-l\", hidden=True)] = \\\n        Field(10, ge=1)\n    \"\"\"Number of frames to look ahead for the rate control\"\"\"\n\n    cbr: Annotated[bool,\n        Option(\"--cbr\", \"-c\", \" /--vbr\", \" /-v\", hidden=True)] = \\\n        Field(False)\n    \"\"\"Use Constant Bitrate mode\"\"\"\n\n    gpu: Annotated[Optional[int],\n        Option(\"--gpu\", \"-g\", min=-1)] = \\\n        Field(-1, ge=-1)\n    \"\"\"Use the Nth NVENC capable GPU for encoding, -1 to pick the first device available\"\"\"\n\n    cq: Annotated[int,\n        Option(\"--cq\", \"-q\", min=0)] = \\\n        Field(25, ge=0)\n    \"\"\"(VBR) Similar to CRF, 0 is automatic, 1 is 'lossless', 51 is the worst quality\"\"\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield every(\"-c:v\", \"hevc_nvenc\")\n        yield every(\"-preset\", denum(self.preset))\n        yield every(\"-tune\", denum(self.tune))\n        yield every(\"-profile:v\", denum(self.profile))\n        yield every(\"-tier\", denum(self.tier))\n        yield every(\"-rc\", denum(self.rate_control))\n        yield every(\"-rc-lookahead\", self.rc_lookahead)\n        yield every(\"-cbr\", int(self.cbr))\n        yield every(\"-cq\", self.cq)\n        yield every(\"-gpu\", self.gpu)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"h265-nvenc\"], BrokenTyper.exclude()\n] = \"h265-nvenc\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset","title":"Preset","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Preset(str, BrokenEnum):\n    HighQuality2Passes        = \"slow\"\n    HighQuality1Pass          = \"medium\"\n    HighPerformance1Pass      = \"fast\"\n    HighPerformance           = \"hp\"\n    HighQuality               = \"hq\"\n    Balanced                  = \"bd\"\n    LowLatency                = \"ll\"\n    LowLatencyHighQuality     = \"llhq\"\n    LowLatencyHighPerformance = \"llhp\"\n    Lossless                  = \"lossless\"\n    LosslessHighPerformance   = \"losslesshp\"\n    Fastest                   = \"p1\"\n    Faster                    = \"p2\"\n    Fast                      = \"p3\"\n    Medium                    = \"p4\"\n    Slow                      = \"p5\"\n    Slower                    = \"p6\"\n    Slowest                   = \"p7\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.HighQuality2Passes","title":"HighQuality2Passes","text":"<pre><code>HighQuality2Passes = 'slow'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.HighQuality1Pass","title":"HighQuality1Pass","text":"<pre><code>HighQuality1Pass = 'medium'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.HighPerformance1Pass","title":"HighPerformance1Pass","text":"<pre><code>HighPerformance1Pass = 'fast'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.HighPerformance","title":"HighPerformance","text":"<pre><code>HighPerformance = 'hp'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.HighQuality","title":"HighQuality","text":"<pre><code>HighQuality = 'hq'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.Balanced","title":"Balanced","text":"<pre><code>Balanced = 'bd'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.LowLatency","title":"LowLatency","text":"<pre><code>LowLatency = 'll'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.LowLatencyHighQuality","title":"LowLatencyHighQuality","text":"<pre><code>LowLatencyHighQuality = 'llhq'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.LowLatencyHighPerformance","title":"LowLatencyHighPerformance","text":"<pre><code>LowLatencyHighPerformance = 'llhp'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.Lossless","title":"Lossless","text":"<pre><code>Lossless = 'lossless'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.LosslessHighPerformance","title":"LosslessHighPerformance","text":"<pre><code>LosslessHighPerformance = 'losslesshp'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.Fastest","title":"Fastest","text":"<pre><code>Fastest = 'p1'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.Faster","title":"Faster","text":"<pre><code>Faster = 'p2'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.Fast","title":"Fast","text":"<pre><code>Fast = 'p3'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.Medium","title":"Medium","text":"<pre><code>Medium = 'p4'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.Slow","title":"Slow","text":"<pre><code>Slow = 'p5'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.Slower","title":"Slower","text":"<pre><code>Slower = 'p6'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Preset.Slowest","title":"Slowest","text":"<pre><code>Slowest = 'p7'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.preset","title":"preset","text":"<pre><code>preset: Annotated[Preset, Option(\"--preset\", \"-p\")] = Field(\n    Preset.Medium\n)\n</code></pre> <p>How much time to spend on encoding. Slower options gives better compression</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Tune","title":"Tune","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Tune(str, BrokenEnum):\n    None_           = None\n    HighQuality     = \"hq\"\n    LowLatency      = \"ll\"\n    UltraLowLatency = \"ull\"\n    Lossless        = \"lossless\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Tune.None_","title":"None_","text":"<pre><code>None_ = None\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Tune.HighQuality","title":"HighQuality","text":"<pre><code>HighQuality = 'hq'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Tune.LowLatency","title":"LowLatency","text":"<pre><code>LowLatency = 'll'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Tune.UltraLowLatency","title":"UltraLowLatency","text":"<pre><code>UltraLowLatency = 'ull'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Tune.Lossless","title":"Lossless","text":"<pre><code>Lossless = 'lossless'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.tune","title":"tune","text":"<pre><code>tune: Annotated[Optional[Tune], Option(\"--tune\", \"-t\")] = (\n    Field(Tune.HighQuality)\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Profile","title":"Profile","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Profile(str, BrokenEnum):\n    None_  = None\n    Main   = \"main\"\n    Main10 = \"main10\"\n    ReXT   = \"rext\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Profile.None_","title":"None_","text":"<pre><code>None_ = None\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Profile.Main","title":"Main","text":"<pre><code>Main = 'main'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Profile.Main10","title":"Main10","text":"<pre><code>Main10 = 'main10'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Profile.ReXT","title":"ReXT","text":"<pre><code>ReXT = 'rext'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.profile","title":"profile","text":"<pre><code>profile: Annotated[\n    Optional[Profile], Option(\"--profile\", \"-p\")\n] = Field(Profile.Main)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Tier","title":"Tier","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Tier(str, BrokenEnum):\n    None_ = None\n    Main  = \"main\"\n    High  = \"high\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Tier.None_","title":"None_","text":"<pre><code>None_ = None\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Tier.Main","title":"Main","text":"<pre><code>Main = 'main'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.Tier.High","title":"High","text":"<pre><code>High = 'high'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.tier","title":"tier","text":"<pre><code>tier: Annotated[Optional[Tier], Option(\"--tier\", \"-t\")] = (\n    Field(Tier.High)\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.RateControl","title":"RateControl","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class RateControl(str, BrokenEnum):\n    None_           = None\n    ConstantQuality = \"constqp\"\n    VariableBitrate = \"vbr\"\n    ConstantBitrate = \"cbr\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.RateControl.None_","title":"None_","text":"<pre><code>None_ = None\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.RateControl.ConstantQuality","title":"ConstantQuality","text":"<pre><code>ConstantQuality = 'constqp'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.RateControl.VariableBitrate","title":"VariableBitrate","text":"<pre><code>VariableBitrate = 'vbr'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.RateControl.ConstantBitrate","title":"ConstantBitrate","text":"<pre><code>ConstantBitrate = 'cbr'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.rate_control","title":"rate_control","text":"<pre><code>rate_control: Annotated[\n    Optional[RateControl], Option(\"--rc\", \"-r\", hidden=True)\n] = Field(RateControl.VariableBitrate)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.rc_lookahead","title":"rc_lookahead","text":"<pre><code>rc_lookahead: Annotated[\n    Optional[int],\n    Option(\"--rc-lookahead\", \"-l\", hidden=True),\n] = Field(10, ge=1)\n</code></pre> <p>Number of frames to look ahead for the rate control</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.cbr","title":"cbr","text":"<pre><code>cbr: Annotated[\n    bool,\n    Option(\"--cbr\", \"-c\", \" /--vbr\", \" /-v\", hidden=True),\n] = Field(False)\n</code></pre> <p>Use Constant Bitrate mode</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.gpu","title":"gpu","text":"<pre><code>gpu: Annotated[\n    Optional[int], Option(\"--gpu\", \"-g\", min=-1)\n] = Field(-1, ge=-1)\n</code></pre> <p>Use the Nth NVENC capable GPU for encoding, -1 to pick the first device available</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.cq","title":"cq","text":"<pre><code>cq: Annotated[int, Option(\"--cq\", \"-q\", min=0)] = Field(\n    25, ge=0\n)\n</code></pre> <p>(VBR) Similar to CRF, 0 is automatic, 1 is 'lossless', 51 is the worst quality</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_NVENC.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield every(\"-c:v\", \"hevc_nvenc\")\n    yield every(\"-preset\", denum(self.preset))\n    yield every(\"-tune\", denum(self.tune))\n    yield every(\"-profile:v\", denum(self.profile))\n    yield every(\"-tier\", denum(self.tier))\n    yield every(\"-rc\", denum(self.rate_control))\n    yield every(\"-rc-lookahead\", self.rc_lookahead)\n    yield every(\"-cbr\", int(self.cbr))\n    yield every(\"-cq\", self.cq)\n    yield every(\"-gpu\", self.gpu)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_QSV","title":"FFmpegVideoCodecH265_QSV","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecH265_QSV(FFmpegModuleBase):\n    ... # Todo\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecH265_AMF","title":"FFmpegVideoCodecH265_AMF","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecH265_AMF(FFmpegModuleBase):\n    ... # Todo\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecVP9","title":"FFmpegVideoCodecVP9","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> <p>Use bluelibvpx-vp9/link for VP9 encoding</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecVP9(FFmpegModuleBase):\n    \"\"\"Use [blue][link=https://trac.ffmpeg.org/wiki/Encode/VP9]libvpx-vp9[/link][/] for VP9 encoding\"\"\"\n    type: Annotated[Literal[\"vp9\"], BrokenTyper.exclude()] = \"vp9\"\n\n    crf: Annotated[int,\n        Option(\"--crf\", \"-c\", min=1, max=63)] = \\\n        Field(30, ge=1, le=64)\n    \"\"\"Constant Rate Factor (0-63). Lower values mean better quality, recommended (15-31)\n    [blue link=https://trac.ffmpeg.org/wiki/Encode/VP9#constantq]\u2192 Documentation[/]\"\"\"\n\n    speed: Annotated[int,\n        Option(\"--speed\", \"-s\", min=1, max=6)] = \\\n        Field(4, ge=1, le=6)\n    \"\"\"Speed level (0-6). Higher values yields faster encoding but innacuracies in rate control\n    [blue link=https://trac.ffmpeg.org/wiki/Encode/VP9#CPUUtilizationSpeed]\u2192 Documentation[/]\"\"\"\n\n    class Deadline(str, BrokenEnum):\n        Good     = \"good\"\n        Best     = \"best\"\n        Realtime = \"realtime\"\n\n    deadline: Annotated[Deadline,\n        Option(\"--deadline\", \"-d\")] = \\\n        Field(Deadline.Good)\n    \"\"\"Tweak the encoding time philosophy for better quality or faster encoding\n    [blue link=https://trac.ffmpeg.org/wiki/Encode/VP9#DeadlineQuality]\u2192 Documentation[/]\"\"\"\n\n    row_multithreading: Annotated[bool,\n        Option(\"--row-multithreading\", \"-rmt\", \" /--no-row-multithreading\", \" /-rmt\")] = \\\n        Field(True)\n    \"\"\"Faster encodes by splitting rows into multiple threads\n    [blue link=https://trac.ffmpeg.org/wiki/Encode/VP9#rowmt]\u2192 Documentation[/]\"\"\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield (\"-c:v\", \"libvpx-vp9\")\n        yield (\"-crf\", self.crf)\n        yield (\"-b:v\", 0)\n        yield (\"-deadline\", denum(self.deadline))\n        yield (\"-cpu-used\", self.speed)\n        yield (\"-row-mt\", \"1\") * self.row_multithreading\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecVP9.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"vp9\"], BrokenTyper.exclude()] = (\n    \"vp9\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecVP9.crf","title":"crf","text":"<pre><code>crf: Annotated[\n    int, Option(\"--crf\", \"-c\", min=1, max=63)\n] = Field(30, ge=1, le=64)\n</code></pre> <p>Constant Rate Factor (0-63). Lower values mean better quality, recommended (15-31) [blue link=https://trac.ffmpeg.org/wiki/Encode/VP9#constantq]\u2192 Documentation[/]</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecVP9.speed","title":"speed","text":"<pre><code>speed: Annotated[\n    int, Option(\"--speed\", \"-s\", min=1, max=6)\n] = Field(4, ge=1, le=6)\n</code></pre> <p>Speed level (0-6). Higher values yields faster encoding but innacuracies in rate control [blue link=https://trac.ffmpeg.org/wiki/Encode/VP9#CPUUtilizationSpeed]\u2192 Documentation[/]</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecVP9.Deadline","title":"Deadline","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Deadline(str, BrokenEnum):\n    Good     = \"good\"\n    Best     = \"best\"\n    Realtime = \"realtime\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecVP9.Deadline.Good","title":"Good","text":"<pre><code>Good = 'good'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecVP9.Deadline.Best","title":"Best","text":"<pre><code>Best = 'best'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecVP9.Deadline.Realtime","title":"Realtime","text":"<pre><code>Realtime = 'realtime'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecVP9.deadline","title":"deadline","text":"<pre><code>deadline: Annotated[\n    Deadline, Option(\"--deadline\", \"-d\")\n] = Field(Deadline.Good)\n</code></pre> <p>Tweak the encoding time philosophy for better quality or faster encoding [blue link=https://trac.ffmpeg.org/wiki/Encode/VP9#DeadlineQuality]\u2192 Documentation[/]</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecVP9.row_multithreading","title":"row_multithreading","text":"<pre><code>row_multithreading: Annotated[\n    bool,\n    Option(\n        \"--row-multithreading\",\n        \"-rmt\",\n        \" /--no-row-multithreading\",\n        \" /-rmt\",\n    ),\n] = Field(True)\n</code></pre> <p>Faster encodes by splitting rows into multiple threads [blue link=https://trac.ffmpeg.org/wiki/Encode/VP9#rowmt]\u2192 Documentation[/]</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecVP9.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield (\"-c:v\", \"libvpx-vp9\")\n    yield (\"-crf\", self.crf)\n    yield (\"-b:v\", 0)\n    yield (\"-deadline\", denum(self.deadline))\n    yield (\"-cpu-used\", self.speed)\n    yield (\"-row-mt\", \"1\") * self.row_multithreading\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_SVT","title":"FFmpegVideoCodecAV1_SVT","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> <p>Use bold orange3AOM's/link blueSVT-AV1/link</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecAV1_SVT(FFmpegModuleBase):\n    \"\"\"Use [bold orange3][link=https://gitlab.com/AOMediaCodec/SVT-AV1]AOM's[/link][/] [blue][link=https://www.ffmpeg.org/ffmpeg-all.html#libsvtav1]SVT-AV1[/link][/]\"\"\"\n    type: Annotated[Literal[\"libsvtav1\"], BrokenTyper.exclude()] = \"libsvtav1\"\n\n    crf: Annotated[int,\n        Option(\"--crf\", \"-c\", min=1, max=63)] = \\\n        Field(25, ge=1, le=63)\n    \"\"\"Constant Rate Factor (0-63). Lower values mean better quality\n    [blue link=https://trac.ffmpeg.org/wiki/Encode/AV1#CRF]\u2192 Documentation[/]\"\"\"\n\n    preset: Annotated[int,\n        Option(\"--preset\", \"-p\", min=1, max=8)] = \\\n        Field(3, ge=1, le=8)\n    \"\"\"The speed of the encoding, 0 is slowest, 8 is fastest. Decreases compression efficiency.\n    [blue link=https://trac.ffmpeg.org/wiki/Encode/AV1#Presetsandtunes]\u2192 Documentation[/]\"\"\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield (\"-c:v\", \"libsvtav1\")\n        yield (\"-crf\", self.crf)\n        yield (\"-preset\", self.preset)\n        yield (\"-svtav1-params\", \"tune=0\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_SVT.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"libsvtav1\"], BrokenTyper.exclude()\n] = \"libsvtav1\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_SVT.crf","title":"crf","text":"<pre><code>crf: Annotated[\n    int, Option(\"--crf\", \"-c\", min=1, max=63)\n] = Field(25, ge=1, le=63)\n</code></pre> <p>Constant Rate Factor (0-63). Lower values mean better quality [blue link=https://trac.ffmpeg.org/wiki/Encode/AV1#CRF]\u2192 Documentation[/]</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_SVT.preset","title":"preset","text":"<pre><code>preset: Annotated[\n    int, Option(\"--preset\", \"-p\", min=1, max=8)\n] = Field(3, ge=1, le=8)\n</code></pre> <p>The speed of the encoding, 0 is slowest, 8 is fastest. Decreases compression efficiency. [blue link=https://trac.ffmpeg.org/wiki/Encode/AV1#Presetsandtunes]\u2192 Documentation[/]</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_SVT.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield (\"-c:v\", \"libsvtav1\")\n    yield (\"-crf\", self.crf)\n    yield (\"-preset\", self.preset)\n    yield (\"-svtav1-params\", \"tune=0\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_RAV1E","title":"FFmpegVideoCodecAV1_RAV1E","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> <p>Use bold orange3Xiph's/link blueRAV1E AV1/link</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecAV1_RAV1E(FFmpegModuleBase):\n    \"\"\"Use [bold orange3][link=https://github.com/xiph/rav1e]Xiph's[/link][/] [blue][link=https://www.ffmpeg.org/ffmpeg-all.html#librav1e]RAV1E AV1[/link][/]\"\"\"\n    type: Annotated[Literal[\"librav1e\"], BrokenTyper.exclude()] = \"librav1e\"\n\n    qp: Annotated[int,\n        Option(\"--qp\", \"-q\", min=-1)] = \\\n        Field(80, ge=-1)\n    \"\"\"Constant quantizer mode (from -1 to 255). Smaller values are higher quality\"\"\"\n\n    speed: Annotated[int,\n        Option(\"--speed\", \"-s\", min=1, max=10)] = \\\n        Field(4, ge=1, le=10)\n    \"\"\"What speed preset to use (from -1 to 10) (default -1)\"\"\"\n\n    tile_rows: Annotated[int,\n        Option(\"--tile-rows\", \"-tr\", min=-1)] = \\\n        Field(4, ge=-1)\n    \"\"\"Number of tile rows to encode with (from -1 to I64_MAX) (default 0)\"\"\"\n\n    tile_columns: Annotated[int,\n        Option(\"--tile-columns\", \"-tc\", min=-1)] = \\\n        Field(4, ge=-1)\n    \"\"\"Number of tile columns to encode with (from -1 to I64_MAX) (default 0)\"\"\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield (\"-c:v\", \"librav1e\")\n        yield (\"-qp\", self.qp)\n        yield (\"-speed\", self.speed)\n        yield (\"-tile-rows\", self.tile_rows)\n        yield (\"-tile-columns\", self.tile_columns)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_RAV1E.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"librav1e\"], BrokenTyper.exclude()\n] = \"librav1e\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_RAV1E.qp","title":"qp","text":"<pre><code>qp: Annotated[int, Option(\"--qp\", \"-q\", min=-1)] = Field(\n    80, ge=-1\n)\n</code></pre> <p>Constant quantizer mode (from -1 to 255). Smaller values are higher quality</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_RAV1E.speed","title":"speed","text":"<pre><code>speed: Annotated[\n    int, Option(\"--speed\", \"-s\", min=1, max=10)\n] = Field(4, ge=1, le=10)\n</code></pre> <p>What speed preset to use (from -1 to 10) (default -1)</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_RAV1E.tile_rows","title":"tile_rows","text":"<pre><code>tile_rows: Annotated[\n    int, Option(\"--tile-rows\", \"-tr\", min=-1)\n] = Field(4, ge=-1)\n</code></pre> <p>Number of tile rows to encode with (from -1 to I64_MAX) (default 0)</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_RAV1E.tile_columns","title":"tile_columns","text":"<pre><code>tile_columns: Annotated[\n    int, Option(\"--tile-columns\", \"-tc\", min=-1)\n] = Field(4, ge=-1)\n</code></pre> <p>Number of tile columns to encode with (from -1 to I64_MAX) (default 0)</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_RAV1E.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield (\"-c:v\", \"librav1e\")\n    yield (\"-qp\", self.qp)\n    yield (\"-speed\", self.speed)\n    yield (\"-tile-rows\", self.tile_rows)\n    yield (\"-tile-columns\", self.tile_columns)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC","title":"FFmpegVideoCodecAV1_NVENC","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> <p>Use bold greenNVIDIA/link blueNVENC AV1/link dim light_coral[/]</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecAV1_NVENC(FFmpegModuleBase):\n    \"\"\"Use [bold green][link=https://en.wikipedia.org/wiki/Nvidia_NVENC]NVIDIA[/link][/] [blue][link=https://trac.ffmpeg.org/wiki/Encode/AV1]NVENC AV1[/link][/] [dim light_coral](RTX 4000+ GPU)[/]\"\"\"\n    type: Annotated[Literal[\"av1-nvenc\"], BrokenTyper.exclude()] = \"av1-nvenc\"\n\n    class Preset(str, BrokenEnum):\n        Default              = \"default\"\n        HighQuality2Passes   = \"slow\"\n        HighQuality1Pass     = \"medium\"\n        HighPerformance1Pass = \"fast\"\n        Fastest              = \"p1\"\n        Faster               = \"p2\"\n        Fast                 = \"p3\"\n        Medium               = \"p4\"\n        Slow                 = \"p5\"\n        Slower               = \"p6\"\n        Slowest              = \"p7\"\n\n    preset: Annotated[Preset,\n        Option(\"--preset\", \"-p\")] = \\\n        Field(Preset.Slow)\n    \"\"\"How much time to spend on encoding. Slower options gives better compression\"\"\"\n\n    class Tune(str, BrokenEnum):\n        HighQuality      = \"hq\"\n        LowLatency       = \"ll\"\n        UltraLowLatency  = \"ull\"\n        Lossless         = \"lossless\"\n\n    tune: Annotated[Optional[Tune],\n        Option(\"--tune\", \"-t\")] = \\\n        Field(Tune.HighQuality)\n    \"\"\"Tune the encoder for a specific tier of performance\"\"\"\n\n    class RateControl(str, BrokenEnum):\n        None_           = None\n        ConstantQuality = \"constqp\"\n        VariableBitrate = \"vbr\"\n        ConstantBitrate = \"cbr\"\n\n    rate_control: Annotated[Optional[RateControl],\n        Option(\"--rc\", \"-r\", hidden=True)] = \\\n        Field(RateControl.VariableBitrate)\n\n    class Multipass(str, BrokenEnum):\n        None_    = None\n        Disabled = \"disabled\"\n        Quarter  = \"qres\"\n        Full     = \"fullres\"\n\n    multipass: Annotated[Optional[Multipass],\n        Option(\"--multipass\", \"-m\", hidden=True)] = \\\n        Field(Multipass.Full)\n\n    tile_rows: Annotated[Optional[int],\n        Option(\"--tile-rows\", \"-tr\", min=1, max=64)] = \\\n        Field(2, ge=1, le=64)\n    \"\"\"Number of encoding tile rows, similar to -row-mt\"\"\"\n\n    tile_columns: Annotated[Optional[int],\n        Option(\"--tile-columns\", \"-tc\", min=1, max=64)] = \\\n        Field(2, ge=1, le=64)\n    \"\"\"Number of encoding tile columns, similar to -col-mt\"\"\"\n\n    rc_lookahead: Annotated[Optional[int],\n        Option(\"--rc-lookahead\", \"-l\", hidden=True)] = \\\n        Field(10, ge=1)\n    \"\"\"Number of frames to look ahead for the rate control\"\"\"\n\n    gpu: Annotated[Optional[int],\n        Option(\"--gpu\", \"-g\", min=-1)] = \\\n        Field(-1, ge=-1)\n    \"\"\"Use the Nth NVENC capable GPU for encoding, -1 to pick the first device available\"\"\"\n\n    cq: int = Field(25, ge=1)\n    \"\"\"Set the Constant Quality factor in a Variable Bitrate mode (similar to -crf)\"\"\"\n\n    cq: Annotated[Optional[int],\n        Option(\"--cq\", \"-q\", min=0)] = \\\n        Field(25, ge=0)\n    \"\"\"Set the Constant Quality factor in a Variable Bitrate mode (similar to -crf)\"\"\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield every(\"-c:v\", \"av1_nvenc\")\n        yield every(\"-preset\", denum(self.preset))\n        yield every(\"-tune\", denum(self.tune))\n        yield every(\"-rc\", denum(self.rate_control))\n        yield every(\"-rc-lookahead\", self.rc_lookahead)\n        yield every(\"-cq\", self.cq)\n        yield every(\"-gpu\", self.gpu)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"av1-nvenc\"], BrokenTyper.exclude()\n] = \"av1-nvenc\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Preset","title":"Preset","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Preset(str, BrokenEnum):\n    Default              = \"default\"\n    HighQuality2Passes   = \"slow\"\n    HighQuality1Pass     = \"medium\"\n    HighPerformance1Pass = \"fast\"\n    Fastest              = \"p1\"\n    Faster               = \"p2\"\n    Fast                 = \"p3\"\n    Medium               = \"p4\"\n    Slow                 = \"p5\"\n    Slower               = \"p6\"\n    Slowest              = \"p7\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Preset.Default","title":"Default","text":"<pre><code>Default = 'default'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Preset.HighQuality2Passes","title":"HighQuality2Passes","text":"<pre><code>HighQuality2Passes = 'slow'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Preset.HighQuality1Pass","title":"HighQuality1Pass","text":"<pre><code>HighQuality1Pass = 'medium'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Preset.HighPerformance1Pass","title":"HighPerformance1Pass","text":"<pre><code>HighPerformance1Pass = 'fast'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Preset.Fastest","title":"Fastest","text":"<pre><code>Fastest = 'p1'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Preset.Faster","title":"Faster","text":"<pre><code>Faster = 'p2'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Preset.Fast","title":"Fast","text":"<pre><code>Fast = 'p3'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Preset.Medium","title":"Medium","text":"<pre><code>Medium = 'p4'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Preset.Slow","title":"Slow","text":"<pre><code>Slow = 'p5'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Preset.Slower","title":"Slower","text":"<pre><code>Slower = 'p6'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Preset.Slowest","title":"Slowest","text":"<pre><code>Slowest = 'p7'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.preset","title":"preset","text":"<pre><code>preset: Annotated[Preset, Option(\"--preset\", \"-p\")] = Field(\n    Preset.Slow\n)\n</code></pre> <p>How much time to spend on encoding. Slower options gives better compression</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Tune","title":"Tune","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Tune(str, BrokenEnum):\n    HighQuality      = \"hq\"\n    LowLatency       = \"ll\"\n    UltraLowLatency  = \"ull\"\n    Lossless         = \"lossless\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Tune.HighQuality","title":"HighQuality","text":"<pre><code>HighQuality = 'hq'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Tune.LowLatency","title":"LowLatency","text":"<pre><code>LowLatency = 'll'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Tune.UltraLowLatency","title":"UltraLowLatency","text":"<pre><code>UltraLowLatency = 'ull'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Tune.Lossless","title":"Lossless","text":"<pre><code>Lossless = 'lossless'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.tune","title":"tune","text":"<pre><code>tune: Annotated[Optional[Tune], Option(\"--tune\", \"-t\")] = (\n    Field(Tune.HighQuality)\n)\n</code></pre> <p>Tune the encoder for a specific tier of performance</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.RateControl","title":"RateControl","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class RateControl(str, BrokenEnum):\n    None_           = None\n    ConstantQuality = \"constqp\"\n    VariableBitrate = \"vbr\"\n    ConstantBitrate = \"cbr\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.RateControl.None_","title":"None_","text":"<pre><code>None_ = None\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.RateControl.ConstantQuality","title":"ConstantQuality","text":"<pre><code>ConstantQuality = 'constqp'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.RateControl.VariableBitrate","title":"VariableBitrate","text":"<pre><code>VariableBitrate = 'vbr'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.RateControl.ConstantBitrate","title":"ConstantBitrate","text":"<pre><code>ConstantBitrate = 'cbr'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.rate_control","title":"rate_control","text":"<pre><code>rate_control: Annotated[\n    Optional[RateControl], Option(\"--rc\", \"-r\", hidden=True)\n] = Field(RateControl.VariableBitrate)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Multipass","title":"Multipass","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Multipass(str, BrokenEnum):\n    None_    = None\n    Disabled = \"disabled\"\n    Quarter  = \"qres\"\n    Full     = \"fullres\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Multipass.None_","title":"None_","text":"<pre><code>None_ = None\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Multipass.Disabled","title":"Disabled","text":"<pre><code>Disabled = 'disabled'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Multipass.Quarter","title":"Quarter","text":"<pre><code>Quarter = 'qres'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.Multipass.Full","title":"Full","text":"<pre><code>Full = 'fullres'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.multipass","title":"multipass","text":"<pre><code>multipass: Annotated[\n    Optional[Multipass],\n    Option(\"--multipass\", \"-m\", hidden=True),\n] = Field(Multipass.Full)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.tile_rows","title":"tile_rows","text":"<pre><code>tile_rows: Annotated[\n    Optional[int],\n    Option(\"--tile-rows\", \"-tr\", min=1, max=64),\n] = Field(2, ge=1, le=64)\n</code></pre> <p>Number of encoding tile rows, similar to -row-mt</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.tile_columns","title":"tile_columns","text":"<pre><code>tile_columns: Annotated[\n    Optional[int],\n    Option(\"--tile-columns\", \"-tc\", min=1, max=64),\n] = Field(2, ge=1, le=64)\n</code></pre> <p>Number of encoding tile columns, similar to -col-mt</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.rc_lookahead","title":"rc_lookahead","text":"<pre><code>rc_lookahead: Annotated[\n    Optional[int],\n    Option(\"--rc-lookahead\", \"-l\", hidden=True),\n] = Field(10, ge=1)\n</code></pre> <p>Number of frames to look ahead for the rate control</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.gpu","title":"gpu","text":"<pre><code>gpu: Annotated[\n    Optional[int], Option(\"--gpu\", \"-g\", min=-1)\n] = Field(-1, ge=-1)\n</code></pre> <p>Use the Nth NVENC capable GPU for encoding, -1 to pick the first device available</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.cq","title":"cq","text":"<pre><code>cq: Annotated[\n    Optional[int], Option(\"--cq\", \"-q\", min=0)\n] = Field(25, ge=0)\n</code></pre> <p>Set the Constant Quality factor in a Variable Bitrate mode (similar to -crf)</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_NVENC.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield every(\"-c:v\", \"av1_nvenc\")\n    yield every(\"-preset\", denum(self.preset))\n    yield every(\"-tune\", denum(self.tune))\n    yield every(\"-rc\", denum(self.rate_control))\n    yield every(\"-rc-lookahead\", self.rc_lookahead)\n    yield every(\"-cq\", self.cq)\n    yield every(\"-gpu\", self.gpu)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_QSV","title":"FFmpegVideoCodecAV1_QSV","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecAV1_QSV(FFmpegModuleBase):\n    ... # Todo\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecAV1_AMF","title":"FFmpegVideoCodecAV1_AMF","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecAV1_AMF(FFmpegModuleBase):\n    ... # Todo\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecRawvideo","title":"FFmpegVideoCodecRawvideo","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecRawvideo(FFmpegModuleBase):\n    type: Annotated[Literal[\"rawvideo\"], BrokenTyper.exclude()] = \"rawvideo\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield (\"-c:v\", \"rawvideo\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecRawvideo.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"rawvideo\"], BrokenTyper.exclude()\n] = \"rawvideo\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecRawvideo.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield (\"-c:v\", \"rawvideo\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecNoVideo","title":"FFmpegVideoCodecNoVideo","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecNoVideo(FFmpegModuleBase):\n    type: Annotated[Literal[\"null\"], BrokenTyper.exclude()] = \"null\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield (\"-c:v\", \"null\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecNoVideo.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"null\"], BrokenTyper.exclude()] = (\n    \"null\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecNoVideo.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield (\"-c:v\", \"null\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecCopy","title":"FFmpegVideoCodecCopy","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegVideoCodecCopy(FFmpegModuleBase):\n    type: Annotated[Literal[\"copy\"], BrokenTyper.exclude()] = \"copy\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield (\"-c:v\", \"copy\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecCopy.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"copy\"], BrokenTyper.exclude()] = (\n    \"copy\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecCopy.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield (\"-c:v\", \"copy\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegVideoCodecType","title":"FFmpegVideoCodecType","text":"<pre><code>FFmpegVideoCodecType: TypeAlias = Union[\n    FFmpegVideoCodecH264,\n    FFmpegVideoCodecH264_NVENC,\n    FFmpegVideoCodecH265,\n    FFmpegVideoCodecH265_NVENC,\n    FFmpegVideoCodecVP9,\n    FFmpegVideoCodecAV1_SVT,\n    FFmpegVideoCodecAV1_NVENC,\n    FFmpegVideoCodecAV1_RAV1E,\n    FFmpegVideoCodecRawvideo,\n    FFmpegVideoCodecNoVideo,\n    FFmpegVideoCodecCopy,\n]\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecAAC","title":"FFmpegAudioCodecAAC","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> <p>Use the blueAdvanced Audio Codec (AAC)/link</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegAudioCodecAAC(FFmpegModuleBase):\n    \"\"\"Use the [blue][link=https://trac.ffmpeg.org/wiki/Encode/AAC]Advanced Audio Codec (AAC)[/link][/]\"\"\"\n    type: Annotated[Literal[\"aac\"], BrokenTyper.exclude()] = \"aac\"\n\n    bitrate: Annotated[int,\n        Option(\"--bitrate\", \"-b\", min=1)] = \\\n        Field(192, ge=1)\n    \"\"\"Bitrate in kilobits per second. This value is shared between all audio channels\"\"\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield every(\"-c:a\", \"aac\")\n        yield every(\"-b:a\", f\"{self.bitrate}k\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecAAC.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"aac\"], BrokenTyper.exclude()] = (\n    \"aac\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecAAC.bitrate","title":"bitrate","text":"<pre><code>bitrate: Annotated[\n    int, Option(\"--bitrate\", \"-b\", min=1)\n] = Field(192, ge=1)\n</code></pre> <p>Bitrate in kilobits per second. This value is shared between all audio channels</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecAAC.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield every(\"-c:a\", \"aac\")\n    yield every(\"-b:a\", f\"{self.bitrate}k\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecMP3","title":"FFmpegAudioCodecMP3","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> <p>Use the blueMPEG Audio Layer 3 (MP3)/link</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegAudioCodecMP3(FFmpegModuleBase):\n    \"\"\"Use the [blue][link=https://trac.ffmpeg.org/wiki/Encode/MP3]MPEG Audio Layer 3 (MP3)[/link][/]\"\"\"\n    type: Annotated[Literal[\"mp3\"], BrokenTyper.exclude()] = \"mp3\"\n\n    bitrate: Annotated[int,\n        Option(\"--bitrate\", \"-b\", min=1)] = \\\n        Field(192, ge=1)\n    \"\"\"Bitrate in kilobits per second. This value is shared between all audio channels\"\"\"\n\n    qscale: Annotated[int,\n        Option(\"--qscale\", \"-q\", min=1)] = \\\n        Field(2, ge=1)\n    \"\"\"Quality scale, 0-9, Variable Bitrate\"\"\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield every(\"-c:a\", \"libmp3lame\")\n        yield every(\"-b:a\", f\"{self.bitrate}k\")\n        yield every(\"-qscale:a\", self.qscale)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecMP3.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"mp3\"], BrokenTyper.exclude()] = (\n    \"mp3\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecMP3.bitrate","title":"bitrate","text":"<pre><code>bitrate: Annotated[\n    int, Option(\"--bitrate\", \"-b\", min=1)\n] = Field(192, ge=1)\n</code></pre> <p>Bitrate in kilobits per second. This value is shared between all audio channels</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecMP3.qscale","title":"qscale","text":"<pre><code>qscale: Annotated[int, Option(\"--qscale\", \"-q\", min=1)] = (\n    Field(2, ge=1)\n)\n</code></pre> <p>Quality scale, 0-9, Variable Bitrate</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecMP3.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield every(\"-c:a\", \"libmp3lame\")\n    yield every(\"-b:a\", f\"{self.bitrate}k\")\n    yield every(\"-qscale:a\", self.qscale)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecOpus","title":"FFmpegAudioCodecOpus","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> <p>Use the blueOpus/link audio codec</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegAudioCodecOpus(FFmpegModuleBase):\n    \"\"\"Use the [blue][link=https://en.wikipedia.org/wiki/Opus_(audio_format)]Opus[/link][/] audio codec\"\"\"\n    type: Annotated[Literal[\"opus\"], BrokenTyper.exclude()] = \"opus\"\n\n    bitrate: Annotated[int,\n        Option(\"--bitrate\", \"-b\", min=1)] = \\\n        Field(192, ge=1)\n    \"\"\"Bitrate in kilobits per second. This value is shared between all audio channels\"\"\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield every(\"-c:a\", \"libopus\")\n        yield every(\"-b:a\", f\"{self.bitrate}k\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecOpus.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"opus\"], BrokenTyper.exclude()] = (\n    \"opus\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecOpus.bitrate","title":"bitrate","text":"<pre><code>bitrate: Annotated[\n    int, Option(\"--bitrate\", \"-b\", min=1)\n] = Field(192, ge=1)\n</code></pre> <p>Bitrate in kilobits per second. This value is shared between all audio channels</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecOpus.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield every(\"-c:a\", \"libopus\")\n    yield every(\"-b:a\", f\"{self.bitrate}k\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecFLAC","title":"FFmpegAudioCodecFLAC","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> <p>Use the blueFree Lossless Audio Codec (FLAC)/link</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegAudioCodecFLAC(FFmpegModuleBase):\n    \"\"\"Use the [blue][link=https://xiph.org/flac/]Free Lossless Audio Codec (FLAC)[/link][/]\"\"\"\n    type: Annotated[Literal[\"flac\"], BrokenTyper.exclude()] = \"flac\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield every(\"-c:a\", \"flac\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecFLAC.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"flac\"], BrokenTyper.exclude()] = (\n    \"flac\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecFLAC.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield every(\"-c:a\", \"flac\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecCopy","title":"FFmpegAudioCodecCopy","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> <p>Copy the inputs' audio streams to the output</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegAudioCodecCopy(FFmpegModuleBase):\n    \"\"\"Copy the inputs' audio streams to the output\"\"\"\n    type: Annotated[Literal[\"copy\"], BrokenTyper.exclude()] = \"copy\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield (\"-c:a\", \"copy\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecCopy.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"copy\"], BrokenTyper.exclude()] = (\n    \"copy\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecCopy.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield (\"-c:a\", \"copy\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecNone","title":"FFmpegAudioCodecNone","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> <p>Remove all audio tracks from the output</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegAudioCodecNone(FFmpegModuleBase):\n    \"\"\"Remove all audio tracks from the output\"\"\"\n    type: Annotated[Literal[\"none\"], BrokenTyper.exclude()] = \"none\"\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield (\"-an\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecNone.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"none\"], BrokenTyper.exclude()] = (\n    \"none\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecNone.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield (\"-an\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecEmpty","title":"FFmpegAudioCodecEmpty","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> <p>Adds a silent stereo audio track</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegAudioCodecEmpty(FFmpegModuleBase):\n    \"\"\"Adds a silent stereo audio track\"\"\"\n    type: Annotated[Literal[\"empty\"], BrokenTyper.exclude()] = \"empty\"\n\n    samplerate: Annotated[float,\n        Option(\"--samplerate\", \"-r\", min=1)] = \\\n        Field(44100, ge=1)\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield (\"-f\", \"lavfi\")\n        yield (\"-t\", ffmpeg.time) * bool(ffmpeg.time)\n        yield (\"-i\", f\"anullsrc=channel_layout=stereo:sample_rate={self.samplerate}\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecEmpty.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"empty\"], BrokenTyper.exclude()] = (\n    \"empty\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecEmpty.samplerate","title":"samplerate","text":"<pre><code>samplerate: Annotated[\n    float, Option(\"--samplerate\", \"-r\", min=1)\n] = Field(44100, ge=1)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecEmpty.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield (\"-f\", \"lavfi\")\n    yield (\"-t\", ffmpeg.time) * bool(ffmpeg.time)\n    yield (\"-i\", f\"anullsrc=channel_layout=stereo:sample_rate={self.samplerate}\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM","title":"FFmpegPCM","text":"<p>               Bases: <code>BrokenEnum</code></p> <p>Raw pcm formats <code>ffmpeg -formats | grep PCM</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegPCM(BrokenEnum):\n    \"\"\"Raw pcm formats `ffmpeg -formats | grep PCM`\"\"\"\n    PCM_FLOAT_32_BITS_BIG_ENDIAN       = \"pcm_f32be\"\n    PCM_FLOAT_32_BITS_LITTLE_ENDIAN    = \"pcm_f32le\"\n    PCM_FLOAT_64_BITS_BIG_ENDIAN       = \"pcm_f64be\"\n    PCM_FLOAT_64_BITS_LITTLE_ENDIAN    = \"pcm_f64le\"\n    PCM_SIGNED_16_BITS_BIG_ENDIAN      = \"pcm_s16be\"\n    PCM_SIGNED_16_BITS_LITTLE_ENDIAN   = \"pcm_s16le\"\n    PCM_SIGNED_24_BITS_BIG_ENDIAN      = \"pcm_s24be\"\n    PCM_SIGNED_24_BITS_LITTLE_ENDIAN   = \"pcm_s24le\"\n    PCM_SIGNED_32_BITS_BIG_ENDIAN      = \"pcm_s32be\"\n    PCM_SIGNED_32_BITS_LITTLE_ENDIAN   = \"pcm_s32le\"\n    PCM_UNSIGNED_16_BITS_BIG_ENDIAN    = \"pcm_u16be\"\n    PCM_UNSIGNED_16_BITS_LITTLE_ENDIAN = \"pcm_u16le\"\n    PCM_UNSIGNED_24_BITS_BIG_ENDIAN    = \"pcm_u24be\"\n    PCM_UNSIGNED_24_BITS_LITTLE_ENDIAN = \"pcm_u24le\"\n    PCM_UNSIGNED_32_BITS_BIG_ENDIAN    = \"pcm_u32be\"\n    PCM_UNSIGNED_32_BITS_LITTLE_ENDIAN = \"pcm_u32le\"\n    PCM_UNSIGNED_8_BITS                = \"pcm_u8\"\n    PCM_SIGNED_8_BITS                  = \"pcm_s8\"\n\n    @property\n    @functools.lru_cache\n    def size(self) -&gt; int:\n        return int(''.join(filter(str.isdigit, self.value)))//8\n\n    @property\n    @functools.lru_cache\n    def endian(self) -&gt; str:\n        return (\"&lt;\" if (\"le\" in self.value) else \"&gt;\")\n\n    @property\n    @functools.lru_cache\n    def dtype(self) -&gt; numpy.dtype:\n        return numpy.dtype(f\"{self.endian}{self.value[4]}{self.size}\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_FLOAT_32_BITS_BIG_ENDIAN","title":"PCM_FLOAT_32_BITS_BIG_ENDIAN","text":"<pre><code>PCM_FLOAT_32_BITS_BIG_ENDIAN = 'pcm_f32be'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_FLOAT_32_BITS_LITTLE_ENDIAN","title":"PCM_FLOAT_32_BITS_LITTLE_ENDIAN","text":"<pre><code>PCM_FLOAT_32_BITS_LITTLE_ENDIAN = 'pcm_f32le'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_FLOAT_64_BITS_BIG_ENDIAN","title":"PCM_FLOAT_64_BITS_BIG_ENDIAN","text":"<pre><code>PCM_FLOAT_64_BITS_BIG_ENDIAN = 'pcm_f64be'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_FLOAT_64_BITS_LITTLE_ENDIAN","title":"PCM_FLOAT_64_BITS_LITTLE_ENDIAN","text":"<pre><code>PCM_FLOAT_64_BITS_LITTLE_ENDIAN = 'pcm_f64le'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_SIGNED_16_BITS_BIG_ENDIAN","title":"PCM_SIGNED_16_BITS_BIG_ENDIAN","text":"<pre><code>PCM_SIGNED_16_BITS_BIG_ENDIAN = 'pcm_s16be'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_SIGNED_16_BITS_LITTLE_ENDIAN","title":"PCM_SIGNED_16_BITS_LITTLE_ENDIAN","text":"<pre><code>PCM_SIGNED_16_BITS_LITTLE_ENDIAN = 'pcm_s16le'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_SIGNED_24_BITS_BIG_ENDIAN","title":"PCM_SIGNED_24_BITS_BIG_ENDIAN","text":"<pre><code>PCM_SIGNED_24_BITS_BIG_ENDIAN = 'pcm_s24be'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_SIGNED_24_BITS_LITTLE_ENDIAN","title":"PCM_SIGNED_24_BITS_LITTLE_ENDIAN","text":"<pre><code>PCM_SIGNED_24_BITS_LITTLE_ENDIAN = 'pcm_s24le'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_SIGNED_32_BITS_BIG_ENDIAN","title":"PCM_SIGNED_32_BITS_BIG_ENDIAN","text":"<pre><code>PCM_SIGNED_32_BITS_BIG_ENDIAN = 'pcm_s32be'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_SIGNED_32_BITS_LITTLE_ENDIAN","title":"PCM_SIGNED_32_BITS_LITTLE_ENDIAN","text":"<pre><code>PCM_SIGNED_32_BITS_LITTLE_ENDIAN = 'pcm_s32le'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_UNSIGNED_16_BITS_BIG_ENDIAN","title":"PCM_UNSIGNED_16_BITS_BIG_ENDIAN","text":"<pre><code>PCM_UNSIGNED_16_BITS_BIG_ENDIAN = 'pcm_u16be'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_UNSIGNED_16_BITS_LITTLE_ENDIAN","title":"PCM_UNSIGNED_16_BITS_LITTLE_ENDIAN","text":"<pre><code>PCM_UNSIGNED_16_BITS_LITTLE_ENDIAN = 'pcm_u16le'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_UNSIGNED_24_BITS_BIG_ENDIAN","title":"PCM_UNSIGNED_24_BITS_BIG_ENDIAN","text":"<pre><code>PCM_UNSIGNED_24_BITS_BIG_ENDIAN = 'pcm_u24be'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_UNSIGNED_24_BITS_LITTLE_ENDIAN","title":"PCM_UNSIGNED_24_BITS_LITTLE_ENDIAN","text":"<pre><code>PCM_UNSIGNED_24_BITS_LITTLE_ENDIAN = 'pcm_u24le'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_UNSIGNED_32_BITS_BIG_ENDIAN","title":"PCM_UNSIGNED_32_BITS_BIG_ENDIAN","text":"<pre><code>PCM_UNSIGNED_32_BITS_BIG_ENDIAN = 'pcm_u32be'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_UNSIGNED_32_BITS_LITTLE_ENDIAN","title":"PCM_UNSIGNED_32_BITS_LITTLE_ENDIAN","text":"<pre><code>PCM_UNSIGNED_32_BITS_LITTLE_ENDIAN = 'pcm_u32le'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_UNSIGNED_8_BITS","title":"PCM_UNSIGNED_8_BITS","text":"<pre><code>PCM_UNSIGNED_8_BITS = 'pcm_u8'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.PCM_SIGNED_8_BITS","title":"PCM_SIGNED_8_BITS","text":"<pre><code>PCM_SIGNED_8_BITS = 'pcm_s8'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.size","title":"size","text":"<pre><code>size: int\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.endian","title":"endian","text":"<pre><code>endian: str\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegPCM.dtype","title":"dtype","text":"<pre><code>dtype: numpy.dtype\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecPCM","title":"FFmpegAudioCodecPCM","text":"<p>               Bases: <code>FFmpegModuleBase</code></p> <p>Raw pcm formats <code>ffmpeg -formats | grep PCM</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegAudioCodecPCM(FFmpegModuleBase):\n    \"\"\"Raw pcm formats `ffmpeg -formats | grep PCM`\"\"\"\n    type: Annotated[Literal[\"pcm\"], BrokenTyper.exclude()] = \"pcm\"\n\n    format: Annotated[FFmpegPCM,\n        Option(\"--format\", \"-f\")] = \\\n        Field(FFmpegPCM.PCM_FLOAT_32_BITS_LITTLE_ENDIAN)\n\n    def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n        yield (\"-c:a\", self.format.value, \"-f\", self.format.value.removeprefix(\"pcm_\"))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecPCM.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"pcm\"], BrokenTyper.exclude()] = (\n    \"pcm\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecPCM.format","title":"format","text":"<pre><code>format: Annotated[FFmpegPCM, Option(\"--format\", \"-f\")] = (\n    Field(FFmpegPCM.PCM_FLOAT_32_BITS_LITTLE_ENDIAN)\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecPCM.command","title":"command","text":"<pre><code>command(ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def command(self, ffmpeg: BrokenFFmpeg) -&gt; Iterable[str]:\n    yield (\"-c:a\", self.format.value, \"-f\", self.format.value.removeprefix(\"pcm_\"))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegAudioCodecType","title":"FFmpegAudioCodecType","text":"<pre><code>FFmpegAudioCodecType: TypeAlias = Union[\n    FFmpegAudioCodecAAC,\n    FFmpegAudioCodecMP3,\n    FFmpegAudioCodecOpus,\n    FFmpegAudioCodecFLAC,\n    FFmpegAudioCodecCopy,\n    FFmpegAudioCodecNone,\n    FFmpegAudioCodecEmpty,\n    FFmpegAudioCodecPCM,\n]\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterBase","title":"FFmpegFilterBase","text":"<p>               Bases: <code>BrokenModel</code>, <code>ABC</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegFilterBase(BrokenModel, ABC):\n\n    def __str__(self) -&gt; str:\n        return self.string()\n\n    @abstractmethod\n    def string(self) -&gt; Iterable[str]:\n        ...\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterBase.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def __str__(self) -&gt; str:\n    return self.string()\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterBase.string","title":"string","text":"<pre><code>string() -&gt; Iterable[str]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@abstractmethod\ndef string(self) -&gt; Iterable[str]:\n    ...\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterScale","title":"FFmpegFilterScale","text":"<p>               Bases: <code>FFmpegFilterBase</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegFilterScale(FFmpegFilterBase):\n    type: Annotated[Literal[\"scale\"], BrokenTyper.exclude()] = \"scale\"\n\n    width: int = Field(gt=0)\n    height: int = Field(gt=0)\n\n    class Resample(str, BrokenEnum):\n        Bilinear   = \"bilinear\"\n        Nearest    = \"neighbor\"\n        Bicubic    = \"bicubic\"\n        Gaussian   = \"gauss\"\n        Sinc       = \"sinc\"\n        Lanczos    = \"lanczos\"\n        Spline     = \"spline\"\n\n    resample: Annotated[Resample,\n        Option(\"--resample\", \"-r\")] = \\\n        Field(Resample.Lanczos)\n\n    def string(self) -&gt; str:\n        return f\"scale={self.width}x{self.height}:flags={denum(self.resample)}\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterScale.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"scale\"], BrokenTyper.exclude()] = (\n    \"scale\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterScale.width","title":"width","text":"<pre><code>width: int = Field(gt=0)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterScale.height","title":"height","text":"<pre><code>height: int = Field(gt=0)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterScale.Resample","title":"Resample","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Resample(str, BrokenEnum):\n    Bilinear   = \"bilinear\"\n    Nearest    = \"neighbor\"\n    Bicubic    = \"bicubic\"\n    Gaussian   = \"gauss\"\n    Sinc       = \"sinc\"\n    Lanczos    = \"lanczos\"\n    Spline     = \"spline\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterScale.Resample.Bilinear","title":"Bilinear","text":"<pre><code>Bilinear = 'bilinear'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterScale.Resample.Nearest","title":"Nearest","text":"<pre><code>Nearest = 'neighbor'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterScale.Resample.Bicubic","title":"Bicubic","text":"<pre><code>Bicubic = 'bicubic'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterScale.Resample.Gaussian","title":"Gaussian","text":"<pre><code>Gaussian = 'gauss'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterScale.Resample.Sinc","title":"Sinc","text":"<pre><code>Sinc = 'sinc'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterScale.Resample.Lanczos","title":"Lanczos","text":"<pre><code>Lanczos = 'lanczos'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterScale.Resample.Spline","title":"Spline","text":"<pre><code>Spline = 'spline'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterScale.resample","title":"resample","text":"<pre><code>resample: Annotated[\n    Resample, Option(\"--resample\", \"-r\")\n] = Field(Resample.Lanczos)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterScale.string","title":"string","text":"<pre><code>string() -&gt; str\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def string(self) -&gt; str:\n    return f\"scale={self.width}x{self.height}:flags={denum(self.resample)}\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterVerticalFlip","title":"FFmpegFilterVerticalFlip","text":"<p>               Bases: <code>FFmpegFilterBase</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegFilterVerticalFlip(FFmpegFilterBase):\n    type: Annotated[Literal[\"vflip\"], BrokenTyper.exclude()] = \"vflip\"\n\n    def string(self) -&gt; str:\n        return \"vflip\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterVerticalFlip.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"vflip\"], BrokenTyper.exclude()] = (\n    \"vflip\"\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterVerticalFlip.string","title":"string","text":"<pre><code>string() -&gt; str\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def string(self) -&gt; str:\n    return \"vflip\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterCustom","title":"FFmpegFilterCustom","text":"<p>               Bases: <code>FFmpegFilterBase</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class FFmpegFilterCustom(FFmpegFilterBase):\n    type: Annotated[Literal[\"custom\"], BrokenTyper.exclude()] = \"custom\"\n\n    content: str\n\n    def string(self) -&gt; str:\n        return self.content\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterCustom.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"custom\"], BrokenTyper.exclude()\n] = \"custom\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterCustom.content","title":"content","text":"<pre><code>content: str\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterCustom.string","title":"string","text":"<pre><code>string() -&gt; str\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def string(self) -&gt; str:\n    return self.content\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.FFmpegFilterType","title":"FFmpegFilterType","text":"<pre><code>FFmpegFilterType: TypeAlias = Union[\n    FFmpegFilterScale,\n    FFmpegFilterVerticalFlip,\n    FFmpegFilterCustom,\n]\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg","title":"BrokenFFmpeg","text":"<p>               Bases: <code>BrokenModel</code>, <code>BrokenFluent</code></p> <p>\ud83d\udc8e Your premium FFmpeg class, serializable, sane defaults, safety</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class BrokenFFmpeg(BrokenModel, BrokenFluent):\n    \"\"\"\ud83d\udc8e Your premium FFmpeg class, serializable, sane defaults, safety\"\"\"\n\n    # -------------------------------------------|\n    # Re-export classes on BrokenFFmpeg.*\n\n    class Input:\n        Path = FFmpegInputPath\n        Pipe = FFmpegInputPipe\n\n    class Output:\n        Path = FFmpegOutputPath\n        Pipe = FFmpegOutputPipe\n\n    class VideoCodec:\n        H264       = FFmpegVideoCodecH264\n        H264_NVENC = FFmpegVideoCodecH264_NVENC\n        H265       = FFmpegVideoCodecH265\n        H265_NVENC = FFmpegVideoCodecH265_NVENC\n        VP9        = FFmpegVideoCodecVP9\n        AV1_SVT    = FFmpegVideoCodecAV1_SVT\n        AV1_NVENC  = FFmpegVideoCodecAV1_NVENC\n        AV1_RAV1E  = FFmpegVideoCodecAV1_RAV1E\n        Rawvideo   = FFmpegVideoCodecRawvideo\n        NoVideo    = FFmpegVideoCodecNoVideo\n        Copy       = FFmpegVideoCodecCopy\n\n    class AudioCodec:\n        AAC   = FFmpegAudioCodecAAC\n        MP3   = FFmpegAudioCodecMP3\n        Opus  = FFmpegAudioCodecOpus\n        FLAC  = FFmpegAudioCodecFLAC\n        Copy  = FFmpegAudioCodecCopy\n        None_ = FFmpegAudioCodecNone\n        Empty = FFmpegAudioCodecEmpty\n        PCM   = FFmpegAudioCodecPCM\n\n    class Filter:\n        Scale        = FFmpegFilterScale\n        VerticalFlip = FFmpegFilterVerticalFlip\n        Custom       = FFmpegFilterCustom\n\n    # -------------------------------------------|\n\n    hide_banner: bool = True\n    \"\"\"Hides the compilation information of FFmpeg from the output\"\"\"\n\n    shortest: bool = False\n    \"\"\"Ends the video at the shortest input's duration\n\n    [**FFmpeg docs**](https://ffmpeg.org/ffmpeg.html#toc-Advanced-options)\n    \"\"\"\n\n    stream_loop: int = Field(0)\n    \"\"\"Loops the input stream N times to the right. Zero '0' is no loop, one '1' doubles the length\"\"\"\n\n    time: float = Field(0.0)\n    \"\"\"If greater than zero, stops encoding at the specified time. `-t` option of FFmpeg\"\"\"\n\n    def set_time(self, time: float) -&gt; Self:\n        self.time = time\n        return self\n\n    vsync: Literal[\"auto\", \"passthrough\", \"cfr\", \"vfr\"] = Field(\"cfr\")\n    \"\"\"\n    The video's framerate mode, applied to all subsequent output targets. `-vsync` option of FFmpeg\n\n    - `auto`: FFmpeg default, choses between constant and variable framerate based on muxer support\n    - `cfr`: Constant Frame Rate, where frames are droped or duped to precisely match frametimes\n    - `vfr`: Variable Frame Rate, static frames are kept, no two frames have the same timestemp\n    - `passthrough`: The frames are passed through without modification on their timestamp\n\n    [**FFmpeg docs**](https://ffmpeg.org/ffmpeg.html#Advanced-options)\n    \"\"\"\n\n    class LogLevel(str, BrokenEnum):\n        Error   = \"error\"\n        Info    = \"info\"\n        Verbose = \"verbose\"\n        Debug   = \"debug\"\n        Warning = \"warning\"\n        Panic   = \"panic\"\n        Fatal   = \"fatal\"\n\n    loglevel: Annotated[LogLevel,\n        Option(\"--loglevel\", \"-log\")] = \\\n        Field(LogLevel.Info)\n\n    class HardwareAcceleration(str, BrokenEnum):\n        Auto   = \"auto\"\n        CUDA   = \"cuda\"\n        NVDEC  = \"nvdec\"\n        Vulkan = \"vulkan\"\n\n    hwaccel: Annotated[Optional[HardwareAcceleration],\n        Option(\"--hwaccel\", \"-hw\")] = \\\n        Field(None)\n    \"\"\"\n    What device to bootstrap, for decoding with hardware acceleration. In practice, it's only useful\n    when decoding from a source video file, might cause overhead on pipe input mode\n\n    - `auto`: Finds up the best device to use, more often than not nvdec or cuvid\n\n    TODO: Add the required initializers on the final command per option\n\n    [**FFmpeg docs**](https://trac.ffmpeg.org/wiki/HWAccelIntro)\n    \"\"\"\n\n    threads: Optional[int] = Field(None, ge=0)\n    \"\"\"\n    The number of threads the codecs should use (). Generally speaking, more threads drastically\n    improves performance, at the cost of worse quality and compression ratios. It's not that bad though. Some\n    codecs might not use all available CPU threads. '0' finds the optimal amount automatically\n\n    [**FFmpeg docs**](https://ffmpeg.org/ffmpeg-codecs.html#toc-Codec-Options)\n    \"\"\"\n\n    inputs: list[FFmpegInputType] = Field(default_factory=list)\n    \"\"\"A list of inputs for FFmpeg\"\"\"\n\n    filters: list[FFmpegFilterType] = Field(default_factory=list)\n\n    outputs: list[FFmpegOutputType] = Field(default_factory=list)\n    \"\"\"A list of outputs. Yes, FFmpeg natively supports multi-encoding targets\"\"\"\n\n    video_codec: Optional[FFmpegVideoCodecType] = Field(default_factory=FFmpegVideoCodecH264)\n    \"\"\"The video codec to use and its configuration\"\"\"\n\n    audio_codec: Optional[FFmpegAudioCodecType] = Field(None)\n    \"\"\"The audio codec to use and its configuration\"\"\"\n\n    def quiet(self) -&gt; Self:\n        self.hide_banner = True\n        self.loglevel = \"error\"\n        return self\n\n    # ---------------------------------------------------------------------------------------------|\n    # Recycling\n\n    def clear_inputs(self) -&gt; Self:\n        self.inputs = list()\n        return self\n\n    def clear_filters(self) -&gt; Self:\n        self.filters = list()\n        return self\n\n    def clear_outputs(self) -&gt; Self:\n        self.outputs = list()\n        return self\n\n    def clear_video_codec(self) -&gt; Self:\n        self.video_codec = None\n        return self\n\n    def clear_audio_codec(self) -&gt; Self:\n        self.audio_codec = None\n        return self\n\n    def clear(self,\n        inputs: bool=True,\n        filters: bool=True,\n        outputs: bool=True,\n        video_codec: bool=True,\n        audio_codec: bool=True,\n    ) -&gt; Self:\n        if inputs:      self.clear_inputs()\n        if filters:     self.clear_filters()\n        if outputs:     self.clear_outputs()\n        if video_codec: self.clear_video_codec()\n        if audio_codec: self.clear_audio_codec()\n        return self\n\n    # ---------------------------------------------------------------------------------------------|\n    # Wrappers for all classes\n\n    # Inputs and Outputs\n\n    def add_input(self, input: FFmpegInputType) -&gt; Self:\n        self.inputs.append(input)\n        return self\n\n    @functools.wraps(FFmpegInputPath)\n    def input(self, path: Path, **options) -&gt; Self:\n        return self.add_input(FFmpegInputPath(path=path, **options))\n\n    @functools.wraps(FFmpegInputPipe)\n    def pipe_input(self, **options) -&gt; Self:\n        return self.add_input(FFmpegInputPipe(**options))\n\n    def typer_inputs(self, typer: BrokenTyper) -&gt; None:\n        with typer.panel(\"\ud83d\udce6 (FFmpeg) Input\"):\n            typer.command(FFmpegInputPath, post=self.add_input, name=\"ipath\")\n            typer.command(FFmpegInputPipe, post=self.add_input, name=\"ipipe\")\n\n    def add_output(self, output: FFmpegOutputType) -&gt; Self:\n        self.outputs.append(output)\n        return self\n\n    @functools.wraps(FFmpegOutputPath)\n    def output(self, path: Path, **options) -&gt; Self:\n        return self.add_output(FFmpegOutputPath(path=path, **options))\n\n    @functools.wraps(FFmpegOutputPipe)\n    def pipe_output(self, **options) -&gt; Self:\n        return self.add_output(FFmpegOutputPipe(**options))\n\n    def typer_outputs(self, typer: BrokenTyper) -&gt; None:\n        with typer.panel(\"\ud83d\udce6 (FFmpeg) Output\"):\n            typer.command(FFmpegOutputPath, post=self.add_output, name=\"opath\")\n            typer.command(FFmpegOutputPipe, post=self.add_output, name=\"opipe\")\n\n    # Video codecs\n\n    def set_video_codec(self, codec: FFmpegVideoCodecType) -&gt; Self:\n        self.video_codec = codec\n        return self\n\n    @functools.wraps(FFmpegVideoCodecH264)\n    def h264(self, **options) -&gt; Self:\n        return self.set_video_codec(FFmpegVideoCodecH264(**options))\n\n    @functools.wraps(FFmpegVideoCodecH264_NVENC)\n    def h264_nvenc(self, **options) -&gt; Self:\n        return self.set_video_codec(FFmpegVideoCodecH264_NVENC(**options))\n\n    @functools.wraps(FFmpegVideoCodecH265)\n    def h265(self, **options) -&gt; Self:\n        return self.set_video_codec(FFmpegVideoCodecH265(**options))\n\n    @functools.wraps(FFmpegVideoCodecH265_NVENC)\n    def h265_nvenc(self, **options) -&gt; Self:\n        return self.set_video_codec(FFmpegVideoCodecH265_NVENC(**options))\n\n    @functools.wraps(FFmpegVideoCodecVP9)\n    def vp9(self, **options) -&gt; Self:\n        return self.set_video_codec(FFmpegVideoCodecVP9(**options))\n\n    @functools.wraps(FFmpegVideoCodecAV1_SVT)\n    def av1_svt(self, **options) -&gt; Self:\n        return self.set_video_codec(FFmpegVideoCodecAV1_SVT(**options))\n\n    @functools.wraps(FFmpegVideoCodecAV1_NVENC)\n    def av1_nvenc(self, **options) -&gt; Self:\n        return self.set_video_codec(FFmpegVideoCodecAV1_NVENC(**options))\n\n    @functools.wraps(FFmpegVideoCodecAV1_RAV1E)\n    def av1_rav1e(self, **options) -&gt; Self:\n        return self.set_video_codec(FFmpegVideoCodecAV1_RAV1E(**options))\n\n    @functools.wraps(FFmpegVideoCodecRawvideo)\n    def rawvideo(self, **options) -&gt; Self:\n        return self.set_video_codec(FFmpegVideoCodecRawvideo(**options))\n\n    @functools.wraps(FFmpegVideoCodecCopy)\n    def copy_video(self, **options) -&gt; Self:\n        return self.set_video_codec(FFmpegVideoCodecCopy(**options))\n\n    @functools.wraps(FFmpegVideoCodecNoVideo)\n    def no_video(self, **options) -&gt; Self:\n        return self.set_video_codec(FFmpegVideoCodecNoVideo(**options))\n\n    def typer_vcodecs(self, typer: BrokenTyper) -&gt; None:\n        with typer.panel(\"\ud83d\udce6 (Exporting) Video encoder\"):\n            typer.command(FFmpegVideoCodecH264,       post=self.set_video_codec, name=\"h264\")\n            typer.command(FFmpegVideoCodecH264_NVENC, post=self.set_video_codec, name=\"h264-nvenc\")\n            typer.command(FFmpegVideoCodecH265,       post=self.set_video_codec, name=\"h265\")\n            typer.command(FFmpegVideoCodecH265_NVENC, post=self.set_video_codec, name=\"h265-nvenc\")\n            typer.command(FFmpegVideoCodecVP9,        post=self.set_video_codec, name=\"vp9\", hidden=True)\n            typer.command(FFmpegVideoCodecAV1_SVT,    post=self.set_video_codec, name=\"av1-svt\")\n            typer.command(FFmpegVideoCodecAV1_NVENC,  post=self.set_video_codec, name=\"av1-nvenc\")\n            typer.command(FFmpegVideoCodecAV1_RAV1E,  post=self.set_video_codec, name=\"av1-rav1e\")\n            typer.command(FFmpegVideoCodecRawvideo,   post=self.set_video_codec, name=\"rawvideo\", hidden=True)\n            typer.command(FFmpegVideoCodecCopy,       post=self.set_video_codec, name=\"video-copy\", hidden=True)\n            typer.command(FFmpegVideoCodecNoVideo,    post=self.set_video_codec, name=\"video-none\", hidden=True)\n\n    # Audio codecs\n\n    def set_audio_codec(self, codec: FFmpegAudioCodecType) -&gt; Self:\n        self.audio_codec = codec\n        return self\n\n    @functools.wraps(FFmpegAudioCodecAAC)\n    def aac(self, **options) -&gt; Self:\n        return self.set_audio_codec(FFmpegAudioCodecAAC(**options))\n\n    @functools.wraps(FFmpegAudioCodecMP3)\n    def mp3(self, **options) -&gt; Self:\n        return self.set_audio_codec(FFmpegAudioCodecMP3(**options))\n\n    @functools.wraps(FFmpegAudioCodecOpus)\n    def opus(self, **options) -&gt; Self:\n        return self.set_audio_codec(FFmpegAudioCodecOpus(**options))\n\n    @functools.wraps(FFmpegAudioCodecFLAC)\n    def flac(self, **options) -&gt; Self:\n        return self.set_audio_codec(FFmpegAudioCodecFLAC(**options))\n\n    @functools.wraps(FFmpegAudioCodecPCM)\n    def pcm(self, format: FFmpegAudioCodecPCM=\"pcm_f32le\") -&gt; Self:\n        return self.set_audio_codec(FFmpegAudioCodecPCM(format=format))\n\n    @functools.wraps(FFmpegAudioCodecCopy)\n    def copy_audio(self, **options) -&gt; Self:\n        return self.set_audio_codec(FFmpegAudioCodecCopy(**options))\n\n    @functools.wraps(FFmpegAudioCodecNone)\n    def no_audio(self, **options) -&gt; Self:\n        return self.set_audio_codec(FFmpegAudioCodecNone(**options))\n\n    @functools.wraps(FFmpegAudioCodecEmpty)\n    def empty_audio(self, **options) -&gt; Self:\n        return self.set_audio_codec(FFmpegAudioCodecEmpty(**options))\n\n    def typer_acodecs(self, typer: BrokenTyper) -&gt; None:\n        with typer.panel(\"\ud83d\udce6 (Exporting) Audio encoder\"):\n            typer.command(FFmpegAudioCodecAAC,   post=self.set_audio_codec, name=\"aac\")\n            typer.command(FFmpegAudioCodecMP3,   post=self.set_audio_codec, name=\"mp3\")\n            typer.command(FFmpegAudioCodecOpus,  post=self.set_audio_codec, name=\"opus\")\n            typer.command(FFmpegAudioCodecFLAC,  post=self.set_audio_codec, name=\"flac\")\n            typer.command(FFmpegAudioCodecCopy,  post=self.set_audio_codec, name=\"audio-copy\")\n            typer.command(FFmpegAudioCodecNone,  post=self.set_audio_codec, name=\"audio-none\")\n            typer.command(FFmpegAudioCodecEmpty, post=self.set_audio_codec, name=\"audio-empty\")\n\n    # Filters\n\n    def add_filter(self, filter: FFmpegFilterType) -&gt; Self:\n        self.filters.append(filter)\n        return self\n\n    @functools.wraps(FFmpegFilterScale)\n    def scale(self, **options) -&gt; Self:\n        return self.add_filter(FFmpegFilterScale(**options))\n\n    @functools.wraps(FFmpegFilterVerticalFlip)\n    def vflip(self, **options) -&gt; Self:\n        return self.add_filter(FFmpegFilterVerticalFlip(**options))\n\n    @functools.wraps(FFmpegFilterCustom)\n    def filter(self, content: str) -&gt; Self:\n        return self.add_filter(FFmpegFilterCustom(content=content))\n\n    def typer_filters(self, typer: BrokenTyper) -&gt; None:\n        with typer.panel(\"\ud83d\udce6 (FFmpeg) Filters\"):\n            typer.command(FFmpegFilterScale,        post=self.add_filter, name=\"scale\")\n            typer.command(FFmpegFilterVerticalFlip, post=self.add_filter, name=\"vflip\")\n            typer.command(FFmpegFilterCustom,       post=self.add_filter, name=\"filter\")\n\n    # ---------------------------------------------------------------------------------------------|\n    # Command building and running\n\n    @property\n    def command(self) -&gt; list[str]:\n        BrokenFFmpeg.install()\n\n        if (not self.inputs):\n            raise ValueError(\"At least one input is required for FFmpeg\")\n        if (not self.outputs):\n            raise ValueError(\"At least one output is required for FFmpeg\")\n\n        command = deque()\n\n        def extend(*objects: Union[FFmpegModuleBase, Iterable[FFmpegModuleBase]]):\n            for item in flatten(objects):\n                if isinstance(item, FFmpegModuleBase):\n                    command.extend(flatten(item.command(self)))\n                else:\n                    command.append(item)\n\n        extend(shutil.which(\"ffmpeg\"))\n        extend(\"-hide_banner\"*self.hide_banner)\n        extend(\"-loglevel\", denum(self.loglevel))\n        extend(every(\"-threads\", self.threads))\n        extend((\"-hwaccel\", denum(self.hwaccel))*bool(self.hwaccel))\n        extend((\"-stream_loop\", self.stream_loop)*bool(self.stream_loop))\n        extend(self.inputs)\n        extend((\"-t\", self.time)*bool(self.time))\n        extend(\"-shortest\"*self.shortest)\n\n        # Note: https://trac.ffmpeg.org/wiki/Creating%20multiple%20outputs\n        for output in self.outputs:\n            extend(self.audio_codec)\n            extend(self.video_codec)\n            extend(every(\"-vf\", \",\".join(map(str, self.filters))))\n            extend(output)\n\n        return list(map(str, map(denum, flatten(command))))\n\n    def run(self, **options) -&gt; subprocess.CompletedProcess:\n        return shell(self.command, **options)\n\n    def popen(self, **options) -&gt; subprocess.Popen:\n        return shell(self.command, Popen=True, **options)\n\n    # ---------------------------------------------------------------------------------------------|\n    # High level functions\n\n    @staticmethod\n    def install(raises: bool=True) -&gt; None:\n        if all(map(BrokenPath.which, (\"ffmpeg\", \"ffprobe\"))):\n            return None\n\n        if (not BrokenPlatform.OnMacOS):\n            log.info(\"FFmpeg wasn't found on System Path, will download a BtbN's Build\")\n            BrokenPath.get_external(''.join((\n                \"https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/\",\n                \"ffmpeg-master-latest-\",\n                BrokenPlatform.System.value.replace(\"windows\", \"win\"),\n                BrokenPlatform.Arch.replace(\"amd64\", \"64\"),\n                (\"-gpl.zip\" if BrokenPlatform.OnWindows else \"-gpl.tar.xz\")\n            )))\n        else:\n            log.info(\"FFmpeg wasn't found on System Path, will download a EverMeet's Build\")\n            ffprobe = BrokenPath.get_external(\"https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip\", redirect=True)\n            ffmpeg  = BrokenPath.get_external(\"https://evermeet.cx/ffmpeg/getrelease/zip\", redirect=True)\n\n            # Shutil doesn't preserve executable attributes\n            for file in ffprobe.rglob(\"ffprobe*\"):\n                BrokenPath.make_executable(file)\n            for file in ffmpeg.rglob(\"ffmpeg*\"):\n                BrokenPath.make_executable(file)\n\n        # Ensure the binaries are available\n        if raises and (not all(map(BrokenPath.which, (\"ffmpeg\", \"ffprobe\")))):\n            raise FileNotFoundError(\"FFmpeg wasn't found on the system after an attempt to download it\")\n\n    # # Video\n\n    @staticmethod\n    def loop(path: Path, *, times: int=1, output: Path=None, echo: bool=True) -&gt; Path:\n        \"\"\"Loop a video N-1 times, output to a new file or replace the original\"\"\"\n        if not (path := BrokenPath.get(path, exists=True)):\n            return None\n        if ((times := times - 1) &lt;= 0):\n            return path\n        BrokenFFmpeg.install()\n\n        # Optional override or inline\n        output = (output or path)\n        looped = output.with_stem(f\"{output.stem}-{times}-loops\")\n        log.info(f\"Looping video ({path}) {times}x times to ({output})\", echo=echo)\n\n        # Fastest way to loop a video, no re-encoding\n        (BrokenFFmpeg(stream_loop=(times - 1)).quiet().copy_audio().copy_video()\n            .input(path).output(looped, pixel_format=None).run())\n\n        # Replace the original file or move to target\n        return looped.replace(output)\n\n    @staticmethod\n    @functools.lru_cache\n    def get_video_resolution(path: Path, *, echo: bool=True) -&gt; Optional[tuple[int, int]]:\n        \"\"\"Get the resolution of a video in a smart way\"\"\"\n        if not (path := BrokenPath.get(path, exists=True)):\n            return None\n        BrokenFFmpeg.install()\n        log.minor(f\"Getting Video Resolution of ({path})\", echo=echo)\n        import PIL\n        return PIL.Image.open(io.BytesIO(shell(\n            shutil.which(\"ffmpeg\"), \"-hide_banner\", \"-loglevel\", \"error\",\n            \"-i\", path, \"-vframes\", \"1\", \"-f\", \"image2pipe\", \"-\",\n            stdout=PIPE, echo=echo\n        ).stdout), formats=[\"jpeg\"]).size\n\n    @staticmethod\n    def iter_video_frames(path: Path, *, skip: int=0, echo: bool=True) -&gt; Optional[Iterable[numpy.ndarray]]:\n        \"\"\"Generator for every frame of the video as numpy arrays, FAST!\"\"\"\n        if not (path := BrokenPath.get(path, exists=True)):\n            return None\n        BrokenFFmpeg.install()\n        (width, height) = BrokenFFmpeg.get_video_resolution(path)\n        log.minor(f\"Streaming Video Frames from file ({path}) @ ({width}x{height})\", echo=echo)\n        ffmpeg = (BrokenFFmpeg(vsync=\"cfr\")\n            .quiet()\n            .input(path=path)\n            .filter(content=f\"select='gte(n\\\\,{skip})'\")\n            .rawvideo()\n            .no_audio()\n            .pipe_output(\n                pixel_format=\"rgb24\",\n                format=\"rawvideo\",\n            )\n        ).popen(stdout=PIPE, echo=echo)\n\n        # Keep reading frames until we run out, each pixel is 3 bytes !\n        while (raw := ffmpeg.stdout.read(width * height * 3)):\n            yield numpy.frombuffer(raw, dtype=numpy.uint8).reshape((height, width, 3))\n\n    @staticmethod\n    def is_valid_video(path: Path, *, echo: bool=True) -&gt; bool:\n        if not (path := BrokenPath.get(path, exists=True)):\n            return False\n        BrokenFFmpeg.install()\n        return (shell(\n            shutil.which(\"ffmpeg\"),\n            \"-hide_banner\", \"-loglevel\", \"error\",\n            \"-i\", path, \"-f\", \"null\", \"-\", echo=echo,\n            stderr=DEVNULL, stdout=DEVNULL\n        ).returncode == 0)\n\n    @staticmethod\n    @functools.lru_cache\n    def get_video_total_frames(path: Path, *, echo: bool=True) -&gt; Optional[int]:\n        \"\"\"Count the total frames of a video by decode voiding and parsing stats output\"\"\"\n        if not (path := BrokenPath.get(path, exists=True)):\n            return None\n        BrokenFFmpeg.install()\n        with Halo(log.minor(f\"Getting total frames of video ({path}) by decoding every frame, might take a while..\")):\n            return int(re.compile(r\"frame=\\s*(\\d+)\").findall((\n                BrokenFFmpeg(vsync=\"cfr\")\n                .input(path=path)\n                .pipe_output(format=\"null\")\n            ).run(stderr=PIPE, echo=echo).stderr.decode())[-1])\n\n    @staticmethod\n    @functools.lru_cache\n    def get_video_duration(path: Path, *, echo: bool=True) -&gt; Optional[float]:\n        if not (path := BrokenPath.get(path, exists=True)):\n            return None\n        BrokenFFmpeg.install()\n        log.minor(f\"Getting Video Duration of file ({path})\", echo=echo)\n        return float(shell(\n            BrokenPath.which(\"ffprobe\"),\n            \"-i\", path,\n            \"-show_entries\", \"format=duration\",\n            \"-v\", \"quiet\", \"-of\", \"csv=p=0\",\n            output=True, echo=echo\n        ))\n\n    @staticmethod\n    @functools.lru_cache\n    def get_video_framerate(path: Path, *, precise: bool=False, echo: bool=True) -&gt; Optional[float]:\n        if not (path := BrokenPath.get(path, exists=True)):\n            return None\n        BrokenFFmpeg.install()\n        log.minor(f\"Getting Video Framerate of file ({path})\", echo=echo)\n        if precise:\n            A = BrokenFFmpeg.get_video_total_frames(path, echo=False)\n            B = BrokenFFmpeg.get_video_duration(path, echo=False)\n            return (A/B)\n        else:\n            return float(flatten(eval(shell(\n                BrokenPath.which(\"ffprobe\"),\n                \"-i\", path,\n                \"-show_entries\", \"stream=r_frame_rate\",\n                \"-v\", \"quiet\", \"-of\", \"csv=p=0\",\n                output=True, echo=echo\n            ).splitlines()[0]))[0])\n\n    # # Audio\n\n    @staticmethod\n    @functools.lru_cache\n    def get_audio_samplerate(path: Path, *, stream: int=0, echo: bool=True) -&gt; Optional[int]:\n        if not (path := BrokenPath.get(path, exists=True)):\n            return None\n        BrokenFFmpeg.install()\n        log.minor(f\"Getting Audio Samplerate of file ({path})\", echo=echo)\n        return int(shell(\n            BrokenPath.which(\"ffprobe\"),\n            \"-i\", path,\n            \"-show_entries\", \"stream=sample_rate\",\n            \"-v\", \"quiet\", \"-of\", \"csv=p=0\",\n            output=True, echo=echo\n        ).strip().splitlines()[stream])\n\n    @staticmethod\n    @functools.lru_cache\n    def get_audio_channels(path: Path, *, stream: int=0, echo: bool=True) -&gt; Optional[int]:\n        if not (path := BrokenPath.get(path, exists=True)):\n            return None\n        BrokenFFmpeg.install()\n        log.minor(f\"Getting Audio Channels of file ({path})\", echo=echo)\n        return int(shell(\n            BrokenPath.which(\"ffprobe\"),\n            \"-i\", path,\n            \"-show_entries\", \"stream=channels\",\n            \"-v\", \"quiet\", \"-of\", \"csv=p=0\",\n            output=True, echo=echo\n        ).strip().splitlines()[stream])\n\n    @staticmethod\n    def get_audio_duration(path: Path, *, echo: bool=True) -&gt; Optional[float]:\n        if not (path := BrokenPath.get(path, exists=True)):\n            return None\n        try:\n            generator = BrokenAudioReader(path=path, chunk=10).stream\n            while next(generator) is not None: ...\n        except StopIteration as result:\n            return result.value\n\n    @staticmethod\n    def get_audio_numpy(path: Path, *, echo: bool=True) -&gt; Optional[numpy.ndarray]:\n        if not (path := BrokenPath.get(path, exists=True)):\n            return None\n        BrokenFFmpeg.install()\n        log.minor(f\"Getting Audio as Numpy Array of file ({path})\", echo=echo)\n        return numpy.concatenate(list(BrokenAudioReader(path=path, chunk=10).stream))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.Input","title":"Input","text":"Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Input:\n    Path = FFmpegInputPath\n    Pipe = FFmpegInputPipe\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.Input.Path","title":"Path","text":"<pre><code>Path = FFmpegInputPath\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.Input.Pipe","title":"Pipe","text":"<pre><code>Pipe = FFmpegInputPipe\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.Output","title":"Output","text":"Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Output:\n    Path = FFmpegOutputPath\n    Pipe = FFmpegOutputPipe\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.Output.Path","title":"Path","text":"<pre><code>Path = FFmpegOutputPath\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.Output.Pipe","title":"Pipe","text":"<pre><code>Pipe = FFmpegOutputPipe\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.VideoCodec","title":"VideoCodec","text":"Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class VideoCodec:\n    H264       = FFmpegVideoCodecH264\n    H264_NVENC = FFmpegVideoCodecH264_NVENC\n    H265       = FFmpegVideoCodecH265\n    H265_NVENC = FFmpegVideoCodecH265_NVENC\n    VP9        = FFmpegVideoCodecVP9\n    AV1_SVT    = FFmpegVideoCodecAV1_SVT\n    AV1_NVENC  = FFmpegVideoCodecAV1_NVENC\n    AV1_RAV1E  = FFmpegVideoCodecAV1_RAV1E\n    Rawvideo   = FFmpegVideoCodecRawvideo\n    NoVideo    = FFmpegVideoCodecNoVideo\n    Copy       = FFmpegVideoCodecCopy\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.VideoCodec.H264","title":"H264","text":"<pre><code>H264 = FFmpegVideoCodecH264\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.VideoCodec.H264_NVENC","title":"H264_NVENC","text":"<pre><code>H264_NVENC = FFmpegVideoCodecH264_NVENC\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.VideoCodec.H265","title":"H265","text":"<pre><code>H265 = FFmpegVideoCodecH265\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.VideoCodec.H265_NVENC","title":"H265_NVENC","text":"<pre><code>H265_NVENC = FFmpegVideoCodecH265_NVENC\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.VideoCodec.VP9","title":"VP9","text":"<pre><code>VP9 = FFmpegVideoCodecVP9\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.VideoCodec.AV1_SVT","title":"AV1_SVT","text":"<pre><code>AV1_SVT = FFmpegVideoCodecAV1_SVT\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.VideoCodec.AV1_NVENC","title":"AV1_NVENC","text":"<pre><code>AV1_NVENC = FFmpegVideoCodecAV1_NVENC\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.VideoCodec.AV1_RAV1E","title":"AV1_RAV1E","text":"<pre><code>AV1_RAV1E = FFmpegVideoCodecAV1_RAV1E\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.VideoCodec.Rawvideo","title":"Rawvideo","text":"<pre><code>Rawvideo = FFmpegVideoCodecRawvideo\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.VideoCodec.NoVideo","title":"NoVideo","text":"<pre><code>NoVideo = FFmpegVideoCodecNoVideo\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.VideoCodec.Copy","title":"Copy","text":"<pre><code>Copy = FFmpegVideoCodecCopy\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.AudioCodec","title":"AudioCodec","text":"Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class AudioCodec:\n    AAC   = FFmpegAudioCodecAAC\n    MP3   = FFmpegAudioCodecMP3\n    Opus  = FFmpegAudioCodecOpus\n    FLAC  = FFmpegAudioCodecFLAC\n    Copy  = FFmpegAudioCodecCopy\n    None_ = FFmpegAudioCodecNone\n    Empty = FFmpegAudioCodecEmpty\n    PCM   = FFmpegAudioCodecPCM\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.AudioCodec.AAC","title":"AAC","text":"<pre><code>AAC = FFmpegAudioCodecAAC\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.AudioCodec.MP3","title":"MP3","text":"<pre><code>MP3 = FFmpegAudioCodecMP3\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.AudioCodec.Opus","title":"Opus","text":"<pre><code>Opus = FFmpegAudioCodecOpus\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.AudioCodec.FLAC","title":"FLAC","text":"<pre><code>FLAC = FFmpegAudioCodecFLAC\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.AudioCodec.Copy","title":"Copy","text":"<pre><code>Copy = FFmpegAudioCodecCopy\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.AudioCodec.None_","title":"None_","text":"<pre><code>None_ = FFmpegAudioCodecNone\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.AudioCodec.Empty","title":"Empty","text":"<pre><code>Empty = FFmpegAudioCodecEmpty\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.AudioCodec.PCM","title":"PCM","text":"<pre><code>PCM = FFmpegAudioCodecPCM\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.Filter","title":"Filter","text":"Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class Filter:\n    Scale        = FFmpegFilterScale\n    VerticalFlip = FFmpegFilterVerticalFlip\n    Custom       = FFmpegFilterCustom\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.Filter.Scale","title":"Scale","text":"<pre><code>Scale = FFmpegFilterScale\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.Filter.VerticalFlip","title":"VerticalFlip","text":"<pre><code>VerticalFlip = FFmpegFilterVerticalFlip\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.Filter.Custom","title":"Custom","text":"<pre><code>Custom = FFmpegFilterCustom\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.hide_banner","title":"hide_banner","text":"<pre><code>hide_banner: bool = True\n</code></pre> <p>Hides the compilation information of FFmpeg from the output</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.shortest","title":"shortest","text":"<pre><code>shortest: bool = False\n</code></pre> <p>Ends the video at the shortest input's duration</p> <p>FFmpeg docs</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.stream_loop","title":"stream_loop","text":"<pre><code>stream_loop: int = Field(0)\n</code></pre> <p>Loops the input stream N times to the right. Zero '0' is no loop, one '1' doubles the length</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.time","title":"time","text":"<pre><code>time: float = Field(0.0)\n</code></pre> <p>If greater than zero, stops encoding at the specified time. <code>-t</code> option of FFmpeg</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.set_time","title":"set_time","text":"<pre><code>set_time(time: float) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def set_time(self, time: float) -&gt; Self:\n    self.time = time\n    return self\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.vsync","title":"vsync","text":"<pre><code>vsync: Literal[\"auto\", \"passthrough\", \"cfr\", \"vfr\"] = Field(\n    \"cfr\"\n)\n</code></pre> <p>The video's framerate mode, applied to all subsequent output targets. <code>-vsync</code> option of FFmpeg</p> <ul> <li><code>auto</code>: FFmpeg default, choses between constant and variable framerate based on muxer support</li> <li><code>cfr</code>: Constant Frame Rate, where frames are droped or duped to precisely match frametimes</li> <li><code>vfr</code>: Variable Frame Rate, static frames are kept, no two frames have the same timestemp</li> <li><code>passthrough</code>: The frames are passed through without modification on their timestamp</li> </ul> <p>FFmpeg docs</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.LogLevel","title":"LogLevel","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class LogLevel(str, BrokenEnum):\n    Error   = \"error\"\n    Info    = \"info\"\n    Verbose = \"verbose\"\n    Debug   = \"debug\"\n    Warning = \"warning\"\n    Panic   = \"panic\"\n    Fatal   = \"fatal\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.LogLevel.Error","title":"Error","text":"<pre><code>Error = 'error'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.LogLevel.Info","title":"Info","text":"<pre><code>Info = 'info'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.LogLevel.Verbose","title":"Verbose","text":"<pre><code>Verbose = 'verbose'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.LogLevel.Debug","title":"Debug","text":"<pre><code>Debug = 'debug'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.LogLevel.Warning","title":"Warning","text":"<pre><code>Warning = 'warning'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.LogLevel.Panic","title":"Panic","text":"<pre><code>Panic = 'panic'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.LogLevel.Fatal","title":"Fatal","text":"<pre><code>Fatal = 'fatal'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.loglevel","title":"loglevel","text":"<pre><code>loglevel: Annotated[\n    LogLevel, Option(\"--loglevel\", \"-log\")\n] = Field(LogLevel.Info)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.HardwareAcceleration","title":"HardwareAcceleration","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>class HardwareAcceleration(str, BrokenEnum):\n    Auto   = \"auto\"\n    CUDA   = \"cuda\"\n    NVDEC  = \"nvdec\"\n    Vulkan = \"vulkan\"\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.HardwareAcceleration.Auto","title":"Auto","text":"<pre><code>Auto = 'auto'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.HardwareAcceleration.CUDA","title":"CUDA","text":"<pre><code>CUDA = 'cuda'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.HardwareAcceleration.NVDEC","title":"NVDEC","text":"<pre><code>NVDEC = 'nvdec'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.HardwareAcceleration.Vulkan","title":"Vulkan","text":"<pre><code>Vulkan = 'vulkan'\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.hwaccel","title":"hwaccel","text":"<pre><code>hwaccel: Annotated[\n    Optional[HardwareAcceleration],\n    Option(\"--hwaccel\", \"-hw\"),\n] = Field(None)\n</code></pre> <p>What device to bootstrap, for decoding with hardware acceleration. In practice, it's only useful when decoding from a source video file, might cause overhead on pipe input mode</p> <ul> <li><code>auto</code>: Finds up the best device to use, more often than not nvdec or cuvid</li> </ul> <p>TODO: Add the required initializers on the final command per option</p> <p>FFmpeg docs</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.threads","title":"threads","text":"<pre><code>threads: Optional[int] = Field(None, ge=0)\n</code></pre> <p>The number of threads the codecs should use (). Generally speaking, more threads drastically improves performance, at the cost of worse quality and compression ratios. It's not that bad though. Some codecs might not use all available CPU threads. '0' finds the optimal amount automatically</p> <p>FFmpeg docs</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.inputs","title":"inputs","text":"<pre><code>inputs: list[FFmpegInputType] = Field(default_factory=list)\n</code></pre> <p>A list of inputs for FFmpeg</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.filters","title":"filters","text":"<pre><code>filters: list[FFmpegFilterType] = Field(\n    default_factory=list\n)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.outputs","title":"outputs","text":"<pre><code>outputs: list[FFmpegOutputType] = Field(\n    default_factory=list\n)\n</code></pre> <p>A list of outputs. Yes, FFmpeg natively supports multi-encoding targets</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.video_codec","title":"video_codec","text":"<pre><code>video_codec: Optional[FFmpegVideoCodecType] = Field(\n    default_factory=FFmpegVideoCodecH264\n)\n</code></pre> <p>The video codec to use and its configuration</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.audio_codec","title":"audio_codec","text":"<pre><code>audio_codec: Optional[FFmpegAudioCodecType] = Field(None)\n</code></pre> <p>The audio codec to use and its configuration</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.quiet","title":"quiet","text":"<pre><code>quiet() -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def quiet(self) -&gt; Self:\n    self.hide_banner = True\n    self.loglevel = \"error\"\n    return self\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.clear_inputs","title":"clear_inputs","text":"<pre><code>clear_inputs() -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def clear_inputs(self) -&gt; Self:\n    self.inputs = list()\n    return self\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.clear_filters","title":"clear_filters","text":"<pre><code>clear_filters() -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def clear_filters(self) -&gt; Self:\n    self.filters = list()\n    return self\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.clear_outputs","title":"clear_outputs","text":"<pre><code>clear_outputs() -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def clear_outputs(self) -&gt; Self:\n    self.outputs = list()\n    return self\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.clear_video_codec","title":"clear_video_codec","text":"<pre><code>clear_video_codec() -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def clear_video_codec(self) -&gt; Self:\n    self.video_codec = None\n    return self\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.clear_audio_codec","title":"clear_audio_codec","text":"<pre><code>clear_audio_codec() -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def clear_audio_codec(self) -&gt; Self:\n    self.audio_codec = None\n    return self\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.clear","title":"clear","text":"<pre><code>clear(\n    inputs: bool = True,\n    filters: bool = True,\n    outputs: bool = True,\n    video_codec: bool = True,\n    audio_codec: bool = True,\n) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def clear(self,\n    inputs: bool=True,\n    filters: bool=True,\n    outputs: bool=True,\n    video_codec: bool=True,\n    audio_codec: bool=True,\n) -&gt; Self:\n    if inputs:      self.clear_inputs()\n    if filters:     self.clear_filters()\n    if outputs:     self.clear_outputs()\n    if video_codec: self.clear_video_codec()\n    if audio_codec: self.clear_audio_codec()\n    return self\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.add_input","title":"add_input","text":"<pre><code>add_input(input: FFmpegInputType) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def add_input(self, input: FFmpegInputType) -&gt; Self:\n    self.inputs.append(input)\n    return self\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.input","title":"input","text":"<pre><code>input(path: Path, **options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegInputPath)\ndef input(self, path: Path, **options) -&gt; Self:\n    return self.add_input(FFmpegInputPath(path=path, **options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.pipe_input","title":"pipe_input","text":"<pre><code>pipe_input(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegInputPipe)\ndef pipe_input(self, **options) -&gt; Self:\n    return self.add_input(FFmpegInputPipe(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.typer_inputs","title":"typer_inputs","text":"<pre><code>typer_inputs(typer: BrokenTyper) -&gt; None\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def typer_inputs(self, typer: BrokenTyper) -&gt; None:\n    with typer.panel(\"\ud83d\udce6 (FFmpeg) Input\"):\n        typer.command(FFmpegInputPath, post=self.add_input, name=\"ipath\")\n        typer.command(FFmpegInputPipe, post=self.add_input, name=\"ipipe\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.add_output","title":"add_output","text":"<pre><code>add_output(output: FFmpegOutputType) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def add_output(self, output: FFmpegOutputType) -&gt; Self:\n    self.outputs.append(output)\n    return self\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.output","title":"output","text":"<pre><code>output(path: Path, **options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegOutputPath)\ndef output(self, path: Path, **options) -&gt; Self:\n    return self.add_output(FFmpegOutputPath(path=path, **options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.pipe_output","title":"pipe_output","text":"<pre><code>pipe_output(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegOutputPipe)\ndef pipe_output(self, **options) -&gt; Self:\n    return self.add_output(FFmpegOutputPipe(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.typer_outputs","title":"typer_outputs","text":"<pre><code>typer_outputs(typer: BrokenTyper) -&gt; None\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def typer_outputs(self, typer: BrokenTyper) -&gt; None:\n    with typer.panel(\"\ud83d\udce6 (FFmpeg) Output\"):\n        typer.command(FFmpegOutputPath, post=self.add_output, name=\"opath\")\n        typer.command(FFmpegOutputPipe, post=self.add_output, name=\"opipe\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.set_video_codec","title":"set_video_codec","text":"<pre><code>set_video_codec(codec: FFmpegVideoCodecType) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def set_video_codec(self, codec: FFmpegVideoCodecType) -&gt; Self:\n    self.video_codec = codec\n    return self\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.h264","title":"h264","text":"<pre><code>h264(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegVideoCodecH264)\ndef h264(self, **options) -&gt; Self:\n    return self.set_video_codec(FFmpegVideoCodecH264(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.h264_nvenc","title":"h264_nvenc","text":"<pre><code>h264_nvenc(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegVideoCodecH264_NVENC)\ndef h264_nvenc(self, **options) -&gt; Self:\n    return self.set_video_codec(FFmpegVideoCodecH264_NVENC(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.h265","title":"h265","text":"<pre><code>h265(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegVideoCodecH265)\ndef h265(self, **options) -&gt; Self:\n    return self.set_video_codec(FFmpegVideoCodecH265(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.h265_nvenc","title":"h265_nvenc","text":"<pre><code>h265_nvenc(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegVideoCodecH265_NVENC)\ndef h265_nvenc(self, **options) -&gt; Self:\n    return self.set_video_codec(FFmpegVideoCodecH265_NVENC(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.vp9","title":"vp9","text":"<pre><code>vp9(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegVideoCodecVP9)\ndef vp9(self, **options) -&gt; Self:\n    return self.set_video_codec(FFmpegVideoCodecVP9(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.av1_svt","title":"av1_svt","text":"<pre><code>av1_svt(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegVideoCodecAV1_SVT)\ndef av1_svt(self, **options) -&gt; Self:\n    return self.set_video_codec(FFmpegVideoCodecAV1_SVT(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.av1_nvenc","title":"av1_nvenc","text":"<pre><code>av1_nvenc(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegVideoCodecAV1_NVENC)\ndef av1_nvenc(self, **options) -&gt; Self:\n    return self.set_video_codec(FFmpegVideoCodecAV1_NVENC(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.av1_rav1e","title":"av1_rav1e","text":"<pre><code>av1_rav1e(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegVideoCodecAV1_RAV1E)\ndef av1_rav1e(self, **options) -&gt; Self:\n    return self.set_video_codec(FFmpegVideoCodecAV1_RAV1E(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.rawvideo","title":"rawvideo","text":"<pre><code>rawvideo(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegVideoCodecRawvideo)\ndef rawvideo(self, **options) -&gt; Self:\n    return self.set_video_codec(FFmpegVideoCodecRawvideo(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.copy_video","title":"copy_video","text":"<pre><code>copy_video(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegVideoCodecCopy)\ndef copy_video(self, **options) -&gt; Self:\n    return self.set_video_codec(FFmpegVideoCodecCopy(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.no_video","title":"no_video","text":"<pre><code>no_video(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegVideoCodecNoVideo)\ndef no_video(self, **options) -&gt; Self:\n    return self.set_video_codec(FFmpegVideoCodecNoVideo(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.typer_vcodecs","title":"typer_vcodecs","text":"<pre><code>typer_vcodecs(typer: BrokenTyper) -&gt; None\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def typer_vcodecs(self, typer: BrokenTyper) -&gt; None:\n    with typer.panel(\"\ud83d\udce6 (Exporting) Video encoder\"):\n        typer.command(FFmpegVideoCodecH264,       post=self.set_video_codec, name=\"h264\")\n        typer.command(FFmpegVideoCodecH264_NVENC, post=self.set_video_codec, name=\"h264-nvenc\")\n        typer.command(FFmpegVideoCodecH265,       post=self.set_video_codec, name=\"h265\")\n        typer.command(FFmpegVideoCodecH265_NVENC, post=self.set_video_codec, name=\"h265-nvenc\")\n        typer.command(FFmpegVideoCodecVP9,        post=self.set_video_codec, name=\"vp9\", hidden=True)\n        typer.command(FFmpegVideoCodecAV1_SVT,    post=self.set_video_codec, name=\"av1-svt\")\n        typer.command(FFmpegVideoCodecAV1_NVENC,  post=self.set_video_codec, name=\"av1-nvenc\")\n        typer.command(FFmpegVideoCodecAV1_RAV1E,  post=self.set_video_codec, name=\"av1-rav1e\")\n        typer.command(FFmpegVideoCodecRawvideo,   post=self.set_video_codec, name=\"rawvideo\", hidden=True)\n        typer.command(FFmpegVideoCodecCopy,       post=self.set_video_codec, name=\"video-copy\", hidden=True)\n        typer.command(FFmpegVideoCodecNoVideo,    post=self.set_video_codec, name=\"video-none\", hidden=True)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.set_audio_codec","title":"set_audio_codec","text":"<pre><code>set_audio_codec(codec: FFmpegAudioCodecType) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def set_audio_codec(self, codec: FFmpegAudioCodecType) -&gt; Self:\n    self.audio_codec = codec\n    return self\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.aac","title":"aac","text":"<pre><code>aac(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegAudioCodecAAC)\ndef aac(self, **options) -&gt; Self:\n    return self.set_audio_codec(FFmpegAudioCodecAAC(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.mp3","title":"mp3","text":"<pre><code>mp3(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegAudioCodecMP3)\ndef mp3(self, **options) -&gt; Self:\n    return self.set_audio_codec(FFmpegAudioCodecMP3(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.opus","title":"opus","text":"<pre><code>opus(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegAudioCodecOpus)\ndef opus(self, **options) -&gt; Self:\n    return self.set_audio_codec(FFmpegAudioCodecOpus(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.flac","title":"flac","text":"<pre><code>flac(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegAudioCodecFLAC)\ndef flac(self, **options) -&gt; Self:\n    return self.set_audio_codec(FFmpegAudioCodecFLAC(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.pcm","title":"pcm","text":"<pre><code>pcm(format: FFmpegAudioCodecPCM = 'pcm_f32le') -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegAudioCodecPCM)\ndef pcm(self, format: FFmpegAudioCodecPCM=\"pcm_f32le\") -&gt; Self:\n    return self.set_audio_codec(FFmpegAudioCodecPCM(format=format))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.copy_audio","title":"copy_audio","text":"<pre><code>copy_audio(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegAudioCodecCopy)\ndef copy_audio(self, **options) -&gt; Self:\n    return self.set_audio_codec(FFmpegAudioCodecCopy(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.no_audio","title":"no_audio","text":"<pre><code>no_audio(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegAudioCodecNone)\ndef no_audio(self, **options) -&gt; Self:\n    return self.set_audio_codec(FFmpegAudioCodecNone(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.empty_audio","title":"empty_audio","text":"<pre><code>empty_audio(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegAudioCodecEmpty)\ndef empty_audio(self, **options) -&gt; Self:\n    return self.set_audio_codec(FFmpegAudioCodecEmpty(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.typer_acodecs","title":"typer_acodecs","text":"<pre><code>typer_acodecs(typer: BrokenTyper) -&gt; None\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def typer_acodecs(self, typer: BrokenTyper) -&gt; None:\n    with typer.panel(\"\ud83d\udce6 (Exporting) Audio encoder\"):\n        typer.command(FFmpegAudioCodecAAC,   post=self.set_audio_codec, name=\"aac\")\n        typer.command(FFmpegAudioCodecMP3,   post=self.set_audio_codec, name=\"mp3\")\n        typer.command(FFmpegAudioCodecOpus,  post=self.set_audio_codec, name=\"opus\")\n        typer.command(FFmpegAudioCodecFLAC,  post=self.set_audio_codec, name=\"flac\")\n        typer.command(FFmpegAudioCodecCopy,  post=self.set_audio_codec, name=\"audio-copy\")\n        typer.command(FFmpegAudioCodecNone,  post=self.set_audio_codec, name=\"audio-none\")\n        typer.command(FFmpegAudioCodecEmpty, post=self.set_audio_codec, name=\"audio-empty\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.add_filter","title":"add_filter","text":"<pre><code>add_filter(filter: FFmpegFilterType) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def add_filter(self, filter: FFmpegFilterType) -&gt; Self:\n    self.filters.append(filter)\n    return self\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.scale","title":"scale","text":"<pre><code>scale(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegFilterScale)\ndef scale(self, **options) -&gt; Self:\n    return self.add_filter(FFmpegFilterScale(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.vflip","title":"vflip","text":"<pre><code>vflip(**options) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegFilterVerticalFlip)\ndef vflip(self, **options) -&gt; Self:\n    return self.add_filter(FFmpegFilterVerticalFlip(**options))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.filter","title":"filter","text":"<pre><code>filter(content: str) -&gt; Self\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@functools.wraps(FFmpegFilterCustom)\ndef filter(self, content: str) -&gt; Self:\n    return self.add_filter(FFmpegFilterCustom(content=content))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.typer_filters","title":"typer_filters","text":"<pre><code>typer_filters(typer: BrokenTyper) -&gt; None\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def typer_filters(self, typer: BrokenTyper) -&gt; None:\n    with typer.panel(\"\ud83d\udce6 (FFmpeg) Filters\"):\n        typer.command(FFmpegFilterScale,        post=self.add_filter, name=\"scale\")\n        typer.command(FFmpegFilterVerticalFlip, post=self.add_filter, name=\"vflip\")\n        typer.command(FFmpegFilterCustom,       post=self.add_filter, name=\"filter\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.command","title":"command","text":"<pre><code>command: list[str]\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.run","title":"run","text":"<pre><code>run(**options) -&gt; subprocess.CompletedProcess\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def run(self, **options) -&gt; subprocess.CompletedProcess:\n    return shell(self.command, **options)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.popen","title":"popen","text":"<pre><code>popen(**options) -&gt; subprocess.Popen\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>def popen(self, **options) -&gt; subprocess.Popen:\n    return shell(self.command, Popen=True, **options)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.install","title":"install","text":"<pre><code>install(raises: bool = True) -&gt; None\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@staticmethod\ndef install(raises: bool=True) -&gt; None:\n    if all(map(BrokenPath.which, (\"ffmpeg\", \"ffprobe\"))):\n        return None\n\n    if (not BrokenPlatform.OnMacOS):\n        log.info(\"FFmpeg wasn't found on System Path, will download a BtbN's Build\")\n        BrokenPath.get_external(''.join((\n            \"https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/\",\n            \"ffmpeg-master-latest-\",\n            BrokenPlatform.System.value.replace(\"windows\", \"win\"),\n            BrokenPlatform.Arch.replace(\"amd64\", \"64\"),\n            (\"-gpl.zip\" if BrokenPlatform.OnWindows else \"-gpl.tar.xz\")\n        )))\n    else:\n        log.info(\"FFmpeg wasn't found on System Path, will download a EverMeet's Build\")\n        ffprobe = BrokenPath.get_external(\"https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip\", redirect=True)\n        ffmpeg  = BrokenPath.get_external(\"https://evermeet.cx/ffmpeg/getrelease/zip\", redirect=True)\n\n        # Shutil doesn't preserve executable attributes\n        for file in ffprobe.rglob(\"ffprobe*\"):\n            BrokenPath.make_executable(file)\n        for file in ffmpeg.rglob(\"ffmpeg*\"):\n            BrokenPath.make_executable(file)\n\n    # Ensure the binaries are available\n    if raises and (not all(map(BrokenPath.which, (\"ffmpeg\", \"ffprobe\")))):\n        raise FileNotFoundError(\"FFmpeg wasn't found on the system after an attempt to download it\")\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.loop","title":"loop","text":"<pre><code>loop(\n    path: Path,\n    *,\n    times: int = 1,\n    output: Path = None,\n    echo: bool = True\n) -&gt; Path\n</code></pre> <p>Loop a video N-1 times, output to a new file or replace the original</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@staticmethod\ndef loop(path: Path, *, times: int=1, output: Path=None, echo: bool=True) -&gt; Path:\n    \"\"\"Loop a video N-1 times, output to a new file or replace the original\"\"\"\n    if not (path := BrokenPath.get(path, exists=True)):\n        return None\n    if ((times := times - 1) &lt;= 0):\n        return path\n    BrokenFFmpeg.install()\n\n    # Optional override or inline\n    output = (output or path)\n    looped = output.with_stem(f\"{output.stem}-{times}-loops\")\n    log.info(f\"Looping video ({path}) {times}x times to ({output})\", echo=echo)\n\n    # Fastest way to loop a video, no re-encoding\n    (BrokenFFmpeg(stream_loop=(times - 1)).quiet().copy_audio().copy_video()\n        .input(path).output(looped, pixel_format=None).run())\n\n    # Replace the original file or move to target\n    return looped.replace(output)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.get_video_resolution","title":"get_video_resolution","text":"<pre><code>get_video_resolution(\n    path: Path, *, echo: bool = True\n) -&gt; Optional[tuple[int, int]]\n</code></pre> <p>Get the resolution of a video in a smart way</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@staticmethod\n@functools.lru_cache\ndef get_video_resolution(path: Path, *, echo: bool=True) -&gt; Optional[tuple[int, int]]:\n    \"\"\"Get the resolution of a video in a smart way\"\"\"\n    if not (path := BrokenPath.get(path, exists=True)):\n        return None\n    BrokenFFmpeg.install()\n    log.minor(f\"Getting Video Resolution of ({path})\", echo=echo)\n    import PIL\n    return PIL.Image.open(io.BytesIO(shell(\n        shutil.which(\"ffmpeg\"), \"-hide_banner\", \"-loglevel\", \"error\",\n        \"-i\", path, \"-vframes\", \"1\", \"-f\", \"image2pipe\", \"-\",\n        stdout=PIPE, echo=echo\n    ).stdout), formats=[\"jpeg\"]).size\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.iter_video_frames","title":"iter_video_frames","text":"<pre><code>iter_video_frames(\n    path: Path, *, skip: int = 0, echo: bool = True\n) -&gt; Optional[Iterable[numpy.ndarray]]\n</code></pre> <p>Generator for every frame of the video as numpy arrays, FAST!</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@staticmethod\ndef iter_video_frames(path: Path, *, skip: int=0, echo: bool=True) -&gt; Optional[Iterable[numpy.ndarray]]:\n    \"\"\"Generator for every frame of the video as numpy arrays, FAST!\"\"\"\n    if not (path := BrokenPath.get(path, exists=True)):\n        return None\n    BrokenFFmpeg.install()\n    (width, height) = BrokenFFmpeg.get_video_resolution(path)\n    log.minor(f\"Streaming Video Frames from file ({path}) @ ({width}x{height})\", echo=echo)\n    ffmpeg = (BrokenFFmpeg(vsync=\"cfr\")\n        .quiet()\n        .input(path=path)\n        .filter(content=f\"select='gte(n\\\\,{skip})'\")\n        .rawvideo()\n        .no_audio()\n        .pipe_output(\n            pixel_format=\"rgb24\",\n            format=\"rawvideo\",\n        )\n    ).popen(stdout=PIPE, echo=echo)\n\n    # Keep reading frames until we run out, each pixel is 3 bytes !\n    while (raw := ffmpeg.stdout.read(width * height * 3)):\n        yield numpy.frombuffer(raw, dtype=numpy.uint8).reshape((height, width, 3))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.is_valid_video","title":"is_valid_video","text":"<pre><code>is_valid_video(path: Path, *, echo: bool = True) -&gt; bool\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@staticmethod\ndef is_valid_video(path: Path, *, echo: bool=True) -&gt; bool:\n    if not (path := BrokenPath.get(path, exists=True)):\n        return False\n    BrokenFFmpeg.install()\n    return (shell(\n        shutil.which(\"ffmpeg\"),\n        \"-hide_banner\", \"-loglevel\", \"error\",\n        \"-i\", path, \"-f\", \"null\", \"-\", echo=echo,\n        stderr=DEVNULL, stdout=DEVNULL\n    ).returncode == 0)\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.get_video_total_frames","title":"get_video_total_frames","text":"<pre><code>get_video_total_frames(\n    path: Path, *, echo: bool = True\n) -&gt; Optional[int]\n</code></pre> <p>Count the total frames of a video by decode voiding and parsing stats output</p> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@staticmethod\n@functools.lru_cache\ndef get_video_total_frames(path: Path, *, echo: bool=True) -&gt; Optional[int]:\n    \"\"\"Count the total frames of a video by decode voiding and parsing stats output\"\"\"\n    if not (path := BrokenPath.get(path, exists=True)):\n        return None\n    BrokenFFmpeg.install()\n    with Halo(log.minor(f\"Getting total frames of video ({path}) by decoding every frame, might take a while..\")):\n        return int(re.compile(r\"frame=\\s*(\\d+)\").findall((\n            BrokenFFmpeg(vsync=\"cfr\")\n            .input(path=path)\n            .pipe_output(format=\"null\")\n        ).run(stderr=PIPE, echo=echo).stderr.decode())[-1])\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.get_video_duration","title":"get_video_duration","text":"<pre><code>get_video_duration(\n    path: Path, *, echo: bool = True\n) -&gt; Optional[float]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@staticmethod\n@functools.lru_cache\ndef get_video_duration(path: Path, *, echo: bool=True) -&gt; Optional[float]:\n    if not (path := BrokenPath.get(path, exists=True)):\n        return None\n    BrokenFFmpeg.install()\n    log.minor(f\"Getting Video Duration of file ({path})\", echo=echo)\n    return float(shell(\n        BrokenPath.which(\"ffprobe\"),\n        \"-i\", path,\n        \"-show_entries\", \"format=duration\",\n        \"-v\", \"quiet\", \"-of\", \"csv=p=0\",\n        output=True, echo=echo\n    ))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.get_video_framerate","title":"get_video_framerate","text":"<pre><code>get_video_framerate(\n    path: Path, *, precise: bool = False, echo: bool = True\n) -&gt; Optional[float]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@staticmethod\n@functools.lru_cache\ndef get_video_framerate(path: Path, *, precise: bool=False, echo: bool=True) -&gt; Optional[float]:\n    if not (path := BrokenPath.get(path, exists=True)):\n        return None\n    BrokenFFmpeg.install()\n    log.minor(f\"Getting Video Framerate of file ({path})\", echo=echo)\n    if precise:\n        A = BrokenFFmpeg.get_video_total_frames(path, echo=False)\n        B = BrokenFFmpeg.get_video_duration(path, echo=False)\n        return (A/B)\n    else:\n        return float(flatten(eval(shell(\n            BrokenPath.which(\"ffprobe\"),\n            \"-i\", path,\n            \"-show_entries\", \"stream=r_frame_rate\",\n            \"-v\", \"quiet\", \"-of\", \"csv=p=0\",\n            output=True, echo=echo\n        ).splitlines()[0]))[0])\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.get_audio_samplerate","title":"get_audio_samplerate","text":"<pre><code>get_audio_samplerate(\n    path: Path, *, stream: int = 0, echo: bool = True\n) -&gt; Optional[int]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@staticmethod\n@functools.lru_cache\ndef get_audio_samplerate(path: Path, *, stream: int=0, echo: bool=True) -&gt; Optional[int]:\n    if not (path := BrokenPath.get(path, exists=True)):\n        return None\n    BrokenFFmpeg.install()\n    log.minor(f\"Getting Audio Samplerate of file ({path})\", echo=echo)\n    return int(shell(\n        BrokenPath.which(\"ffprobe\"),\n        \"-i\", path,\n        \"-show_entries\", \"stream=sample_rate\",\n        \"-v\", \"quiet\", \"-of\", \"csv=p=0\",\n        output=True, echo=echo\n    ).strip().splitlines()[stream])\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.get_audio_channels","title":"get_audio_channels","text":"<pre><code>get_audio_channels(\n    path: Path, *, stream: int = 0, echo: bool = True\n) -&gt; Optional[int]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@staticmethod\n@functools.lru_cache\ndef get_audio_channels(path: Path, *, stream: int=0, echo: bool=True) -&gt; Optional[int]:\n    if not (path := BrokenPath.get(path, exists=True)):\n        return None\n    BrokenFFmpeg.install()\n    log.minor(f\"Getting Audio Channels of file ({path})\", echo=echo)\n    return int(shell(\n        BrokenPath.which(\"ffprobe\"),\n        \"-i\", path,\n        \"-show_entries\", \"stream=channels\",\n        \"-v\", \"quiet\", \"-of\", \"csv=p=0\",\n        output=True, echo=echo\n    ).strip().splitlines()[stream])\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.get_audio_duration","title":"get_audio_duration","text":"<pre><code>get_audio_duration(\n    path: Path, *, echo: bool = True\n) -&gt; Optional[float]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@staticmethod\ndef get_audio_duration(path: Path, *, echo: bool=True) -&gt; Optional[float]:\n    if not (path := BrokenPath.get(path, exists=True)):\n        return None\n    try:\n        generator = BrokenAudioReader(path=path, chunk=10).stream\n        while next(generator) is not None: ...\n    except StopIteration as result:\n        return result.value\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenFFmpeg.get_audio_numpy","title":"get_audio_numpy","text":"<pre><code>get_audio_numpy(\n    path: Path, *, echo: bool = True\n) -&gt; Optional[numpy.ndarray]\n</code></pre> Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@staticmethod\ndef get_audio_numpy(path: Path, *, echo: bool=True) -&gt; Optional[numpy.ndarray]:\n    if not (path := BrokenPath.get(path, exists=True)):\n        return None\n    BrokenFFmpeg.install()\n    log.minor(f\"Getting Audio as Numpy Array of file ({path})\", echo=echo)\n    return numpy.concatenate(list(BrokenAudioReader(path=path, chunk=10).stream))\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenAudioReader","title":"BrokenAudioReader","text":"Source code in <code>Broken/Externals/FFmpeg.py</code> <pre><code>@define\nclass BrokenAudioReader:\n    path: Path\n\n    format: FFmpegPCM = FFmpegPCM.PCM_FLOAT_32_BITS_LITTLE_ENDIAN\n    \"\"\"The audio format to output the contents of the audio file\"\"\"\n\n    bytes_per_sample: int = None\n    \"\"\"Bytes per individual sample\"\"\"\n\n    dtype: numpy.dtype = None\n    \"\"\"Numpy dtype out of self.format\"\"\"\n\n    channels: int = None\n    \"\"\"The number of audio channels in the file\"\"\"\n\n    samplerate: int = None\n    \"\"\"The sample rate of the audio file\"\"\"\n\n    chunk: Seconds = 0.1\n    \"\"\"The amount of seconds to yield data at a time\"\"\"\n\n    read: int = 0\n    \"\"\"Total number of bytes read from the audio file\"\"\"\n\n    ffmpeg: Popen = None\n    \"\"\"The FFmpeg reader process\"\"\"\n\n    @property\n    def block_size(self) -&gt; int:\n        return (self.bytes_per_sample * self.channels)\n\n    @property\n    def bytes_per_second(self) -&gt; int:\n        return (self.block_size * self.samplerate)\n\n    @property\n    def time(self) -&gt; float:\n        return (self.read / self.bytes_per_second)\n\n    @property\n    def stream(self) -&gt; Generator[numpy.ndarray, float, None]:\n        if not (path := BrokenPath.get(self.path, exists=True)):\n            return None\n        self.path = path\n\n        # Get audio file attributes\n        self.channels   = BrokenFFmpeg.get_audio_channels(self.path, echo=False)\n        self.samplerate = BrokenFFmpeg.get_audio_samplerate(self.path, echo=False)\n        self.format = FFmpegPCM.get(self.format)\n        self.bytes_per_sample = self.format.size\n        self.dtype = self.format.dtype\n        self.read = 0\n\n        # Note: Stderr to null as we might not read all the audio, won't log errors\n        self.ffmpeg = (\n            BrokenFFmpeg()\n            .quiet()\n            .input(path=self.path)\n            .pcm(self.format.value)\n            .no_video()\n            .output(\"-\")\n        ).popen(stdout=PIPE, stderr=PIPE)\n\n        \"\"\"\n        The following code is wrong:\n\n        ```python\n        while (data := ffmpeg.stdout.read(chunk*samplerate)):\n            yield (...)\n        ```\n\n        Reason being:\n        \u2022 Small reads yields time imprecision on sample domain vs time domain\n        \u2022 Must keep track of theoretical time and real time of the read\n        \"\"\"\n        target = 0\n\n        while True:\n            target += self.chunk\n\n            # Calculate the length of the next read to best match the target time,\n            # but do not carry over temporal conversion errors\n            length = (target - self.time) * self.bytes_per_second\n            length = nearest(length, self.block_size, cast=int)\n            length = max(length, self.block_size)\n            data   = self.ffmpeg.stdout.read(length)\n            if len(data) == 0: break\n\n            # Increment precise time and read time\n            yield numpy.frombuffer(data, dtype=self.dtype).reshape(-1, self.channels)\n            self.read += len(data)\n\n        # Allow to catch total duration on GeneratorExit\n        return self.time\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenAudioReader.path","title":"path","text":"<pre><code>path: Path\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenAudioReader.format","title":"format","text":"<pre><code>format: FFmpegPCM = (\n    FFmpegPCM.PCM_FLOAT_32_BITS_LITTLE_ENDIAN\n)\n</code></pre> <p>The audio format to output the contents of the audio file</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenAudioReader.bytes_per_sample","title":"bytes_per_sample","text":"<pre><code>bytes_per_sample: int = None\n</code></pre> <p>Bytes per individual sample</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenAudioReader.dtype","title":"dtype","text":"<pre><code>dtype: numpy.dtype = None\n</code></pre> <p>Numpy dtype out of self.format</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenAudioReader.channels","title":"channels","text":"<pre><code>channels: int = None\n</code></pre> <p>The number of audio channels in the file</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenAudioReader.samplerate","title":"samplerate","text":"<pre><code>samplerate: int = None\n</code></pre> <p>The sample rate of the audio file</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenAudioReader.chunk","title":"chunk","text":"<pre><code>chunk: Seconds = 0.1\n</code></pre> <p>The amount of seconds to yield data at a time</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenAudioReader.read","title":"read","text":"<pre><code>read: int = 0\n</code></pre> <p>Total number of bytes read from the audio file</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenAudioReader.ffmpeg","title":"ffmpeg","text":"<pre><code>ffmpeg: Popen = None\n</code></pre> <p>The FFmpeg reader process</p>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenAudioReader.block_size","title":"block_size","text":"<pre><code>block_size: int\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenAudioReader.bytes_per_second","title":"bytes_per_second","text":"<pre><code>bytes_per_second: int\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenAudioReader.time","title":"time","text":"<pre><code>time: float\n</code></pre>"},{"location":"code/broken/externals/ffmpeg/#Broken.Externals.FFmpeg.BrokenAudioReader.stream","title":"stream","text":"<pre><code>stream: Generator[numpy.ndarray, float, None]\n</code></pre>"},{"location":"code/broken/externals/ollama/","title":"File: <code>Broken/Externals/ollama.py</code>","text":""},{"location":"code/broken/externals/ollama/#Broken.Externals.ollama","title":"Broken.Externals.ollama","text":""},{"location":"code/broken/externals/ollama/#Broken.Externals.ollama.BrokenOllama","title":"BrokenOllama","text":"<p>               Bases: <code>ExternalModelsBase</code></p> Source code in <code>Broken/Externals/ollama.py</code> <pre><code>class BrokenOllama(ExternalModelsBase):\n    model: Annotated[str, Option(\"--model\", \"-m\",\n        help=\"[bold green](\ud83d\udfe2 Basic)[/] Any valid model name from https://ollama.com/library\")] = \\\n        Field(\"qwen2\")\n\n    def install(self):\n        if bool(shutil.which(\"ollama\")):\n            return\n\n        log.warning(\"Ollama binary [green]'ollama'[/] wasn't found on PATH, installing..\")\n\n        if BrokenPlatform.OnMacOS:\n            raise RuntimeError(\"Ollama installaion on macOS is untested, please get it at their website\")\n            url = \"https://github.com/ollama/ollama/releases/latest/download/Ollama-darwin.zip\"\n\n        elif BrokenPlatform.OnWindows:\n            url = \"https://github.com/ollama/ollama/releases/latest/download/ollama-windows-amd64.zip\"\n\n        elif BrokenPlatform.OnLinux:\n            log.warning(\"\")\n            log.warning(\"The installation on Linux is slightly non-trivial, and it's better to use their official script\")\n            log.warning(\"\u2022 Please, get it at their website https://ollama.com/download/linux\")\n            log.warning(\"\u2022 Hint: run [green]'curl -fsSL https://ollama.com/install.sh | sh'[/]\")\n            log.warning(\"\u2022 Alternatively, install from your distro's package manager\")\n            exit(0)\n\n        BrokenPath.get_external(url)\n\n    def _load_model(self):\n        self.install()\n\n        # Download the model if it isn't found (external call for progress bars)\n        if shell(\"ollama\", \"show\", self.model, echo=False, stdout=subprocess.DEVNULL).returncode != 0:\n            if shell(\"ollama\", \"pull\", self.model).returncode != 0:\n                raise RuntimeError(f\"Couldn't pull model {self.model}\")\n\n    def prompt(self,\n        prompt: str,\n        *,\n        system: str=\"\",\n        temperature: float=0.6,\n        # top_k: int=10,\n        # top_p: float=0.3,\n    ) -&gt; str:\n        self.load_model()\n\n        with Halo(f\"Ollama model ({self.model}) is thinking..\"):\n            return ollama.generate(\n                model=self.model,\n                prompt=prompt,\n                system=system,\n                keep_alive=1,\n                options=dict(\n                    num_tokens=(2**10)*(2**4),\n                    temperature=temperature,\n                    num_ctx=4096,\n                    # top_k=top_k,\n                    # top_p=top_p,\n                )\n            )[\"response\"]\n</code></pre>"},{"location":"code/broken/externals/ollama/#Broken.Externals.ollama.BrokenOllama.model","title":"model","text":"<pre><code>model: Annotated[\n    str,\n    Option(\n        --model,\n        -m,\n        help=\"[bold green](\ud83d\udfe2 Basic)[/] Any valid model name from https://ollama.com/library\",\n    ),\n] = Field(\"qwen2\")\n</code></pre>"},{"location":"code/broken/externals/ollama/#Broken.Externals.ollama.BrokenOllama.install","title":"install","text":"<pre><code>install()\n</code></pre> Source code in <code>Broken/Externals/ollama.py</code> <pre><code>def install(self):\n    if bool(shutil.which(\"ollama\")):\n        return\n\n    log.warning(\"Ollama binary [green]'ollama'[/] wasn't found on PATH, installing..\")\n\n    if BrokenPlatform.OnMacOS:\n        raise RuntimeError(\"Ollama installaion on macOS is untested, please get it at their website\")\n        url = \"https://github.com/ollama/ollama/releases/latest/download/Ollama-darwin.zip\"\n\n    elif BrokenPlatform.OnWindows:\n        url = \"https://github.com/ollama/ollama/releases/latest/download/ollama-windows-amd64.zip\"\n\n    elif BrokenPlatform.OnLinux:\n        log.warning(\"\")\n        log.warning(\"The installation on Linux is slightly non-trivial, and it's better to use their official script\")\n        log.warning(\"\u2022 Please, get it at their website https://ollama.com/download/linux\")\n        log.warning(\"\u2022 Hint: run [green]'curl -fsSL https://ollama.com/install.sh | sh'[/]\")\n        log.warning(\"\u2022 Alternatively, install from your distro's package manager\")\n        exit(0)\n\n    BrokenPath.get_external(url)\n</code></pre>"},{"location":"code/broken/externals/ollama/#Broken.Externals.ollama.BrokenOllama.prompt","title":"prompt","text":"<pre><code>prompt(\n    prompt: str,\n    *,\n    system: str = \"\",\n    temperature: float = 0.6\n) -&gt; str\n</code></pre> Source code in <code>Broken/Externals/ollama.py</code> <pre><code>def prompt(self,\n    prompt: str,\n    *,\n    system: str=\"\",\n    temperature: float=0.6,\n    # top_k: int=10,\n    # top_p: float=0.3,\n) -&gt; str:\n    self.load_model()\n\n    with Halo(f\"Ollama model ({self.model}) is thinking..\"):\n        return ollama.generate(\n            model=self.model,\n            prompt=prompt,\n            system=system,\n            keep_alive=1,\n            options=dict(\n                num_tokens=(2**10)*(2**4),\n                temperature=temperature,\n                num_ctx=4096,\n                # top_k=top_k,\n                # top_p=top_p,\n            )\n        )[\"response\"]\n</code></pre>"},{"location":"code/broken/externals/spleeter/","title":"File: <code>Broken/Externals/Spleeter.py</code>","text":""},{"location":"code/broken/externals/spleeter/#Broken.Externals.Spleeter","title":"Broken.Externals.Spleeter","text":""},{"location":"code/broken/externals/spleeter/#Broken.Externals.Spleeter.BrokenSpleeter","title":"BrokenSpleeter","text":"<p>               Bases: <code>ExternalModelsBase</code>, <code>ExternalTorchBase</code></p> Source code in <code>Broken/Externals/Spleeter.py</code> <pre><code>class BrokenSpleeter(ExternalModelsBase, ExternalTorchBase):\n    cache: Annotated[Path, Option(\"--cache\", \"-c\",\n        help=\"[bold green](\ud83d\udfe2 Basic)[/] Output directory for the stems, works as cache\")] = \\\n        BROKEN.DIRECTORIES.SYSTEM_TEMP/\"Spleeter\"\n\n    format: Annotated[str, Option(\"--format\", \"-f\",\n        help=\"[bold green](\ud83d\udfe2 Basic)[/] Output format for the stems\")] = \\\n        Field(\"ogg\")\n\n    def _load_model(self) -&gt; None:\n        self.load_torch()\n        gpu = (\"[gpu]\" if torch.cuda.is_available() else \"\")\n        install(packages=\"audio_separator\", pypi=f\"audio_separator{gpu}\")\n\n        from audio_separator.separator import Separator\n\n        self._model = Separator(\n            output_format=self.format,\n            output_dir=self.cache,\n        )\n        self._model.load_model()\n\n    def separate(self, audio: Path, *, cache: bool=True) -&gt; tuple[Path, Path]:\n        if not (audio := Path(audio).expanduser().resolve()).exists():\n            raise FileNotFoundError(f\"File not found: {audio}\")\n\n        # Build the expected output paths for this audio\n        identifier = f\"{audio.stem}-{str(hashlib.md5(audio.read_bytes()).hexdigest())[0:8]}\"\n        instrumental = (self.cache/identifier).with_suffix(f\".instrumental.{self.format}\")\n        vocals = (self.cache/identifier).with_suffix(f\".vocals.{self.format}\")\n\n        # Early return if already previously inferenced\n        if (cache and instrumental.exists() and vocals.exists()):\n            return instrumental, vocals\n\n        self.load_model()\n\n        # Inference and place on the proper cache\n        _instrumental, _vocals = self._model.separate(audio)\n\n        (self.cache/_instrumental).rename(instrumental)\n        (self.cache/_vocals).rename(vocals)\n\n        return instrumental, vocals\n</code></pre>"},{"location":"code/broken/externals/spleeter/#Broken.Externals.Spleeter.BrokenSpleeter.cache","title":"cache","text":"<pre><code>cache: Annotated[\n    Path,\n    Option(\n        --cache,\n        -c,\n        help=\"[bold green](\ud83d\udfe2 Basic)[/] Output directory for the stems, works as cache\",\n    ),\n] = (\n    BROKEN.DIRECTORIES.SYSTEM_TEMP / \"Spleeter\"\n)\n</code></pre>"},{"location":"code/broken/externals/spleeter/#Broken.Externals.Spleeter.BrokenSpleeter.format","title":"format","text":"<pre><code>format: Annotated[\n    str,\n    Option(\n        --format,\n        -f,\n        help=\"[bold green](\ud83d\udfe2 Basic)[/] Output format for the stems\",\n    ),\n] = Field(\"ogg\")\n</code></pre>"},{"location":"code/broken/externals/spleeter/#Broken.Externals.Spleeter.BrokenSpleeter.separate","title":"separate","text":"<pre><code>separate(\n    audio: Path, *, cache: bool = True\n) -&gt; tuple[Path, Path]\n</code></pre> Source code in <code>Broken/Externals/Spleeter.py</code> <pre><code>def separate(self, audio: Path, *, cache: bool=True) -&gt; tuple[Path, Path]:\n    if not (audio := Path(audio).expanduser().resolve()).exists():\n        raise FileNotFoundError(f\"File not found: {audio}\")\n\n    # Build the expected output paths for this audio\n    identifier = f\"{audio.stem}-{str(hashlib.md5(audio.read_bytes()).hexdigest())[0:8]}\"\n    instrumental = (self.cache/identifier).with_suffix(f\".instrumental.{self.format}\")\n    vocals = (self.cache/identifier).with_suffix(f\".vocals.{self.format}\")\n\n    # Early return if already previously inferenced\n    if (cache and instrumental.exists() and vocals.exists()):\n        return instrumental, vocals\n\n    self.load_model()\n\n    # Inference and place on the proper cache\n    _instrumental, _vocals = self._model.separate(audio)\n\n    (self.cache/_instrumental).rename(instrumental)\n    (self.cache/_vocals).rename(vocals)\n\n    return instrumental, vocals\n</code></pre>"},{"location":"code/broken/externals/whisper/","title":"File: <code>Broken/Externals/Whisper.py</code>","text":""},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper","title":"Broken.Externals.Whisper","text":""},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper","title":"BrokenWhisper","text":"<p>               Bases: <code>ExternalModelsBase</code>, <code>ExternalTorchBase</code></p> Source code in <code>Broken/Externals/Whisper.py</code> <pre><code>class BrokenWhisper(ExternalModelsBase, ExternalTorchBase):\n    class Model(str, BrokenEnum):\n        Tiny         = \"tiny\"\n        TinyEN       = \"tiny.en\"\n        Base         = \"base\"\n        BaseEN       = \"base.en\"\n        Small        = \"small\"\n        SmallEN      = \"small.en\"\n        SmallDistEN  = \"distil-small.en\"\n        Medium       = \"medium\"\n        MediumEN     = \"medium.en\"\n        MediumDistEN = \"distil-medium.en\"\n        LargeV1      = \"large-v1\"\n        LargeV2      = \"large-v2\"\n        LargeV3      = \"large-v3\"\n        Large        = \"large\"\n        LargeDist2   = \"distil-large-v2\"\n        LargeDist3   = \"distil-large-v3\"\n\n    model: Annotated[Model, Option(\"--model\", \"-m\",\n        help=\"[bold green](\ud83d\udfe2 Basic)[/] Model to use for Transcription [green](tiny, base, small, medium, large)[/]\")] = \\\n        Field(Model.LargeV2)\n\n    lowvram: Annotated[bool, Option(\"--lowvram\", \"-l\",\n        help=\"[bold green](\ud83d\udfe2 Basic)[/] Use INT8 instead of FP16 for low VRAM GPUs\")] = \\\n        Field(False)\n\n    def _load_model(self):\n        self.load_torch()\n        install(packages=\"faster_whisper\")\n\n        # Copy PyPI libcudnn to avoid setting LD_LIBRARY_PATH\n        if BrokenPlatform.OnLinux:\n            for target in (\"libcudnn_ops_infer.so.8\", \"libcudnn_cnn_infer.so.8\"):\n                if (libcudnn := Path(f\"/usr/lib/{target}\")).exists():\n                    continue\n                for site_packages in site.getsitepackages():\n                    if (pycudnn := Path(site_packages)/f\"nvidia/cudnn/lib/{target}\").exists():\n                        log.warning(f\"Running FasterWhisper might fail, as ({libcudnn}) doesn't exist\")\n                        log.warning(f\"\u2022 Luckily, we can copy it from {pycudnn}\")\n                        shell(\"sudo\", \"cp\", pycudnn, libcudnn, confirm=True)\n                        break\n                else:\n                    raise RuntimeError(f\"{target} not found in any site-packages\")\n\n        # Finally load the model\n        log.info(f\"Loading OpenAI Whisper model ({self.model.value})\")\n\n        self._model = WhisperModel(\n            model_size_or_path=self.model.value,\n            download_root=(BROKEN.DIRECTORIES.CACHE/\"Whisper\"),\n            compute_type=(\"int8\" if self.lowvram else \"float16\"),\n        )\n\n    def transcribe(self,\n        audio: Union[str, Path, numpy.ndarray],\n        *,\n        reference: Optional[str]=None\n    ) -&gt; Spoken:\n        if isinstance(audio, str) or isinstance(audio, Path):\n            if not (audio := BrokenPath.get(audio)).exists():\n                raise RuntimeError(f\"Audio file doesn't exist: {audio}\")\n            audio = str(audio)\n\n        self.load_model()\n        spoken = Spoken()\n\n        with Halo(f\"Transcribing audio with Whisper model ({self.model})..\"):\n            for segment in self._model.transcribe(\n                audio=audio,\n                word_timestamps=True,\n                initial_prompt=reference\n            )[0]:\n                spoken.sentences[(segment.start) : (segment.end + 0.001)] = segment.text.strip()\n\n                for word in segment.words:\n                    spoken.words[(word.start) : (word.end + 0.001)] = word.word.strip()\n        del self._model\n        return spoken\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model","title":"Model","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/Whisper.py</code> <pre><code>class Model(str, BrokenEnum):\n    Tiny         = \"tiny\"\n    TinyEN       = \"tiny.en\"\n    Base         = \"base\"\n    BaseEN       = \"base.en\"\n    Small        = \"small\"\n    SmallEN      = \"small.en\"\n    SmallDistEN  = \"distil-small.en\"\n    Medium       = \"medium\"\n    MediumEN     = \"medium.en\"\n    MediumDistEN = \"distil-medium.en\"\n    LargeV1      = \"large-v1\"\n    LargeV2      = \"large-v2\"\n    LargeV3      = \"large-v3\"\n    Large        = \"large\"\n    LargeDist2   = \"distil-large-v2\"\n    LargeDist3   = \"distil-large-v3\"\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model.Tiny","title":"Tiny","text":"<pre><code>Tiny = 'tiny'\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model.TinyEN","title":"TinyEN","text":"<pre><code>TinyEN = 'tiny.en'\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model.Base","title":"Base","text":"<pre><code>Base = 'base'\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model.BaseEN","title":"BaseEN","text":"<pre><code>BaseEN = 'base.en'\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model.Small","title":"Small","text":"<pre><code>Small = 'small'\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model.SmallEN","title":"SmallEN","text":"<pre><code>SmallEN = 'small.en'\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model.SmallDistEN","title":"SmallDistEN","text":"<pre><code>SmallDistEN = 'distil-small.en'\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model.Medium","title":"Medium","text":"<pre><code>Medium = 'medium'\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model.MediumEN","title":"MediumEN","text":"<pre><code>MediumEN = 'medium.en'\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model.MediumDistEN","title":"MediumDistEN","text":"<pre><code>MediumDistEN = 'distil-medium.en'\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model.LargeV1","title":"LargeV1","text":"<pre><code>LargeV1 = 'large-v1'\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model.LargeV2","title":"LargeV2","text":"<pre><code>LargeV2 = 'large-v2'\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model.LargeV3","title":"LargeV3","text":"<pre><code>LargeV3 = 'large-v3'\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model.Large","title":"Large","text":"<pre><code>Large = 'large'\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model.LargeDist2","title":"LargeDist2","text":"<pre><code>LargeDist2 = 'distil-large-v2'\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.Model.LargeDist3","title":"LargeDist3","text":"<pre><code>LargeDist3 = 'distil-large-v3'\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.model","title":"model","text":"<pre><code>model: Annotated[\n    Model,\n    Option(\n        \"--model\",\n        \"-m\",\n        help=\"[bold green](\ud83d\udfe2 Basic)[/] Model to use for Transcription [green](tiny, base, small, medium, large)[/]\",\n    ),\n] = Field(Model.LargeV2)\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.lowvram","title":"lowvram","text":"<pre><code>lowvram: Annotated[\n    bool,\n    Option(\n        \"--lowvram\",\n        \"-l\",\n        help=\"[bold green](\ud83d\udfe2 Basic)[/] Use INT8 instead of FP16 for low VRAM GPUs\",\n    ),\n] = Field(False)\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.BrokenWhisper.transcribe","title":"transcribe","text":"<pre><code>transcribe(\n    audio: Union[str, Path, numpy.ndarray],\n    *,\n    reference: Optional[str] = None\n) -&gt; Spoken\n</code></pre> Source code in <code>Broken/Externals/Whisper.py</code> <pre><code>def transcribe(self,\n    audio: Union[str, Path, numpy.ndarray],\n    *,\n    reference: Optional[str]=None\n) -&gt; Spoken:\n    if isinstance(audio, str) or isinstance(audio, Path):\n        if not (audio := BrokenPath.get(audio)).exists():\n            raise RuntimeError(f\"Audio file doesn't exist: {audio}\")\n        audio = str(audio)\n\n    self.load_model()\n    spoken = Spoken()\n\n    with Halo(f\"Transcribing audio with Whisper model ({self.model})..\"):\n        for segment in self._model.transcribe(\n            audio=audio,\n            word_timestamps=True,\n            initial_prompt=reference\n        )[0]:\n            spoken.sentences[(segment.start) : (segment.end + 0.001)] = segment.text.strip()\n\n            for word in segment.words:\n                spoken.words[(word.start) : (word.end + 0.001)] = word.word.strip()\n    del self._model\n    return spoken\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.Spoken","title":"Spoken","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>Broken/Externals/Whisper.py</code> <pre><code>class Spoken(BaseModel):\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n    sentences: IntervalTree[Segment] = Field(default_factory=IntervalTree)\n    words: IntervalTree[Word] = Field(default_factory=IntervalTree)\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.Spoken.model_config","title":"model_config","text":"<pre><code>model_config = ConfigDict(arbitrary_types_allowed=True)\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.Spoken.sentences","title":"sentences","text":"<pre><code>sentences: IntervalTree[Segment] = Field(\n    default_factory=IntervalTree\n)\n</code></pre>"},{"location":"code/broken/externals/whisper/#Broken.Externals.Whisper.Spoken.words","title":"words","text":"<pre><code>words: IntervalTree[Word] = Field(\n    default_factory=IntervalTree\n)\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/","title":"File: <code>Broken/Externals/Upscaler/__init__.py</code>","text":""},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler","title":"Broken.Externals.Upscaler","text":""},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.UpscalerBase","title":"UpscalerBase","text":"<p>               Bases: <code>ExternalModelsBase</code>, <code>ABC</code></p> Source code in <code>Broken/Externals/Upscaler/__init__.py</code> <pre><code>class UpscalerBase(ExternalModelsBase, ABC):\n    model_config = ConfigDict(validate_assignment=True)\n\n    width: Annotated[int, Option(\"--width\", \"-w\", min=0,\n        help=\"[bold red](\ud83d\udd34 Basic   )[/] Upscaled image width, automatic on height aspect ratio if 0, forced if both are set\")] = \\\n        Field(0, gt=-1)\n\n    height: Annotated[int, Option(\"--height\", \"-h\", min=0,\n        help=\"[bold red](\ud83d\udd34 Basic   )[/] Upscaled image height, automatic on width aspect ratio if 0, forced if both are set\")] = \\\n        Field(0, gt=-1)\n\n    scale: Annotated[int, Option(\"--scale\", \"-s\", min=1,\n        help=\"[bold red](\ud83d\udd34 Basic   )[/] Single pass upscale factor. For precision, over-scale and force width and/or height\")] = \\\n        Field(2, gt=0)\n\n    passes: Annotated[int, Option(\"--passes\", \"-p\", min=1,\n        help=\"[bold red](\ud83d\udd34 Basic   )[/] Number of sequential upscale passes. Gets exponentially slower and bigger images\")] = \\\n        Field(1, gt=0)\n\n    class Format(str, BrokenEnum):\n        PNG = \"png\"\n        JPG = \"jpg\"\n\n    format: Annotated[Format, Option(\"--format\", \"-f\",\n        help=\"[bold red](\ud83d\udd34 Basic   )[/] Temporary image processing format. (PNG: Lossless, slow) (JPG: Good enough, faster)\")] = \\\n        Field(Format.JPG)\n\n    quality: Annotated[int, Option(\"--quality\", \"-q\", min=0, max=100,\n        help=\"[bold red](\ud83d\udd34 Basic   )[/] Temporary image processing 'PIL.Image.save' quality used on --format\")] = \\\n        Field(95, ge=0, le=100)\n\n    def output_size(self, width: int, height: int) -&gt; tuple[int, int]:\n        \"\"\"Calculate the final output size after upscaling some input size\"\"\"\n        return BrokenResolution.fit(\n            old=(width, height),\n            new=(self.width or None, self.height or None),\n            scale=(self.scale**self.passes),\n            ar=(width/height)\n        )\n\n    @contextlib.contextmanager\n    def path_image(self, image: Optional[LoadableImage]=None) -&gt; Iterable[Path]:\n        image = LoadImage(image)\n        try:\n            # Note: No context because NTFS only allows one fd per path\n            file = Path(tempfile.NamedTemporaryFile(\n                suffix=f\".{denum(self.format)}\").name,\n                delete=(image is None),\n            )\n            if image is ImageType:\n                pass\n            elif isinstance(image, ImageType):\n                image.save(file, quality=self.quality)\n            elif isinstance(image, Path) and Path(image).exists():\n                shutil.copy(image, file)\n            yield file\n        finally:\n            file.unlink()\n\n    def upscale(self,\n        image: LoadableImage,\n        output: Union[Path, ImageType]=ImageType,\n        **config\n    ) -&gt; Union[Path, ImageType]:\n        \"\"\"\n        Upscale some input image given by its path or Image object.\n\n        Args:\n            input:  The input image to upscale\n            output: The output path to save or `Image` class for a Image object\n\n        Returns:\n            The upscaled image as a PIL Image object if `output` is `Image`, else the output Path\n        \"\"\"\n\n        # Convenience: Direct configs\n        for (key, val) in config.items():\n            if hasattr(self, key):\n                setattr(self, key, val)\n\n        # Input image must be a valid image\n        if not (image := LoadImage(image)):\n            raise ValueError(\"Invalid input Image for upscaling\")\n\n        # Only valid output for str is Path\n        if isinstance(output, str):\n            output = Path(output)\n\n        # Calculate expected output size\n        target = self.output_size(*image.size)\n\n        # Optimization: Return if output matches target\n        if isinstance(output, Path) and output.exists():\n            if (Image.open(output).size == target):\n                return output\n\n        # Optimization: Return if input matches target\n        if (target == image.size):\n            return image\n\n        # If the image has transparency: Split in RGB+A, upscale RGB,\n        # resize A to target resolution, merge it back later\n        if (transparent := any((\n            image.mode == \"RGBA\",\n            image.info.get(\"transparency\", None),\n        )) and (not isinstance(self, NoUpscaler))):\n            _, _, _, alpha = image.split()\n            alpha = alpha.resize(target)\n\n        # Convert to RGB for working\n        image = image.convert(\"RGB\")\n\n        # Upscale core logic\n        with self.path_image(image) as temp_input:\n            for _ in range(self.passes):\n                image.save(temp_input, quality=self.quality)\n                image = self._upscale(image, **config)\n\n            # Resize to match the expected final size\n            image = image.resize(target, Image.LANCZOS)\n\n            # Merge the alpha layer\n            if transparent:\n                image = image.convert(\"RGBA\")\n                image.putalpha(alpha)\n\n            # Save or return the image\n            if isinstance(output, Path):\n                image.save(output, quality=self.quality)\n                return output\n            return image\n\n    @abstractmethod\n    def _upscale(self, image: ImageType, **config) -&gt; ImageType:\n        \"\"\"The upscaler's proper implementation\"\"\"\n        ...\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.UpscalerBase.model_config","title":"model_config","text":"<pre><code>model_config = ConfigDict(validate_assignment=True)\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.UpscalerBase.width","title":"width","text":"<pre><code>width: Annotated[\n    int,\n    Option(\n        --width,\n        -w,\n        min=0,\n        help=\"[bold red](\ud83d\udd34 Basic   )[/] Upscaled image width, automatic on height aspect ratio if 0, forced if both are set\",\n    ),\n] = Field(0, gt=-1)\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.UpscalerBase.height","title":"height","text":"<pre><code>height: Annotated[\n    int,\n    Option(\n        --height,\n        -h,\n        min=0,\n        help=\"[bold red](\ud83d\udd34 Basic   )[/] Upscaled image height, automatic on width aspect ratio if 0, forced if both are set\",\n    ),\n] = Field(0, gt=-1)\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.UpscalerBase.scale","title":"scale","text":"<pre><code>scale: Annotated[\n    int,\n    Option(\n        --scale,\n        -s,\n        min=1,\n        help=\"[bold red](\ud83d\udd34 Basic   )[/] Single pass upscale factor. For precision, over-scale and force width and/or height\",\n    ),\n] = Field(2, gt=0)\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.UpscalerBase.passes","title":"passes","text":"<pre><code>passes: Annotated[\n    int,\n    Option(\n        --passes,\n        -p,\n        min=1,\n        help=\"[bold red](\ud83d\udd34 Basic   )[/] Number of sequential upscale passes. Gets exponentially slower and bigger images\",\n    ),\n] = Field(1, gt=0)\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.UpscalerBase.Format","title":"Format","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/Upscaler/__init__.py</code> <pre><code>class Format(str, BrokenEnum):\n    PNG = \"png\"\n    JPG = \"jpg\"\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.UpscalerBase.Format.PNG","title":"PNG","text":"<pre><code>PNG = 'png'\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.UpscalerBase.Format.JPG","title":"JPG","text":"<pre><code>JPG = 'jpg'\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.UpscalerBase.format","title":"format","text":"<pre><code>format: Annotated[\n    Format,\n    Option(\n        --format,\n        -f,\n        help=\"[bold red](\ud83d\udd34 Basic   )[/] Temporary image processing format. (PNG: Lossless, slow) (JPG: Good enough, faster)\",\n    ),\n] = Field(Format.JPG)\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.UpscalerBase.quality","title":"quality","text":"<pre><code>quality: Annotated[\n    int,\n    Option(\n        --quality,\n        -q,\n        min=0,\n        max=100,\n        help=\"[bold red](\ud83d\udd34 Basic   )[/] Temporary image processing 'PIL.Image.save' quality used on --format\",\n    ),\n] = Field(95, ge=0, le=100)\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.UpscalerBase.output_size","title":"output_size","text":"<pre><code>output_size(width: int, height: int) -&gt; tuple[int, int]\n</code></pre> <p>Calculate the final output size after upscaling some input size</p> Source code in <code>Broken/Externals/Upscaler/__init__.py</code> <pre><code>def output_size(self, width: int, height: int) -&gt; tuple[int, int]:\n    \"\"\"Calculate the final output size after upscaling some input size\"\"\"\n    return BrokenResolution.fit(\n        old=(width, height),\n        new=(self.width or None, self.height or None),\n        scale=(self.scale**self.passes),\n        ar=(width/height)\n    )\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.UpscalerBase.path_image","title":"path_image","text":"<pre><code>path_image(\n    image: Optional[LoadableImage] = None,\n) -&gt; Iterable[Path]\n</code></pre> Source code in <code>Broken/Externals/Upscaler/__init__.py</code> <pre><code>@contextlib.contextmanager\ndef path_image(self, image: Optional[LoadableImage]=None) -&gt; Iterable[Path]:\n    image = LoadImage(image)\n    try:\n        # Note: No context because NTFS only allows one fd per path\n        file = Path(tempfile.NamedTemporaryFile(\n            suffix=f\".{denum(self.format)}\").name,\n            delete=(image is None),\n        )\n        if image is ImageType:\n            pass\n        elif isinstance(image, ImageType):\n            image.save(file, quality=self.quality)\n        elif isinstance(image, Path) and Path(image).exists():\n            shutil.copy(image, file)\n        yield file\n    finally:\n        file.unlink()\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.UpscalerBase.upscale","title":"upscale","text":"<pre><code>upscale(\n    image: LoadableImage,\n    output: Union[Path, ImageType] = ImageType,\n    **config\n) -&gt; Union[Path, ImageType]\n</code></pre> <p>Upscale some input image given by its path or Image object.</p> <p>Parameters:</p> <ul> <li> <code>input</code>           \u2013            <p>The input image to upscale</p> </li> <li> <code>output</code>               (<code>Union[Path, ImageType]</code>, default:                   <code>ImageType</code> )           \u2013            <p>The output path to save or <code>Image</code> class for a Image object</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[Path, ImageType]</code>           \u2013            <p>The upscaled image as a PIL Image object if <code>output</code> is <code>Image</code>, else the output Path</p> </li> </ul> Source code in <code>Broken/Externals/Upscaler/__init__.py</code> <pre><code>def upscale(self,\n    image: LoadableImage,\n    output: Union[Path, ImageType]=ImageType,\n    **config\n) -&gt; Union[Path, ImageType]:\n    \"\"\"\n    Upscale some input image given by its path or Image object.\n\n    Args:\n        input:  The input image to upscale\n        output: The output path to save or `Image` class for a Image object\n\n    Returns:\n        The upscaled image as a PIL Image object if `output` is `Image`, else the output Path\n    \"\"\"\n\n    # Convenience: Direct configs\n    for (key, val) in config.items():\n        if hasattr(self, key):\n            setattr(self, key, val)\n\n    # Input image must be a valid image\n    if not (image := LoadImage(image)):\n        raise ValueError(\"Invalid input Image for upscaling\")\n\n    # Only valid output for str is Path\n    if isinstance(output, str):\n        output = Path(output)\n\n    # Calculate expected output size\n    target = self.output_size(*image.size)\n\n    # Optimization: Return if output matches target\n    if isinstance(output, Path) and output.exists():\n        if (Image.open(output).size == target):\n            return output\n\n    # Optimization: Return if input matches target\n    if (target == image.size):\n        return image\n\n    # If the image has transparency: Split in RGB+A, upscale RGB,\n    # resize A to target resolution, merge it back later\n    if (transparent := any((\n        image.mode == \"RGBA\",\n        image.info.get(\"transparency\", None),\n    )) and (not isinstance(self, NoUpscaler))):\n        _, _, _, alpha = image.split()\n        alpha = alpha.resize(target)\n\n    # Convert to RGB for working\n    image = image.convert(\"RGB\")\n\n    # Upscale core logic\n    with self.path_image(image) as temp_input:\n        for _ in range(self.passes):\n            image.save(temp_input, quality=self.quality)\n            image = self._upscale(image, **config)\n\n        # Resize to match the expected final size\n        image = image.resize(target, Image.LANCZOS)\n\n        # Merge the alpha layer\n        if transparent:\n            image = image.convert(\"RGBA\")\n            image.putalpha(alpha)\n\n        # Save or return the image\n        if isinstance(output, Path):\n            image.save(output, quality=self.quality)\n            return output\n        return image\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.PillowUpscaler","title":"PillowUpscaler","text":"<p>               Bases: <code>UpscalerBase</code></p> Source code in <code>Broken/Externals/Upscaler/__init__.py</code> <pre><code>class PillowUpscaler(UpscalerBase):\n    type: Annotated[Literal[\"pillow\"], BrokenTyper.exclude()] = \"pillow\"\n\n    def _load_model(self):\n        pass\n\n    def _upscale(self, image: ImageType) -&gt; ImageType:\n        return image.resize(self.output_size(*image.size), Image.LANCZOS)\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.PillowUpscaler.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"pillow\"], BrokenTyper.exclude()\n] = \"pillow\"\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.NoUpscaler","title":"NoUpscaler","text":"<p>               Bases: <code>UpscalerBase</code></p> Source code in <code>Broken/Externals/Upscaler/__init__.py</code> <pre><code>class NoUpscaler(UpscalerBase):\n    type: Annotated[Literal[\"none\"], BrokenTyper.exclude()] = \"none\"\n\n    def _load_model(self):\n        pass\n\n    def upscale(self, *args, **kwargs) -&gt; ImageType:\n        return args[0]\n\n    def _upscale(self, image: ImageType) -&gt; ImageType:\n        return image\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.NoUpscaler.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"none\"], BrokenTyper.exclude()] = (\n    \"none\"\n)\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.NoUpscaler.upscale","title":"upscale","text":"<pre><code>upscale(*args, **kwargs) -&gt; ImageType\n</code></pre> Source code in <code>Broken/Externals/Upscaler/__init__.py</code> <pre><code>def upscale(self, *args, **kwargs) -&gt; ImageType:\n    return args[0]\n</code></pre>"},{"location":"code/broken/externals/upscaler/__init__/#Broken.Externals.Upscaler.BrokenUpscaler","title":"BrokenUpscaler","text":"<pre><code>BrokenUpscaler: TypeAlias = Union[\n    UpscalerBase,\n    NoUpscaler,\n    PillowUpscaler,\n    Realesr,\n    Upscayl,\n    Waifu2x,\n]\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/","title":"File: <code>Broken/Externals/Upscaler/ncnn.py</code>","text":""},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn","title":"Broken.Externals.Upscaler.ncnn","text":""},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.UpscalerNCNN_Base","title":"UpscalerNCNN_Base","text":"<p>               Bases: <code>UpscalerBase</code></p> Source code in <code>Broken/Externals/Upscaler/ncnn.py</code> <pre><code>class UpscalerNCNN_Base(UpscalerBase):\n    denoise: Annotated[int, Option(\"--denoise\", \"-n\", min=0, max=3,\n        help=\"[bold yellow](\ud83d\udfe1 Specific)[/] Denoiser intensity. Great for digital art, 'fake, uncanny' otherwise\")] = \\\n        Field(3, gt=-1)\n\n    tile_size: Annotated[int, Option(\"--tile-size\", \"-t\", min=0,\n        help=\"[bold yellow](\ud83d\udfe1 Specific)[/] Processing chunk size, increases VRAM and Speed, 0 is auto, must be &gt;= 32\")] = \\\n        Field(0, gt=-1)\n\n    tta: Annotated[bool, Option(\"--tta\", \"-x\",\n        help=\"[bold yellow](\ud83d\udfe1 Specific)[/] Enable test-time augmentation (Similar to SSAA) [red](8x SLOWER)[/]\")] = \\\n        Field(False)\n\n    cpu: Annotated[bool, Option(\"--cpu\", \"-c\",\n        help=\"[bold yellow](\ud83d\udfe1 Specific)[/] Use CPU for processing instead of the GPU [yellow](SLOW)[/]\")] = \\\n        Field(False)\n\n    gpu: Annotated[int, Option(\"--gpu\", \"-g\", min=0,\n        help=\"[bold yellow](\ud83d\udfe1 Specific)[/] Use the Nth GPU for processing\")] = \\\n        Field(0, gt=-1)\n\n    load_threads: Annotated[int, Option(\"--load-threads\", \"-lt\", min=1,\n        help=\"[bold green](\ud83d\udfe2 Advanced)[bold yellow] Number of Load Threads\")] \\\n        = Field(1, gt=0)\n\n    proc_threads: Annotated[int, Option(\"--proc-threads\", \"-pt\", min=1,\n        help=\"[bold green](\ud83d\udfe2 Advanced)[bold yellow] Number of Process Threads\")] \\\n        = Field(2, gt=0)\n\n    save_threads: Annotated[int, Option(\"--save-threads\", \"-st\", min=1,\n        help=\"[bold green](\ud83d\udfe2 Advanced)[bold yellow] Number of Saving Threads\")] \\\n        = Field(2, gt=0)\n\n    @property\n    def _lpc(self) -&gt; str:\n        return f\"{self.load_threads}:{self.proc_threads}:{self.save_threads}\"\n\n    def _single_core(self):\n        \"\"\"Make the process only use one random core\"\"\"\n        import os\n        import random\n        import resource\n        core = random.choice(range(os.cpu_count()))\n        os.sched_setaffinity(0, {core})\n        resource.setrlimit(resource.RLIMIT_CPU, (1, 1))\n\n    @field_validator(\"tile_size\", mode=\"plain\")\n    def _validate_tile_size(cls, value):\n        if not ((value == 0) or (value &gt;= 32)):\n            raise ValueError(\"Tile size must be 0 or &gt;= 32 for NCNN Upscalers\")\n        return value\n\n    # # Metadata for automatic downloads\n\n    @staticmethod\n    @abstractmethod\n    def _download_url() -&gt; str:\n        \"\"\"https://.../stuff-{platform}.zip\"\"\"\n        ...\n\n    @staticmethod\n    @abstractmethod\n    def _binary_name() -&gt; str:\n        ...\n\n    def download(self) -&gt; Path:\n        BrokenPath.update_externals_path()\n        if (binary := shutil.which(self._binary_name())):\n            return BrokenPath.get(binary)\n        EXECUTABLE = self._binary_name() + (\".exe\"*BrokenPlatform.OnWindows)\n        return BrokenPath.make_executable(next(BrokenPath.get_external(self._download_url()).rglob(EXECUTABLE)))\n\n    def _load_model(self):\n        self.download()\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.UpscalerNCNN_Base.denoise","title":"denoise","text":"<pre><code>denoise: Annotated[\n    int,\n    Option(\n        --denoise,\n        -n,\n        min=0,\n        max=3,\n        help=\"[bold yellow](\ud83d\udfe1 Specific)[/] Denoiser intensity. Great for digital art, 'fake, uncanny' otherwise\",\n    ),\n] = Field(3, gt=-1)\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.UpscalerNCNN_Base.tile_size","title":"tile_size","text":"<pre><code>tile_size: Annotated[\n    int,\n    Option(\n        --tile - size,\n        -t,\n        min=0,\n        help=\"[bold yellow](\ud83d\udfe1 Specific)[/] Processing chunk size, increases VRAM and Speed, 0 is auto, must be &gt;= 32\",\n    ),\n] = Field(0, gt=-1)\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.UpscalerNCNN_Base.tta","title":"tta","text":"<pre><code>tta: Annotated[\n    bool,\n    Option(\n        --tta,\n        -x,\n        help=\"[bold yellow](\ud83d\udfe1 Specific)[/] Enable test-time augmentation (Similar to SSAA) [red](8x SLOWER)[/]\",\n    ),\n] = Field(False)\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.UpscalerNCNN_Base.cpu","title":"cpu","text":"<pre><code>cpu: Annotated[\n    bool,\n    Option(\n        --cpu,\n        -c,\n        help=\"[bold yellow](\ud83d\udfe1 Specific)[/] Use CPU for processing instead of the GPU [yellow](SLOW)[/]\",\n    ),\n] = Field(False)\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.UpscalerNCNN_Base.gpu","title":"gpu","text":"<pre><code>gpu: Annotated[\n    int,\n    Option(\n        --gpu,\n        -g,\n        min=0,\n        help=\"[bold yellow](\ud83d\udfe1 Specific)[/] Use the Nth GPU for processing\",\n    ),\n] = Field(0, gt=-1)\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.UpscalerNCNN_Base.load_threads","title":"load_threads","text":"<pre><code>load_threads: Annotated[\n    int,\n    Option(\n        --load - threads,\n        -lt,\n        min=1,\n        help=\"[bold green](\ud83d\udfe2 Advanced)[bold yellow] Number of Load Threads\",\n    ),\n] = Field(1, gt=0)\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.UpscalerNCNN_Base.proc_threads","title":"proc_threads","text":"<pre><code>proc_threads: Annotated[\n    int,\n    Option(\n        --proc - threads,\n        -pt,\n        min=1,\n        help=\"[bold green](\ud83d\udfe2 Advanced)[bold yellow] Number of Process Threads\",\n    ),\n] = Field(2, gt=0)\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.UpscalerNCNN_Base.save_threads","title":"save_threads","text":"<pre><code>save_threads: Annotated[\n    int,\n    Option(\n        --save - threads,\n        -st,\n        min=1,\n        help=\"[bold green](\ud83d\udfe2 Advanced)[bold yellow] Number of Saving Threads\",\n    ),\n] = Field(2, gt=0)\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.UpscalerNCNN_Base.download","title":"download","text":"<pre><code>download() -&gt; Path\n</code></pre> Source code in <code>Broken/Externals/Upscaler/ncnn.py</code> <pre><code>def download(self) -&gt; Path:\n    BrokenPath.update_externals_path()\n    if (binary := shutil.which(self._binary_name())):\n        return BrokenPath.get(binary)\n    EXECUTABLE = self._binary_name() + (\".exe\"*BrokenPlatform.OnWindows)\n    return BrokenPath.make_executable(next(BrokenPath.get_external(self._download_url()).rglob(EXECUTABLE)))\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Waifu2x","title":"Waifu2x","text":"<p>               Bases: <code>UpscalerNCNN_Base</code></p> <p>Configure and use Waifu2x    dim[/]</p> Source code in <code>Broken/Externals/Upscaler/ncnn.py</code> <pre><code>class Waifu2x(UpscalerNCNN_Base):\n    \"\"\"Configure and use Waifu2x    [dim](by https://github.com/nihui/waifu2x-ncnn-vulkan)[/]\"\"\"\n    type: Annotated[Literal[\"waifu2x\"], BrokenTyper.exclude()] = \"waifu2x\"\n\n    class Model(str, BrokenEnum):\n        models_cunet = \"models_cunet\"\n        models_upconv_7_anime_style_art_rgb = \"models_upconv_7_anime_style_art_rgb\"\n        models_upconv_7_photo = \"models_upconv_7_photo\"\n\n    model: Annotated[Model, Option(\"--model\", \"-m\",\n        help=\"(\ud83d\udd35 Special ) Model to use for Waifu2x\")] = \\\n        Field(Model.models_cunet)\n\n    @staticmethod\n    def _download_url() -&gt; str:\n        release, tag = (\"https://github.com/nihui/waifu2x-ncnn-vulkan/releases/download\", \"20220728\")\n        return f\"{release}/{tag}/waifu2x-ncnn-vulkan-{tag}-{BrokenPlatform.System.replace('linux', 'ubuntu')}.zip\"\n\n    @staticmethod\n    def _binary_name() -&gt; str:\n        return \"waifu2x-ncnn-vulkan\"\n\n    @field_validator(\"scale\", mode=\"plain\")\n    def _validate_scale(cls, value):\n        if value not in (allowed := {1, 2, 4, 8, 16, 32}):\n            raise ValueError(f\"Scale must be one of {allowed} for Waifu2x\")\n        return value\n\n    @field_validator(\"denoise\", mode=\"plain\")\n    def _validate_denoise(cls, value):\n        if value not in (allowed := {-1, 0, 1, 2, 3}):\n            raise ValueError(f\"Denoise must be one of {allowed} for Waifu2x\")\n        return value\n\n    def _upscale(self,\n        input: ImageType, *,\n        echo: bool=True,\n        single_core: bool=False\n    ) -&gt; ImageType:\n        with self.path_image() as output:\n            with self.path_image(input) as input:\n                shell(\n                    self.download(),\n                    \"-i\", input,\n                    \"-o\", output,\n                    every(\"-n\", self.denoise),\n                    every(\"-s\", self.scale),\n                    every(\"-t\", self.tile_size),\n                    \"-g\", self.gpu if not self.cpu else -1,\n                    \"-j\", self._lpc,\n                    \"-x\"*self.tta,\n                    # \"-m\", self.model.value, # Fixme: Doko?\n                    preexec_fn=(self._single_core if single_core else None),\n                    cwd=self.download().parent,\n                    stderr=DEVNULL,\n                    echo=echo,\n                )\n                return Image.open(io.BytesIO(output.read_bytes()))\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Waifu2x.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"waifu2x\"], BrokenTyper.exclude()\n] = \"waifu2x\"\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Waifu2x.Model","title":"Model","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/Upscaler/ncnn.py</code> <pre><code>class Model(str, BrokenEnum):\n    models_cunet = \"models_cunet\"\n    models_upconv_7_anime_style_art_rgb = \"models_upconv_7_anime_style_art_rgb\"\n    models_upconv_7_photo = \"models_upconv_7_photo\"\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Waifu2x.Model.models_cunet","title":"models_cunet","text":"<pre><code>models_cunet = 'models_cunet'\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Waifu2x.Model.models_upconv_7_anime_style_art_rgb","title":"models_upconv_7_anime_style_art_rgb","text":"<pre><code>models_upconv_7_anime_style_art_rgb = (\n    \"models_upconv_7_anime_style_art_rgb\"\n)\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Waifu2x.Model.models_upconv_7_photo","title":"models_upconv_7_photo","text":"<pre><code>models_upconv_7_photo = 'models_upconv_7_photo'\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Waifu2x.model","title":"model","text":"<pre><code>model: Annotated[\n    Model,\n    Option(\n        --model,\n        -m,\n        help=\"(\ud83d\udd35 Special ) Model to use for Waifu2x\",\n    ),\n] = Field(Model.models_cunet)\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Realesr","title":"Realesr","text":"<p>               Bases: <code>UpscalerNCNN_Base</code></p> <p>Configure and use RealESRGAN dim[/]</p> Source code in <code>Broken/Externals/Upscaler/ncnn.py</code> <pre><code>class Realesr(UpscalerNCNN_Base):\n    \"\"\"Configure and use RealESRGAN [dim](by https://github.com/xinntao/Real-ESRGAN)[/]\"\"\"\n    type: Annotated[Literal[\"realesr\"], BrokenTyper.exclude()] = \"realesr\"\n\n    class Model(str, BrokenEnum):\n        realesr_animevideov3    = \"realesr_animevideov3\"\n        realesrgan_x4plus       = \"realesrgan_x4plus\"\n        realesrgan_x4plus_anime = \"realesrgan_x4plus_anime\"\n        realesrnet_x4plus       = \"realesrnet_x4plus\"\n\n    model: Annotated[Model, Option(\"--model\", \"-m\",\n        help=\"(\ud83d\udd35 Special ) Model to use for RealESRGAN\")] = \\\n        Field(Model.realesr_animevideov3)\n\n    @staticmethod\n    def _download_url() -&gt; str:\n        release, tag, version = (\"https://github.com/xinntao/Real-ESRGAN/releases/download\", \"v0.2.5.0\", \"20220424\")\n        return f\"{release}/{tag}/realesrgan-ncnn-vulkan-{version}-{BrokenPlatform.System.replace('linux', 'ubuntu')}.zip\"\n\n    @staticmethod\n    def _binary_name() -&gt; str:\n        return \"realesrgan-ncnn-vulkan\"\n\n    @field_validator(\"scale\", mode=\"plain\")\n    def _validate_scale(cls, value):\n        if value not in (allowed := {1, 2, 3, 4}):\n            raise ValueError(f\"Scale must be one of {allowed} for RealESRGAN\")\n        return value\n\n    def _upscale(self,\n        input: ImageType, *,\n        echo: bool=True,\n        single_core: bool=False\n    ) -&gt; ImageType:\n        with self.path_image() as output:\n            with self.path_image(input) as input:\n                shell(\n                    self.download(),\n                    \"-i\", input,\n                    \"-o\", output,\n                    every(\"-s\", self.scale),\n                    every(\"-t\", self.tile_size),\n                    every(\"-g\", self.gpu if not self.cpu else -1),\n                    every(\"-n\", self.model.name.replace(\"_\", \"-\")),\n                    \"-j\", self._lpc,\n                    \"-x\"*self.tta,\n                    stderr=DEVNULL,\n                    preexec_fn=(self._single_core if single_core else None),\n                    cwd=self.download().parent,\n                    echo=echo,\n                )\n                return Image.open(io.BytesIO(output.read_bytes()))\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Realesr.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"realesr\"], BrokenTyper.exclude()\n] = \"realesr\"\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Realesr.Model","title":"Model","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/Upscaler/ncnn.py</code> <pre><code>class Model(str, BrokenEnum):\n    realesr_animevideov3    = \"realesr_animevideov3\"\n    realesrgan_x4plus       = \"realesrgan_x4plus\"\n    realesrgan_x4plus_anime = \"realesrgan_x4plus_anime\"\n    realesrnet_x4plus       = \"realesrnet_x4plus\"\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Realesr.Model.realesr_animevideov3","title":"realesr_animevideov3","text":"<pre><code>realesr_animevideov3 = 'realesr_animevideov3'\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Realesr.Model.realesrgan_x4plus","title":"realesrgan_x4plus","text":"<pre><code>realesrgan_x4plus = 'realesrgan_x4plus'\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Realesr.Model.realesrgan_x4plus_anime","title":"realesrgan_x4plus_anime","text":"<pre><code>realesrgan_x4plus_anime = 'realesrgan_x4plus_anime'\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Realesr.Model.realesrnet_x4plus","title":"realesrnet_x4plus","text":"<pre><code>realesrnet_x4plus = 'realesrnet_x4plus'\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Realesr.model","title":"model","text":"<pre><code>model: Annotated[\n    Model,\n    Option(\n        --model,\n        -m,\n        help=\"(\ud83d\udd35 Special ) Model to use for RealESRGAN\",\n    ),\n] = Field(Model.realesr_animevideov3)\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Upscayl","title":"Upscayl","text":"<p>               Bases: <code>UpscalerNCNN_Base</code></p> <p>Configure and use Upscayl    dim[/]</p> Source code in <code>Broken/Externals/Upscaler/ncnn.py</code> <pre><code>class Upscayl(UpscalerNCNN_Base):\n    \"\"\"Configure and use Upscayl    [dim](by https://github.com/upscayl/upscayl)[/]\"\"\"\n    type: Annotated[Literal[\"upscayl\"], BrokenTyper.exclude()] = \"upscayl\"\n\n    class Model(str, BrokenEnum):\n        DigitalArt      = \"digital-art\"\n        HighFidelity    = \"high-fidelity\"\n        Remacri         = \"remacri\"\n        Ultramix        = \"ultramix-balanced\"\n        Ultrasharp      = \"ultrasharp\"\n        UpscaylLite     = \"upscayl-lite\"\n        UpscaylStandard = \"upscayl-standard\"\n\n    model: Annotated[Model, Option(\"--model\", \"-m\",\n        help=\"(\ud83d\udd35 Special ) Model to use for Upscayl\")] = \\\n        Field(Model.DigitalArt)\n\n    @staticmethod\n    def _download_url() -&gt; str:\n        release, tag = (\"https://github.com/upscayl/upscayl/releases/download\", \"2.15.0\")\n        platform = BrokenPlatform.System.replace(\"windows\", \"win\").replace(\"macos\", \"mac\")\n        return f\"{release}/v{tag}/upscayl-{tag}-{platform}.zip\"\n\n    @staticmethod\n    def _binary_name() -&gt; str:\n        return \"upscayl-bin\"\n\n    def download(self) -&gt; Path:\n        if BrokenPlatform.OnLinux:\n            BrokenPath.add_to_path(\"/opt/Upscayl/resources/bin\") # Ubuntu package\n            BrokenPath.add_to_path(\"/opt/upscayl/bin\") # Arch Linux\n        return UpscalerNCNN_Base.download(self)\n\n    @field_validator(\"scale\", mode=\"plain\")\n    def _validate_scale(cls, value):\n        if value not in (allowed := {2, 3, 4}):\n            raise ValueError(f\"Scale must be one of {allowed} for Upscayl\")\n        return value\n\n    @field_validator(\"denoise\", mode=\"plain\")\n    def _validate_denoise(cls, value):\n        if value not in (allowed := {-1, 0, 1, 2, 3}):\n            raise ValueError(f\"Denoise must be one of {allowed} for Upscayl\")\n        return value\n\n    def _upscale(self,\n        input: ImageType, *,\n        echo: bool=True,\n        single_core: bool=False\n    ) -&gt; ImageType:\n        with self.path_image() as output:\n            with self.path_image(input) as input:\n                binary = self.download()\n                shell(\n                    binary,\n                    \"-i\", input,\n                    \"-o\", output,\n                    \"-m\", \"../models\",\n                    every(\"-s\", self.scale),\n                    every(\"-t\", self.tile_size),\n                    \"-g\", (self.gpu if not self.cpu else -1),\n                    \"-j\", self._lpc,\n                    \"-x\"*self.tta,\n                    \"-n\", denum(self.model) + \"-4x\",\n                    preexec_fn=(self._single_core if single_core else None),\n                    stderr=DEVNULL,\n                    echo=echo,\n                )\n                return Image.open(io.BytesIO(output.read_bytes()))\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Upscayl.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"upscayl\"], BrokenTyper.exclude()\n] = \"upscayl\"\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Upscayl.Model","title":"Model","text":"<p>               Bases: <code>str</code>, <code>BrokenEnum</code></p> Source code in <code>Broken/Externals/Upscaler/ncnn.py</code> <pre><code>class Model(str, BrokenEnum):\n    DigitalArt      = \"digital-art\"\n    HighFidelity    = \"high-fidelity\"\n    Remacri         = \"remacri\"\n    Ultramix        = \"ultramix-balanced\"\n    Ultrasharp      = \"ultrasharp\"\n    UpscaylLite     = \"upscayl-lite\"\n    UpscaylStandard = \"upscayl-standard\"\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Upscayl.Model.DigitalArt","title":"DigitalArt","text":"<pre><code>DigitalArt = 'digital-art'\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Upscayl.Model.HighFidelity","title":"HighFidelity","text":"<pre><code>HighFidelity = 'high-fidelity'\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Upscayl.Model.Remacri","title":"Remacri","text":"<pre><code>Remacri = 'remacri'\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Upscayl.Model.Ultramix","title":"Ultramix","text":"<pre><code>Ultramix = 'ultramix-balanced'\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Upscayl.Model.Ultrasharp","title":"Ultrasharp","text":"<pre><code>Ultrasharp = 'ultrasharp'\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Upscayl.Model.UpscaylLite","title":"UpscaylLite","text":"<pre><code>UpscaylLite = 'upscayl-lite'\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Upscayl.Model.UpscaylStandard","title":"UpscaylStandard","text":"<pre><code>UpscaylStandard = 'upscayl-standard'\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Upscayl.model","title":"model","text":"<pre><code>model: Annotated[\n    Model,\n    Option(\n        --model,\n        -m,\n        help=\"(\ud83d\udd35 Special ) Model to use for Upscayl\",\n    ),\n] = Field(Model.DigitalArt)\n</code></pre>"},{"location":"code/broken/externals/upscaler/ncnn/#Broken.Externals.Upscaler.ncnn.Upscayl.download","title":"download","text":"<pre><code>download() -&gt; Path\n</code></pre> Source code in <code>Broken/Externals/Upscaler/ncnn.py</code> <pre><code>def download(self) -&gt; Path:\n    if BrokenPlatform.OnLinux:\n        BrokenPath.add_to_path(\"/opt/Upscayl/resources/bin\") # Ubuntu package\n        BrokenPath.add_to_path(\"/opt/upscayl/bin\") # Arch Linux\n    return UpscalerNCNN_Base.download(self)\n</code></pre>"},{"location":"code/depthflow/__init__/","title":"File: <code>DepthFlow/__init__.py</code>","text":""},{"location":"code/depthflow/__init__/#DepthFlow","title":"DepthFlow","text":""},{"location":"code/depthflow/__init__/#DepthFlow.DEPTHFLOW_ABOUT","title":"DEPTHFLOW_ABOUT","text":"<pre><code>DEPTHFLOW_ABOUT = \"\\n\ud83c\udf0a Images to \u2192 3D Parallax effect video. A free and open source ImmersityAI alternative.\\n\\n\\n\u2192 See the [blue link=https://brokensrc.dev/depthflow/]Website[/] for examples and more information!\\n\\n\"\n</code></pre>"},{"location":"code/depthflow/__init__/#DepthFlow.DEPTHFLOW","title":"DEPTHFLOW","text":"<pre><code>DEPTHFLOW = BrokenProject(\n    PACKAGE=__file__,\n    APP_NAME=\"DepthFlow\",\n    APP_AUTHOR=\"BrokenSource\",\n    RESOURCES=DepthFlowResources,\n    ABOUT=DEPTHFLOW_ABOUT,\n)\n</code></pre>"},{"location":"code/depthflow/__main__/","title":"File: <code>DepthFlow/__main__.py</code>","text":""},{"location":"code/depthflow/__main__/#DepthFlow.__main__","title":"DepthFlow.__main__","text":""},{"location":"code/depthflow/__main__/#DepthFlow.__main__.depthflow","title":"depthflow","text":"<pre><code>depthflow() -&gt; None\n</code></pre> <p>\ud83d\ude80 Run DepthFlow's [bold green]Command line interface[/]</p> Source code in <code>Projects/DepthFlow/DepthFlow/__main__.py</code> <pre><code>def depthflow() -&gt; None:\n    \"\"\"\ud83d\ude80 Run DepthFlow's [bold green]Command line interface[/]\"\"\"\n    from DepthFlow.Scene import DepthScene\n    DepthScene().cli(*sys.argv[1:])\n</code></pre>"},{"location":"code/depthflow/__main__/#DepthFlow.__main__.gradio","title":"gradio","text":"<pre><code>gradio() -&gt; None\n</code></pre> <p>\ud83c\udf93 Run DepthFlow's [bold green]Gradio user interface[/]</p> Source code in <code>Projects/DepthFlow/DepthFlow/__main__.py</code> <pre><code>def gradio() -&gt; None:\n    \"\"\"\ud83c\udf93 Run DepthFlow's [bold green]Gradio user interface[/]\"\"\"\n    log.minor(\"Launching the DepthFlow WebUI\")\n    from DepthFlow.Webui import DepthGradio\n    BrokenTyper.simple(DepthGradio().launch)\n</code></pre>"},{"location":"code/depthflow/__main__/#DepthFlow.__main__.server","title":"server","text":"<pre><code>server() -&gt; None\n</code></pre> <p>\ud83c\udf10 Run DepthFlow's [bold green]API Server[/]</p> Source code in <code>Projects/DepthFlow/DepthFlow/__main__.py</code> <pre><code>def server() -&gt; None:\n    \"\"\"\ud83c\udf10 Run DepthFlow's [bold green]API Server[/]\"\"\"\n    log.minor(\"Launching the DepthFlow API Server\")\n    from DepthFlow.Server import DepthServer\n    DepthServer().cli(*sys.argv[1:])\n</code></pre>"},{"location":"code/depthflow/__main__/#DepthFlow.__main__.main","title":"main","text":"<pre><code>main() -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/__main__.py</code> <pre><code>def main() -&gt; None:\n    with BrokenProfiler(\"DEPTHFLOW\"):\n        BrokenTyper.complex(\n            main=depthflow,\n            nested=(depthflow, gradio, server),\n            simple=BrokenTorch.install,\n        )\n</code></pre>"},{"location":"code/depthflow/animation/","title":"File: <code>DepthFlow/Animation.py</code>","text":""},{"location":"code/depthflow/animation/#DepthFlow.Animation","title":"DepthFlow.Animation","text":""},{"location":"code/depthflow/animation/#DepthFlow.Animation.ClassEnum","title":"ClassEnum","text":"Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class ClassEnum:\n\n    @classmethod\n    def members(cls) -&gt; Iterable[type]:\n        for name in dir(cls):\n            if name.startswith(\"_\"):\n                continue\n            if (name == \"members\"):\n                continue\n            yield getattr(cls, name)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.ClassEnum.members","title":"members","text":"<pre><code>members() -&gt; Iterable[type]\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>@classmethod\ndef members(cls) -&gt; Iterable[type]:\n    for name in dir(cls):\n        if name.startswith(\"_\"):\n            continue\n        if (name == \"members\"):\n            continue\n        yield getattr(cls, name)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target","title":"Target","text":"<p>               Bases: <code>MultiEnum</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Target(MultiEnum):\n    Nothing           = \"nothing\"\n    Height            = \"height\"\n    Steady            = \"steady\"\n    Focus             = \"focus\"\n    Zoom              = \"zoom\"\n    Isometric         = \"isometric\"\n    Dolly             = \"dolly\"\n    Invert            = \"invert\"\n    Mirror            = \"mirror\"\n    CenterX           = \"center-x\"\n    CenterY           = \"center-y\"\n    OriginX           = \"origin-x\"\n    OriginY           = \"origin-y\"\n    OffsetX           = \"offset-x\"\n    OffsetY           = \"offset-y\"\n    VignetteEnable    = \"vignette.enable\"\n    VignetteIntensity = \"vignette.intensity\"\n    VignetteDecay     = \"vignette.decay\"\n    LensEnable        = \"lens.enable\"\n    LensIntensity     = \"lens.intensity\"\n    LensDecay         = \"lens.decay\"\n    LensQuality       = \"lens.quality\"\n    BlurEnable        = \"blur.enable\"\n    BlurStart         = \"blur.start\"\n    BlurEnd           = \"blur.end\"\n    BlurExponent      = \"blur.exponent\"\n    BlurIntensity     = \"blur.intensity\"\n    BlurQuality       = \"blur.quality\"\n    BlurDirections    = \"blur.directions\"\n    InpaintEnable     = \"inpaint.enable\"\n    InpaintBlack      = \"inpaint.black\"\n    InpaintLimit      = \"inpaint.limit\"\n    ColorEnable       = \"colors.enable\"\n    ColorSaturation   = \"colors.saturation\"\n    ColorContrast     = \"colors.contrast\"\n    ColorBrightness   = \"colors.brightness\"\n    ColorGamma        = \"colors.gamma\"\n    ColorGrayscale    = \"colors.grayscale\"\n    ColorSepia        = \"colors.sepia\"\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.Nothing","title":"Nothing","text":"<pre><code>Nothing = 'nothing'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.Height","title":"Height","text":"<pre><code>Height = 'height'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.Steady","title":"Steady","text":"<pre><code>Steady = 'steady'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.Focus","title":"Focus","text":"<pre><code>Focus = 'focus'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.Zoom","title":"Zoom","text":"<pre><code>Zoom = 'zoom'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.Isometric","title":"Isometric","text":"<pre><code>Isometric = 'isometric'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.Dolly","title":"Dolly","text":"<pre><code>Dolly = 'dolly'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.Invert","title":"Invert","text":"<pre><code>Invert = 'invert'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.Mirror","title":"Mirror","text":"<pre><code>Mirror = 'mirror'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.CenterX","title":"CenterX","text":"<pre><code>CenterX = 'center-x'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.CenterY","title":"CenterY","text":"<pre><code>CenterY = 'center-y'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.OriginX","title":"OriginX","text":"<pre><code>OriginX = 'origin-x'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.OriginY","title":"OriginY","text":"<pre><code>OriginY = 'origin-y'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.OffsetX","title":"OffsetX","text":"<pre><code>OffsetX = 'offset-x'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.OffsetY","title":"OffsetY","text":"<pre><code>OffsetY = 'offset-y'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.VignetteEnable","title":"VignetteEnable","text":"<pre><code>VignetteEnable = 'vignette.enable'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.VignetteIntensity","title":"VignetteIntensity","text":"<pre><code>VignetteIntensity = 'vignette.intensity'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.VignetteDecay","title":"VignetteDecay","text":"<pre><code>VignetteDecay = 'vignette.decay'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.LensEnable","title":"LensEnable","text":"<pre><code>LensEnable = 'lens.enable'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.LensIntensity","title":"LensIntensity","text":"<pre><code>LensIntensity = 'lens.intensity'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.LensDecay","title":"LensDecay","text":"<pre><code>LensDecay = 'lens.decay'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.LensQuality","title":"LensQuality","text":"<pre><code>LensQuality = 'lens.quality'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.BlurEnable","title":"BlurEnable","text":"<pre><code>BlurEnable = 'blur.enable'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.BlurStart","title":"BlurStart","text":"<pre><code>BlurStart = 'blur.start'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.BlurEnd","title":"BlurEnd","text":"<pre><code>BlurEnd = 'blur.end'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.BlurExponent","title":"BlurExponent","text":"<pre><code>BlurExponent = 'blur.exponent'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.BlurIntensity","title":"BlurIntensity","text":"<pre><code>BlurIntensity = 'blur.intensity'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.BlurQuality","title":"BlurQuality","text":"<pre><code>BlurQuality = 'blur.quality'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.BlurDirections","title":"BlurDirections","text":"<pre><code>BlurDirections = 'blur.directions'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.InpaintEnable","title":"InpaintEnable","text":"<pre><code>InpaintEnable = 'inpaint.enable'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.InpaintBlack","title":"InpaintBlack","text":"<pre><code>InpaintBlack = 'inpaint.black'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.InpaintLimit","title":"InpaintLimit","text":"<pre><code>InpaintLimit = 'inpaint.limit'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.ColorEnable","title":"ColorEnable","text":"<pre><code>ColorEnable = 'colors.enable'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.ColorSaturation","title":"ColorSaturation","text":"<pre><code>ColorSaturation = 'colors.saturation'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.ColorContrast","title":"ColorContrast","text":"<pre><code>ColorContrast = 'colors.contrast'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.ColorBrightness","title":"ColorBrightness","text":"<pre><code>ColorBrightness = 'colors.brightness'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.ColorGamma","title":"ColorGamma","text":"<pre><code>ColorGamma = 'colors.gamma'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.ColorGrayscale","title":"ColorGrayscale","text":"<pre><code>ColorGrayscale = 'colors.grayscale'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Target.ColorSepia","title":"ColorSepia","text":"<pre><code>ColorSepia = 'colors.sepia'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.hint","title":"hint","text":"<pre><code>hint: str = '[bold blue](\ud83d\udd35 Option)[/]'\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.TargetType","title":"TargetType","text":"<pre><code>TargetType: TypeAlias = Annotated[\n    Target,\n    Option(\n        \"--target\",\n        \"-t\",\n        help=f\"{hint} Target animation state variable to modulate\",\n    ),\n]\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.IntensityType","title":"IntensityType","text":"<pre><code>IntensityType: TypeAlias = Annotated[\n    float,\n    Option(\n        \"--intensity\",\n        \"-i\",\n        min=0,\n        max=4,\n        help=f\"{hint} Global intensity of the animation (scales all amplitudes)\",\n    ),\n]\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.ReverseType","title":"ReverseType","text":"<pre><code>ReverseType: TypeAlias = Annotated[bool, Option('--reverse', '-r', ' /--forward', ' /-fw', help=f'{hint} Time 'direction' to play the animation, makes the end the start')]\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.SmoothType","title":"SmoothType","text":"<pre><code>SmoothType: TypeAlias = Annotated[\n    bool,\n    Option(\n        \"--smooth\",\n        \"-s\",\n        \" /--linear\",\n        \" /-ns\",\n        help=f\"{hint} Use the smooth variant of the animation (often a Sine wave)\",\n    ),\n]\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.LoopType","title":"LoopType","text":"<pre><code>LoopType: TypeAlias = Annotated[\n    bool,\n    Option(\n        \"--loop\",\n        \"-l\",\n        \" /--no-loop\",\n        \" /-nl\",\n        help=f\"{hint} Loop the animation indefinitely (often 4x apparent frequency)\",\n    ),\n]\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.SteadyType","title":"SteadyType","text":"<pre><code>SteadyType: TypeAlias = Annotated[\n    float,\n    Option(\n        \"--steady\",\n        \"-S\",\n        min=-1,\n        max=2,\n        help=f\"{hint} Depth value of no displacements on camera movements\",\n    ),\n]\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.IsometricType","title":"IsometricType","text":"<pre><code>IsometricType: TypeAlias = Annotated[float, Option('--isometric', '-I', min=0, max=1, help=f'{hint} The 'flatness' of the projection, 0 is perspective, 1 is isometric')]\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.PhaseType","title":"PhaseType","text":"<pre><code>PhaseType: TypeAlias = Annotated[float, Option('--phase', '-p', min=0, max=1, help=f'{hint} Phase shift of the main animation's wave')]\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.PhaseXYZType","title":"PhaseXYZType","text":"<pre><code>PhaseXYZType: TypeAlias = Annotated[\n    tuple[float, float, float],\n    Option(\n        \"--phase\",\n        \"-p\",\n        min=0,\n        max=1,\n        help=f\"{hint} Phase shift of the horizontal, vertical and depth waves\",\n    ),\n]\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.AmplitudeXYZType","title":"AmplitudeXYZType","text":"<pre><code>AmplitudeXYZType: TypeAlias = Annotated[\n    tuple[float, float, float],\n    Option(\n        \"--amplitude\",\n        \"-a\",\n        min=-2,\n        max=2,\n        help=f\"{hint} Amplitude of the horizontal, vertical and depth waves\",\n    ),\n]\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.DepthType","title":"DepthType","text":"<pre><code>DepthType = Annotated[\n    float,\n    Option(\n        \"--depth\",\n        \"-d\",\n        min=-1,\n        max=2,\n        help=f\"{hint} Focal depth of this animation (orbit point, dolly zoom, etc.)\",\n    ),\n]\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.CumulativeType","title":"CumulativeType","text":"<pre><code>CumulativeType = Annotated[bool, Option('--cumulative', '-c', ' /--force', ' /-f', help=f'{hint} Cumulative animation, adds to the previous frame's target value')]\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.AnimationBase","title":"AnimationBase","text":"<p>               Bases: <code>BaseModel</code>, <code>ABC</code></p> <p>The simplest animation meta-type, applies anything to the scene</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class AnimationBase(BaseModel, ABC):\n    \"\"\"The simplest animation meta-type, applies anything to the scene\"\"\"\n\n    def get_time(self, scene: DepthScene) -&gt; tuple[float, float]:\n        (tau, cycle) = (scene.tau, scene.cycle)\n\n        # Fixme: Is setting phase and reversing non intuitive?\n        if getattr(self, \"reverse\", False):\n            cycle = (2*math.pi - cycle)\n            tau = (1 - tau)\n\n        return (tau, cycle)\n\n    @abstractmethod\n    def apply(self, scene: DepthScene) -&gt; None:\n        ...\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.AnimationBase.get_time","title":"get_time","text":"<pre><code>get_time(scene: DepthScene) -&gt; tuple[float, float]\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def get_time(self, scene: DepthScene) -&gt; tuple[float, float]:\n    (tau, cycle) = (scene.tau, scene.cycle)\n\n    # Fixme: Is setting phase and reversing non intuitive?\n    if getattr(self, \"reverse\", False):\n        cycle = (2*math.pi - cycle)\n        tau = (1 - tau)\n\n    return (tau, cycle)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.AnimationBase.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>@abstractmethod\ndef apply(self, scene: DepthScene) -&gt; None:\n    ...\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.ComponentBase","title":"ComponentBase","text":"<p>               Bases: <code>AnimationBase</code></p> <p>An animation type that targets a specific state variable</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class ComponentBase(AnimationBase):\n    \"\"\"An animation type that targets a specific state variable\"\"\"\n    target:     TargetType     = Field(Target.Nothing)\n    cumulative: CumulativeType = Field(False)\n\n    def current(self, scene: DepthScene) -&gt; Optional[Any]:\n        return BrokenAttribute.get(\n            root=scene.state,\n            key=self.target.value\n        )\n\n    def apply(self, scene: DepthScene) -&gt; None:\n        if (self.target != Target.Nothing):\n            BrokenAttribute.set(scene.state, self.target.value, sum((\n                (self.compute(scene, *self.get_time(scene))),\n                (self.cumulative * (self.current(scene) or 0)),\n            )))\n\n    @abstractmethod\n    def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n        ...\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.ComponentBase.target","title":"target","text":"<pre><code>target: TargetType = Field(Target.Nothing)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.ComponentBase.cumulative","title":"cumulative","text":"<pre><code>cumulative: CumulativeType = Field(False)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.ComponentBase.current","title":"current","text":"<pre><code>current(scene: DepthScene) -&gt; Optional[Any]\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def current(self, scene: DepthScene) -&gt; Optional[Any]:\n    return BrokenAttribute.get(\n        root=scene.state,\n        key=self.target.value\n    )\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.ComponentBase.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene) -&gt; None:\n    if (self.target != Target.Nothing):\n        BrokenAttribute.set(scene.state, self.target.value, sum((\n            (self.compute(scene, *self.get_time(scene))),\n            (self.cumulative * (self.current(scene) or 0)),\n        )))\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.ComponentBase.compute","title":"compute","text":"<pre><code>compute(\n    scene: DepthScene, tau: float, cycle: float\n) -&gt; float\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>@abstractmethod\ndef compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n    ...\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.ReversibleComponentBase","title":"ReversibleComponentBase","text":"<p>               Bases: <code>ComponentBase</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class ReversibleComponentBase(ComponentBase):\n    reverse: ReverseType = Field(False)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.ReversibleComponentBase.reverse","title":"reverse","text":"<pre><code>reverse: ReverseType = Field(False)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.PresetBase","title":"PresetBase","text":"<p>               Bases: <code>AnimationBase</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class PresetBase(AnimationBase):\n    intensity: IntensityType = Field(1.0)\n    reverse:   ReverseType   = Field(False)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.PresetBase.intensity","title":"intensity","text":"<pre><code>intensity: IntensityType = Field(1.0)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.PresetBase.reverse","title":"reverse","text":"<pre><code>reverse: ReverseType = Field(False)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.FilterBase","title":"FilterBase","text":"<p>               Bases: <code>AnimationBase</code></p> <p>Meta-class for post processing effects</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class FilterBase(AnimationBase):\n    \"\"\"Meta-class for post processing effects\"\"\"\n    ...\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions","title":"Actions","text":"<p>               Bases: <code>ClassEnum</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Actions(ClassEnum):\n\n    # ----------------------------------------------|\n    # Special components\n\n    class State(PresetBase, DepthState):\n        def apply(self, scene: DepthScene) -&gt; None:\n            scene.state = self\n\n    class Nothing(AnimationBase):\n        type: Annotated[Literal[\"nothing\"], BrokenTyper.exclude()] = \"nothing\"\n\n        def apply(self, scene: DepthScene) -&gt; None:\n            pass\n\n    class Custom(AnimationBase):\n        type: Annotated[Literal[\"custom\"], BrokenTyper.exclude()] = \"custom\"\n\n        code: Annotated[str, Option(\"--code\", \"-c\")] = Field(\"\")\n        \"\"\"Custom code to run for the animation [yellow](be sure to trust it)[/]\"\"\"\n\n        def apply(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n            if Environment.flag(\"CUSTOM_CODE\", 0):\n                return exec(LoadString(self.code))\n            raise RuntimeError(\"Custom code execution is disabled\")\n\n    class Reset(AnimationBase):\n        type: Annotated[Literal[\"reset\"], BrokenTyper.exclude()] = \"reset\"\n\n        def apply(self, scene: DepthScene) -&gt; None:\n            scene.state = DepthState()\n\n    # ----------------------------------------------|\n    # Constant components\n\n    class _ConstantBase(ComponentBase):\n        value: Annotated[float, Option(\"--value\", \"-v\")] = Field(0.0)\n\n    class Set(_ConstantBase):\n        \"\"\"Set a constant value to some component's animation\"\"\"\n        type: Annotated[Literal[\"set\"], BrokenTyper.exclude()] = \"set\"\n\n        def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n            self.cumulative = False\n            return self.value\n\n    class Add(_ConstantBase):\n        \"\"\"Add a constant value to some component's animation\"\"\"\n        type: Annotated[Literal[\"add\"], BrokenTyper.exclude()] = \"add\"\n\n        def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n            self.cumulative = True\n            return self.value\n\n    # ----------------------------------------------|\n    # Basic components\n\n    class Linear(ReversibleComponentBase):\n        \"\"\"Add a Linear interpolation to some component's animation\"\"\"\n        type: Annotated[Literal[\"linear\"], BrokenTyper.exclude()] = \"linear\"\n\n        start: Annotated[float, Option(\"--start\", \"-t0\")] = Field(0.0)\n        \"\"\"Normalized start time\"\"\"\n\n        end: Annotated[float, Option(\"--end\", \"-t1\")] = Field(1.0)\n        \"\"\"Normalized end time\"\"\"\n\n        low: Annotated[float, Option(\"--low\", \"-v0\")] = Field(0.0)\n        \"\"\"Start value\"\"\"\n\n        hight: Annotated[float, Option(\"--high\", \"-v1\")] = Field(1.0)\n        \"\"\"End value\"\"\"\n\n        exponent: Annotated[float, Option(\"-e\", \"--exponent\")] = Field(1.0)\n        \"\"\"Exponent for shaping the interpolation\"\"\"\n\n        def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n            normal = (tau - self.start) / (self.end - self.start)\n            shaped = math.pow(max(0, min(1, normal)), self.exponent)\n            return self.low + (self.hight - self.low) * shaped\n\n    # ----------------------------------------------|\n    # Wave functions\n\n    class _WaveBase(ReversibleComponentBase):\n        amplitude: Annotated[float, Option(\"--amplitude\", \"-a\")] = Field(1.0)\n        \"\"\"Amplitude of the wave\"\"\"\n\n        bias: Annotated[float, Option(\"--bias\", \"-b\")] = Field(0.0)\n        \"\"\"Bias of the wave\"\"\"\n\n        cycles: Annotated[float, Option(\"--cycles\", \"-c\")] = Field(1.0)\n        \"\"\"Number of cycles of the wave\"\"\"\n\n        phase: Annotated[float, Option(\"--phase\", \"-p\")] = Field(0.0)\n        \"\"\"Phase shift of the wave\"\"\"\n\n    class Sine(_WaveBase):\n        \"\"\"Add a Sine wave to some component's animation [green](See 'sine --help' for options)[/]\"\"\"\n        type: Annotated[Literal[\"sine\"], BrokenTyper.exclude()] = \"sine\"\n\n        def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n            return self.amplitude * math.sin((cycle * self.cycles) + (self.phase * math.tau)) + self.bias\n\n    class Cosine(_WaveBase):\n        \"\"\"Add a Cosine wave to some component's animation [green](See 'cosine --help' for options)[/]\"\"\"\n        type: Annotated[Literal[\"cosine\"], BrokenTyper.exclude()] = \"cosine\"\n\n        def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n            return self.amplitude * math.cos((cycle * self.cycles) + (self.phase * math.tau)) + self.bias\n\n    class Triangle(_WaveBase):\n        \"\"\"Add a Triangle wave to some component's animation [green](See 'triangle --help' for options)[/]\"\"\"\n        type: Annotated[Literal[\"triangle\"], BrokenTyper.exclude()] = \"triangle\"\n\n        def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n            tau = (tau * self.cycles + self.phase + 0.25) % 1\n            return self.amplitude * (1 - 4 * abs(tau - 0.5)) + self.bias\n\n    # ----------------------------------------------|\n    # Post processing\n\n    class Vignette(FilterBase, VignetteState):\n        \"\"\"Add a Vignette effect to the video\"\"\"\n        type: Annotated[Literal[\"vignette\"], BrokenTyper.exclude()] = \"vignette\"\n\n        def apply(self, scene: DepthScene) -&gt; None:\n            scene.state.vignette = self.update(enable=True)\n\n    class Lens(FilterBase, LensState):\n        \"\"\"Add a Lens distortion effect to the video\"\"\"\n        type: Annotated[Literal[\"lens\"], BrokenTyper.exclude()] = \"lens\"\n\n        def apply(self, scene: DepthScene) -&gt; None:\n            scene.state.lens = self.update(enable=True)\n\n    class Blur(FilterBase, BlurState):\n        \"\"\"Add a Blur effect (depth of field) to the video\"\"\"\n        type: Annotated[Literal[\"blur\"], BrokenTyper.exclude()] = \"blur\"\n\n        def apply(self, scene: DepthScene) -&gt; None:\n            scene.state.blur = self.update(enable=True)\n\n    class Inpaint(FilterBase, InpaintState):\n        \"\"\"Replace steep regions with green color\"\"\"\n        type: Annotated[Literal[\"inpaint\"], BrokenTyper.exclude()] = \"inpaint\"\n\n        def apply(self, scene: DepthScene) -&gt; None:\n            scene.state.inpaint = self.update(enable=True)\n\n    class Colors(FilterBase, ColorState):\n        \"\"\"Add coloring effects to the video\"\"\"\n        type: Annotated[Literal[\"colors\"], BrokenTyper.exclude()] = \"colors\"\n\n        def apply(self, scene: DepthScene) -&gt; None:\n            scene.state.colors = self.update(enable=True)\n\n    # ----------------------------------------------|\n    # Presets\n\n    class Vertical(PresetBase):\n        \"\"\"Add a Vertical motion to the camera\"\"\"\n        type:      Annotated[Literal[\"vertical\"], BrokenTyper.exclude()] = \"vertical\"\n        smooth:    SmoothType    = Field(True)\n        loop:      LoopType      = Field(True)\n        phase:     PhaseType     = Field(0.0)\n        steady:    SteadyType    = Field(0.3)\n        isometric: IsometricType = Field(0.6)\n\n        def apply(self, scene: DepthScene) -&gt; None:\n            scene.state.isometric = self.isometric\n            scene.state.steady    = self.steady\n\n            if self.loop:\n                (Actions.Sine if self.smooth else Actions.Triangle)(\n                    target    = Target.OffsetY,\n                    amplitude = 0.8*self.intensity,\n                    phase     = self.phase,\n                    cycles    = 1.00,\n                ).apply(scene)\n            else:\n                (Actions.Sine if self.smooth else Actions.Triangle)(\n                    target    = Target.OffsetY,\n                    amplitude = self.intensity,\n                    phase     = -0.25,\n                    cycles    = 0.50,\n                ).apply(scene)\n\n    class Horizontal(PresetBase):\n        \"\"\"Add a Horizontal motion to the camera\"\"\"\n        type:      Annotated[Literal[\"horizontal\"], BrokenTyper.exclude()] = \"horizontal\"\n        smooth:    SmoothType    = Field(True)\n        loop:      LoopType      = Field(True)\n        phase:     PhaseType     = Field(0.0)\n        steady:    SteadyType    = Field(0.3)\n        isometric: IsometricType = Field(0.6)\n\n        def apply(self, scene: DepthScene) -&gt; None:\n            scene.state.isometric = self.isometric\n            scene.state.steady    = self.steady\n\n            if self.loop:\n                (Actions.Sine if self.smooth else Actions.Triangle)(\n                    target    = Target.OffsetX,\n                    amplitude = 0.8*self.intensity,\n                    phase     = self.phase,\n                    cycles    = 1.00,\n                ).apply(scene)\n            else:\n                (Actions.Sine if self.smooth else Actions.Triangle)(\n                    target    = Target.OffsetX,\n                    amplitude = self.intensity,\n                    phase     = -0.25,\n                    cycles    = 0.50,\n                ).apply(scene)\n\n    class Zoom(PresetBase):\n        \"\"\"Add a Zoom motion to the camera\"\"\"\n        type:   Annotated[Literal[\"zoom\"], BrokenTyper.exclude()] = \"zoom\"\n        smooth: SmoothType = Field(True)\n        loop:   LoopType   = Field(True)\n        phase:  PhaseType  = Field(0.0)\n\n        def apply(self, scene: DepthScene) -&gt; None:\n            if self.loop:\n                (Actions.Sine if self.smooth else Actions.Triangle)(\n                    target    = Target.Height,\n                    amplitude = (self.intensity/2),\n                    bias      = (self.intensity/2),\n                    phase     = self.phase,\n                    cycles    = 1.00,\n                    reverse   = self.reverse,\n                ).apply(scene)\n            else:\n                (Actions.Sine if self.smooth else Actions.Triangle)(\n                    target    = Target.Height,\n                    amplitude = 0.75 * self.intensity,\n                    phase     = 0.00,\n                    cycles    = 0.25,\n                    reverse   = self.reverse,\n                ).apply(scene)\n\n    class Circle(PresetBase):\n        \"\"\"Add a Circular motion to the camera\"\"\"\n        type:      Annotated[Literal[\"circle\"], BrokenTyper.exclude()] = \"circle\"\n        smooth:    SmoothType       = Field(True)\n        phase:     PhaseXYZType     = Field((0.0, 0.0, 0.0))\n        amplitude: AmplitudeXYZType = Field((1.0, 1.0, 0.0))\n        steady:    SteadyType       = Field(0.3)\n        isometric: IsometricType    = Field(0.6)\n\n        def apply(self, scene: DepthScene) -&gt; None:\n            scene.state.isometric = self.isometric\n            scene.state.steady    = self.steady\n\n            (Actions.Sine if self.smooth else Actions.Triangle)(\n                target    = Target.OffsetX,\n                amplitude = (0.5*self.intensity*self.amplitude[0]),\n                phase     = self.phase[0] + 0.25,\n                reverse   = self.reverse,\n            ).apply(scene)\n\n            (Actions.Sine if self.smooth else Actions.Triangle)(\n                target    = Target.OffsetY,\n                amplitude = (0.5*self.intensity*self.amplitude[1]),\n                phase     = self.phase[1],\n                reverse   = self.reverse,\n            ).apply(scene)\n\n    class Dolly(PresetBase):\n        \"\"\"Add a Dolly zoom to the camera\"\"\"\n        type:   Annotated[Literal[\"dolly\"], BrokenTyper.exclude()] = \"dolly\"\n        smooth: SmoothType  = Field(True)\n        loop:   LoopType    = Field(True)\n        depth:  DepthType   = Field(0.35)\n        phase:  PhaseType   = Field(0.0)\n\n        def apply(self, scene: DepthScene) -&gt; None:\n            scene.state.height = 0.5*self.intensity\n            scene.state.steady = self.depth\n            scene.state.focus  = self.depth\n\n            if self.loop:\n                phase, cycles = ( 0.75 if self.reverse else 0.25), 1.0\n            else:\n                phase, cycles = (-0.75 if self.reverse else 0.25), 0.5\n\n            (Actions.Sine if self.smooth else Actions.Triangle)(\n                target    = Target.Isometric,\n                amplitude = self.intensity/2,\n                bias      = self.intensity/2,\n                phase     = self.phase + phase,\n                reverse   = (not self.reverse),\n                cycles    = cycles,\n            ).apply(scene)\n\n    class Orbital(PresetBase):\n        \"\"\"Orbit the camera around a fixed point\"\"\"\n        type:  Annotated[Literal[\"orbital\"], BrokenTyper.exclude()] = \"orbital\"\n        depth: DepthType = Field(0.3)\n\n        def apply(self, scene: DepthScene) -&gt; None:\n            scene.state.steady = self.depth\n            scene.state.focus  = self.depth\n\n            Actions.Cosine(\n                target    = Target.Isometric,\n                amplitude = self.intensity/2,\n                bias      = self.intensity/2,\n                reverse   = self.reverse,\n            ).apply(scene)\n\n            Actions.Sine(\n                target    = Target.OffsetX,\n                amplitude = 0.5*self.intensity,\n                reverse   = self.reverse,\n            ).apply(scene)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.State","title":"State","text":"<p>               Bases: <code>PresetBase</code>, <code>DepthState</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class State(PresetBase, DepthState):\n    def apply(self, scene: DepthScene) -&gt; None:\n        scene.state = self\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.State.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene) -&gt; None:\n    scene.state = self\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Nothing","title":"Nothing","text":"<p>               Bases: <code>AnimationBase</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Nothing(AnimationBase):\n    type: Annotated[Literal[\"nothing\"], BrokenTyper.exclude()] = \"nothing\"\n\n    def apply(self, scene: DepthScene) -&gt; None:\n        pass\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Nothing.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"nothing\"], BrokenTyper.exclude()\n] = \"nothing\"\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Nothing.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene) -&gt; None:\n    pass\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Custom","title":"Custom","text":"<p>               Bases: <code>AnimationBase</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Custom(AnimationBase):\n    type: Annotated[Literal[\"custom\"], BrokenTyper.exclude()] = \"custom\"\n\n    code: Annotated[str, Option(\"--code\", \"-c\")] = Field(\"\")\n    \"\"\"Custom code to run for the animation [yellow](be sure to trust it)[/]\"\"\"\n\n    def apply(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n        if Environment.flag(\"CUSTOM_CODE\", 0):\n            return exec(LoadString(self.code))\n        raise RuntimeError(\"Custom code execution is disabled\")\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Custom.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"custom\"], BrokenTyper.exclude()\n] = \"custom\"\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Custom.code","title":"code","text":"<pre><code>code: Annotated[str, Option('--code', '-c')] = Field('')\n</code></pre> <p>Custom code to run for the animation yellow[/]</p>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Custom.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene, tau: float, cycle: float) -&gt; float\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n    if Environment.flag(\"CUSTOM_CODE\", 0):\n        return exec(LoadString(self.code))\n    raise RuntimeError(\"Custom code execution is disabled\")\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Reset","title":"Reset","text":"<p>               Bases: <code>AnimationBase</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Reset(AnimationBase):\n    type: Annotated[Literal[\"reset\"], BrokenTyper.exclude()] = \"reset\"\n\n    def apply(self, scene: DepthScene) -&gt; None:\n        scene.state = DepthState()\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Reset.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"reset\"], BrokenTyper.exclude()] = (\n    \"reset\"\n)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Reset.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene) -&gt; None:\n    scene.state = DepthState()\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Set","title":"Set","text":"<p>               Bases: <code>_ConstantBase</code></p> <p>Set a constant value to some component's animation</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Set(_ConstantBase):\n    \"\"\"Set a constant value to some component's animation\"\"\"\n    type: Annotated[Literal[\"set\"], BrokenTyper.exclude()] = \"set\"\n\n    def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n        self.cumulative = False\n        return self.value\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Set.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"set\"], BrokenTyper.exclude()] = (\n    \"set\"\n)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Set.compute","title":"compute","text":"<pre><code>compute(\n    scene: DepthScene, tau: float, cycle: float\n) -&gt; float\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n    self.cumulative = False\n    return self.value\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Add","title":"Add","text":"<p>               Bases: <code>_ConstantBase</code></p> <p>Add a constant value to some component's animation</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Add(_ConstantBase):\n    \"\"\"Add a constant value to some component's animation\"\"\"\n    type: Annotated[Literal[\"add\"], BrokenTyper.exclude()] = \"add\"\n\n    def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n        self.cumulative = True\n        return self.value\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Add.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"add\"], BrokenTyper.exclude()] = (\n    \"add\"\n)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Add.compute","title":"compute","text":"<pre><code>compute(\n    scene: DepthScene, tau: float, cycle: float\n) -&gt; float\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n    self.cumulative = True\n    return self.value\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Linear","title":"Linear","text":"<p>               Bases: <code>ReversibleComponentBase</code></p> <p>Add a Linear interpolation to some component's animation</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Linear(ReversibleComponentBase):\n    \"\"\"Add a Linear interpolation to some component's animation\"\"\"\n    type: Annotated[Literal[\"linear\"], BrokenTyper.exclude()] = \"linear\"\n\n    start: Annotated[float, Option(\"--start\", \"-t0\")] = Field(0.0)\n    \"\"\"Normalized start time\"\"\"\n\n    end: Annotated[float, Option(\"--end\", \"-t1\")] = Field(1.0)\n    \"\"\"Normalized end time\"\"\"\n\n    low: Annotated[float, Option(\"--low\", \"-v0\")] = Field(0.0)\n    \"\"\"Start value\"\"\"\n\n    hight: Annotated[float, Option(\"--high\", \"-v1\")] = Field(1.0)\n    \"\"\"End value\"\"\"\n\n    exponent: Annotated[float, Option(\"-e\", \"--exponent\")] = Field(1.0)\n    \"\"\"Exponent for shaping the interpolation\"\"\"\n\n    def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n        normal = (tau - self.start) / (self.end - self.start)\n        shaped = math.pow(max(0, min(1, normal)), self.exponent)\n        return self.low + (self.hight - self.low) * shaped\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Linear.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"linear\"], BrokenTyper.exclude()\n] = \"linear\"\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Linear.start","title":"start","text":"<pre><code>start: Annotated[float, Option(\"--start\", \"-t0\")] = Field(\n    0.0\n)\n</code></pre> <p>Normalized start time</p>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Linear.end","title":"end","text":"<pre><code>end: Annotated[float, Option('--end', '-t1')] = Field(1.0)\n</code></pre> <p>Normalized end time</p>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Linear.low","title":"low","text":"<pre><code>low: Annotated[float, Option('--low', '-v0')] = Field(0.0)\n</code></pre> <p>Start value</p>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Linear.hight","title":"hight","text":"<pre><code>hight: Annotated[float, Option(\"--high\", \"-v1\")] = Field(\n    1.0\n)\n</code></pre> <p>End value</p>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Linear.exponent","title":"exponent","text":"<pre><code>exponent: Annotated[float, Option(\"-e\", \"--exponent\")] = (\n    Field(1.0)\n)\n</code></pre> <p>Exponent for shaping the interpolation</p>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Linear.compute","title":"compute","text":"<pre><code>compute(\n    scene: DepthScene, tau: float, cycle: float\n) -&gt; float\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n    normal = (tau - self.start) / (self.end - self.start)\n    shaped = math.pow(max(0, min(1, normal)), self.exponent)\n    return self.low + (self.hight - self.low) * shaped\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Sine","title":"Sine","text":"<p>               Bases: <code>_WaveBase</code></p> <p>Add a Sine wave to some component's animation green[/]</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Sine(_WaveBase):\n    \"\"\"Add a Sine wave to some component's animation [green](See 'sine --help' for options)[/]\"\"\"\n    type: Annotated[Literal[\"sine\"], BrokenTyper.exclude()] = \"sine\"\n\n    def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n        return self.amplitude * math.sin((cycle * self.cycles) + (self.phase * math.tau)) + self.bias\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Sine.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"sine\"], BrokenTyper.exclude()] = (\n    \"sine\"\n)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Sine.compute","title":"compute","text":"<pre><code>compute(\n    scene: DepthScene, tau: float, cycle: float\n) -&gt; float\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n    return self.amplitude * math.sin((cycle * self.cycles) + (self.phase * math.tau)) + self.bias\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Cosine","title":"Cosine","text":"<p>               Bases: <code>_WaveBase</code></p> <p>Add a Cosine wave to some component's animation green[/]</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Cosine(_WaveBase):\n    \"\"\"Add a Cosine wave to some component's animation [green](See 'cosine --help' for options)[/]\"\"\"\n    type: Annotated[Literal[\"cosine\"], BrokenTyper.exclude()] = \"cosine\"\n\n    def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n        return self.amplitude * math.cos((cycle * self.cycles) + (self.phase * math.tau)) + self.bias\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Cosine.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"cosine\"], BrokenTyper.exclude()\n] = \"cosine\"\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Cosine.compute","title":"compute","text":"<pre><code>compute(\n    scene: DepthScene, tau: float, cycle: float\n) -&gt; float\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n    return self.amplitude * math.cos((cycle * self.cycles) + (self.phase * math.tau)) + self.bias\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Triangle","title":"Triangle","text":"<p>               Bases: <code>_WaveBase</code></p> <p>Add a Triangle wave to some component's animation green[/]</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Triangle(_WaveBase):\n    \"\"\"Add a Triangle wave to some component's animation [green](See 'triangle --help' for options)[/]\"\"\"\n    type: Annotated[Literal[\"triangle\"], BrokenTyper.exclude()] = \"triangle\"\n\n    def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n        tau = (tau * self.cycles + self.phase + 0.25) % 1\n        return self.amplitude * (1 - 4 * abs(tau - 0.5)) + self.bias\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Triangle.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"triangle\"], BrokenTyper.exclude()\n] = \"triangle\"\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Triangle.compute","title":"compute","text":"<pre><code>compute(\n    scene: DepthScene, tau: float, cycle: float\n) -&gt; float\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def compute(self, scene: DepthScene, tau: float, cycle: float) -&gt; float:\n    tau = (tau * self.cycles + self.phase + 0.25) % 1\n    return self.amplitude * (1 - 4 * abs(tau - 0.5)) + self.bias\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Vignette","title":"Vignette","text":"<p>               Bases: <code>FilterBase</code>, <code>VignetteState</code></p> <p>Add a Vignette effect to the video</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Vignette(FilterBase, VignetteState):\n    \"\"\"Add a Vignette effect to the video\"\"\"\n    type: Annotated[Literal[\"vignette\"], BrokenTyper.exclude()] = \"vignette\"\n\n    def apply(self, scene: DepthScene) -&gt; None:\n        scene.state.vignette = self.update(enable=True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Vignette.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"vignette\"], BrokenTyper.exclude()\n] = \"vignette\"\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Vignette.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene) -&gt; None:\n    scene.state.vignette = self.update(enable=True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Lens","title":"Lens","text":"<p>               Bases: <code>FilterBase</code>, <code>LensState</code></p> <p>Add a Lens distortion effect to the video</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Lens(FilterBase, LensState):\n    \"\"\"Add a Lens distortion effect to the video\"\"\"\n    type: Annotated[Literal[\"lens\"], BrokenTyper.exclude()] = \"lens\"\n\n    def apply(self, scene: DepthScene) -&gt; None:\n        scene.state.lens = self.update(enable=True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Lens.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"lens\"], BrokenTyper.exclude()] = (\n    \"lens\"\n)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Lens.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene) -&gt; None:\n    scene.state.lens = self.update(enable=True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Blur","title":"Blur","text":"<p>               Bases: <code>FilterBase</code>, <code>BlurState</code></p> <p>Add a Blur effect (depth of field) to the video</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Blur(FilterBase, BlurState):\n    \"\"\"Add a Blur effect (depth of field) to the video\"\"\"\n    type: Annotated[Literal[\"blur\"], BrokenTyper.exclude()] = \"blur\"\n\n    def apply(self, scene: DepthScene) -&gt; None:\n        scene.state.blur = self.update(enable=True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Blur.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"blur\"], BrokenTyper.exclude()] = (\n    \"blur\"\n)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Blur.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene) -&gt; None:\n    scene.state.blur = self.update(enable=True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Inpaint","title":"Inpaint","text":"<p>               Bases: <code>FilterBase</code>, <code>InpaintState</code></p> <p>Replace steep regions with green color</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Inpaint(FilterBase, InpaintState):\n    \"\"\"Replace steep regions with green color\"\"\"\n    type: Annotated[Literal[\"inpaint\"], BrokenTyper.exclude()] = \"inpaint\"\n\n    def apply(self, scene: DepthScene) -&gt; None:\n        scene.state.inpaint = self.update(enable=True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Inpaint.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"inpaint\"], BrokenTyper.exclude()\n] = \"inpaint\"\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Inpaint.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene) -&gt; None:\n    scene.state.inpaint = self.update(enable=True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Colors","title":"Colors","text":"<p>               Bases: <code>FilterBase</code>, <code>ColorState</code></p> <p>Add coloring effects to the video</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Colors(FilterBase, ColorState):\n    \"\"\"Add coloring effects to the video\"\"\"\n    type: Annotated[Literal[\"colors\"], BrokenTyper.exclude()] = \"colors\"\n\n    def apply(self, scene: DepthScene) -&gt; None:\n        scene.state.colors = self.update(enable=True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Colors.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"colors\"], BrokenTyper.exclude()\n] = \"colors\"\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Colors.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene) -&gt; None:\n    scene.state.colors = self.update(enable=True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Vertical","title":"Vertical","text":"<p>               Bases: <code>PresetBase</code></p> <p>Add a Vertical motion to the camera</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Vertical(PresetBase):\n    \"\"\"Add a Vertical motion to the camera\"\"\"\n    type:      Annotated[Literal[\"vertical\"], BrokenTyper.exclude()] = \"vertical\"\n    smooth:    SmoothType    = Field(True)\n    loop:      LoopType      = Field(True)\n    phase:     PhaseType     = Field(0.0)\n    steady:    SteadyType    = Field(0.3)\n    isometric: IsometricType = Field(0.6)\n\n    def apply(self, scene: DepthScene) -&gt; None:\n        scene.state.isometric = self.isometric\n        scene.state.steady    = self.steady\n\n        if self.loop:\n            (Actions.Sine if self.smooth else Actions.Triangle)(\n                target    = Target.OffsetY,\n                amplitude = 0.8*self.intensity,\n                phase     = self.phase,\n                cycles    = 1.00,\n            ).apply(scene)\n        else:\n            (Actions.Sine if self.smooth else Actions.Triangle)(\n                target    = Target.OffsetY,\n                amplitude = self.intensity,\n                phase     = -0.25,\n                cycles    = 0.50,\n            ).apply(scene)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Vertical.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"vertical\"], BrokenTyper.exclude()\n] = \"vertical\"\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Vertical.smooth","title":"smooth","text":"<pre><code>smooth: SmoothType = Field(True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Vertical.loop","title":"loop","text":"<pre><code>loop: LoopType = Field(True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Vertical.phase","title":"phase","text":"<pre><code>phase: PhaseType = Field(0.0)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Vertical.steady","title":"steady","text":"<pre><code>steady: SteadyType = Field(0.3)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Vertical.isometric","title":"isometric","text":"<pre><code>isometric: IsometricType = Field(0.6)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Vertical.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene) -&gt; None:\n    scene.state.isometric = self.isometric\n    scene.state.steady    = self.steady\n\n    if self.loop:\n        (Actions.Sine if self.smooth else Actions.Triangle)(\n            target    = Target.OffsetY,\n            amplitude = 0.8*self.intensity,\n            phase     = self.phase,\n            cycles    = 1.00,\n        ).apply(scene)\n    else:\n        (Actions.Sine if self.smooth else Actions.Triangle)(\n            target    = Target.OffsetY,\n            amplitude = self.intensity,\n            phase     = -0.25,\n            cycles    = 0.50,\n        ).apply(scene)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Horizontal","title":"Horizontal","text":"<p>               Bases: <code>PresetBase</code></p> <p>Add a Horizontal motion to the camera</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Horizontal(PresetBase):\n    \"\"\"Add a Horizontal motion to the camera\"\"\"\n    type:      Annotated[Literal[\"horizontal\"], BrokenTyper.exclude()] = \"horizontal\"\n    smooth:    SmoothType    = Field(True)\n    loop:      LoopType      = Field(True)\n    phase:     PhaseType     = Field(0.0)\n    steady:    SteadyType    = Field(0.3)\n    isometric: IsometricType = Field(0.6)\n\n    def apply(self, scene: DepthScene) -&gt; None:\n        scene.state.isometric = self.isometric\n        scene.state.steady    = self.steady\n\n        if self.loop:\n            (Actions.Sine if self.smooth else Actions.Triangle)(\n                target    = Target.OffsetX,\n                amplitude = 0.8*self.intensity,\n                phase     = self.phase,\n                cycles    = 1.00,\n            ).apply(scene)\n        else:\n            (Actions.Sine if self.smooth else Actions.Triangle)(\n                target    = Target.OffsetX,\n                amplitude = self.intensity,\n                phase     = -0.25,\n                cycles    = 0.50,\n            ).apply(scene)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Horizontal.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"horizontal\"], BrokenTyper.exclude()\n] = \"horizontal\"\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Horizontal.smooth","title":"smooth","text":"<pre><code>smooth: SmoothType = Field(True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Horizontal.loop","title":"loop","text":"<pre><code>loop: LoopType = Field(True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Horizontal.phase","title":"phase","text":"<pre><code>phase: PhaseType = Field(0.0)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Horizontal.steady","title":"steady","text":"<pre><code>steady: SteadyType = Field(0.3)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Horizontal.isometric","title":"isometric","text":"<pre><code>isometric: IsometricType = Field(0.6)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Horizontal.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene) -&gt; None:\n    scene.state.isometric = self.isometric\n    scene.state.steady    = self.steady\n\n    if self.loop:\n        (Actions.Sine if self.smooth else Actions.Triangle)(\n            target    = Target.OffsetX,\n            amplitude = 0.8*self.intensity,\n            phase     = self.phase,\n            cycles    = 1.00,\n        ).apply(scene)\n    else:\n        (Actions.Sine if self.smooth else Actions.Triangle)(\n            target    = Target.OffsetX,\n            amplitude = self.intensity,\n            phase     = -0.25,\n            cycles    = 0.50,\n        ).apply(scene)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Zoom","title":"Zoom","text":"<p>               Bases: <code>PresetBase</code></p> <p>Add a Zoom motion to the camera</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Zoom(PresetBase):\n    \"\"\"Add a Zoom motion to the camera\"\"\"\n    type:   Annotated[Literal[\"zoom\"], BrokenTyper.exclude()] = \"zoom\"\n    smooth: SmoothType = Field(True)\n    loop:   LoopType   = Field(True)\n    phase:  PhaseType  = Field(0.0)\n\n    def apply(self, scene: DepthScene) -&gt; None:\n        if self.loop:\n            (Actions.Sine if self.smooth else Actions.Triangle)(\n                target    = Target.Height,\n                amplitude = (self.intensity/2),\n                bias      = (self.intensity/2),\n                phase     = self.phase,\n                cycles    = 1.00,\n                reverse   = self.reverse,\n            ).apply(scene)\n        else:\n            (Actions.Sine if self.smooth else Actions.Triangle)(\n                target    = Target.Height,\n                amplitude = 0.75 * self.intensity,\n                phase     = 0.00,\n                cycles    = 0.25,\n                reverse   = self.reverse,\n            ).apply(scene)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Zoom.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"zoom\"], BrokenTyper.exclude()] = (\n    \"zoom\"\n)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Zoom.smooth","title":"smooth","text":"<pre><code>smooth: SmoothType = Field(True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Zoom.loop","title":"loop","text":"<pre><code>loop: LoopType = Field(True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Zoom.phase","title":"phase","text":"<pre><code>phase: PhaseType = Field(0.0)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Zoom.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene) -&gt; None:\n    if self.loop:\n        (Actions.Sine if self.smooth else Actions.Triangle)(\n            target    = Target.Height,\n            amplitude = (self.intensity/2),\n            bias      = (self.intensity/2),\n            phase     = self.phase,\n            cycles    = 1.00,\n            reverse   = self.reverse,\n        ).apply(scene)\n    else:\n        (Actions.Sine if self.smooth else Actions.Triangle)(\n            target    = Target.Height,\n            amplitude = 0.75 * self.intensity,\n            phase     = 0.00,\n            cycles    = 0.25,\n            reverse   = self.reverse,\n        ).apply(scene)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Circle","title":"Circle","text":"<p>               Bases: <code>PresetBase</code></p> <p>Add a Circular motion to the camera</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Circle(PresetBase):\n    \"\"\"Add a Circular motion to the camera\"\"\"\n    type:      Annotated[Literal[\"circle\"], BrokenTyper.exclude()] = \"circle\"\n    smooth:    SmoothType       = Field(True)\n    phase:     PhaseXYZType     = Field((0.0, 0.0, 0.0))\n    amplitude: AmplitudeXYZType = Field((1.0, 1.0, 0.0))\n    steady:    SteadyType       = Field(0.3)\n    isometric: IsometricType    = Field(0.6)\n\n    def apply(self, scene: DepthScene) -&gt; None:\n        scene.state.isometric = self.isometric\n        scene.state.steady    = self.steady\n\n        (Actions.Sine if self.smooth else Actions.Triangle)(\n            target    = Target.OffsetX,\n            amplitude = (0.5*self.intensity*self.amplitude[0]),\n            phase     = self.phase[0] + 0.25,\n            reverse   = self.reverse,\n        ).apply(scene)\n\n        (Actions.Sine if self.smooth else Actions.Triangle)(\n            target    = Target.OffsetY,\n            amplitude = (0.5*self.intensity*self.amplitude[1]),\n            phase     = self.phase[1],\n            reverse   = self.reverse,\n        ).apply(scene)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Circle.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"circle\"], BrokenTyper.exclude()\n] = \"circle\"\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Circle.smooth","title":"smooth","text":"<pre><code>smooth: SmoothType = Field(True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Circle.phase","title":"phase","text":"<pre><code>phase: PhaseXYZType = Field((0.0, 0.0, 0.0))\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Circle.amplitude","title":"amplitude","text":"<pre><code>amplitude: AmplitudeXYZType = Field((1.0, 1.0, 0.0))\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Circle.steady","title":"steady","text":"<pre><code>steady: SteadyType = Field(0.3)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Circle.isometric","title":"isometric","text":"<pre><code>isometric: IsometricType = Field(0.6)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Circle.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene) -&gt; None:\n    scene.state.isometric = self.isometric\n    scene.state.steady    = self.steady\n\n    (Actions.Sine if self.smooth else Actions.Triangle)(\n        target    = Target.OffsetX,\n        amplitude = (0.5*self.intensity*self.amplitude[0]),\n        phase     = self.phase[0] + 0.25,\n        reverse   = self.reverse,\n    ).apply(scene)\n\n    (Actions.Sine if self.smooth else Actions.Triangle)(\n        target    = Target.OffsetY,\n        amplitude = (0.5*self.intensity*self.amplitude[1]),\n        phase     = self.phase[1],\n        reverse   = self.reverse,\n    ).apply(scene)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Dolly","title":"Dolly","text":"<p>               Bases: <code>PresetBase</code></p> <p>Add a Dolly zoom to the camera</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Dolly(PresetBase):\n    \"\"\"Add a Dolly zoom to the camera\"\"\"\n    type:   Annotated[Literal[\"dolly\"], BrokenTyper.exclude()] = \"dolly\"\n    smooth: SmoothType  = Field(True)\n    loop:   LoopType    = Field(True)\n    depth:  DepthType   = Field(0.35)\n    phase:  PhaseType   = Field(0.0)\n\n    def apply(self, scene: DepthScene) -&gt; None:\n        scene.state.height = 0.5*self.intensity\n        scene.state.steady = self.depth\n        scene.state.focus  = self.depth\n\n        if self.loop:\n            phase, cycles = ( 0.75 if self.reverse else 0.25), 1.0\n        else:\n            phase, cycles = (-0.75 if self.reverse else 0.25), 0.5\n\n        (Actions.Sine if self.smooth else Actions.Triangle)(\n            target    = Target.Isometric,\n            amplitude = self.intensity/2,\n            bias      = self.intensity/2,\n            phase     = self.phase + phase,\n            reverse   = (not self.reverse),\n            cycles    = cycles,\n        ).apply(scene)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Dolly.type","title":"type","text":"<pre><code>type: Annotated[Literal[\"dolly\"], BrokenTyper.exclude()] = (\n    \"dolly\"\n)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Dolly.smooth","title":"smooth","text":"<pre><code>smooth: SmoothType = Field(True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Dolly.loop","title":"loop","text":"<pre><code>loop: LoopType = Field(True)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Dolly.depth","title":"depth","text":"<pre><code>depth: DepthType = Field(0.35)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Dolly.phase","title":"phase","text":"<pre><code>phase: PhaseType = Field(0.0)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Dolly.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene) -&gt; None:\n    scene.state.height = 0.5*self.intensity\n    scene.state.steady = self.depth\n    scene.state.focus  = self.depth\n\n    if self.loop:\n        phase, cycles = ( 0.75 if self.reverse else 0.25), 1.0\n    else:\n        phase, cycles = (-0.75 if self.reverse else 0.25), 0.5\n\n    (Actions.Sine if self.smooth else Actions.Triangle)(\n        target    = Target.Isometric,\n        amplitude = self.intensity/2,\n        bias      = self.intensity/2,\n        phase     = self.phase + phase,\n        reverse   = (not self.reverse),\n        cycles    = cycles,\n    ).apply(scene)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Orbital","title":"Orbital","text":"<p>               Bases: <code>PresetBase</code></p> <p>Orbit the camera around a fixed point</p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class Orbital(PresetBase):\n    \"\"\"Orbit the camera around a fixed point\"\"\"\n    type:  Annotated[Literal[\"orbital\"], BrokenTyper.exclude()] = \"orbital\"\n    depth: DepthType = Field(0.3)\n\n    def apply(self, scene: DepthScene) -&gt; None:\n        scene.state.steady = self.depth\n        scene.state.focus  = self.depth\n\n        Actions.Cosine(\n            target    = Target.Isometric,\n            amplitude = self.intensity/2,\n            bias      = self.intensity/2,\n            reverse   = self.reverse,\n        ).apply(scene)\n\n        Actions.Sine(\n            target    = Target.OffsetX,\n            amplitude = 0.5*self.intensity,\n            reverse   = self.reverse,\n        ).apply(scene)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Orbital.type","title":"type","text":"<pre><code>type: Annotated[\n    Literal[\"orbital\"], BrokenTyper.exclude()\n] = \"orbital\"\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Orbital.depth","title":"depth","text":"<pre><code>depth: DepthType = Field(0.3)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.Actions.Orbital.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene) -&gt; None:\n    scene.state.steady = self.depth\n    scene.state.focus  = self.depth\n\n    Actions.Cosine(\n        target    = Target.Isometric,\n        amplitude = self.intensity/2,\n        bias      = self.intensity/2,\n        reverse   = self.reverse,\n    ).apply(scene)\n\n    Actions.Sine(\n        target    = Target.OffsetX,\n        amplitude = 0.5*self.intensity,\n        reverse   = self.reverse,\n    ).apply(scene)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.AnimationType","title":"AnimationType","text":"<pre><code>AnimationType: TypeAlias = Union[\n    DepthState,\n    Actions.Nothing,\n    Actions.Custom,\n    Actions.Reset,\n    Actions.Set,\n    Actions.Add,\n    Actions.Linear,\n    Actions.Sine,\n    Actions.Cosine,\n    Actions.Triangle,\n    Actions.Vignette,\n    Actions.Lens,\n    Actions.Blur,\n    Actions.Inpaint,\n    Actions.Colors,\n    Actions.Vertical,\n    Actions.Horizontal,\n    Actions.Zoom,\n    Actions.Circle,\n    Actions.Dolly,\n    Actions.Orbital,\n]\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.DepthAnimation","title":"DepthAnimation","text":"<p>               Bases: <code>BrokenModel</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>class DepthAnimation(BrokenModel):\n    steps: list[AnimationType] = Field(default_factory=list)\n\n    def add(self, animation: AnimationBase) -&gt; AnimationBase:\n        self.steps.append(animation := copy.deepcopy(animation))\n        return animation\n\n    def clear(self) -&gt; None:\n        self.steps.clear()\n\n    def apply(self, scene: DepthScene) -&gt; None:\n        for animation in self.steps:\n            animation.apply(scene)\n\n    def __bool__(self) -&gt; bool:\n        return bool(self.steps)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.DepthAnimation.steps","title":"steps","text":"<pre><code>steps: list[AnimationType] = Field(default_factory=list)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.DepthAnimation.add","title":"add","text":"<pre><code>add(animation: AnimationBase) -&gt; AnimationBase\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def add(self, animation: AnimationBase) -&gt; AnimationBase:\n    self.steps.append(animation := copy.deepcopy(animation))\n    return animation\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.DepthAnimation.clear","title":"clear","text":"<pre><code>clear() -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def clear(self) -&gt; None:\n    self.steps.clear()\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.DepthAnimation.apply","title":"apply","text":"<pre><code>apply(scene: DepthScene) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def apply(self, scene: DepthScene) -&gt; None:\n    for animation in self.steps:\n        animation.apply(scene)\n</code></pre>"},{"location":"code/depthflow/animation/#DepthFlow.Animation.DepthAnimation.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Animation.py</code> <pre><code>def __bool__(self) -&gt; bool:\n    return bool(self.steps)\n</code></pre>"},{"location":"code/depthflow/discord/","title":"File: <code>DepthFlow/Discord.py</code>","text":""},{"location":"code/depthflow/discord/#DepthFlow.Discord","title":"DepthFlow.Discord","text":""},{"location":"code/depthflow/scene/","title":"File: <code>DepthFlow/Scene.py</code>","text":""},{"location":"code/depthflow/scene/#DepthFlow.Scene","title":"DepthFlow.Scene","text":""},{"location":"code/depthflow/scene/#DepthFlow.Scene.DEFAULT_IMAGE","title":"DEFAULT_IMAGE","text":"<pre><code>DEFAULT_IMAGE: str = (\n    \"https://w.wallhaven.cc/full/pk/wallhaven-pkz5r9.png\"\n)\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DEPTH_SHADER","title":"DEPTH_SHADER","text":"<pre><code>DEPTH_SHADER: Path = (\n    DEPTHFLOW.RESOURCES.SHADERS / \"DepthFlow.glsl\"\n)\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene","title":"DepthScene","text":"<p>               Bases: <code>ShaderScene</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>@define\nclass DepthScene(ShaderScene):\n    state: DepthState = Factory(DepthState)\n\n    class Config(ShaderScene.Config):\n        image:     Iterable[PydanticImage] = DEFAULT_IMAGE\n        depth:     Iterable[PydanticImage] = None\n        estimator: DepthEstimator = Field(default_factory=DepthAnythingV2)\n        animation: DepthAnimation = Field(default_factory=DepthAnimation)\n        upscaler:  BrokenUpscaler = Field(default_factory=NoUpscaler)\n\n    # -------------------------------------------------------------------------------------------- #\n    # Command line interface\n\n    def commands(self):\n        self.cli.description = DEPTHFLOW_ABOUT\n\n        with self.cli.panel(self.scene_panel):\n            self.cli.command(self.input)\n\n        with self.cli.panel(\"\ud83d\udd27 Preloading\"):\n            self.cli.command(self.load_estimator, hidden=True)\n            self.cli.command(self.load_upscaler,  hidden=True)\n\n        with self.cli.panel(\"\ud83c\udf0a Depth estimator\"):\n            self.cli.command(DepthAnythingV1, post=self.set_estimator, name=\"da1\")\n            self.cli.command(DepthAnythingV2, post=self.set_estimator, name=\"da2\")\n            self.cli.command(DepthPro, post=self.set_estimator)\n            self.cli.command(ZoeDepth, post=self.set_estimator)\n            self.cli.command(Marigold, post=self.set_estimator)\n\n        with self.cli.panel(\"\u2b50\ufe0f Upscaler\"):\n            self.cli.command(Realesr, post=self.set_upscaler)\n            self.cli.command(Upscayl, post=self.set_upscaler)\n            self.cli.command(Waifu2x, post=self.set_upscaler)\n\n        with self.cli.panel(\"\ud83d\ude80 Animation components\"):\n            _hidden = Environment.flag(\"ADVANCED\", 0)\n            for animation in Actions.members():\n                if issubclass(animation, ComponentBase):\n                    self.cli.command(animation, post=self.config.animation.add, hidden=_hidden)\n\n        with self.cli.panel(\"\ud83d\udd2e Animation presets\"):\n            for preset in Actions.members():\n                if issubclass(preset, PresetBase):\n                    self.cli.command(preset, post=self.config.animation.add)\n\n        with self.cli.panel(\"\ud83c\udfa8 Post-processing\"):\n            for post in Actions.members():\n                if issubclass(post, FilterBase):\n                    self.cli.command(post, post=self.config.animation.add)\n\n    def input(self,\n        image: Annotated[list[str], Option(\"--image\", \"-i\",\n            help=\"[bold green](\ud83d\udfe2 Basic)[/] Input image from Path, URL or Directory\"\n        )],\n        depth: Annotated[list[str], Option(\"--depth\", \"-d\",\n            help=\"[bold green](\ud83d\udfe2 Basic)[/] Input depthmap of the image [medium_purple3](None to estimate)[/]\"\n        )]=None,\n    ) -&gt; None:\n        \"\"\"Use the given image(s) and depthmap(s) as the input of the scene\"\"\"\n        self.config.image = image\n        self.config.depth = depth\n\n    # -------------------------------------------------------------------------------------------- #\n    # Module implementation\n\n    def build(self) -&gt; None:\n        self.image = ShaderTexture(scene=self, name=\"image\").repeat(False)\n        self.depth = ShaderTexture(scene=self, name=\"depth\").repeat(False)\n        self.shader.fragment = DEPTH_SHADER\n        self.subsample = 2\n        self.runtime = 5.0\n        self.ssaa = 1.2\n\n    def setup(self) -&gt; None:\n        if (not self.config.animation):\n            self.config.animation.add(Actions.Orbital())\n        self._load_inputs()\n\n    def update(self) -&gt; None:\n        self.config.animation.apply(self)\n\n    def handle(self, message: ShaderMessage) -&gt; None:\n        ShaderScene.handle(self, message)\n\n        if isinstance(message, ShaderMessage.Window.FileDrop):\n            self.input(image=message.first, depth=message.second)\n            self._load_inputs()\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        yield from ShaderScene.pipeline(self)\n        yield from self.state.pipeline()\n\n    # -------------------------------------------------------------------------------------------- #\n    # Proxy methods\n\n    # # Upscalers\n\n    def set_upscaler(self, upscaler: Optional[BrokenUpscaler]=None) -&gt; BrokenUpscaler:\n        self.config.upscaler = (upscaler or NoUpscaler())\n        return self.config.upscaler\n    def clear_upscaler(self) -&gt; None:\n        self.config.upscaler = NoUpscaler()\n    def load_upscaler(self) -&gt; None:\n        self.config.upscaler.download()\n\n    def realesr(self, **options) -&gt; Realesr:\n        return self.set_upscaler(Realesr(**options))\n    def upscayl(self, **options) -&gt; Upscayl:\n        return self.set_upscaler(Upscayl(**options))\n    def waifu2x(self, **options) -&gt; Waifu2x:\n        return self.set_upscaler(Waifu2x(**options))\n\n    # # Estimators\n\n    def set_estimator(self, estimator: DepthEstimator) -&gt; DepthEstimator:\n        self.config.estimator = estimator\n        return self.config.estimator\n    def load_estimator(self) -&gt; None:\n        self.config.estimator.load_model()\n\n    def depth_anything1(self, **options) -&gt; DepthAnythingV1:\n        return self.set_estimator(DepthAnythingV1(**options))\n    def depth_anything2(self, **options) -&gt; DepthAnythingV2:\n        return self.set_estimator(DepthAnythingV2(**options))\n    def depth_pro(self, **options) -&gt; DepthPro:\n        return self.set_estimator(DepthPro(**options))\n    def zoe_depth(self, **options) -&gt; ZoeDepth:\n        return self.set_estimator(ZoeDepth(**options))\n    def marigold(self, **options) -&gt; Marigold:\n        return self.set_estimator(Marigold(**options))\n\n    # # Animations\n\n    # Constant\n    def set(self, **options) -&gt; Actions.Set:\n        return self.config.animation.add(Actions.Set(**options))\n    def add(self, **options) -&gt; Actions.Add:\n        return self.config.animation.add(Actions.Add(**options))\n\n    # Basic\n    def linear(self, **options) -&gt; Actions.Linear:\n        return self.config.animation.add(Actions.Linear(**options))\n    def sine(self, **options) -&gt; Actions.Sine:\n        return self.config.animation.add(Actions.Sine(**options))\n    def cosine(self, **options) -&gt; Actions.Cosine:\n        return self.config.animation.add(Actions.Cosine(**options))\n    def triangle(self, **options) -&gt; Actions.Triangle:\n        return self.config.animation.add(Actions.Triangle(**options))\n\n    # Presets\n    def vertical(self, **options) -&gt; Actions.Vertical:\n        return self.config.animation.add(Actions.Vertical(**options))\n    def horizontal(self, **options) -&gt; Actions.Horizontal:\n        return self.config.animation.add(Actions.Horizontal(**options))\n    def zoom(self, **options) -&gt; Actions.Zoom:\n        return self.config.animation.add(Actions.Zoom(**options))\n    def circle(self, **options) -&gt; Actions.Circle:\n        return self.config.animation.add(Actions.Circle(**options))\n    def dolly(self, **options) -&gt; Actions.Dolly:\n        return self.config.animation.add(Actions.Dolly(**options))\n    def orbital(self, **options) -&gt; Actions.Orbital:\n        return self.config.animation.add(Actions.Orbital(**options))\n\n    # Post-processing\n    def vignette(self, **options) -&gt; Actions.Vignette:\n        return self.config.animation.add(Actions.Vignette(**options))\n    def blur(self, **options) -&gt; Actions.Blur:\n        return self.config.animation.add(Actions.Blur(**options))\n    def inpaint(self, **options) -&gt; Actions.Inpaint:\n        return self.config.animation.add(Actions.Inpaint(**options))\n    def colors(self, **options) -&gt; Actions.Colors:\n        return self.config.animation.add(Actions.Colors(**options))\n\n    # -------------------------------------------------------------------------------------------- #\n    # Internal batch exporting\n\n    def _load_inputs(self) -&gt; None:\n        \"\"\"Load inputs: single or batch exporting\"\"\"\n\n        # Batch exporting implementation\n        image = self._get_batch_input(self.config.image)\n        depth = self._get_batch_input(self.config.depth)\n\n        if (image is None):\n            raise ShaderBatchStop()\n\n        self.log_info(f\"Loading image: {image}\")\n        self.log_info(f\"Loading depth: {depth or 'Estimating from image'}\")\n\n        # Load, estimate, upscale input image\n        image = self.config.upscaler.upscale(LoadImage(image))\n        depth = LoadImage(depth) or self.config.estimator.estimate(image)\n\n        # Match rendering resolution to image\n        self.resolution   = (image.width,image.height)\n        self.aspect_ratio = (image.width/image.height)\n        self.image.from_image(image)\n        self.depth.from_image(depth)\n\n        # Default to 1920x1080 on base image\n        if (self.config.image is DEFAULT_IMAGE):\n            self.resolution   = (1920, 1080)\n            self.aspect_ratio = (16/9)\n\n    def export_name(self, path: Path) -&gt; Path:\n        \"\"\"Modifies the output path if on batch exporting mode\"\"\"\n        options = list(self._iter_batch_input(self.config.image))\n\n        # Single file mode, return as-is\n        if (len(options) == 1):\n            return path\n\n        # Assume it's a local path\n        image = Path(options[self.index])\n        original = image.stem\n\n        # Use the URL filename as base\n        if validators.url(image):\n            original = BrokenPath.url_filename(image)\n\n        # Build the batch filename: 'file' + -'custom stem'\n        return path.with_stem(original + \"-\" + path.stem)\n\n    def _iter_batch_input(self, item: Optional[LoadableImage]) -&gt; Iterable[LoadableImage]:\n        if (item is None):\n            return None\n\n        # Recurse on multiple inputs\n        if isinstance(item, (list, tuple, set)):\n            for part in item:\n                yield from self._iter_batch_input(part)\n\n        # Return known valid inputs as is\n        elif isinstance(item, (bytes, ImageType, numpy.ndarray)):\n            yield item\n        elif validators.url(item):\n            yield item\n\n        # Valid directory on disk\n        elif (path := BrokenPath.get(item, exists=True)):\n            if (path.is_dir()):\n                files = (path.glob(\"*\" + x) for x in FileExtensions.Image)\n                yield from sorted(flatten(files))\n            else:\n                yield path\n\n        # Interpret as a glob pattern\n        elif (\"*\" in str(item)):\n            yield from sorted(path.parent.glob(path.name))\n        else:\n            self.log_minor(f\"Assuming {item} is an iterable, could go wrong..\")\n            yield from item\n\n    def _get_batch_input(self, item: LoadableImage) -&gt; Optional[LoadableImage]:\n        return list_get(list(self._iter_batch_input(item)), self.index)\n\n    def ui(self) -&gt; None:\n        if (state := imgui.slider_float(\"Height\", self.state.height, 0, 1, \"%.2f\"))[0]:\n            self.state.height = state[1]\n        if (state := imgui.slider_float(\"Steady\", self.state.steady, 0, 1, \"%.2f\"))[0]:\n            self.state.steady = state[1]\n        if (state := imgui.slider_float(\"Focus\", self.state.focus, 0, 1, \"%.2f\"))[0]:\n            self.state.focus = state[1]\n        if (state := imgui.slider_float(\"Invert\", self.state.invert, 0, 1, \"%.2f\"))[0]:\n            self.state.invert = state[1]\n        if (state := imgui.slider_float(\"Zoom\", self.state.zoom, 0, 2, \"%.2f\"))[0]:\n            self.state.zoom = state[1]\n        if (state := imgui.slider_float(\"Isometric\", self.state.isometric, 0, 1, \"%.2f\"))[0]:\n            self.state.isometric = state[1]\n        if (state := imgui.slider_float(\"Dolly\", self.state.dolly, 0, 5, \"%.2f\"))[0]:\n            self.state.dolly = state[1]\n\n        imgui.text(\"- True camera position\")\n        if (state := imgui.slider_float(\"Center X\", self.state.center_x, -self.aspect_ratio, self.aspect_ratio, \"%.2f\"))[0]:\n            self.state.center_x = state[1]\n        if (state := imgui.slider_float(\"Center Y\", self.state.center_y, -1, 1, \"%.2f\"))[0]:\n            self.state.center_y = state[1]\n\n        imgui.text(\"- Fixed point at height changes\")\n        if (state := imgui.slider_float(\"Origin X\", self.state.origin_x, -self.aspect_ratio, self.aspect_ratio, \"%.2f\"))[0]:\n            self.state.origin_x = state[1]\n        if (state := imgui.slider_float(\"Origin Y\", self.state.origin_y, -1, 1, \"%.2f\"))[0]:\n            self.state.origin_y = state[1]\n\n        imgui.text(\"- Parallax offset\")\n        if (state := imgui.slider_float(\"Offset X\", self.state.offset_x, -2, 2, \"%.2f\"))[0]:\n            self.state.offset_x = state[1]\n        if (state := imgui.slider_float(\"Offset Y\", self.state.offset_y, -2, 2, \"%.2f\"))[0]:\n            self.state.offset_y = state[1]\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.state","title":"state","text":"<pre><code>state: DepthState = Factory(DepthState)\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.Config","title":"Config","text":"<p>               Bases: <code>ShaderScene.Config</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>class Config(ShaderScene.Config):\n    image:     Iterable[PydanticImage] = DEFAULT_IMAGE\n    depth:     Iterable[PydanticImage] = None\n    estimator: DepthEstimator = Field(default_factory=DepthAnythingV2)\n    animation: DepthAnimation = Field(default_factory=DepthAnimation)\n    upscaler:  BrokenUpscaler = Field(default_factory=NoUpscaler)\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.Config.image","title":"image","text":"<pre><code>image: Iterable[PydanticImage] = DEFAULT_IMAGE\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.Config.depth","title":"depth","text":"<pre><code>depth: Iterable[PydanticImage] = None\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.Config.estimator","title":"estimator","text":"<pre><code>estimator: DepthEstimator = Field(\n    default_factory=DepthAnythingV2\n)\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.Config.animation","title":"animation","text":"<pre><code>animation: DepthAnimation = Field(\n    default_factory=DepthAnimation\n)\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.Config.upscaler","title":"upscaler","text":"<pre><code>upscaler: BrokenUpscaler = Field(default_factory=NoUpscaler)\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.commands","title":"commands","text":"<pre><code>commands()\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def commands(self):\n    self.cli.description = DEPTHFLOW_ABOUT\n\n    with self.cli.panel(self.scene_panel):\n        self.cli.command(self.input)\n\n    with self.cli.panel(\"\ud83d\udd27 Preloading\"):\n        self.cli.command(self.load_estimator, hidden=True)\n        self.cli.command(self.load_upscaler,  hidden=True)\n\n    with self.cli.panel(\"\ud83c\udf0a Depth estimator\"):\n        self.cli.command(DepthAnythingV1, post=self.set_estimator, name=\"da1\")\n        self.cli.command(DepthAnythingV2, post=self.set_estimator, name=\"da2\")\n        self.cli.command(DepthPro, post=self.set_estimator)\n        self.cli.command(ZoeDepth, post=self.set_estimator)\n        self.cli.command(Marigold, post=self.set_estimator)\n\n    with self.cli.panel(\"\u2b50\ufe0f Upscaler\"):\n        self.cli.command(Realesr, post=self.set_upscaler)\n        self.cli.command(Upscayl, post=self.set_upscaler)\n        self.cli.command(Waifu2x, post=self.set_upscaler)\n\n    with self.cli.panel(\"\ud83d\ude80 Animation components\"):\n        _hidden = Environment.flag(\"ADVANCED\", 0)\n        for animation in Actions.members():\n            if issubclass(animation, ComponentBase):\n                self.cli.command(animation, post=self.config.animation.add, hidden=_hidden)\n\n    with self.cli.panel(\"\ud83d\udd2e Animation presets\"):\n        for preset in Actions.members():\n            if issubclass(preset, PresetBase):\n                self.cli.command(preset, post=self.config.animation.add)\n\n    with self.cli.panel(\"\ud83c\udfa8 Post-processing\"):\n        for post in Actions.members():\n            if issubclass(post, FilterBase):\n                self.cli.command(post, post=self.config.animation.add)\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.input","title":"input","text":"<pre><code>input(\n    image: Annotated[\n        list[str],\n        Option(\n            --image,\n            -i,\n            help=\"[bold green](\ud83d\udfe2 Basic)[/] Input image from Path, URL or Directory\",\n        ),\n    ],\n    depth: Annotated[\n        list[str],\n        Option(\n            --depth,\n            -d,\n            help=\"[bold green](\ud83d\udfe2 Basic)[/] Input depthmap of the image [medium_purple3](None to estimate)[/]\",\n        ),\n    ] = None,\n) -&gt; None\n</code></pre> <p>Use the given image(s) and depthmap(s) as the input of the scene</p> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def input(self,\n    image: Annotated[list[str], Option(\"--image\", \"-i\",\n        help=\"[bold green](\ud83d\udfe2 Basic)[/] Input image from Path, URL or Directory\"\n    )],\n    depth: Annotated[list[str], Option(\"--depth\", \"-d\",\n        help=\"[bold green](\ud83d\udfe2 Basic)[/] Input depthmap of the image [medium_purple3](None to estimate)[/]\"\n    )]=None,\n) -&gt; None:\n    \"\"\"Use the given image(s) and depthmap(s) as the input of the scene\"\"\"\n    self.config.image = image\n    self.config.depth = depth\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.build","title":"build","text":"<pre><code>build() -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def build(self) -&gt; None:\n    self.image = ShaderTexture(scene=self, name=\"image\").repeat(False)\n    self.depth = ShaderTexture(scene=self, name=\"depth\").repeat(False)\n    self.shader.fragment = DEPTH_SHADER\n    self.subsample = 2\n    self.runtime = 5.0\n    self.ssaa = 1.2\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.setup","title":"setup","text":"<pre><code>setup() -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def setup(self) -&gt; None:\n    if (not self.config.animation):\n        self.config.animation.add(Actions.Orbital())\n    self._load_inputs()\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.update","title":"update","text":"<pre><code>update() -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def update(self) -&gt; None:\n    self.config.animation.apply(self)\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.handle","title":"handle","text":"<pre><code>handle(message: ShaderMessage) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def handle(self, message: ShaderMessage) -&gt; None:\n    ShaderScene.handle(self, message)\n\n    if isinstance(message, ShaderMessage.Window.FileDrop):\n        self.input(image=message.first, depth=message.second)\n        self._load_inputs()\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    yield from ShaderScene.pipeline(self)\n    yield from self.state.pipeline()\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.set_upscaler","title":"set_upscaler","text":"<pre><code>set_upscaler(\n    upscaler: Optional[BrokenUpscaler] = None,\n) -&gt; BrokenUpscaler\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def set_upscaler(self, upscaler: Optional[BrokenUpscaler]=None) -&gt; BrokenUpscaler:\n    self.config.upscaler = (upscaler or NoUpscaler())\n    return self.config.upscaler\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.clear_upscaler","title":"clear_upscaler","text":"<pre><code>clear_upscaler() -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def clear_upscaler(self) -&gt; None:\n    self.config.upscaler = NoUpscaler()\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.load_upscaler","title":"load_upscaler","text":"<pre><code>load_upscaler() -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def load_upscaler(self) -&gt; None:\n    self.config.upscaler.download()\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.realesr","title":"realesr","text":"<pre><code>realesr(**options) -&gt; Realesr\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def realesr(self, **options) -&gt; Realesr:\n    return self.set_upscaler(Realesr(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.upscayl","title":"upscayl","text":"<pre><code>upscayl(**options) -&gt; Upscayl\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def upscayl(self, **options) -&gt; Upscayl:\n    return self.set_upscaler(Upscayl(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.waifu2x","title":"waifu2x","text":"<pre><code>waifu2x(**options) -&gt; Waifu2x\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def waifu2x(self, **options) -&gt; Waifu2x:\n    return self.set_upscaler(Waifu2x(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.set_estimator","title":"set_estimator","text":"<pre><code>set_estimator(estimator: DepthEstimator) -&gt; DepthEstimator\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def set_estimator(self, estimator: DepthEstimator) -&gt; DepthEstimator:\n    self.config.estimator = estimator\n    return self.config.estimator\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.load_estimator","title":"load_estimator","text":"<pre><code>load_estimator() -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def load_estimator(self) -&gt; None:\n    self.config.estimator.load_model()\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.depth_anything1","title":"depth_anything1","text":"<pre><code>depth_anything1(**options) -&gt; DepthAnythingV1\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def depth_anything1(self, **options) -&gt; DepthAnythingV1:\n    return self.set_estimator(DepthAnythingV1(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.depth_anything2","title":"depth_anything2","text":"<pre><code>depth_anything2(**options) -&gt; DepthAnythingV2\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def depth_anything2(self, **options) -&gt; DepthAnythingV2:\n    return self.set_estimator(DepthAnythingV2(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.depth_pro","title":"depth_pro","text":"<pre><code>depth_pro(**options) -&gt; DepthPro\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def depth_pro(self, **options) -&gt; DepthPro:\n    return self.set_estimator(DepthPro(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.zoe_depth","title":"zoe_depth","text":"<pre><code>zoe_depth(**options) -&gt; ZoeDepth\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def zoe_depth(self, **options) -&gt; ZoeDepth:\n    return self.set_estimator(ZoeDepth(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.marigold","title":"marigold","text":"<pre><code>marigold(**options) -&gt; Marigold\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def marigold(self, **options) -&gt; Marigold:\n    return self.set_estimator(Marigold(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.set","title":"set","text":"<pre><code>set(**options) -&gt; Actions.Set\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def set(self, **options) -&gt; Actions.Set:\n    return self.config.animation.add(Actions.Set(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.add","title":"add","text":"<pre><code>add(**options) -&gt; Actions.Add\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def add(self, **options) -&gt; Actions.Add:\n    return self.config.animation.add(Actions.Add(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.linear","title":"linear","text":"<pre><code>linear(**options) -&gt; Actions.Linear\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def linear(self, **options) -&gt; Actions.Linear:\n    return self.config.animation.add(Actions.Linear(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.sine","title":"sine","text":"<pre><code>sine(**options) -&gt; Actions.Sine\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def sine(self, **options) -&gt; Actions.Sine:\n    return self.config.animation.add(Actions.Sine(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.cosine","title":"cosine","text":"<pre><code>cosine(**options) -&gt; Actions.Cosine\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def cosine(self, **options) -&gt; Actions.Cosine:\n    return self.config.animation.add(Actions.Cosine(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.triangle","title":"triangle","text":"<pre><code>triangle(**options) -&gt; Actions.Triangle\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def triangle(self, **options) -&gt; Actions.Triangle:\n    return self.config.animation.add(Actions.Triangle(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.vertical","title":"vertical","text":"<pre><code>vertical(**options) -&gt; Actions.Vertical\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def vertical(self, **options) -&gt; Actions.Vertical:\n    return self.config.animation.add(Actions.Vertical(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.horizontal","title":"horizontal","text":"<pre><code>horizontal(**options) -&gt; Actions.Horizontal\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def horizontal(self, **options) -&gt; Actions.Horizontal:\n    return self.config.animation.add(Actions.Horizontal(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.zoom","title":"zoom","text":"<pre><code>zoom(**options) -&gt; Actions.Zoom\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def zoom(self, **options) -&gt; Actions.Zoom:\n    return self.config.animation.add(Actions.Zoom(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.circle","title":"circle","text":"<pre><code>circle(**options) -&gt; Actions.Circle\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def circle(self, **options) -&gt; Actions.Circle:\n    return self.config.animation.add(Actions.Circle(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.dolly","title":"dolly","text":"<pre><code>dolly(**options) -&gt; Actions.Dolly\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def dolly(self, **options) -&gt; Actions.Dolly:\n    return self.config.animation.add(Actions.Dolly(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.orbital","title":"orbital","text":"<pre><code>orbital(**options) -&gt; Actions.Orbital\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def orbital(self, **options) -&gt; Actions.Orbital:\n    return self.config.animation.add(Actions.Orbital(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.vignette","title":"vignette","text":"<pre><code>vignette(**options) -&gt; Actions.Vignette\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def vignette(self, **options) -&gt; Actions.Vignette:\n    return self.config.animation.add(Actions.Vignette(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.blur","title":"blur","text":"<pre><code>blur(**options) -&gt; Actions.Blur\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def blur(self, **options) -&gt; Actions.Blur:\n    return self.config.animation.add(Actions.Blur(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.inpaint","title":"inpaint","text":"<pre><code>inpaint(**options) -&gt; Actions.Inpaint\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def inpaint(self, **options) -&gt; Actions.Inpaint:\n    return self.config.animation.add(Actions.Inpaint(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.colors","title":"colors","text":"<pre><code>colors(**options) -&gt; Actions.Colors\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def colors(self, **options) -&gt; Actions.Colors:\n    return self.config.animation.add(Actions.Colors(**options))\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.export_name","title":"export_name","text":"<pre><code>export_name(path: Path) -&gt; Path\n</code></pre> <p>Modifies the output path if on batch exporting mode</p> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def export_name(self, path: Path) -&gt; Path:\n    \"\"\"Modifies the output path if on batch exporting mode\"\"\"\n    options = list(self._iter_batch_input(self.config.image))\n\n    # Single file mode, return as-is\n    if (len(options) == 1):\n        return path\n\n    # Assume it's a local path\n    image = Path(options[self.index])\n    original = image.stem\n\n    # Use the URL filename as base\n    if validators.url(image):\n        original = BrokenPath.url_filename(image)\n\n    # Build the batch filename: 'file' + -'custom stem'\n    return path.with_stem(original + \"-\" + path.stem)\n</code></pre>"},{"location":"code/depthflow/scene/#DepthFlow.Scene.DepthScene.ui","title":"ui","text":"<pre><code>ui() -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Scene.py</code> <pre><code>def ui(self) -&gt; None:\n    if (state := imgui.slider_float(\"Height\", self.state.height, 0, 1, \"%.2f\"))[0]:\n        self.state.height = state[1]\n    if (state := imgui.slider_float(\"Steady\", self.state.steady, 0, 1, \"%.2f\"))[0]:\n        self.state.steady = state[1]\n    if (state := imgui.slider_float(\"Focus\", self.state.focus, 0, 1, \"%.2f\"))[0]:\n        self.state.focus = state[1]\n    if (state := imgui.slider_float(\"Invert\", self.state.invert, 0, 1, \"%.2f\"))[0]:\n        self.state.invert = state[1]\n    if (state := imgui.slider_float(\"Zoom\", self.state.zoom, 0, 2, \"%.2f\"))[0]:\n        self.state.zoom = state[1]\n    if (state := imgui.slider_float(\"Isometric\", self.state.isometric, 0, 1, \"%.2f\"))[0]:\n        self.state.isometric = state[1]\n    if (state := imgui.slider_float(\"Dolly\", self.state.dolly, 0, 5, \"%.2f\"))[0]:\n        self.state.dolly = state[1]\n\n    imgui.text(\"- True camera position\")\n    if (state := imgui.slider_float(\"Center X\", self.state.center_x, -self.aspect_ratio, self.aspect_ratio, \"%.2f\"))[0]:\n        self.state.center_x = state[1]\n    if (state := imgui.slider_float(\"Center Y\", self.state.center_y, -1, 1, \"%.2f\"))[0]:\n        self.state.center_y = state[1]\n\n    imgui.text(\"- Fixed point at height changes\")\n    if (state := imgui.slider_float(\"Origin X\", self.state.origin_x, -self.aspect_ratio, self.aspect_ratio, \"%.2f\"))[0]:\n        self.state.origin_x = state[1]\n    if (state := imgui.slider_float(\"Origin Y\", self.state.origin_y, -1, 1, \"%.2f\"))[0]:\n        self.state.origin_y = state[1]\n\n    imgui.text(\"- Parallax offset\")\n    if (state := imgui.slider_float(\"Offset X\", self.state.offset_x, -2, 2, \"%.2f\"))[0]:\n        self.state.offset_x = state[1]\n    if (state := imgui.slider_float(\"Offset Y\", self.state.offset_y, -2, 2, \"%.2f\"))[0]:\n        self.state.offset_y = state[1]\n</code></pre>"},{"location":"code/depthflow/server/","title":"File: <code>DepthFlow/Server.py</code>","text":""},{"location":"code/depthflow/server/#DepthFlow.Server","title":"DepthFlow.Server","text":""},{"location":"code/depthflow/server/#DepthFlow.Server.PydanticImage","title":"PydanticImage","text":"<pre><code>PydanticImage = Union[str, Path, HttpUrl]\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthInput","title":"DepthInput","text":"<p>               Bases: <code>BrokenModel</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/Server.py</code> <pre><code>class DepthInput(BrokenModel):\n    image: PydanticImage = DepthScene.DEFAULT_IMAGE\n    depth: Optional[PydanticImage] = None\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthInput.image","title":"image","text":"<pre><code>image: PydanticImage = DepthScene.DEFAULT_IMAGE\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthInput.depth","title":"depth","text":"<pre><code>depth: Optional[PydanticImage] = None\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthPayload","title":"DepthPayload","text":"<p>               Bases: <code>BrokenModel</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/Server.py</code> <pre><code>class DepthPayload(BrokenModel):\n    input:     DepthInput     = Field(default_factory=DepthInput)\n    estimator: DepthEstimator = Field(default_factory=DepthAnythingV2)\n    animation: DepthAnimation = Field(default_factory=DepthAnimation)\n    upscaler:  BrokenUpscaler = Field(default_factory=NoUpscaler)\n    render:    RenderSettings = Field(default_factory=RenderSettings)\n    ffmpeg:    BrokenFFmpeg   = Field(default_factory=BrokenFFmpeg)\n    expire:    int            = Field(3600, exclude=True)\n    hash:      int            = Field(0, exclude=True)\n    priority:  int            = Field(0, exclude=True)\n\n    # Priority queue sorting\n\n    def __lt__(self, other: Self) -&gt; bool:\n        return (self.priority &gt; other.priority)\n\n    def __gt__(self, other: Self) -&gt; bool:\n        return (self.priority &lt; other.priority)\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthPayload.input","title":"input","text":"<pre><code>input: DepthInput = Field(default_factory=DepthInput)\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthPayload.estimator","title":"estimator","text":"<pre><code>estimator: DepthEstimator = Field(\n    default_factory=DepthAnythingV2\n)\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthPayload.animation","title":"animation","text":"<pre><code>animation: DepthAnimation = Field(\n    default_factory=DepthAnimation\n)\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthPayload.upscaler","title":"upscaler","text":"<pre><code>upscaler: BrokenUpscaler = Field(default_factory=NoUpscaler)\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthPayload.render","title":"render","text":"<pre><code>render: RenderSettings = Field(\n    default_factory=RenderSettings\n)\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthPayload.ffmpeg","title":"ffmpeg","text":"<pre><code>ffmpeg: BrokenFFmpeg = Field(default_factory=BrokenFFmpeg)\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthPayload.expire","title":"expire","text":"<pre><code>expire: int = Field(3600, exclude=True)\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthPayload.hash","title":"hash","text":"<pre><code>hash: int = Field(0, exclude=True)\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthPayload.priority","title":"priority","text":"<pre><code>priority: int = Field(0, exclude=True)\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthPayload.__lt__","title":"__lt__","text":"<pre><code>__lt__(other: Self) -&gt; bool\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Server.py</code> <pre><code>def __lt__(self, other: Self) -&gt; bool:\n    return (self.priority &gt; other.priority)\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthPayload.__gt__","title":"__gt__","text":"<pre><code>__gt__(other: Self) -&gt; bool\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Server.py</code> <pre><code>def __gt__(self, other: Self) -&gt; bool:\n    return (self.priority &lt; other.priority)\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthWorker","title":"DepthWorker","text":"<p>               Bases: <code>ParallelQueue</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/Server.py</code> <pre><code>class DepthWorker(ParallelQueue):\n    def worker(self):\n        scene = DepthScene(backend=\"headless\")\n\n        for endurance in itertools.count(1):\n            task: DepthPayload = self.next()\n            print(\"Rendering payload:\", task.json())\n\n            try:\n                # The classes are already cooked by fastapi!\n                scene.estimator = task.estimator\n                scene.animation = task.animation\n                scene.upscaler  = task.upscaler\n                scene.ffmpeg    = task.ffmpeg\n                scene.ffmpeg.empty_audio()\n                scene.input(\n                    image=task.input.image,\n                    depth=task.input.depth\n                )\n\n                # Render the video, read contents, delete temp file\n                with tempfile.NamedTemporaryFile(\n                    suffix=(\".\"+task.render.format),\n                    delete=False,\n                ) as temp:\n                    video: bytes = scene.main(\n                        **task.render.dict(),\n                        output=Path(temp.name),\n                        progress=False\n                    )[0].read_bytes()\n\n                    self.done(task, video)\n\n            except Exception as error:\n                log.error(f\"Error rendering video: {error}\")\n                self.done(task, error)\n\n            finally:\n                with contextlib.suppress(FileNotFoundError):\n                    os.unlink(temp.name)\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthWorker.worker","title":"worker","text":"<pre><code>worker()\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Server.py</code> <pre><code>def worker(self):\n    scene = DepthScene(backend=\"headless\")\n\n    for endurance in itertools.count(1):\n        task: DepthPayload = self.next()\n        print(\"Rendering payload:\", task.json())\n\n        try:\n            # The classes are already cooked by fastapi!\n            scene.estimator = task.estimator\n            scene.animation = task.animation\n            scene.upscaler  = task.upscaler\n            scene.ffmpeg    = task.ffmpeg\n            scene.ffmpeg.empty_audio()\n            scene.input(\n                image=task.input.image,\n                depth=task.input.depth\n            )\n\n            # Render the video, read contents, delete temp file\n            with tempfile.NamedTemporaryFile(\n                suffix=(\".\"+task.render.format),\n                delete=False,\n            ) as temp:\n                video: bytes = scene.main(\n                    **task.render.dict(),\n                    output=Path(temp.name),\n                    progress=False\n                )[0].read_bytes()\n\n                self.done(task, video)\n\n        except Exception as error:\n            log.error(f\"Error rendering video: {error}\")\n            self.done(task, error)\n\n        finally:\n            with contextlib.suppress(FileNotFoundError):\n                os.unlink(temp.name)\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthServer","title":"DepthServer","text":"<p>               Bases: <code>BrokenFastAPI</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/Server.py</code> <pre><code>@define\nclass DepthServer(BrokenFastAPI):\n    cli: BrokenTyper = Factory(lambda: BrokenTyper(chain=True))\n\n    queue: ParallelQueue = None\n    \"\"\"The queue of workers processing tasks\"\"\"\n\n    def __attrs_post_init__(self):\n        self.api.title = \"DepthFlow Project API\"\n        self.api.version = Runtime.Version\n        self.cli.description = DEPTHFLOW_ABOUT\n\n        # Commands\n        with self.cli.panel(\"\ud83d\udce6 Server endpoints\"):\n            self.cli.command(self.launch)\n            self.cli.command(self.runpod)\n\n        with self.cli.panel(\"\ud83d\ude80 Core\"):\n            self.cli.command(self.config)\n            self.cli.command(self.test)\n\n        # Endpoints\n        self.api.post(\"/estimate\")(self.estimate)\n        self.api.post(\"/upscale\")(self.upscale)\n        self.api.post(\"/render\")(self.render)\n\n        # Processing\n        self.queue = DepthWorker(\n            cache_path=(DEPTHFLOW.DIRECTORIES.CACHE/\"ServerRender\"),\n            cache_size=Environment.float(\"DEPTHSERVER_CACHE_SIZE_MB\", 500),\n            size=Environment.int(\"DEPTHSERVER_WORKERS\", 3),\n        ).start()\n\n    def config(self,\n        workers: WorkersType=3\n    ) -&gt; None:\n        self.queue.size = workers\n\n    # -------------------------------------------|\n    # Routes\n\n    async def estimate(self,\n        image: PydanticImage,\n        estimator: DepthEstimator=DepthAnythingV2(),\n    ) -&gt; Response:\n        return Response(\n            media_type=\"image/png\",\n            content=Image.open(estimator.estimate(image)).tobytes()\n        )\n\n    async def upscale(self,\n        image: PydanticImage,\n        upscaler: BrokenUpscaler=NoUpscaler(),\n    ) -&gt; Response:\n        return Response(\n            media_type=\"image/png\",\n            content=upscaler.upscale(image).tobytes()\n        )\n\n    async def render(self, task: DepthPayload) -&gt; Response:\n        start: float = time.perf_counter()\n        task = DepthPayload.load(task)\n        task.hash = hash(task)\n\n        for index in itertools.count(1):\n\n            # Video is already cached or finished\n            if (video := self.queue.get(task)):\n                if isinstance((error := video), Exception):\n                    return Response(\n                        status_code=500,\n                        media_type=\"text/plain\",\n                        content=str(error),\n                    )\n\n                return Response(\n                    media_type=f\"video/{task.render.format}\",\n                    content=video,\n                    headers=dict(\n                        took=f\"{time.perf_counter() - start:.2f}\",\n                        cached=str(index == 1).lower(),\n                    ),\n                )\n\n            # Timeout logic to prevent hanging\n            elif (start + 30 &lt; time.perf_counter()):\n                return Response(\n                    status_code=503,\n                    media_type=\"text/plain\",\n                    content=\"Request timed out\",\n                )\n\n            self.queue.put(task)\n            await asyncio.sleep(0.100)\n\n    # -------------------------------------------|\n    # Testing\n\n    def test(self,\n        jobs: Annotated[int, Option(\"--jobs\", \"-j\",\n            help=\"How many jobs to queue up\")]=1,\n    ) -&gt; None:\n        def request(client: int) -&gt; None:\n            config = DepthPayload(\n                priority=client,\n                input=DepthInput(\n                    image=\"https://w.wallhaven.cc/full/ex/wallhaven-ex1yxk.jpg\"\n                    # image=\"/home/tremeschin/plant.jpg\"\n                ),\n                ffmpeg=BrokenFFmpeg().h264_nvenc(),\n                render=RenderSettings(\n                    ssaa=1.0,\n                    width=1280,\n                    fps=60,\n                    loop=1,\n                    time=0.01 + client/1000000,\n                ),\n                animation=DepthAnimation(\n                    steps=[\n                        Actions.Orbital(),\n                        # Actions.Lens(),\n                    ]\n                )\n            )\n\n            # Debug print the payload\n            from rich.pretty import pprint\n            pprint(f\"POST: {config.json()}\")\n\n            # Actually send the job request\n            response = requests.post(\n                url=f\"{self.api_url}/render\",\n                json=config.dict()\n            )\n\n            # Save the video to disk\n            Path(path := f\"/tmp/video-{client}.mp4\") \\\n                .write_bytes(response.content)\n\n            headers = DotMap(response.headers)\n            log.success(f\"Saved video to {path}, cached: {headers.cached}\")\n\n        # Stress test parallel requests\n        with ThreadPoolExecutor(max_workers=10) as pool:\n            for worker in range(jobs):\n                pool.submit(request, worker)\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthServer.cli","title":"cli","text":"<pre><code>cli: BrokenTyper = Factory(lambda: BrokenTyper(chain=True))\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthServer.queue","title":"queue","text":"<pre><code>queue: ParallelQueue = None\n</code></pre> <p>The queue of workers processing tasks</p>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthServer.__attrs_post_init__","title":"__attrs_post_init__","text":"<pre><code>__attrs_post_init__()\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Server.py</code> <pre><code>def __attrs_post_init__(self):\n    self.api.title = \"DepthFlow Project API\"\n    self.api.version = Runtime.Version\n    self.cli.description = DEPTHFLOW_ABOUT\n\n    # Commands\n    with self.cli.panel(\"\ud83d\udce6 Server endpoints\"):\n        self.cli.command(self.launch)\n        self.cli.command(self.runpod)\n\n    with self.cli.panel(\"\ud83d\ude80 Core\"):\n        self.cli.command(self.config)\n        self.cli.command(self.test)\n\n    # Endpoints\n    self.api.post(\"/estimate\")(self.estimate)\n    self.api.post(\"/upscale\")(self.upscale)\n    self.api.post(\"/render\")(self.render)\n\n    # Processing\n    self.queue = DepthWorker(\n        cache_path=(DEPTHFLOW.DIRECTORIES.CACHE/\"ServerRender\"),\n        cache_size=Environment.float(\"DEPTHSERVER_CACHE_SIZE_MB\", 500),\n        size=Environment.int(\"DEPTHSERVER_WORKERS\", 3),\n    ).start()\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthServer.config","title":"config","text":"<pre><code>config(workers: WorkersType = 3) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Server.py</code> <pre><code>def config(self,\n    workers: WorkersType=3\n) -&gt; None:\n    self.queue.size = workers\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthServer.estimate","title":"estimate","text":"<pre><code>estimate(\n    image: PydanticImage,\n    estimator: DepthEstimator = DepthAnythingV2(),\n) -&gt; Response\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Server.py</code> <pre><code>async def estimate(self,\n    image: PydanticImage,\n    estimator: DepthEstimator=DepthAnythingV2(),\n) -&gt; Response:\n    return Response(\n        media_type=\"image/png\",\n        content=Image.open(estimator.estimate(image)).tobytes()\n    )\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthServer.upscale","title":"upscale","text":"<pre><code>upscale(\n    image: PydanticImage,\n    upscaler: BrokenUpscaler = NoUpscaler(),\n) -&gt; Response\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Server.py</code> <pre><code>async def upscale(self,\n    image: PydanticImage,\n    upscaler: BrokenUpscaler=NoUpscaler(),\n) -&gt; Response:\n    return Response(\n        media_type=\"image/png\",\n        content=upscaler.upscale(image).tobytes()\n    )\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthServer.render","title":"render","text":"<pre><code>render(task: DepthPayload) -&gt; Response\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Server.py</code> <pre><code>async def render(self, task: DepthPayload) -&gt; Response:\n    start: float = time.perf_counter()\n    task = DepthPayload.load(task)\n    task.hash = hash(task)\n\n    for index in itertools.count(1):\n\n        # Video is already cached or finished\n        if (video := self.queue.get(task)):\n            if isinstance((error := video), Exception):\n                return Response(\n                    status_code=500,\n                    media_type=\"text/plain\",\n                    content=str(error),\n                )\n\n            return Response(\n                media_type=f\"video/{task.render.format}\",\n                content=video,\n                headers=dict(\n                    took=f\"{time.perf_counter() - start:.2f}\",\n                    cached=str(index == 1).lower(),\n                ),\n            )\n\n        # Timeout logic to prevent hanging\n        elif (start + 30 &lt; time.perf_counter()):\n            return Response(\n                status_code=503,\n                media_type=\"text/plain\",\n                content=\"Request timed out\",\n            )\n\n        self.queue.put(task)\n        await asyncio.sleep(0.100)\n</code></pre>"},{"location":"code/depthflow/server/#DepthFlow.Server.DepthServer.test","title":"test","text":"<pre><code>test(\n    jobs: Annotated[\n        int,\n        Option(\n            --jobs, -j, help=\"How many jobs to queue up\"\n        ),\n    ] = 1,\n) -&gt; None\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Server.py</code> <pre><code>def test(self,\n    jobs: Annotated[int, Option(\"--jobs\", \"-j\",\n        help=\"How many jobs to queue up\")]=1,\n) -&gt; None:\n    def request(client: int) -&gt; None:\n        config = DepthPayload(\n            priority=client,\n            input=DepthInput(\n                image=\"https://w.wallhaven.cc/full/ex/wallhaven-ex1yxk.jpg\"\n                # image=\"/home/tremeschin/plant.jpg\"\n            ),\n            ffmpeg=BrokenFFmpeg().h264_nvenc(),\n            render=RenderSettings(\n                ssaa=1.0,\n                width=1280,\n                fps=60,\n                loop=1,\n                time=0.01 + client/1000000,\n            ),\n            animation=DepthAnimation(\n                steps=[\n                    Actions.Orbital(),\n                    # Actions.Lens(),\n                ]\n            )\n        )\n\n        # Debug print the payload\n        from rich.pretty import pprint\n        pprint(f\"POST: {config.json()}\")\n\n        # Actually send the job request\n        response = requests.post(\n            url=f\"{self.api_url}/render\",\n            json=config.dict()\n        )\n\n        # Save the video to disk\n        Path(path := f\"/tmp/video-{client}.mp4\") \\\n            .write_bytes(response.content)\n\n        headers = DotMap(response.headers)\n        log.success(f\"Saved video to {path}, cached: {headers.cached}\")\n\n    # Stress test parallel requests\n    with ThreadPoolExecutor(max_workers=10) as pool:\n        for worker in range(jobs):\n            pool.submit(request, worker)\n</code></pre>"},{"location":"code/depthflow/state/","title":"File: <code>DepthFlow/State.py</code>","text":""},{"location":"code/depthflow/state/#DepthFlow.State","title":"DepthFlow.State","text":""},{"location":"code/depthflow/state/#DepthFlow.State.VignetteState","title":"VignetteState","text":"<p>               Bases: <code>BrokenModel</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/State.py</code> <pre><code>class VignetteState(BrokenModel):\n    enable: Annotated[bool, BrokenTyper.exclude()] = Field(False)\n    \"\"\"Enable this vignette (darken corners) effect\"\"\"\n\n    intensity: Annotated[float, Option(\"--intensity\", \"-i\", min=0, max=100)] = Field(30.0)\n    \"\"\"The intensity of the effect (darken amount on edges)\"\"\"\n\n    decay: Annotated[float, Option(\"--decay\", \"-d\", min=0, max=1)] = Field(0.1)\n    \"\"\"A decay of one starts the effect in the middle of the screen\"\"\"\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        yield Uniform(\"bool\",  \"iVigEnable\",    self.enable)\n        yield Uniform(\"float\", \"iVigIntensity\", self.intensity)\n        yield Uniform(\"float\", \"iVigDecay\",     self.decay)\n</code></pre>"},{"location":"code/depthflow/state/#DepthFlow.State.VignetteState.enable","title":"enable","text":"<pre><code>enable: Annotated[bool, BrokenTyper.exclude()] = Field(\n    False\n)\n</code></pre> <p>Enable this vignette (darken corners) effect</p>"},{"location":"code/depthflow/state/#DepthFlow.State.VignetteState.intensity","title":"intensity","text":"<pre><code>intensity: Annotated[\n    float, Option(--intensity, -i, min=0, max=100)\n] = Field(30.0)\n</code></pre> <p>The intensity of the effect (darken amount on edges)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.VignetteState.decay","title":"decay","text":"<pre><code>decay: Annotated[\n    float, Option(--decay, -d, min=0, max=1)\n] = Field(0.1)\n</code></pre> <p>A decay of one starts the effect in the middle of the screen</p>"},{"location":"code/depthflow/state/#DepthFlow.State.VignetteState.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/State.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    yield Uniform(\"bool\",  \"iVigEnable\",    self.enable)\n    yield Uniform(\"float\", \"iVigIntensity\", self.intensity)\n    yield Uniform(\"float\", \"iVigDecay\",     self.decay)\n</code></pre>"},{"location":"code/depthflow/state/#DepthFlow.State.LensState","title":"LensState","text":"<p>               Bases: <code>BrokenModel</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/State.py</code> <pre><code>class LensState(BrokenModel):\n    enable: Annotated[bool, BrokenTyper.exclude()] = Field(False)\n    \"\"\"Enable this lens distortion effect\"\"\"\n\n    intensity: Annotated[float, Option(\"--intensity\", \"-i\", min=0, max=4)] = Field(0.3)\n    \"\"\"The intensity of the effect (blur amount on edges)\"\"\"\n\n    decay: Annotated[float, Option(\"--decay\", \"-d\", min=0, max=2)] = Field(0.4)\n    \"\"\"A decay of one starts the effect in the middle of the screen\"\"\"\n\n    quality: Annotated[int, Option(\"--quality\", \"-q\", min=0, max=50)] = Field(30)\n    \"\"\"The quality of the effect (samples per pixel)\"\"\"\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        yield Uniform(\"bool\",  \"iLensEnable\",    self.enable)\n        yield Uniform(\"float\", \"iLensIntensity\", self.intensity)\n        yield Uniform(\"float\", \"iLensDecay\",     self.decay)\n        yield Uniform(\"int\",   \"iLensQuality\",   self.quality)\n</code></pre>"},{"location":"code/depthflow/state/#DepthFlow.State.LensState.enable","title":"enable","text":"<pre><code>enable: Annotated[bool, BrokenTyper.exclude()] = Field(\n    False\n)\n</code></pre> <p>Enable this lens distortion effect</p>"},{"location":"code/depthflow/state/#DepthFlow.State.LensState.intensity","title":"intensity","text":"<pre><code>intensity: Annotated[\n    float, Option(--intensity, -i, min=0, max=4)\n] = Field(0.3)\n</code></pre> <p>The intensity of the effect (blur amount on edges)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.LensState.decay","title":"decay","text":"<pre><code>decay: Annotated[\n    float, Option(--decay, -d, min=0, max=2)\n] = Field(0.4)\n</code></pre> <p>A decay of one starts the effect in the middle of the screen</p>"},{"location":"code/depthflow/state/#DepthFlow.State.LensState.quality","title":"quality","text":"<pre><code>quality: Annotated[\n    int, Option(--quality, -q, min=0, max=50)\n] = Field(30)\n</code></pre> <p>The quality of the effect (samples per pixel)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.LensState.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/State.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    yield Uniform(\"bool\",  \"iLensEnable\",    self.enable)\n    yield Uniform(\"float\", \"iLensIntensity\", self.intensity)\n    yield Uniform(\"float\", \"iLensDecay\",     self.decay)\n    yield Uniform(\"int\",   \"iLensQuality\",   self.quality)\n</code></pre>"},{"location":"code/depthflow/state/#DepthFlow.State.BlurState","title":"BlurState","text":"<p>               Bases: <code>BrokenModel</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/State.py</code> <pre><code>class BlurState(BrokenModel):\n    enable: Annotated[bool, BrokenTyper.exclude()] = Field(False)\n    \"\"\"Enable this depth of field (blur) effect\"\"\"\n\n    intensity: Annotated[float, Option(\"--intensity\", \"-i\", min=0, max=2)] = Field(1.0)\n    \"\"\"The intensity of the effect (blur radius)\"\"\"\n\n    start: Annotated[float, Option(\"--start\", \"-a\", min=0, max=1)] = Field(0.6)\n    \"\"\"The effect starts at this depth value\"\"\"\n\n    end: Annotated[float, Option(\"--end\", \"-b\", min=0, max=1)] = Field(1.0)\n    \"\"\"The effect ends at this depth value\"\"\"\n\n    exponent: Annotated[float, Option(\"--exponent\", \"-x\", min=0, max=8)] = Field(2.0)\n    \"\"\"Shaping exponent of the start and end interpolation\"\"\"\n\n    quality: Annotated[int, Option(\"--quality\", \"-q\", min=1, max=16)] = Field(4)\n    \"\"\"The quality of the effect (radial sampling steps)\"\"\"\n\n    directions: Annotated[int, Option(\"--directions\", \"-d\", min=1, max=32)] = Field(16)\n    \"\"\"The quality of the effect (radial sampling directions)\"\"\"\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        yield Uniform(\"bool\",  \"iBlurEnable\",     self.enable)\n        yield Uniform(\"float\", \"iBlurIntensity\",  self.intensity/100)\n        yield Uniform(\"float\", \"iBlurStart\",      self.start)\n        yield Uniform(\"float\", \"iBlurEnd\",        self.end)\n        yield Uniform(\"float\", \"iBlurExponent\",   self.exponent)\n        yield Uniform(\"int\",   \"iBlurQuality\",    self.quality)\n        yield Uniform(\"int\",   \"iBlurDirections\", self.directions)\n</code></pre>"},{"location":"code/depthflow/state/#DepthFlow.State.BlurState.enable","title":"enable","text":"<pre><code>enable: Annotated[bool, BrokenTyper.exclude()] = Field(\n    False\n)\n</code></pre> <p>Enable this depth of field (blur) effect</p>"},{"location":"code/depthflow/state/#DepthFlow.State.BlurState.intensity","title":"intensity","text":"<pre><code>intensity: Annotated[\n    float, Option(--intensity, -i, min=0, max=2)\n] = Field(1.0)\n</code></pre> <p>The intensity of the effect (blur radius)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.BlurState.start","title":"start","text":"<pre><code>start: Annotated[\n    float, Option(--start, -a, min=0, max=1)\n] = Field(0.6)\n</code></pre> <p>The effect starts at this depth value</p>"},{"location":"code/depthflow/state/#DepthFlow.State.BlurState.end","title":"end","text":"<pre><code>end: Annotated[float, Option(--end, -b, min=0, max=1)] = (\n    Field(1.0)\n)\n</code></pre> <p>The effect ends at this depth value</p>"},{"location":"code/depthflow/state/#DepthFlow.State.BlurState.exponent","title":"exponent","text":"<pre><code>exponent: Annotated[\n    float, Option(--exponent, -x, min=0, max=8)\n] = Field(2.0)\n</code></pre> <p>Shaping exponent of the start and end interpolation</p>"},{"location":"code/depthflow/state/#DepthFlow.State.BlurState.quality","title":"quality","text":"<pre><code>quality: Annotated[\n    int, Option(--quality, -q, min=1, max=16)\n] = Field(4)\n</code></pre> <p>The quality of the effect (radial sampling steps)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.BlurState.directions","title":"directions","text":"<pre><code>directions: Annotated[\n    int, Option(--directions, -d, min=1, max=32)\n] = Field(16)\n</code></pre> <p>The quality of the effect (radial sampling directions)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.BlurState.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/State.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    yield Uniform(\"bool\",  \"iBlurEnable\",     self.enable)\n    yield Uniform(\"float\", \"iBlurIntensity\",  self.intensity/100)\n    yield Uniform(\"float\", \"iBlurStart\",      self.start)\n    yield Uniform(\"float\", \"iBlurEnd\",        self.end)\n    yield Uniform(\"float\", \"iBlurExponent\",   self.exponent)\n    yield Uniform(\"int\",   \"iBlurQuality\",    self.quality)\n    yield Uniform(\"int\",   \"iBlurDirections\", self.directions)\n</code></pre>"},{"location":"code/depthflow/state/#DepthFlow.State.InpaintState","title":"InpaintState","text":"<p>               Bases: <code>BrokenModel</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/State.py</code> <pre><code>class InpaintState(BrokenModel):\n    enable: Annotated[bool, BrokenTyper.exclude()] = Field(False)\n    \"\"\"Enable the inpainting effect (masks stretchy regions for advanced usage)\"\"\"\n\n    black: Annotated[bool, Option(\"--black\", \"-b\")] = Field(False)\n    \"\"\"Replace non-steep regions with black color instead of the base image\"\"\"\n\n    limit: Annotated[float, Option(\"--limit\", \"-l\", min=0, max=20)] = Field(1.0)\n    \"\"\"The threshold for the steepness of the regions (heuristic)\"\"\"\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        yield Uniform(\"bool\",  \"iInpaint\",      self.enable)\n        yield Uniform(\"bool\",  \"iInpaintBlack\", self.black)\n        yield Uniform(\"float\", \"iInpaintLimit\", self.limit)\n</code></pre>"},{"location":"code/depthflow/state/#DepthFlow.State.InpaintState.enable","title":"enable","text":"<pre><code>enable: Annotated[bool, BrokenTyper.exclude()] = Field(\n    False\n)\n</code></pre> <p>Enable the inpainting effect (masks stretchy regions for advanced usage)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.InpaintState.black","title":"black","text":"<pre><code>black: Annotated[bool, Option(--black, -b)] = Field(False)\n</code></pre> <p>Replace non-steep regions with black color instead of the base image</p>"},{"location":"code/depthflow/state/#DepthFlow.State.InpaintState.limit","title":"limit","text":"<pre><code>limit: Annotated[\n    float, Option(--limit, -l, min=0, max=20)\n] = Field(1.0)\n</code></pre> <p>The threshold for the steepness of the regions (heuristic)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.InpaintState.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/State.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    yield Uniform(\"bool\",  \"iInpaint\",      self.enable)\n    yield Uniform(\"bool\",  \"iInpaintBlack\", self.black)\n    yield Uniform(\"float\", \"iInpaintLimit\", self.limit)\n</code></pre>"},{"location":"code/depthflow/state/#DepthFlow.State.ColorState","title":"ColorState","text":"<p>               Bases: <code>BrokenModel</code></p> Source code in <code>Projects/DepthFlow/DepthFlow/State.py</code> <pre><code>class ColorState(BrokenModel):\n    enable: Annotated[bool, BrokenTyper.exclude()] = Field(False)\n    \"\"\"Enable color manipulation effects\"\"\"\n\n    saturation: Annotated[float, Option(\"--saturation\", \"-s\", min=0, max=200)] = Field(100.0)\n    \"\"\"Saturation of the image (0 is grayscale, 100 is original, makes colors more vibrant)\"\"\"\n\n    contrast: Annotated[float, Option(\"--contrast\", \"-c\", min=0, max=200)] = Field(100.0)\n    \"\"\"Contrast of the image (0 is full gray, 100 is original, increases difference between light and dark)\"\"\"\n\n    brightness: Annotated[float, Option(\"--brightness\", \"-b\", min=0, max=200)] = Field(100.0)\n    \"\"\"Brightness of the image (0 is black, 100 is original, increases overall lightness)\"\"\"\n\n    gamma: Annotated[float, Option(\"--gamma\", \"-g\", min=0, max=400)] = Field(100.0)\n    \"\"\"Gamma of the image (0 is black, 100 is original, increases brightness 'shaping' curve)\"\"\"\n\n    grayscale: Annotated[float, Option(\"--grayscale\", \"-x\", min=0, max=100)] = Field(0.0)\n    \"\"\"Grayscale effect of the image (0 is full color, 100 is grayscale)\"\"\"\n\n    sepia: Annotated[float, Option(\"--sepia\", \"-n\", min=0, max=200)] = Field(0.0)\n    \"\"\"Sepia effect of the image (0 is grayscale, 100 is full sepia, a brownish nostalgic tint)\"\"\"\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        yield Uniform(\"float\", \"iColorsSaturation\", self.saturation/100)\n        yield Uniform(\"float\", \"iColorsContrast\",   self.contrast/100)\n        yield Uniform(\"float\", \"iColorsBrightness\", self.brightness/100)\n        yield Uniform(\"float\", \"iColorsGamma\",      self.gamma/100)\n        yield Uniform(\"float\", \"iColorsGrayscale\",  self.grayscale/100)\n        yield Uniform(\"float\", \"iColorsSepia\",      self.sepia/100)\n</code></pre>"},{"location":"code/depthflow/state/#DepthFlow.State.ColorState.enable","title":"enable","text":"<pre><code>enable: Annotated[bool, BrokenTyper.exclude()] = Field(\n    False\n)\n</code></pre> <p>Enable color manipulation effects</p>"},{"location":"code/depthflow/state/#DepthFlow.State.ColorState.saturation","title":"saturation","text":"<pre><code>saturation: Annotated[\n    float, Option(--saturation, -s, min=0, max=200)\n] = Field(100.0)\n</code></pre> <p>Saturation of the image (0 is grayscale, 100 is original, makes colors more vibrant)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.ColorState.contrast","title":"contrast","text":"<pre><code>contrast: Annotated[\n    float, Option(--contrast, -c, min=0, max=200)\n] = Field(100.0)\n</code></pre> <p>Contrast of the image (0 is full gray, 100 is original, increases difference between light and dark)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.ColorState.brightness","title":"brightness","text":"<pre><code>brightness: Annotated[\n    float, Option(--brightness, -b, min=0, max=200)\n] = Field(100.0)\n</code></pre> <p>Brightness of the image (0 is black, 100 is original, increases overall lightness)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.ColorState.gamma","title":"gamma","text":"<pre><code>gamma: Annotated[\n    float, Option(--gamma, -g, min=0, max=400)\n] = Field(100.0)\n</code></pre> <p>Gamma of the image (0 is black, 100 is original, increases brightness 'shaping' curve)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.ColorState.grayscale","title":"grayscale","text":"<pre><code>grayscale: Annotated[\n    float, Option(--grayscale, -x, min=0, max=100)\n] = Field(0.0)\n</code></pre> <p>Grayscale effect of the image (0 is full color, 100 is grayscale)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.ColorState.sepia","title":"sepia","text":"<pre><code>sepia: Annotated[\n    float, Option(--sepia, -n, min=0, max=200)\n] = Field(0.0)\n</code></pre> <p>Sepia effect of the image (0 is grayscale, 100 is full sepia, a brownish nostalgic tint)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.ColorState.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/State.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    yield Uniform(\"float\", \"iColorsSaturation\", self.saturation/100)\n    yield Uniform(\"float\", \"iColorsContrast\",   self.contrast/100)\n    yield Uniform(\"float\", \"iColorsBrightness\", self.brightness/100)\n    yield Uniform(\"float\", \"iColorsGamma\",      self.gamma/100)\n    yield Uniform(\"float\", \"iColorsGrayscale\",  self.grayscale/100)\n    yield Uniform(\"float\", \"iColorsSepia\",      self.sepia/100)\n</code></pre>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState","title":"DepthState","text":"<p>               Bases: <code>BrokenModel</code></p> <p>Set effect parameters, animations might override them!</p> Source code in <code>Projects/DepthFlow/DepthFlow/State.py</code> <pre><code>class DepthState(BrokenModel):\n    \"\"\"Set effect parameters, animations might override them!\"\"\"\n\n    height: Annotated[float, Option(\"--height\", \"-h\", min=0, max=2)] = Field(0.20)\n    \"\"\"Depthmap's peak value, the parallax intensity\"\"\"\n\n    steady: Annotated[float, Option(\"--steady\", \"-s\", min=0, max=1)] = Field(0.0)\n    \"\"\"Focal depth plane of offsets (A value of 0 makes the background stationary; and 1 for the foreground)\"\"\"\n\n    focus: Annotated[float, Option(\"--focus\", \"-f\", min=0, max=1)] = Field(0.0)\n    \"\"\"Focal depth plane of perspective (A value of 0 makes the background stationary; and 1 for the foreground)\"\"\"\n\n    zoom: Annotated[float, Option(\"--zoom\", \"-z\", min=0, max=2)] = Field(1.0)\n    \"\"\"Camera zoom factor (0.25 means a quarter of the image is visible)\"\"\"\n\n    isometric: Annotated[float, Option(\"--isometric\", \"-i\", min=0, max=1)] = Field(0.0)\n    \"\"\"Isometric factor of camera projections (0 is full perspective, 1 is orthographic)\"\"\"\n\n    dolly: Annotated[float, Option(\"--dolly\", \"-d\", min=0, max=20)] = Field(0.0)\n    \"\"\"Natural isometric changes (Moves back ray projections origins by this amount)\"\"\"\n\n    invert: Annotated[float, Option(\"--invert\", \"-v\", min=0, max=1)] = Field(0.0)\n    \"\"\"Interpolate depth values between (0=far, 1=near) and vice-versa, as in mix(height, 1-height, invert)\"\"\"\n\n    mirror: Annotated[bool, Option(\"--mirror\", \"-m\", \" /-n\")] = Field(True)\n    \"\"\"Apply GL_MIRRORED_REPEAT to the image (The image is mirrored out of bounds on the respective edge)\"\"\"\n\n    # # Offset\n\n    offset_x: Annotated[float, Option(\"--offset-x\", \"--ofx\", min=-4, max=4)] = Field(0.0)\n    \"\"\"Horizontal parallax displacement, change this over time for the 3D effect\"\"\"\n\n    offset_y: Annotated[float, Option(\"--offset-y\", \"--ofy\", min=-1, max=1)] = Field(0.0)\n    \"\"\"Vertical parallax displacement, change this over time for the 3D effect\"\"\"\n\n    @property\n    def offset(self) -&gt; tuple[float, float]:\n        \"\"\"Parallax displacement vector, change this over time for the 3D effect\"\"\"\n        return (self.offset_x, self.offset_y)\n\n    @offset.setter\n    def offset(self, value: tuple[float, float]):\n        self.offset_x, self.offset_y = value\n\n    # # Center\n\n    center_x: Annotated[float, Option(\"--center-x\", \"--cex\", min=-4, max=4)] = Field(0.0)\n    \"\"\"Horizontal 'true' offset of the camera, the camera *is* above this point\"\"\"\n\n    center_y: Annotated[float, Option(\"--center-y\", \"--cey\", min=-1, max=1)] = Field(0.0)\n    \"\"\"Vertical 'true' offset of the camera, the camera *is* above this point\"\"\"\n\n    @property\n    def center(self) -&gt; tuple[float, float]:\n        \"\"\"'True' offset vector of the camera, the camera *is* above this point\"\"\"\n        return (self.center_x, self.center_y)\n\n    @center.setter\n    def center(self, value: tuple[float, float]):\n        self.center_x, self.center_y = value\n\n    # # Origin\n\n    origin_x: Annotated[float, Option(\"--origin-x\", \"--orx\", min=-4, max=4)] = Field(0.0)\n    \"\"\"Horizontal focal point of the offsets, *as if* the camera was above this point\"\"\"\n\n    origin_y: Annotated[float, Option(\"--origin-y\", \"--ory\", min=-1, max=1)] = Field(0.0)\n    \"\"\"Vertical focal point of the offsets, *as if* the camera was above this point\"\"\"\n\n    @property\n    def origin(self) -&gt; tuple[float, float]:\n        \"\"\"Focal point vector of the offsets, *as if* the camera was above this point\"\"\"\n        return (self.origin_x, self.origin_y)\n\n    @origin.setter\n    def origin(self, value: tuple[float, float]):\n        self.origin_x, self.origin_y = value\n\n    # ---------------------------------------------------------------------------------------------|\n\n    vignette: Annotated[VignetteState, BrokenTyper.exclude()] = \\\n        Field(default_factory=VignetteState)\n\n    lens: Annotated[LensState, BrokenTyper.exclude()] = \\\n        Field(default_factory=LensState)\n\n    inpaint: Annotated[InpaintState, BrokenTyper.exclude()] = \\\n        Field(default_factory=InpaintState)\n\n    colors: Annotated[ColorState, BrokenTyper.exclude()] = \\\n        Field(default_factory=ColorState)\n\n    blur: Annotated[BlurState, BrokenTyper.exclude()] = \\\n        Field(default_factory=BlurState)\n\n    # ---------------------------------------------------------------------------------------------|\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        yield Uniform(\"float\", \"iDepthHeight\",    self.height)\n        yield Uniform(\"float\", \"iDepthSteady\",    self.steady)\n        yield Uniform(\"float\", \"iDepthFocus\",     self.focus)\n        yield Uniform(\"float\", \"iDepthInvert\",    self.invert)\n        yield Uniform(\"float\", \"iDepthZoom\",      self.zoom)\n        yield Uniform(\"float\", \"iDepthIsometric\", self.isometric)\n        yield Uniform(\"float\", \"iDepthDolly\",     self.dolly)\n        yield Uniform(\"vec2\",  \"iDepthOffset\",    self.offset)\n        yield Uniform(\"vec2\",  \"iDepthCenter\",    self.center)\n        yield Uniform(\"vec2\",  \"iDepthOrigin\",    self.origin)\n        yield Uniform(\"bool\",  \"iDepthMirror\",    self.mirror)\n        yield from self.vignette.pipeline()\n        yield from self.lens.pipeline()\n        yield from self.inpaint.pipeline()\n        yield from self.colors.pipeline()\n        yield from self.blur.pipeline()\n</code></pre>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.height","title":"height","text":"<pre><code>height: Annotated[\n    float, Option(--height, -h, min=0, max=2)\n] = Field(0.2)\n</code></pre> <p>Depthmap's peak value, the parallax intensity</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.steady","title":"steady","text":"<pre><code>steady: Annotated[\n    float, Option(--steady, -s, min=0, max=1)\n] = Field(0.0)\n</code></pre> <p>Focal depth plane of offsets (A value of 0 makes the background stationary; and 1 for the foreground)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.focus","title":"focus","text":"<pre><code>focus: Annotated[\n    float, Option(--focus, -f, min=0, max=1)\n] = Field(0.0)\n</code></pre> <p>Focal depth plane of perspective (A value of 0 makes the background stationary; and 1 for the foreground)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.zoom","title":"zoom","text":"<pre><code>zoom: Annotated[\n    float, Option(--zoom, -z, min=0, max=2)\n] = Field(1.0)\n</code></pre> <p>Camera zoom factor (0.25 means a quarter of the image is visible)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.isometric","title":"isometric","text":"<pre><code>isometric: Annotated[\n    float, Option(--isometric, -i, min=0, max=1)\n] = Field(0.0)\n</code></pre> <p>Isometric factor of camera projections (0 is full perspective, 1 is orthographic)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.dolly","title":"dolly","text":"<pre><code>dolly: Annotated[\n    float, Option(--dolly, -d, min=0, max=20)\n] = Field(0.0)\n</code></pre> <p>Natural isometric changes (Moves back ray projections origins by this amount)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.invert","title":"invert","text":"<pre><code>invert: Annotated[\n    float, Option(--invert, -v, min=0, max=1)\n] = Field(0.0)\n</code></pre> <p>Interpolate depth values between (0=far, 1=near) and vice-versa, as in mix(height, 1-height, invert)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.mirror","title":"mirror","text":"<pre><code>mirror: Annotated[bool, Option(--mirror, -m, \" /-n\")] = (\n    Field(True)\n)\n</code></pre> <p>Apply GL_MIRRORED_REPEAT to the image (The image is mirrored out of bounds on the respective edge)</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.offset_x","title":"offset_x","text":"<pre><code>offset_x: Annotated[\n    float, Option(--offset - x, --ofx, min=-4, max=4)\n] = Field(0.0)\n</code></pre> <p>Horizontal parallax displacement, change this over time for the 3D effect</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.offset_y","title":"offset_y","text":"<pre><code>offset_y: Annotated[\n    float, Option(--offset - y, --ofy, min=-1, max=1)\n] = Field(0.0)\n</code></pre> <p>Vertical parallax displacement, change this over time for the 3D effect</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.offset","title":"offset","text":"<pre><code>offset: tuple[float, float]\n</code></pre> <p>Parallax displacement vector, change this over time for the 3D effect</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.center_x","title":"center_x","text":"<pre><code>center_x: Annotated[\n    float, Option(--center - x, --cex, min=-4, max=4)\n] = Field(0.0)\n</code></pre> <p>Horizontal 'true' offset of the camera, the camera is above this point</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.center_y","title":"center_y","text":"<pre><code>center_y: Annotated[\n    float, Option(--center - y, --cey, min=-1, max=1)\n] = Field(0.0)\n</code></pre> <p>Vertical 'true' offset of the camera, the camera is above this point</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.center","title":"center","text":"<pre><code>center: tuple[float, float]\n</code></pre> <p>'True' offset vector of the camera, the camera is above this point</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.origin_x","title":"origin_x","text":"<pre><code>origin_x: Annotated[\n    float, Option(--origin - x, --orx, min=-4, max=4)\n] = Field(0.0)\n</code></pre> <p>Horizontal focal point of the offsets, as if the camera was above this point</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.origin_y","title":"origin_y","text":"<pre><code>origin_y: Annotated[\n    float, Option(--origin - y, --ory, min=-1, max=1)\n] = Field(0.0)\n</code></pre> <p>Vertical focal point of the offsets, as if the camera was above this point</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.origin","title":"origin","text":"<pre><code>origin: tuple[float, float]\n</code></pre> <p>Focal point vector of the offsets, as if the camera was above this point</p>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.vignette","title":"vignette","text":"<pre><code>vignette: Annotated[\n    VignetteState, BrokenTyper.exclude()\n] = Field(default_factory=VignetteState)\n</code></pre>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.lens","title":"lens","text":"<pre><code>lens: Annotated[LensState, BrokenTyper.exclude()] = Field(\n    default_factory=LensState\n)\n</code></pre>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.inpaint","title":"inpaint","text":"<pre><code>inpaint: Annotated[InpaintState, BrokenTyper.exclude()] = (\n    Field(default_factory=InpaintState)\n)\n</code></pre>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.colors","title":"colors","text":"<pre><code>colors: Annotated[ColorState, BrokenTyper.exclude()] = (\n    Field(default_factory=ColorState)\n)\n</code></pre>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.blur","title":"blur","text":"<pre><code>blur: Annotated[BlurState, BrokenTyper.exclude()] = Field(\n    default_factory=BlurState\n)\n</code></pre>"},{"location":"code/depthflow/state/#DepthFlow.State.DepthState.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/State.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    yield Uniform(\"float\", \"iDepthHeight\",    self.height)\n    yield Uniform(\"float\", \"iDepthSteady\",    self.steady)\n    yield Uniform(\"float\", \"iDepthFocus\",     self.focus)\n    yield Uniform(\"float\", \"iDepthInvert\",    self.invert)\n    yield Uniform(\"float\", \"iDepthZoom\",      self.zoom)\n    yield Uniform(\"float\", \"iDepthIsometric\", self.isometric)\n    yield Uniform(\"float\", \"iDepthDolly\",     self.dolly)\n    yield Uniform(\"vec2\",  \"iDepthOffset\",    self.offset)\n    yield Uniform(\"vec2\",  \"iDepthCenter\",    self.center)\n    yield Uniform(\"vec2\",  \"iDepthOrigin\",    self.origin)\n    yield Uniform(\"bool\",  \"iDepthMirror\",    self.mirror)\n    yield from self.vignette.pipeline()\n    yield from self.lens.pipeline()\n    yield from self.inpaint.pipeline()\n    yield from self.colors.pipeline()\n    yield from self.blur.pipeline()\n</code></pre>"},{"location":"code/depthflow/webui/","title":"File: <code>DepthFlow/Webui.py</code>","text":""},{"location":"code/depthflow/webui/#DepthFlow.Webui","title":"DepthFlow.Webui","text":""},{"location":"code/depthflow/webui/#DepthFlow.Webui.WEBUI_OUTPUT","title":"WEBUI_OUTPUT","text":"<pre><code>WEBUI_OUTPUT: Path = BrokenPath.recreate(\n    DEPTHFLOW.DIRECTORIES.SYSTEM_TEMP / \"WebUI\"\n)\n</code></pre> <p>The temporary output for the WebUI, cleaned at the start and after any render</p>"},{"location":"code/depthflow/webui/#DepthFlow.Webui.ESTIMATORS","title":"ESTIMATORS","text":"<pre><code>ESTIMATORS: dict[str, DepthEstimator] = {\n    \"DepthAnything Small\": DepthAnythingV2(\n        model=DepthAnythingV2.Model.Small\n    ),\n    \"DepthAnything Base\": DepthAnythingV2(\n        model=DepthAnythingV2.Model.Base\n    ),\n    \"DepthAnything Large\": DepthAnythingV2(\n        model=DepthAnythingV2.Model.Large\n    ),\n}\n</code></pre>"},{"location":"code/depthflow/webui/#DepthFlow.Webui.UPSCALERS","title":"UPSCALERS","text":"<pre><code>UPSCALERS: dict[str, BrokenUpscaler] = {\n    \"Upscayl Digital Art\": Upscayl(\n        model=Upscayl.Model.DigitalArt\n    ),\n    \"Upscayl High Fidelity\": Upscayl(\n        model=Upscayl.Model.HighFidelity\n    ),\n    \"Real-ESRGAN\": Realesr(),\n    \"Waifu2x\": Waifu2x(),\n}\n</code></pre>"},{"location":"code/depthflow/webui/#DepthFlow.Webui.DepthGradio","title":"DepthGradio","text":"Source code in <code>Projects/DepthFlow/DepthFlow/Webui.py</code> <pre><code>@define\nclass DepthGradio:\n    interface: gradio.Blocks = None\n    fields: DotMap = Factory(DotMap)\n\n    def simple(self, method: Callable, **options: dict) -&gt; dict:\n        \"\"\"An ugly hack to avoid manually listing inputs and outputs\"\"\"\n        show_progress = bool(options.get(\"outputs\"))\n        outputs = options.pop(\"outputs\", set(DictUtils.rvalues(self.fields)))\n        inputs  = options.pop(\"inputs\",  set(DictUtils.rvalues(self.fields)))\n        return dict(\n            fn=method,\n            inputs=inputs,\n            outputs=outputs,\n            show_progress=show_progress,\n            **options,\n        )\n\n    def _estimator(self, user: dict) -&gt; DepthEstimator:\n        return ESTIMATORS[user[self.fields.estimator]]\n\n    def _upscaler(self, user: dict) -&gt; BrokenUpscaler:\n        return UPSCALERS[user[self.fields.upscaler]]\n\n    def estimate(self, user: dict):\n        if ((image := user[self.fields.image]) is None):\n            return None\n        yield {\n            self.fields.depth:  self._estimator(user).estimate(image),\n            self.fields.width:  image.size[0],\n            self.fields.height: image.size[1]\n        }\n\n    def upscale(self, user: dict):\n        if ((image := user[self.fields.image]) is None):\n            return gradio.Warning(\"The input image is empty\")\n        yield {self.fields.image: self._upscaler(user).upscale(image)}\n\n    def _fit_resolution(self, user: dict, target: tuple[int, int]) -&gt; tuple[int, int]:\n        if (user[self.fields.image] is None):\n            raise GeneratorExit()\n        width, height = user[self.fields.image].size\n        return BrokenResolution().fit(\n            old=(1920, 1080), new=target,\n            ar=(width/height), multiple=1,\n        )\n\n    def fit_width(self, user: dict):\n        yield {self.fields.height: self._fit_resolution(user, (user[self.fields.width], None))[1]}\n\n    def fit_height(self, user: dict):\n        yield {self.fields.width: self._fit_resolution(user, (None, user[self.fields.height]))[0]}\n\n    def render(self, user: dict):\n        if (user[self.fields.image] is None):\n            return gradio.Warning(\"The input image is empty\")\n        if (user[self.fields.depth] is None):\n            return gradio.Warning(\"The input depthmap is empty\")\n\n        def worker():\n            from DepthFlow.Scene import DepthScene\n            scene = DepthScene(backend=\"headless\")\n            scene.set_estimator(self._estimator(user))\n            scene.input(image=user[self.fields.image], depth=user[self.fields.depth])\n            scene.aspect_ratio = None\n\n            # Build and add any enabled preset class\n            for preset in Actions.members():\n                preset_name = preset.__name__\n                preset_dict = self.fields.animation[preset_name]\n                if (not preset_dict.enable):\n                    continue\n                if (not user[preset_dict.enable]):\n                    continue\n                scene.config.animation.add(preset(**{\n                    key: user[item] for (key, item) in preset_dict.options.items()\n                }))\n\n            return scene.main(\n                width=user[self.fields.width],\n                height=user[self.fields.height],\n                ssaa=user[self.fields.ssaa],\n                fps=user[self.fields.fps],\n                time=user[self.fields.time],\n                loop=user[self.fields.loop],\n                output=(WEBUI_OUTPUT/f\"{uuid.uuid4()}.mp4\"),\n                noturbo=(not user[self.fields.turbopipe]),\n            )[0]\n\n        with ThreadPool() as pool:\n            task = pool.submit(worker)\n            yield {self.fields.video: task.result()}\n            os.remove(task.result())\n\n    def launch(self,\n        port: Annotated[int, Option(\"--port\", \"-p\",\n            help=\"Port to run the WebUI on\")]=None,\n        server: Annotated[str, Option(\"--server\",\n            help=\"Server to run the WebUI on\")]=\"0.0.0.0\",\n        share: Annotated[bool, Option(\"--share\", \"-s\",\n            help=\"Share the WebUI on the network\")]=False,\n        threads: Annotated[int,  Option(\"--threads\", \"-t\",\n            help=\"Number of maximum concurrent renders\")]=4,\n        browser: Annotated[bool, Option(\"--open\", \" /--no-open\",\n            help=\"Open the WebUI in the browser\")]=True,\n        block: Annotated[bool, Option(\"--block\", \"-b\", \" /--no-block\",\n            help=\"Holds the main thread until the WebUI is closed\")]=True,\n    ) -&gt; gradio.Blocks:\n        with gradio.Blocks(\n            theme=gradio.themes.Ocean(\n                font=(fonts.GoogleFont(\"Roboto Slab\"),),\n                font_mono=(fonts.GoogleFont(\"Fira Code\"),),\n                primary_hue=colors.emerald,\n                spacing_size=sizes.spacing_sm,\n                radius_size=sizes.radius_sm,\n                text_size=sizes.text_sm,\n            ),\n            analytics_enabled=False,\n            title=\"DepthFlow WebUI\",\n            fill_height=True,\n            fill_width=True\n        ) as self.interface:\n\n            gradio.Markdown(\"# \ud83c\udf0a DepthFlow\")\n\n            with gradio.Tab(\"Application\"):\n                with gradio.Row(equal_height=True):\n                    with gradio.Column(variant=\"panel\"):\n                        self.fields.image = gradio.Image(scale=1,\n                            sources=[\"upload\", \"clipboard\"],\n                            type=\"pil\", label=\"Input image\",\n                            interactive=True,\n                        )\n                        with gradio.Row(equal_height=True):\n                            self.fields.upscaler = gradio.Dropdown(\n                                choices=list(UPSCALERS.keys()),\n                                value=list(UPSCALERS.keys())[0],\n                                label=\"Upscaler\", scale=10\n                            )\n                            self.fields.upscale = gradio.Button(value=\"\ud83d\ude80 Upscale\", scale=1)\n\n                    with gradio.Column(variant=\"panel\"):\n                        self.fields.depth = gradio.Image(scale=1,\n                            sources=[\"upload\", \"clipboard\"],\n                            type=\"pil\", label=\"Depthmap\"\n                        )\n                        with gradio.Row(equal_height=True):\n                            self.fields.estimator = gradio.Dropdown(\n                                choices=list(ESTIMATORS.keys()),\n                                value=list(ESTIMATORS.keys())[0],\n                                label=\"Depth Estimator\", scale=10\n                            )\n                            self.fields.estimate = gradio.Button(value=\"\ud83d\udd0e Estimate\", scale=1)\n\n                    with gradio.Column(variant=\"panel\"):\n                        self.fields.video = gradio.Video(scale=1,\n                            label=\"Output video\",\n                            interactive=False,\n                            autoplay=True,\n                        )\n                        self.fields.render = gradio.Button(\n                            value=\"\ud83d\udd25 Render \ud83d\udd25\",\n                            variant=\"primary\",\n                        )\n\n                with gradio.Row(equal_height=True, variant=\"panel\"):\n                    with gradio.Accordion(\"Animation (WIP)\", open=False):\n                        def animation_type(type):\n                            for preset in Actions.members():\n                                if not issubclass(preset, type):\n                                    continue\n                                preset_name = preset.__name__\n                                preset_dict = self.fields.animation[preset_name]\n\n                                with gradio.Tab(preset_name):\n                                    preset_dict.enable = gradio.Checkbox(\n                                        value=False, label=\"Enable\", info=preset.__doc__)\n\n                                    for attr, field in preset.model_fields.items():\n                                        if (attr.lower() == \"enable\"):\n                                            continue\n                                        if (field.annotation is bool):\n                                            preset_dict.options[attr] = gradio.Checkbox(\n                                                value=field.default,\n                                                label=attr.capitalize(),\n                                                info=field.description,\n                                            )\n                                        elif (field.annotation is float):\n                                            preset_dict.options[attr] = gradio.Slider(\n                                                minimum=field.metadata[0].min,\n                                                maximum=field.metadata[0].max,\n                                                step=0.01, label=attr.capitalize(),\n                                                value=field.default,\n                                                info=field.description,\n                                            )\n                                        elif (isinstance(field.annotation, tuple)):\n                                            print(attr, field, field.annotation)\n\n                        with gradio.Tab(\"Presets\"):\n                            animation_type(PresetBase)\n                        with gradio.Tab(\"Filters\"):\n                            animation_type(FilterBase)\n\n                with gradio.Row(equal_height=True):\n                    with gradio.Column(variant=\"panel\"):\n                        self.fields.width = gradio.Number(label=\"Width\",\n                            minimum=1, precision=0, scale=10, value=1920)\n                        self.fields.fit_height = gradio.Button(\n                            value=\"\u27a1\ufe0f Fit height\", scale=1)\n\n                    with gradio.Column(variant=\"panel\"):\n                        self.fields.height = gradio.Number(label=\"Height\",\n                            minimum=1, precision=0, scale=10, value=1080)\n                        self.fields.fit_width = gradio.Button(\n                            value=\"\u2b05\ufe0f Fit width\", scale=1)\n\n                    with gradio.Column(variant=\"panel\"):\n                        self.fields.ssaa = gradio.Slider(label=\"Super sampling anti-aliasing\",\n                            info=\"Smoother edges and better quality\",\n                            value=1.5, minimum=1, maximum=2, step=0.1)\n\n                    with gradio.Column(variant=\"panel\"):\n                        self.fields.quality = gradio.Slider(label=\"Shader quality\",\n                            info=\"Improves intersections calculations\",\n                            value=50, minimum=0, maximum=100, step=10)\n\n                    self.fields.fit_height.click(**self.simple(self.fit_width))\n                    self.fields.fit_width.click(**self.simple(self.fit_height))\n\n                with gradio.Row(equal_height=True, variant=\"panel\"):\n                    self.fields.time = gradio.Slider(label=\"Duration (seconds)\",\n                        info=\"How long the animation or its loop lasts\",\n                        minimum=0, maximum=30, step=0.5, value=5)\n                    self.fields.fps = gradio.Slider(label=\"Framerate (fps)\",\n                        info=\"Defines the animation smoothness\",\n                        minimum=1, maximum=120, step=1, value=60)\n                    self.fields.loop = gradio.Slider(label=\"Loop count\",\n                        info=\"Repeat the final video this many times\",\n                        minimum=1, maximum=10, step=1, value=1)\n\n            with gradio.Tab(\"Advanced\"):\n                self.fields.turbopipe = gradio.Checkbox(label=\"Enable TurboPipe\", value=True,\n                    info=\"Improves rendering speeds, disable if you encounter issues or crashes\")\n\n            # Update depth map and resolution on image change\n            outputs = {self.fields.image, self.fields.depth, self.fields.width, self.fields.height}\n            self.fields.image    .change(**self.simple(self.estimate, outputs=outputs))\n            self.fields.upscale  .click (**self.simple(self.upscale,  outputs=outputs))\n            self.fields.estimator.change(**self.simple(self.estimate, outputs=outputs))\n            self.fields.estimate .click (**self.simple(self.estimate, outputs=outputs))\n\n            # Main render button\n            self.fields.render.click(**self.simple(\n                self.render, outputs={self.fields.video}\n            ))\n\n            gradio.Markdown(''.join((\n                \"Made with \u2764\ufe0f by [**Tremeschin**](https://github.com/Tremeschin) | \",\n                f\"**Alpha** WebUI v{DEPTHFLOW.VERSION} | \",\n                \"[**Website**](https://brokensrc.dev/) | \"\n                \"[**Discord**](https://discord.com/invite/KjqvcYwRHm/) | \",\n                \"[**Telegram**](https://t.me/BrokenSource/) | \",\n                \"[**GitHub**](https://github.com/BrokenSource/DepthFlow)\"\n            )))\n\n        return self.interface.launch(\n            allowed_paths=[DEPTHFLOW.DIRECTORIES.DATA],\n            favicon_path=DEPTHFLOW.RESOURCES.ICON_PNG,\n            inbrowser=browser, show_api=False,\n            prevent_thread_lock=(not block),\n            max_threads=threads,\n            server_name=server,\n            server_port=port,\n            share=share,\n        )\n</code></pre>"},{"location":"code/depthflow/webui/#DepthFlow.Webui.DepthGradio.interface","title":"interface","text":"<pre><code>interface: gradio.Blocks = None\n</code></pre>"},{"location":"code/depthflow/webui/#DepthFlow.Webui.DepthGradio.fields","title":"fields","text":"<pre><code>fields: DotMap = Factory(DotMap)\n</code></pre>"},{"location":"code/depthflow/webui/#DepthFlow.Webui.DepthGradio.simple","title":"simple","text":"<pre><code>simple(method: Callable, **options: dict) -&gt; dict\n</code></pre> <p>An ugly hack to avoid manually listing inputs and outputs</p> Source code in <code>Projects/DepthFlow/DepthFlow/Webui.py</code> <pre><code>def simple(self, method: Callable, **options: dict) -&gt; dict:\n    \"\"\"An ugly hack to avoid manually listing inputs and outputs\"\"\"\n    show_progress = bool(options.get(\"outputs\"))\n    outputs = options.pop(\"outputs\", set(DictUtils.rvalues(self.fields)))\n    inputs  = options.pop(\"inputs\",  set(DictUtils.rvalues(self.fields)))\n    return dict(\n        fn=method,\n        inputs=inputs,\n        outputs=outputs,\n        show_progress=show_progress,\n        **options,\n    )\n</code></pre>"},{"location":"code/depthflow/webui/#DepthFlow.Webui.DepthGradio.estimate","title":"estimate","text":"<pre><code>estimate(user: dict)\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Webui.py</code> <pre><code>def estimate(self, user: dict):\n    if ((image := user[self.fields.image]) is None):\n        return None\n    yield {\n        self.fields.depth:  self._estimator(user).estimate(image),\n        self.fields.width:  image.size[0],\n        self.fields.height: image.size[1]\n    }\n</code></pre>"},{"location":"code/depthflow/webui/#DepthFlow.Webui.DepthGradio.upscale","title":"upscale","text":"<pre><code>upscale(user: dict)\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Webui.py</code> <pre><code>def upscale(self, user: dict):\n    if ((image := user[self.fields.image]) is None):\n        return gradio.Warning(\"The input image is empty\")\n    yield {self.fields.image: self._upscaler(user).upscale(image)}\n</code></pre>"},{"location":"code/depthflow/webui/#DepthFlow.Webui.DepthGradio.fit_width","title":"fit_width","text":"<pre><code>fit_width(user: dict)\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Webui.py</code> <pre><code>def fit_width(self, user: dict):\n    yield {self.fields.height: self._fit_resolution(user, (user[self.fields.width], None))[1]}\n</code></pre>"},{"location":"code/depthflow/webui/#DepthFlow.Webui.DepthGradio.fit_height","title":"fit_height","text":"<pre><code>fit_height(user: dict)\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Webui.py</code> <pre><code>def fit_height(self, user: dict):\n    yield {self.fields.width: self._fit_resolution(user, (None, user[self.fields.height]))[0]}\n</code></pre>"},{"location":"code/depthflow/webui/#DepthFlow.Webui.DepthGradio.render","title":"render","text":"<pre><code>render(user: dict)\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Webui.py</code> <pre><code>def render(self, user: dict):\n    if (user[self.fields.image] is None):\n        return gradio.Warning(\"The input image is empty\")\n    if (user[self.fields.depth] is None):\n        return gradio.Warning(\"The input depthmap is empty\")\n\n    def worker():\n        from DepthFlow.Scene import DepthScene\n        scene = DepthScene(backend=\"headless\")\n        scene.set_estimator(self._estimator(user))\n        scene.input(image=user[self.fields.image], depth=user[self.fields.depth])\n        scene.aspect_ratio = None\n\n        # Build and add any enabled preset class\n        for preset in Actions.members():\n            preset_name = preset.__name__\n            preset_dict = self.fields.animation[preset_name]\n            if (not preset_dict.enable):\n                continue\n            if (not user[preset_dict.enable]):\n                continue\n            scene.config.animation.add(preset(**{\n                key: user[item] for (key, item) in preset_dict.options.items()\n            }))\n\n        return scene.main(\n            width=user[self.fields.width],\n            height=user[self.fields.height],\n            ssaa=user[self.fields.ssaa],\n            fps=user[self.fields.fps],\n            time=user[self.fields.time],\n            loop=user[self.fields.loop],\n            output=(WEBUI_OUTPUT/f\"{uuid.uuid4()}.mp4\"),\n            noturbo=(not user[self.fields.turbopipe]),\n        )[0]\n\n    with ThreadPool() as pool:\n        task = pool.submit(worker)\n        yield {self.fields.video: task.result()}\n        os.remove(task.result())\n</code></pre>"},{"location":"code/depthflow/webui/#DepthFlow.Webui.DepthGradio.launch","title":"launch","text":"<pre><code>launch(\n    port: Annotated[\n        int,\n        Option(\n            --port, -p, help=\"Port to run the WebUI on\"\n        ),\n    ] = None,\n    server: Annotated[\n        str,\n        Option(--server, help=\"Server to run the WebUI on\"),\n    ] = \"0.0.0.0\",\n    share: Annotated[\n        bool,\n        Option(\n            --share,\n            -s,\n            help=\"Share the WebUI on the network\",\n        ),\n    ] = False,\n    threads: Annotated[\n        int,\n        Option(\n            --threads,\n            -t,\n            help=\"Number of maximum concurrent renders\",\n        ),\n    ] = 4,\n    browser: Annotated[\n        bool,\n        Option(\n            --open,\n            \" /--no-open\",\n            help=\"Open the WebUI in the browser\",\n        ),\n    ] = True,\n    block: Annotated[\n        bool,\n        Option(\n            --block,\n            -b,\n            \" /--no-block\",\n            help=\"Holds the main thread until the WebUI is closed\",\n        ),\n    ] = True,\n) -&gt; gradio.Blocks\n</code></pre> Source code in <code>Projects/DepthFlow/DepthFlow/Webui.py</code> <pre><code>def launch(self,\n    port: Annotated[int, Option(\"--port\", \"-p\",\n        help=\"Port to run the WebUI on\")]=None,\n    server: Annotated[str, Option(\"--server\",\n        help=\"Server to run the WebUI on\")]=\"0.0.0.0\",\n    share: Annotated[bool, Option(\"--share\", \"-s\",\n        help=\"Share the WebUI on the network\")]=False,\n    threads: Annotated[int,  Option(\"--threads\", \"-t\",\n        help=\"Number of maximum concurrent renders\")]=4,\n    browser: Annotated[bool, Option(\"--open\", \" /--no-open\",\n        help=\"Open the WebUI in the browser\")]=True,\n    block: Annotated[bool, Option(\"--block\", \"-b\", \" /--no-block\",\n        help=\"Holds the main thread until the WebUI is closed\")]=True,\n) -&gt; gradio.Blocks:\n    with gradio.Blocks(\n        theme=gradio.themes.Ocean(\n            font=(fonts.GoogleFont(\"Roboto Slab\"),),\n            font_mono=(fonts.GoogleFont(\"Fira Code\"),),\n            primary_hue=colors.emerald,\n            spacing_size=sizes.spacing_sm,\n            radius_size=sizes.radius_sm,\n            text_size=sizes.text_sm,\n        ),\n        analytics_enabled=False,\n        title=\"DepthFlow WebUI\",\n        fill_height=True,\n        fill_width=True\n    ) as self.interface:\n\n        gradio.Markdown(\"# \ud83c\udf0a DepthFlow\")\n\n        with gradio.Tab(\"Application\"):\n            with gradio.Row(equal_height=True):\n                with gradio.Column(variant=\"panel\"):\n                    self.fields.image = gradio.Image(scale=1,\n                        sources=[\"upload\", \"clipboard\"],\n                        type=\"pil\", label=\"Input image\",\n                        interactive=True,\n                    )\n                    with gradio.Row(equal_height=True):\n                        self.fields.upscaler = gradio.Dropdown(\n                            choices=list(UPSCALERS.keys()),\n                            value=list(UPSCALERS.keys())[0],\n                            label=\"Upscaler\", scale=10\n                        )\n                        self.fields.upscale = gradio.Button(value=\"\ud83d\ude80 Upscale\", scale=1)\n\n                with gradio.Column(variant=\"panel\"):\n                    self.fields.depth = gradio.Image(scale=1,\n                        sources=[\"upload\", \"clipboard\"],\n                        type=\"pil\", label=\"Depthmap\"\n                    )\n                    with gradio.Row(equal_height=True):\n                        self.fields.estimator = gradio.Dropdown(\n                            choices=list(ESTIMATORS.keys()),\n                            value=list(ESTIMATORS.keys())[0],\n                            label=\"Depth Estimator\", scale=10\n                        )\n                        self.fields.estimate = gradio.Button(value=\"\ud83d\udd0e Estimate\", scale=1)\n\n                with gradio.Column(variant=\"panel\"):\n                    self.fields.video = gradio.Video(scale=1,\n                        label=\"Output video\",\n                        interactive=False,\n                        autoplay=True,\n                    )\n                    self.fields.render = gradio.Button(\n                        value=\"\ud83d\udd25 Render \ud83d\udd25\",\n                        variant=\"primary\",\n                    )\n\n            with gradio.Row(equal_height=True, variant=\"panel\"):\n                with gradio.Accordion(\"Animation (WIP)\", open=False):\n                    def animation_type(type):\n                        for preset in Actions.members():\n                            if not issubclass(preset, type):\n                                continue\n                            preset_name = preset.__name__\n                            preset_dict = self.fields.animation[preset_name]\n\n                            with gradio.Tab(preset_name):\n                                preset_dict.enable = gradio.Checkbox(\n                                    value=False, label=\"Enable\", info=preset.__doc__)\n\n                                for attr, field in preset.model_fields.items():\n                                    if (attr.lower() == \"enable\"):\n                                        continue\n                                    if (field.annotation is bool):\n                                        preset_dict.options[attr] = gradio.Checkbox(\n                                            value=field.default,\n                                            label=attr.capitalize(),\n                                            info=field.description,\n                                        )\n                                    elif (field.annotation is float):\n                                        preset_dict.options[attr] = gradio.Slider(\n                                            minimum=field.metadata[0].min,\n                                            maximum=field.metadata[0].max,\n                                            step=0.01, label=attr.capitalize(),\n                                            value=field.default,\n                                            info=field.description,\n                                        )\n                                    elif (isinstance(field.annotation, tuple)):\n                                        print(attr, field, field.annotation)\n\n                    with gradio.Tab(\"Presets\"):\n                        animation_type(PresetBase)\n                    with gradio.Tab(\"Filters\"):\n                        animation_type(FilterBase)\n\n            with gradio.Row(equal_height=True):\n                with gradio.Column(variant=\"panel\"):\n                    self.fields.width = gradio.Number(label=\"Width\",\n                        minimum=1, precision=0, scale=10, value=1920)\n                    self.fields.fit_height = gradio.Button(\n                        value=\"\u27a1\ufe0f Fit height\", scale=1)\n\n                with gradio.Column(variant=\"panel\"):\n                    self.fields.height = gradio.Number(label=\"Height\",\n                        minimum=1, precision=0, scale=10, value=1080)\n                    self.fields.fit_width = gradio.Button(\n                        value=\"\u2b05\ufe0f Fit width\", scale=1)\n\n                with gradio.Column(variant=\"panel\"):\n                    self.fields.ssaa = gradio.Slider(label=\"Super sampling anti-aliasing\",\n                        info=\"Smoother edges and better quality\",\n                        value=1.5, minimum=1, maximum=2, step=0.1)\n\n                with gradio.Column(variant=\"panel\"):\n                    self.fields.quality = gradio.Slider(label=\"Shader quality\",\n                        info=\"Improves intersections calculations\",\n                        value=50, minimum=0, maximum=100, step=10)\n\n                self.fields.fit_height.click(**self.simple(self.fit_width))\n                self.fields.fit_width.click(**self.simple(self.fit_height))\n\n            with gradio.Row(equal_height=True, variant=\"panel\"):\n                self.fields.time = gradio.Slider(label=\"Duration (seconds)\",\n                    info=\"How long the animation or its loop lasts\",\n                    minimum=0, maximum=30, step=0.5, value=5)\n                self.fields.fps = gradio.Slider(label=\"Framerate (fps)\",\n                    info=\"Defines the animation smoothness\",\n                    minimum=1, maximum=120, step=1, value=60)\n                self.fields.loop = gradio.Slider(label=\"Loop count\",\n                    info=\"Repeat the final video this many times\",\n                    minimum=1, maximum=10, step=1, value=1)\n\n        with gradio.Tab(\"Advanced\"):\n            self.fields.turbopipe = gradio.Checkbox(label=\"Enable TurboPipe\", value=True,\n                info=\"Improves rendering speeds, disable if you encounter issues or crashes\")\n\n        # Update depth map and resolution on image change\n        outputs = {self.fields.image, self.fields.depth, self.fields.width, self.fields.height}\n        self.fields.image    .change(**self.simple(self.estimate, outputs=outputs))\n        self.fields.upscale  .click (**self.simple(self.upscale,  outputs=outputs))\n        self.fields.estimator.change(**self.simple(self.estimate, outputs=outputs))\n        self.fields.estimate .click (**self.simple(self.estimate, outputs=outputs))\n\n        # Main render button\n        self.fields.render.click(**self.simple(\n            self.render, outputs={self.fields.video}\n        ))\n\n        gradio.Markdown(''.join((\n            \"Made with \u2764\ufe0f by [**Tremeschin**](https://github.com/Tremeschin) | \",\n            f\"**Alpha** WebUI v{DEPTHFLOW.VERSION} | \",\n            \"[**Website**](https://brokensrc.dev/) | \"\n            \"[**Discord**](https://discord.com/invite/KjqvcYwRHm/) | \",\n            \"[**Telegram**](https://t.me/BrokenSource/) | \",\n            \"[**GitHub**](https://github.com/BrokenSource/DepthFlow)\"\n        )))\n\n    return self.interface.launch(\n        allowed_paths=[DEPTHFLOW.DIRECTORIES.DATA],\n        favicon_path=DEPTHFLOW.RESOURCES.ICON_PNG,\n        inbrowser=browser, show_api=False,\n        prevent_thread_lock=(not block),\n        max_threads=threads,\n        server_name=server,\n        server_port=port,\n        share=share,\n    )\n</code></pre>"},{"location":"code/depthflow/webui/#DepthFlow.Webui.demo","title":"demo","text":"<pre><code>demo = DepthGradio()\n</code></pre>"},{"location":"code/pianola/__init__/","title":"File: <code>Pianola/__init__.py</code>","text":""},{"location":"code/pianola/__init__/#Pianola","title":"Pianola","text":""},{"location":"code/pianola/__init__/#Pianola.PIANOLA_ABOUT","title":"PIANOLA_ABOUT","text":"<pre><code>PIANOLA_ABOUT = \"\\n\ud83c\udfb9 World's finest piano roll visualizer, where elegance meets motion.\\n\\n\\n\u2192 See the [blue link=https://brokensrc.dev/pianola/]Website[/] for examples and more information!\\n\\n\"\n</code></pre>"},{"location":"code/pianola/__init__/#Pianola.PIANOLA","title":"PIANOLA","text":"<pre><code>PIANOLA = BrokenProject(\n    PACKAGE=__file__,\n    APP_NAME=\"Pianola\",\n    APP_AUTHOR=\"BrokenSource\",\n    RESOURCES=PianolaResources,\n    ABOUT=PIANOLA_ABOUT,\n)\n</code></pre>"},{"location":"code/pianola/__init__/#Pianola.PROJECT","title":"PROJECT","text":"<pre><code>PROJECT = BrokenProject(\n    PACKAGE=__file__,\n    APP_NAME=\"Pianola\",\n    APP_AUTHOR=\"BrokenSource\",\n    RESOURCES=PianolaResources,\n    ABOUT=PIANOLA_ABOUT,\n)\n</code></pre>"},{"location":"code/pianola/__main__/","title":"File: <code>Pianola/__main__.py</code>","text":""},{"location":"code/pianola/__main__/#Pianola.__main__","title":"Pianola.__main__","text":""},{"location":"code/pianola/__main__/#Pianola.__main__.main","title":"main","text":"<pre><code>main()\n</code></pre> Source code in <code>Projects/Pianola/Pianola/__main__.py</code> <pre><code>def main():\n    with BrokenProfiler(\"PIANOLA\"):\n        pianola = PianolaScene()\n        pianola.cli(sys.argv[1:])\n</code></pre>"},{"location":"code/pianola/pianola/","title":"File: <code>Pianola/Pianola.py</code>","text":""},{"location":"code/pianola/pianola/#Pianola.Pianola","title":"Pianola.Pianola","text":""},{"location":"code/pianola/pianola/#Pianola.Pianola.PIANOLA_SHADER","title":"PIANOLA_SHADER","text":"<pre><code>PIANOLA_SHADER: Path = (\n    PIANOLA.RESOURCES.SHADERS / \"Pianola.frag\"\n)\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.SoundFonts","title":"SoundFonts","text":"<p>               Bases: <code>StaticClass</code></p> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>class SoundFonts(StaticClass):\n\n    @staticmethod\n    @functools.lru_cache\n    def Salamander() -&gt; Path:\n        \"\"\"Salamander Grand Piano, Licensed under CC-BY-3.0, by Alexander Holm\"\"\"\n        URL = \"https://freepats.zenvoid.org/Piano/SalamanderGrandPiano/SalamanderGrandPiano-SF2-V3+20200602.tar.xz\"\n        return next(BrokenPath.get_external(URL).rglob(\"*.sf2\"))\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.SoundFonts.Salamander","title":"Salamander","text":"<pre><code>Salamander() -&gt; Path\n</code></pre> <p>Salamander Grand Piano, Licensed under CC-BY-3.0, by Alexander Holm</p> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>@staticmethod\n@functools.lru_cache\ndef Salamander() -&gt; Path:\n    \"\"\"Salamander Grand Piano, Licensed under CC-BY-3.0, by Alexander Holm\"\"\"\n    URL = \"https://freepats.zenvoid.org/Piano/SalamanderGrandPiano/SalamanderGrandPiano-SF2-V3+20200602.tar.xz\"\n    return next(BrokenPath.get_external(URL).rglob(\"*.sf2\"))\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.Songs","title":"Songs","text":"<p>               Bases: <code>StaticClass</code></p> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>class Songs(StaticClass):\n\n    @staticmethod\n    @functools.lru_cache\n    def TheEntertainer() -&gt; Path:\n        \"\"\"The Entertainer by Scott Joplin, Public Domain Composition\"\"\"\n        return BrokenPath.get_external(\"https://bitmidi.com/uploads/28765.mid\")\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.Songs.TheEntertainer","title":"TheEntertainer","text":"<pre><code>TheEntertainer() -&gt; Path\n</code></pre> <p>The Entertainer by Scott Joplin, Public Domain Composition</p> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>@staticmethod\n@functools.lru_cache\ndef TheEntertainer() -&gt; Path:\n    \"\"\"The Entertainer by Scott Joplin, Public Domain Composition\"\"\"\n    return BrokenPath.get_external(\"https://bitmidi.com/uploads/28765.mid\")\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene","title":"PianolaScene","text":"<p>               Bases: <code>ShaderScene</code></p> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>@define\nclass PianolaScene(ShaderScene):\n\n    class Config(ShaderScene.Config):\n\n        # --------------------------------------|\n\n        class Midi(BrokenModel):\n            \"\"\"Input and configure a midi file to be played\"\"\"\n\n            file: Annotated[Path, Option(\"--input\", \"-i\")] = Songs.TheEntertainer()\n            \"\"\"The midi file to play, automatically downloaded if URL\"\"\"\n\n            audio: Annotated[Optional[Path], Option(\"--audio\", \"-a\")] = None\n            \"\"\"The optional pre-rendered final video audio\"\"\"\n\n            minimum_velocity: Annotated[int, Option(\n                \"--min-velocity\", \"--min\", min=0, max=127)] = 40\n            \"\"\"Normalize velocities to this minimum value\"\"\"\n\n            maximum_velocity: Annotated[int, Option(\n                \"--max-velocity\", \"--max\", min=0, max=127)] = 127\n            \"\"\"Normalize velocities to this maximum value\"\"\"\n\n        def __set_midi__(self, value): self.midi = value\n        midi: Midi = Field(default_factory=Midi)\n\n        # --------------------------------------|\n\n        class SoundFont(BrokenModel):\n            \"\"\"Input and configure a soundfont to be used\"\"\"\n\n            file: Annotated[Path, Option(\"--input\", \"-i\")] = SoundFonts.Salamander()\n            \"\"\"The soundfont to use for the piano, automatically downloaded if URL\"\"\"\n\n        def __set_soundfont__(self, value): self.soundfont = value\n        soundfont: SoundFont = Field(default_factory=SoundFont)\n\n        # --------------------------------------|\n\n        class Piano(BrokenModel):\n            \"\"\"Configure the piano roll display\"\"\"\n\n            roll_time: Annotated[float, Option(\n                \"--roll-time\", \"-r\", min=0)] = 2.0\n            \"\"\"How long the notes are visible\"\"\"\n\n            height: Annotated[float, Option(\n                \"--height\", \"-h\", min=0, max=1)] = 0.275\n            \"\"\"Height of the piano in the shader (0-1)\"\"\"\n\n            black_ratio: Annotated[float, Option(\n                \"--black-ratio\", \"-b\", min=0, max=1)] = 0.6\n            \"\"\"How long are black keys compared to white keys\"\"\"\n\n            extra_keys: Annotated[int, Option(\n                \"--extra-keys\", \"-e\", min=0)] = 6\n            \"\"\"Display the dynamic range plus this many keys on each side\"\"\"\n\n        def __set_piano__(self, value): self.piano = value\n        piano: Piano = Field(default_factory=Piano)\n\n    # -------------------------------------------------------------------------------------------- #\n    # Command line interface\n\n    def commands(self):\n        self.cli.description = PIANOLA_ABOUT\n\n        with self.cli.panel(self.scene_panel):\n            self.cli.command(self.config.midi,      post=self.config.__set_midi__)\n            self.cli.command(self.config.soundfont, post=self.config.__set_soundfont__)\n            self.cli.command(self.config.piano,     post=self.config.__set_piano__)\n\n    # -------------------------------------------------------------------------------------------- #\n    # Module implementation\n\n    def build(self):\n        self.audio = ShaderAudio(scene=self, name=\"iAudio\")\n        self.piano = ShaderPiano(scene=self)\n        self.shader.fragment = PIANOLA_SHADER\n\n    def handle(self, message: ShaderMessage) -&gt; None:\n        ShaderScene.handle(self, message)\n\n        if isinstance(message, ShaderMessage.Window.FileDrop):\n            file = BrokenPath.get(message.files[0])\n\n            if (file.suffix == \".mid\"):\n                self.config.midi.file = file\n                self.load_midi(file)\n\n            elif (file.suffix == \".sf2\"):\n                self.config.soundfont.file = file\n                self.piano.fluid_load(file)\n\n            elif (file.suffix in {\".png\", \".jpg\", \".jpeg\"}):\n                log.warning(\"No background image support yet\")\n\n    def setup(self) -&gt; None:\n        self.load_soundfont(self.config.soundfont.file)\n        self.load_midi(self.config.midi.file)\n\n        # Mirror common settings\n        self.piano.height = self.config.piano.height\n        self.piano.roll_time = self.config.piano.roll_time\n        self.piano.black_ratio = self.config.piano.black_ratio\n        self.piano.extra_keys = self.config.piano.extra_keys\n\n        # Midi -&gt; Audio if exporting and input audio doesn't exist\n        if (self.exporting) and not BrokenPath.get(self.config.midi.audio):\n            self.audio.file = self.piano.fluid_render(\n                soundfont=self.config.soundfont.file,\n                midi=self.config.midi.file\n            )\n\n    def update(self) -&gt; None:\n\n        # Mouse drag time scroll to match piano roll size\n        self._mouse_drag_time_factor = (self.piano.roll_time/(self.piano.height - 1))*self.camera.zoom.value\n\n    # -------------------------------------------------------------------------------------------- #\n    # Internals\n\n    def load_soundfont(self, soundfont: Path) -&gt; None:\n        self.piano.fluid_load(soundfont)\n\n    def load_midi(self, midi: Path) -&gt; None:\n        self.piano.fluid_all_notes_off()\n        self.piano.clear()\n        self.piano.load_midi(midi)\n        self.piano.normalize_velocities(\n            minimum=self.config.midi.minimum_velocity,\n            maximum=self.config.midi.maximum_velocity\n        )\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config","title":"Config","text":"<p>               Bases: <code>ShaderScene.Config</code></p> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>class Config(ShaderScene.Config):\n\n    # --------------------------------------|\n\n    class Midi(BrokenModel):\n        \"\"\"Input and configure a midi file to be played\"\"\"\n\n        file: Annotated[Path, Option(\"--input\", \"-i\")] = Songs.TheEntertainer()\n        \"\"\"The midi file to play, automatically downloaded if URL\"\"\"\n\n        audio: Annotated[Optional[Path], Option(\"--audio\", \"-a\")] = None\n        \"\"\"The optional pre-rendered final video audio\"\"\"\n\n        minimum_velocity: Annotated[int, Option(\n            \"--min-velocity\", \"--min\", min=0, max=127)] = 40\n        \"\"\"Normalize velocities to this minimum value\"\"\"\n\n        maximum_velocity: Annotated[int, Option(\n            \"--max-velocity\", \"--max\", min=0, max=127)] = 127\n        \"\"\"Normalize velocities to this maximum value\"\"\"\n\n    def __set_midi__(self, value): self.midi = value\n    midi: Midi = Field(default_factory=Midi)\n\n    # --------------------------------------|\n\n    class SoundFont(BrokenModel):\n        \"\"\"Input and configure a soundfont to be used\"\"\"\n\n        file: Annotated[Path, Option(\"--input\", \"-i\")] = SoundFonts.Salamander()\n        \"\"\"The soundfont to use for the piano, automatically downloaded if URL\"\"\"\n\n    def __set_soundfont__(self, value): self.soundfont = value\n    soundfont: SoundFont = Field(default_factory=SoundFont)\n\n    # --------------------------------------|\n\n    class Piano(BrokenModel):\n        \"\"\"Configure the piano roll display\"\"\"\n\n        roll_time: Annotated[float, Option(\n            \"--roll-time\", \"-r\", min=0)] = 2.0\n        \"\"\"How long the notes are visible\"\"\"\n\n        height: Annotated[float, Option(\n            \"--height\", \"-h\", min=0, max=1)] = 0.275\n        \"\"\"Height of the piano in the shader (0-1)\"\"\"\n\n        black_ratio: Annotated[float, Option(\n            \"--black-ratio\", \"-b\", min=0, max=1)] = 0.6\n        \"\"\"How long are black keys compared to white keys\"\"\"\n\n        extra_keys: Annotated[int, Option(\n            \"--extra-keys\", \"-e\", min=0)] = 6\n        \"\"\"Display the dynamic range plus this many keys on each side\"\"\"\n\n    def __set_piano__(self, value): self.piano = value\n    piano: Piano = Field(default_factory=Piano)\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.Midi","title":"Midi","text":"<p>               Bases: <code>BrokenModel</code></p> <p>Input and configure a midi file to be played</p> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>class Midi(BrokenModel):\n    \"\"\"Input and configure a midi file to be played\"\"\"\n\n    file: Annotated[Path, Option(\"--input\", \"-i\")] = Songs.TheEntertainer()\n    \"\"\"The midi file to play, automatically downloaded if URL\"\"\"\n\n    audio: Annotated[Optional[Path], Option(\"--audio\", \"-a\")] = None\n    \"\"\"The optional pre-rendered final video audio\"\"\"\n\n    minimum_velocity: Annotated[int, Option(\n        \"--min-velocity\", \"--min\", min=0, max=127)] = 40\n    \"\"\"Normalize velocities to this minimum value\"\"\"\n\n    maximum_velocity: Annotated[int, Option(\n        \"--max-velocity\", \"--max\", min=0, max=127)] = 127\n    \"\"\"Normalize velocities to this maximum value\"\"\"\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.Midi.file","title":"file","text":"<pre><code>file: Annotated[Path, Option(--input, -i)] = (\n    Songs.TheEntertainer()\n)\n</code></pre> <p>The midi file to play, automatically downloaded if URL</p>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.Midi.audio","title":"audio","text":"<pre><code>audio: Annotated[Optional[Path], Option(--audio, -a)] = (\n    None\n)\n</code></pre> <p>The optional pre-rendered final video audio</p>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.Midi.minimum_velocity","title":"minimum_velocity","text":"<pre><code>minimum_velocity: Annotated[\n    int, Option(--min - velocity, --min, min=0, max=127)\n] = 40\n</code></pre> <p>Normalize velocities to this minimum value</p>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.Midi.maximum_velocity","title":"maximum_velocity","text":"<pre><code>maximum_velocity: Annotated[\n    int, Option(--max - velocity, --max, min=0, max=127)\n] = 127\n</code></pre> <p>Normalize velocities to this maximum value</p>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.__set_midi__","title":"__set_midi__","text":"<pre><code>__set_midi__(value)\n</code></pre> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>def __set_midi__(self, value): self.midi = value\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.midi","title":"midi","text":"<pre><code>midi: Midi = Field(default_factory=Midi)\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.SoundFont","title":"SoundFont","text":"<p>               Bases: <code>BrokenModel</code></p> <p>Input and configure a soundfont to be used</p> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>class SoundFont(BrokenModel):\n    \"\"\"Input and configure a soundfont to be used\"\"\"\n\n    file: Annotated[Path, Option(\"--input\", \"-i\")] = SoundFonts.Salamander()\n    \"\"\"The soundfont to use for the piano, automatically downloaded if URL\"\"\"\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.SoundFont.file","title":"file","text":"<pre><code>file: Annotated[Path, Option(--input, -i)] = (\n    SoundFonts.Salamander()\n)\n</code></pre> <p>The soundfont to use for the piano, automatically downloaded if URL</p>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.__set_soundfont__","title":"__set_soundfont__","text":"<pre><code>__set_soundfont__(value)\n</code></pre> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>def __set_soundfont__(self, value): self.soundfont = value\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.soundfont","title":"soundfont","text":"<pre><code>soundfont: SoundFont = Field(default_factory=SoundFont)\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.Piano","title":"Piano","text":"<p>               Bases: <code>BrokenModel</code></p> <p>Configure the piano roll display</p> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>class Piano(BrokenModel):\n    \"\"\"Configure the piano roll display\"\"\"\n\n    roll_time: Annotated[float, Option(\n        \"--roll-time\", \"-r\", min=0)] = 2.0\n    \"\"\"How long the notes are visible\"\"\"\n\n    height: Annotated[float, Option(\n        \"--height\", \"-h\", min=0, max=1)] = 0.275\n    \"\"\"Height of the piano in the shader (0-1)\"\"\"\n\n    black_ratio: Annotated[float, Option(\n        \"--black-ratio\", \"-b\", min=0, max=1)] = 0.6\n    \"\"\"How long are black keys compared to white keys\"\"\"\n\n    extra_keys: Annotated[int, Option(\n        \"--extra-keys\", \"-e\", min=0)] = 6\n    \"\"\"Display the dynamic range plus this many keys on each side\"\"\"\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.Piano.roll_time","title":"roll_time","text":"<pre><code>roll_time: Annotated[\n    float, Option(--roll - time, -r, min=0)\n] = 2.0\n</code></pre> <p>How long the notes are visible</p>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.Piano.height","title":"height","text":"<pre><code>height: Annotated[\n    float, Option(--height, -h, min=0, max=1)\n] = 0.275\n</code></pre> <p>Height of the piano in the shader (0-1)</p>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.Piano.black_ratio","title":"black_ratio","text":"<pre><code>black_ratio: Annotated[\n    float, Option(--black - ratio, -b, min=0, max=1)\n] = 0.6\n</code></pre> <p>How long are black keys compared to white keys</p>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.Piano.extra_keys","title":"extra_keys","text":"<pre><code>extra_keys: Annotated[\n    int, Option(--extra - keys, -e, min=0)\n] = 6\n</code></pre> <p>Display the dynamic range plus this many keys on each side</p>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.__set_piano__","title":"__set_piano__","text":"<pre><code>__set_piano__(value)\n</code></pre> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>def __set_piano__(self, value): self.piano = value\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.Config.piano","title":"piano","text":"<pre><code>piano: Piano = Field(default_factory=Piano)\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.commands","title":"commands","text":"<pre><code>commands()\n</code></pre> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>def commands(self):\n    self.cli.description = PIANOLA_ABOUT\n\n    with self.cli.panel(self.scene_panel):\n        self.cli.command(self.config.midi,      post=self.config.__set_midi__)\n        self.cli.command(self.config.soundfont, post=self.config.__set_soundfont__)\n        self.cli.command(self.config.piano,     post=self.config.__set_piano__)\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.build","title":"build","text":"<pre><code>build()\n</code></pre> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>def build(self):\n    self.audio = ShaderAudio(scene=self, name=\"iAudio\")\n    self.piano = ShaderPiano(scene=self)\n    self.shader.fragment = PIANOLA_SHADER\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.handle","title":"handle","text":"<pre><code>handle(message: ShaderMessage) -&gt; None\n</code></pre> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>def handle(self, message: ShaderMessage) -&gt; None:\n    ShaderScene.handle(self, message)\n\n    if isinstance(message, ShaderMessage.Window.FileDrop):\n        file = BrokenPath.get(message.files[0])\n\n        if (file.suffix == \".mid\"):\n            self.config.midi.file = file\n            self.load_midi(file)\n\n        elif (file.suffix == \".sf2\"):\n            self.config.soundfont.file = file\n            self.piano.fluid_load(file)\n\n        elif (file.suffix in {\".png\", \".jpg\", \".jpeg\"}):\n            log.warning(\"No background image support yet\")\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.setup","title":"setup","text":"<pre><code>setup() -&gt; None\n</code></pre> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>def setup(self) -&gt; None:\n    self.load_soundfont(self.config.soundfont.file)\n    self.load_midi(self.config.midi.file)\n\n    # Mirror common settings\n    self.piano.height = self.config.piano.height\n    self.piano.roll_time = self.config.piano.roll_time\n    self.piano.black_ratio = self.config.piano.black_ratio\n    self.piano.extra_keys = self.config.piano.extra_keys\n\n    # Midi -&gt; Audio if exporting and input audio doesn't exist\n    if (self.exporting) and not BrokenPath.get(self.config.midi.audio):\n        self.audio.file = self.piano.fluid_render(\n            soundfont=self.config.soundfont.file,\n            midi=self.config.midi.file\n        )\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.update","title":"update","text":"<pre><code>update() -&gt; None\n</code></pre> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>def update(self) -&gt; None:\n\n    # Mouse drag time scroll to match piano roll size\n    self._mouse_drag_time_factor = (self.piano.roll_time/(self.piano.height - 1))*self.camera.zoom.value\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.load_soundfont","title":"load_soundfont","text":"<pre><code>load_soundfont(soundfont: Path) -&gt; None\n</code></pre> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>def load_soundfont(self, soundfont: Path) -&gt; None:\n    self.piano.fluid_load(soundfont)\n</code></pre>"},{"location":"code/pianola/pianola/#Pianola.Pianola.PianolaScene.load_midi","title":"load_midi","text":"<pre><code>load_midi(midi: Path) -&gt; None\n</code></pre> Source code in <code>Projects/Pianola/Pianola/Pianola.py</code> <pre><code>def load_midi(self, midi: Path) -&gt; None:\n    self.piano.fluid_all_notes_off()\n    self.piano.clear()\n    self.piano.load_midi(midi)\n    self.piano.normalize_velocities(\n        minimum=self.config.midi.minimum_velocity,\n        maximum=self.config.midi.maximum_velocity\n    )\n</code></pre>"},{"location":"code/shaderflow/__init__/","title":"File: <code>ShaderFlow/__init__.py</code>","text":""},{"location":"code/shaderflow/__init__/#ShaderFlow","title":"ShaderFlow","text":""},{"location":"code/shaderflow/__init__/#ShaderFlow.SHADERFLOW_ABOUT","title":"SHADERFLOW_ABOUT","text":"<pre><code>SHADERFLOW_ABOUT = '\\n\ud83d\udd25 Imagine ShaderToy, on a Manim-like architecture. That\\'s ShaderFlow.\\n\\n\u2022 Tip: run \"shaderflow (scene) --help\" for More Options \u2728\\n\u2022 Warn: Make sure you trust the file you are running!\\n'\n</code></pre>"},{"location":"code/shaderflow/__init__/#ShaderFlow.SHADERFLOW","title":"SHADERFLOW","text":"<pre><code>SHADERFLOW = BrokenProject(\n    PACKAGE=__file__,\n    APP_NAME=\"ShaderFlow\",\n    APP_AUTHOR=\"BrokenSource\",\n    RESOURCES=ShaderFlowResources,\n    ABOUT=SHADERFLOW_ABOUT,\n)\n</code></pre>"},{"location":"code/shaderflow/__main__/","title":"File: <code>ShaderFlow/__main__.py</code>","text":""},{"location":"code/shaderflow/__main__/#ShaderFlow.__main__","title":"ShaderFlow.__main__","text":""},{"location":"code/shaderflow/__main__/#ShaderFlow.__main__.ShaderFlowApp","title":"ShaderFlowApp","text":"<p>               Bases: <code>BrokenLauncher</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/__main__.py</code> <pre><code>class ShaderFlowApp(BrokenLauncher):\n    def main(self):\n        self.find_projects(tag=\"Scene\")\n        self.cli(*sys.argv[1:])\n</code></pre>"},{"location":"code/shaderflow/__main__/#ShaderFlow.__main__.ShaderFlowApp.main","title":"main","text":"<pre><code>main()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/__main__.py</code> <pre><code>def main(self):\n    self.find_projects(tag=\"Scene\")\n    self.cli(*sys.argv[1:])\n</code></pre>"},{"location":"code/shaderflow/__main__/#ShaderFlow.__main__.main","title":"main","text":"<pre><code>main()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/__main__.py</code> <pre><code>def main():\n    ShaderFlowApp(PROJECT=SHADERFLOW)\n</code></pre>"},{"location":"code/shaderflow/exceptions/","title":"File: <code>ShaderFlow/Exceptions.py</code>","text":""},{"location":"code/shaderflow/exceptions/#ShaderFlow.Exceptions","title":"ShaderFlow.Exceptions","text":""},{"location":"code/shaderflow/exceptions/#ShaderFlow.Exceptions.ShaderBatchStop","title":"ShaderBatchStop","text":"<p>               Bases: <code>Exception</code></p> <p>Whenever the batch processing should stop (ran out of inputs, manual stop, etc.)</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Exceptions.py</code> <pre><code>class ShaderBatchStop(Exception):\n    \"\"\"Whenever the batch processing should stop (ran out of inputs, manual stop, etc.)\"\"\"\n    pass\n</code></pre>"},{"location":"code/shaderflow/message/","title":"File: <code>ShaderFlow/Message.py</code>","text":""},{"location":"code/shaderflow/message/#ShaderFlow.Message","title":"ShaderFlow.Message","text":""},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage","title":"ShaderMessage","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>class ShaderMessage:\n\n    # # Special\n\n    class Custom:\n        \"\"\"Any data type\"\"\"\n        data: Any\n\n    # # Mouse\n\n    class Mouse:\n\n        @define\n        class Position:\n            # Real\n            x:  int = 0\n            y:  int = 0\n            dx: int = 0\n            dy: int = 0\n\n            # Normalized\n            u:  float = 0.0\n            v:  float = 0.0\n            du: float = 0.0\n            dv: float = 0.0\n\n        @define\n        class Press:\n            button: int = 0\n\n            # Real\n            x: int = 0\n            y: int = 0\n\n            # Normalized\n            u: float = 0.0\n            v: float = 0.0\n\n        @define\n        class Release:\n            button: int = 0\n\n            # Real\n            x: int = 0\n            y: int = 0\n\n            # Normalized\n            u: float = 0.0\n            v: float = 0.0\n\n        @define\n        class Drag:\n            # Real\n            x:  int = 0\n            y:  int = 0\n            dx: int = 0\n            dy: int = 0\n\n            # Normalized\n            u:  float = 0.0\n            v:  float = 0.0\n            du: float = 0.0\n            dv: float = 0.0\n\n        @define\n        class Scroll:\n            # Real\n            dx: int = 0\n            dy: int = 0\n\n            # Normalized\n            du: float = 0.0\n            dv: float = 0.0\n\n        @define\n        class Enter:\n            state: bool\n\n    # # Window\n\n    class Window:\n\n        @define\n        class Resize:\n            width:  int = None\n            height: int = None\n\n            @property\n            def size(self) -&gt; tuple[int, int]:\n                return self.width, self.height\n\n        @define\n        class Iconify:\n            state: bool = None\n\n        @define\n        class FileDrop:\n            files: list[str] = None\n\n            def get(self, index: int) -&gt; Optional[str]:\n                return list_get(self.files, index)\n\n            @property\n            def first(self) -&gt; Optional[str]:\n                return self.get(0)\n\n            @property\n            def second(self) -&gt; Optional[str]:\n                return self.get(1)\n\n            @property\n            def third(self) -&gt; Optional[str]:\n                return self.get(2)\n\n        @define\n        class Close:\n            ...\n\n    # # Shader\n\n    class Shader:\n\n        @define\n        class RecreateTextures:\n            ...\n\n        @define\n        class Compile:\n            ...\n\n        @define\n        class Render:\n            ...\n\n    # # Keyboard\n\n    class Keyboard:\n\n        @define\n        class Press:\n            key:       int = None\n            action:    int = None\n            modifiers: int = None\n\n        @define\n        class KeyDown:\n            key:       int = None\n            modifiers: int = None\n\n        @define\n        class KeyUp:\n            key:       int = None\n            modifiers: int = None\n\n        @define\n        class Unicode:\n            char: str = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Custom","title":"Custom","text":"<p>Any data type</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>class Custom:\n    \"\"\"Any data type\"\"\"\n    data: Any\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Custom.data","title":"data","text":"<pre><code>data: Any\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse","title":"Mouse","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>class Mouse:\n\n    @define\n    class Position:\n        # Real\n        x:  int = 0\n        y:  int = 0\n        dx: int = 0\n        dy: int = 0\n\n        # Normalized\n        u:  float = 0.0\n        v:  float = 0.0\n        du: float = 0.0\n        dv: float = 0.0\n\n    @define\n    class Press:\n        button: int = 0\n\n        # Real\n        x: int = 0\n        y: int = 0\n\n        # Normalized\n        u: float = 0.0\n        v: float = 0.0\n\n    @define\n    class Release:\n        button: int = 0\n\n        # Real\n        x: int = 0\n        y: int = 0\n\n        # Normalized\n        u: float = 0.0\n        v: float = 0.0\n\n    @define\n    class Drag:\n        # Real\n        x:  int = 0\n        y:  int = 0\n        dx: int = 0\n        dy: int = 0\n\n        # Normalized\n        u:  float = 0.0\n        v:  float = 0.0\n        du: float = 0.0\n        dv: float = 0.0\n\n    @define\n    class Scroll:\n        # Real\n        dx: int = 0\n        dy: int = 0\n\n        # Normalized\n        du: float = 0.0\n        dv: float = 0.0\n\n    @define\n    class Enter:\n        state: bool\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Position","title":"Position","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass Position:\n    # Real\n    x:  int = 0\n    y:  int = 0\n    dx: int = 0\n    dy: int = 0\n\n    # Normalized\n    u:  float = 0.0\n    v:  float = 0.0\n    du: float = 0.0\n    dv: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Position.x","title":"x","text":"<pre><code>x: int = 0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Position.y","title":"y","text":"<pre><code>y: int = 0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Position.dx","title":"dx","text":"<pre><code>dx: int = 0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Position.dy","title":"dy","text":"<pre><code>dy: int = 0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Position.u","title":"u","text":"<pre><code>u: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Position.v","title":"v","text":"<pre><code>v: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Position.du","title":"du","text":"<pre><code>du: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Position.dv","title":"dv","text":"<pre><code>dv: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Press","title":"Press","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass Press:\n    button: int = 0\n\n    # Real\n    x: int = 0\n    y: int = 0\n\n    # Normalized\n    u: float = 0.0\n    v: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Press.button","title":"button","text":"<pre><code>button: int = 0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Press.x","title":"x","text":"<pre><code>x: int = 0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Press.y","title":"y","text":"<pre><code>y: int = 0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Press.u","title":"u","text":"<pre><code>u: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Press.v","title":"v","text":"<pre><code>v: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Release","title":"Release","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass Release:\n    button: int = 0\n\n    # Real\n    x: int = 0\n    y: int = 0\n\n    # Normalized\n    u: float = 0.0\n    v: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Release.button","title":"button","text":"<pre><code>button: int = 0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Release.x","title":"x","text":"<pre><code>x: int = 0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Release.y","title":"y","text":"<pre><code>y: int = 0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Release.u","title":"u","text":"<pre><code>u: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Release.v","title":"v","text":"<pre><code>v: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Drag","title":"Drag","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass Drag:\n    # Real\n    x:  int = 0\n    y:  int = 0\n    dx: int = 0\n    dy: int = 0\n\n    # Normalized\n    u:  float = 0.0\n    v:  float = 0.0\n    du: float = 0.0\n    dv: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Drag.x","title":"x","text":"<pre><code>x: int = 0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Drag.y","title":"y","text":"<pre><code>y: int = 0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Drag.dx","title":"dx","text":"<pre><code>dx: int = 0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Drag.dy","title":"dy","text":"<pre><code>dy: int = 0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Drag.u","title":"u","text":"<pre><code>u: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Drag.v","title":"v","text":"<pre><code>v: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Drag.du","title":"du","text":"<pre><code>du: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Drag.dv","title":"dv","text":"<pre><code>dv: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Scroll","title":"Scroll","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass Scroll:\n    # Real\n    dx: int = 0\n    dy: int = 0\n\n    # Normalized\n    du: float = 0.0\n    dv: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Scroll.dx","title":"dx","text":"<pre><code>dx: int = 0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Scroll.dy","title":"dy","text":"<pre><code>dy: int = 0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Scroll.du","title":"du","text":"<pre><code>du: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Scroll.dv","title":"dv","text":"<pre><code>dv: float = 0.0\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Enter","title":"Enter","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass Enter:\n    state: bool\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Mouse.Enter.state","title":"state","text":"<pre><code>state: bool\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Window","title":"Window","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>class Window:\n\n    @define\n    class Resize:\n        width:  int = None\n        height: int = None\n\n        @property\n        def size(self) -&gt; tuple[int, int]:\n            return self.width, self.height\n\n    @define\n    class Iconify:\n        state: bool = None\n\n    @define\n    class FileDrop:\n        files: list[str] = None\n\n        def get(self, index: int) -&gt; Optional[str]:\n            return list_get(self.files, index)\n\n        @property\n        def first(self) -&gt; Optional[str]:\n            return self.get(0)\n\n        @property\n        def second(self) -&gt; Optional[str]:\n            return self.get(1)\n\n        @property\n        def third(self) -&gt; Optional[str]:\n            return self.get(2)\n\n    @define\n    class Close:\n        ...\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Window.Resize","title":"Resize","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass Resize:\n    width:  int = None\n    height: int = None\n\n    @property\n    def size(self) -&gt; tuple[int, int]:\n        return self.width, self.height\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Window.Resize.width","title":"width","text":"<pre><code>width: int = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Window.Resize.height","title":"height","text":"<pre><code>height: int = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Window.Resize.size","title":"size","text":"<pre><code>size: tuple[int, int]\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Window.Iconify","title":"Iconify","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass Iconify:\n    state: bool = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Window.Iconify.state","title":"state","text":"<pre><code>state: bool = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Window.FileDrop","title":"FileDrop","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass FileDrop:\n    files: list[str] = None\n\n    def get(self, index: int) -&gt; Optional[str]:\n        return list_get(self.files, index)\n\n    @property\n    def first(self) -&gt; Optional[str]:\n        return self.get(0)\n\n    @property\n    def second(self) -&gt; Optional[str]:\n        return self.get(1)\n\n    @property\n    def third(self) -&gt; Optional[str]:\n        return self.get(2)\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Window.FileDrop.files","title":"files","text":"<pre><code>files: list[str] = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Window.FileDrop.get","title":"get","text":"<pre><code>get(index: int) -&gt; Optional[str]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>def get(self, index: int) -&gt; Optional[str]:\n    return list_get(self.files, index)\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Window.FileDrop.first","title":"first","text":"<pre><code>first: Optional[str]\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Window.FileDrop.second","title":"second","text":"<pre><code>second: Optional[str]\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Window.FileDrop.third","title":"third","text":"<pre><code>third: Optional[str]\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Window.Close","title":"Close","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass Close:\n    ...\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Shader","title":"Shader","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>class Shader:\n\n    @define\n    class RecreateTextures:\n        ...\n\n    @define\n    class Compile:\n        ...\n\n    @define\n    class Render:\n        ...\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Shader.RecreateTextures","title":"RecreateTextures","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass RecreateTextures:\n    ...\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Shader.Compile","title":"Compile","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass Compile:\n    ...\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Shader.Render","title":"Render","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass Render:\n    ...\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Keyboard","title":"Keyboard","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>class Keyboard:\n\n    @define\n    class Press:\n        key:       int = None\n        action:    int = None\n        modifiers: int = None\n\n    @define\n    class KeyDown:\n        key:       int = None\n        modifiers: int = None\n\n    @define\n    class KeyUp:\n        key:       int = None\n        modifiers: int = None\n\n    @define\n    class Unicode:\n        char: str = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Keyboard.Press","title":"Press","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass Press:\n    key:       int = None\n    action:    int = None\n    modifiers: int = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Keyboard.Press.key","title":"key","text":"<pre><code>key: int = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Keyboard.Press.action","title":"action","text":"<pre><code>action: int = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Keyboard.Press.modifiers","title":"modifiers","text":"<pre><code>modifiers: int = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Keyboard.KeyDown","title":"KeyDown","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass KeyDown:\n    key:       int = None\n    modifiers: int = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Keyboard.KeyDown.key","title":"key","text":"<pre><code>key: int = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Keyboard.KeyDown.modifiers","title":"modifiers","text":"<pre><code>modifiers: int = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Keyboard.KeyUp","title":"KeyUp","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass KeyUp:\n    key:       int = None\n    modifiers: int = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Keyboard.KeyUp.key","title":"key","text":"<pre><code>key: int = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Keyboard.KeyUp.modifiers","title":"modifiers","text":"<pre><code>modifiers: int = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Keyboard.Unicode","title":"Unicode","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Message.py</code> <pre><code>@define\nclass Unicode:\n    char: str = None\n</code></pre>"},{"location":"code/shaderflow/message/#ShaderFlow.Message.ShaderMessage.Keyboard.Unicode.char","title":"char","text":"<pre><code>char: str = None\n</code></pre>"},{"location":"code/shaderflow/module/","title":"File: <code>ShaderFlow/Module.py</code>","text":""},{"location":"code/shaderflow/module/#ShaderFlow.Module","title":"ShaderFlow.Module","text":""},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule","title":"ShaderModule","text":"<p>               Bases: <code>BrokenFluent</code>, <code>BrokenAttrs</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>@define\nclass ShaderModule(BrokenFluent, BrokenAttrs):\n\n    scene: ShaderScene = field(default=None, repr=False)\n    \"\"\"The ShaderScene this module belongs to. Must be set on initialization of any module with\n    `ShaderModule(scene=...)` (even though it's `default=None` for MRO reasons)\"\"\"\n\n    uuid: int = Factory(itertools.count(1).__next__)\n    \"\"\"A module identifier, mostly used for differentiating log statements of same type modules\"\"\"\n\n    name: str = None\n    \"\"\"The base name for exported GLSL variables, textures, etc. It is technically optional, but\n    it's not a bad idea for all modules to have a default value for this attribute than None\"\"\"\n\n    def __post__(self):\n\n        # Post-import to avoid circular reference for type checking\n        from ShaderFlow.Scene import ShaderScene\n\n        # The first module initialized is the Scene itself\n        self.scene = smartproxy(self.scene or self)\n\n        # Module must be part of a 'scene=instance(ShaderScene)'\n        if not isinstance(self.scene, ShaderScene):\n            raise RuntimeError(log.error('\\n'.join((\n                f\"Module of type '{type(self).__name__}' must be added to a 'ShaderScene' instance\",\n                f\"\u2022 Initialize it with {type(self).__name__}(scene='instance(ShaderScene)', ...)\",\n            ))))\n\n        self.log_debug(\"Module added to the Scene\")\n        self.scene.modules.append(self)\n        self.commands()\n\n        if not isinstance(self, ShaderScene):\n            self.build()\n\n    def __del__(self) -&gt; None:\n        self.destroy()\n\n    @abstractmethod\n    def destroy(self) -&gt; None:\n        \"\"\"Similar to __del__, potentially intentional, but automatic when the Scene is gc'd\"\"\"\n        pass\n\n    @abstractmethod\n    def build(self) -&gt; None:\n        \"\"\"Create Textures, child ShaderModules, load base shaders, etc. Happens only once, and it's\n        a good place to set default values for attributes, such as a background image that can be\n        later changed on `self.setup()` or, better yet, on the CLI of the module/custom Scene\"\"\"\n        pass\n\n    @abstractmethod\n    def setup(self) -&gt; None:\n        \"\"\"Called every time before the initialization (rendering) of the Scene. Useful for managing\n        the behavior of batch exporting per export index; also a good place to reset values to their\n        defaults or create procedural objects (seeds) after `self.build()`\"\"\"\n        pass\n\n    @abstractmethod\n    def update(self) -&gt; None:\n        \"\"\"Called every frame. This defines the main behavior of the module inside the event loop.\n        All non-ShaderObjects are called first, then regular Modules. Access state data directly\n        on the Scene with `self.scene.{dt,time,width,height,...}`\"\"\"\n        pass\n\n    @abstractmethod\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        \"\"\"Returns the list of variables that will be exported to all Shaders of the scene. The\n        first compilation happens after `self.build()`, where all variables are metaprogrammed into\n        the GLSL code. Subsequent calls happens after all `self.update()` on every frame and the\n        variables are updated to the yielded values here\"\"\"\n        return []\n\n    def full_pipeline(self) -&gt; Iterable[ShaderVariable]:\n        \"\"\"Yield all pipelines from all modules in the scene\"\"\"\n        for module in self.scene.modules:\n            yield from module.pipeline()\n\n    def relay(self, message: Union[ShaderMessage, type[ShaderMessage]]) -&gt; Self:\n        \"\"\"Send a message to all modules in the scene. Handle it defining a `self.handle(message)`\"\"\"\n        if isinstance(message, type):\n            message = message()\n        for module in self.scene.modules:\n            module.handle(message)\n        return self\n\n    @abstractmethod\n    def handle(self, message: ShaderMessage) -&gt; None:\n        \"\"\"Whenever a module relays a message on the scene, all modules are signaled via this method\n        for potentially acting on it. A Camera might move on WASD keys, for example\"\"\"\n        ...\n\n    def find(self, type: type[ShaderModule]) -&gt; Iterable[ShaderModule]:\n        \"\"\"Find all modules of a certain type in the scene. Note that this function is a generator,\n        so it must be consumed on a loop or a `list(self.find(...))`\"\"\"\n        for module in self.scene.modules:\n            if isinstance(module, type):\n                yield module\n\n    @property\n    @abstractmethod\n    def duration(self) -&gt; float:\n        \"\"\"Self-reported 'time for completion'. A ShaderAudio shall return the input audio duration,\n        for example. The scene will determine or override the final duration\"\"\"\n        return 0.0\n\n    @abstractmethod\n    def ffhook(self, ffmpeg: BrokenFFmpeg) -&gt; None:\n        \"\"\"When exporting the Scene, after the initial CLI configuration of FFmpeg by the Scene's\n        `self.main` method, all modules have an option to change the FFmpeg settings on the fly.\n        Note that this can also be implemented on a custom Scene itself, and behavior _can_ be\n        changed per batch exporting\"\"\"\n        pass\n\n    @abstractmethod\n    def commands(self) -&gt; None:\n        \"\"\"Add commands to the scene with `self.scene.cli.command(...)`\"\"\"\n        ...\n\n    # -------------------------------------------|\n    # Logging\n\n    @property\n    def panel_module_type(self) -&gt; str:\n        \"\"\"Suggested typer panel for identifying this module type\"\"\"\n        return f\"\u2192 (Module) {type(self).__name__}\"\n\n    @property\n    def panel_module_self(self) -&gt; str:\n        \"\"\"Suggested typer panel for identifying this unique module\"\"\"\n        return f\"{self.panel_module_type}: {self.name or 'Unnamed'}\"\n\n    @property\n    def who(self) -&gt; str:\n        return f\"[bold dim](Module {self.uuid:&gt;2} \u2022 {type(self).__name__[:12].ljust(12)})[/]\"\n\n    def log_info(self, *args, **kwargs) -&gt; str:\n        return log.info(self.who, *args, **kwargs)\n\n    def log_success(self, *args, **kwargs) -&gt; str:\n        return log.success(self.who, *args, **kwargs)\n\n    def log_warning(self, *args, **kwargs) -&gt; str:\n        return log.warning(self.who, *args, **kwargs)\n\n    def log_error(self, *args, **kwargs) -&gt; str:\n        return log.error(self.who, *args, **kwargs)\n\n    def log_debug(self, *args, **kwargs) -&gt; str:\n        return log.debug(self.who, *args, **kwargs)\n\n    def log_minor(self, *args, **kwargs) -&gt; str:\n        return log.minor(self.who, *args, **kwargs)\n\n    # -------------------------------------------|\n    # Stuff pending a remaster\n\n    @abstractmethod\n    def includes(self) -&gt; Iterable[dict[str, str]]:\n        yield \"\"\n\n    @abstractmethod\n    def defines(self) -&gt; Iterable[str]:\n        yield None\n\n    # # User interface\n\n    def __shaderflow_ui__(self) -&gt; None:\n        \"\"\"Basic info of a Module\"\"\"\n        # Todo: Make automatic Imgui methods\n\n        # Module - self.__ui__ must be implemented\n        if not getattr(self.__ui__, \"__isabstractmethod__\", False):\n            self.__ui__()\n\n        # Module - self.ui must be implemented\n        if not getattr(self.ui, \"__isabstractmethod__\", False):\n            self.ui()\n\n    @abstractmethod\n    def __ui__(self) -&gt; None:\n        \"\"\"Internal method for self.ui\"\"\"\n        pass\n\n    @abstractmethod\n    def ui(self) -&gt; None:\n        \"\"\"\n        Draw the UI for this module\n        \"\"\"\n        pass\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.scene","title":"scene","text":"<pre><code>scene: ShaderScene = field(default=None, repr=False)\n</code></pre> <p>The ShaderScene this module belongs to. Must be set on initialization of any module with <code>ShaderModule(scene=...)</code> (even though it's <code>default=None</code> for MRO reasons)</p>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.uuid","title":"uuid","text":"<pre><code>uuid: int = Factory(itertools.count(1).__next__)\n</code></pre> <p>A module identifier, mostly used for differentiating log statements of same type modules</p>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.name","title":"name","text":"<pre><code>name: str = None\n</code></pre> <p>The base name for exported GLSL variables, textures, etc. It is technically optional, but it's not a bad idea for all modules to have a default value for this attribute than None</p>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.__post__","title":"__post__","text":"<pre><code>__post__()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>def __post__(self):\n\n    # Post-import to avoid circular reference for type checking\n    from ShaderFlow.Scene import ShaderScene\n\n    # The first module initialized is the Scene itself\n    self.scene = smartproxy(self.scene or self)\n\n    # Module must be part of a 'scene=instance(ShaderScene)'\n    if not isinstance(self.scene, ShaderScene):\n        raise RuntimeError(log.error('\\n'.join((\n            f\"Module of type '{type(self).__name__}' must be added to a 'ShaderScene' instance\",\n            f\"\u2022 Initialize it with {type(self).__name__}(scene='instance(ShaderScene)', ...)\",\n        ))))\n\n    self.log_debug(\"Module added to the Scene\")\n    self.scene.modules.append(self)\n    self.commands()\n\n    if not isinstance(self, ShaderScene):\n        self.build()\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.__del__","title":"__del__","text":"<pre><code>__del__() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>def __del__(self) -&gt; None:\n    self.destroy()\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.destroy","title":"destroy","text":"<pre><code>destroy() -&gt; None\n</code></pre> <p>Similar to del, potentially intentional, but automatic when the Scene is gc'd</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>@abstractmethod\ndef destroy(self) -&gt; None:\n    \"\"\"Similar to __del__, potentially intentional, but automatic when the Scene is gc'd\"\"\"\n    pass\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.build","title":"build","text":"<pre><code>build() -&gt; None\n</code></pre> <p>Create Textures, child ShaderModules, load base shaders, etc. Happens only once, and it's a good place to set default values for attributes, such as a background image that can be later changed on <code>self.setup()</code> or, better yet, on the CLI of the module/custom Scene</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>@abstractmethod\ndef build(self) -&gt; None:\n    \"\"\"Create Textures, child ShaderModules, load base shaders, etc. Happens only once, and it's\n    a good place to set default values for attributes, such as a background image that can be\n    later changed on `self.setup()` or, better yet, on the CLI of the module/custom Scene\"\"\"\n    pass\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.setup","title":"setup","text":"<pre><code>setup() -&gt; None\n</code></pre> <p>Called every time before the initialization (rendering) of the Scene. Useful for managing the behavior of batch exporting per export index; also a good place to reset values to their defaults or create procedural objects (seeds) after <code>self.build()</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>@abstractmethod\ndef setup(self) -&gt; None:\n    \"\"\"Called every time before the initialization (rendering) of the Scene. Useful for managing\n    the behavior of batch exporting per export index; also a good place to reset values to their\n    defaults or create procedural objects (seeds) after `self.build()`\"\"\"\n    pass\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.update","title":"update","text":"<pre><code>update() -&gt; None\n</code></pre> <p>Called every frame. This defines the main behavior of the module inside the event loop. All non-ShaderObjects are called first, then regular Modules. Access state data directly on the Scene with <code>self.scene.{dt,time,width,height,...}</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>@abstractmethod\ndef update(self) -&gt; None:\n    \"\"\"Called every frame. This defines the main behavior of the module inside the event loop.\n    All non-ShaderObjects are called first, then regular Modules. Access state data directly\n    on the Scene with `self.scene.{dt,time,width,height,...}`\"\"\"\n    pass\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> <p>Returns the list of variables that will be exported to all Shaders of the scene. The first compilation happens after <code>self.build()</code>, where all variables are metaprogrammed into the GLSL code. Subsequent calls happens after all <code>self.update()</code> on every frame and the variables are updated to the yielded values here</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>@abstractmethod\ndef pipeline(self) -&gt; Iterable[ShaderVariable]:\n    \"\"\"Returns the list of variables that will be exported to all Shaders of the scene. The\n    first compilation happens after `self.build()`, where all variables are metaprogrammed into\n    the GLSL code. Subsequent calls happens after all `self.update()` on every frame and the\n    variables are updated to the yielded values here\"\"\"\n    return []\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.full_pipeline","title":"full_pipeline","text":"<pre><code>full_pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> <p>Yield all pipelines from all modules in the scene</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>def full_pipeline(self) -&gt; Iterable[ShaderVariable]:\n    \"\"\"Yield all pipelines from all modules in the scene\"\"\"\n    for module in self.scene.modules:\n        yield from module.pipeline()\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.relay","title":"relay","text":"<pre><code>relay(\n    message: Union[ShaderMessage, type[ShaderMessage]],\n) -&gt; Self\n</code></pre> <p>Send a message to all modules in the scene. Handle it defining a <code>self.handle(message)</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>def relay(self, message: Union[ShaderMessage, type[ShaderMessage]]) -&gt; Self:\n    \"\"\"Send a message to all modules in the scene. Handle it defining a `self.handle(message)`\"\"\"\n    if isinstance(message, type):\n        message = message()\n    for module in self.scene.modules:\n        module.handle(message)\n    return self\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.handle","title":"handle","text":"<pre><code>handle(message: ShaderMessage) -&gt; None\n</code></pre> <p>Whenever a module relays a message on the scene, all modules are signaled via this method for potentially acting on it. A Camera might move on WASD keys, for example</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>@abstractmethod\ndef handle(self, message: ShaderMessage) -&gt; None:\n    \"\"\"Whenever a module relays a message on the scene, all modules are signaled via this method\n    for potentially acting on it. A Camera might move on WASD keys, for example\"\"\"\n    ...\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.find","title":"find","text":"<pre><code>find(type: type[ShaderModule]) -&gt; Iterable[ShaderModule]\n</code></pre> <p>Find all modules of a certain type in the scene. Note that this function is a generator, so it must be consumed on a loop or a <code>list(self.find(...))</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>def find(self, type: type[ShaderModule]) -&gt; Iterable[ShaderModule]:\n    \"\"\"Find all modules of a certain type in the scene. Note that this function is a generator,\n    so it must be consumed on a loop or a `list(self.find(...))`\"\"\"\n    for module in self.scene.modules:\n        if isinstance(module, type):\n            yield module\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.duration","title":"duration","text":"<pre><code>duration: float\n</code></pre> <p>Self-reported 'time for completion'. A ShaderAudio shall return the input audio duration, for example. The scene will determine or override the final duration</p>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.ffhook","title":"ffhook","text":"<pre><code>ffhook(ffmpeg: BrokenFFmpeg) -&gt; None\n</code></pre> <p>When exporting the Scene, after the initial CLI configuration of FFmpeg by the Scene's <code>self.main</code> method, all modules have an option to change the FFmpeg settings on the fly. Note that this can also be implemented on a custom Scene itself, and behavior can be changed per batch exporting</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>@abstractmethod\ndef ffhook(self, ffmpeg: BrokenFFmpeg) -&gt; None:\n    \"\"\"When exporting the Scene, after the initial CLI configuration of FFmpeg by the Scene's\n    `self.main` method, all modules have an option to change the FFmpeg settings on the fly.\n    Note that this can also be implemented on a custom Scene itself, and behavior _can_ be\n    changed per batch exporting\"\"\"\n    pass\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.commands","title":"commands","text":"<pre><code>commands() -&gt; None\n</code></pre> <p>Add commands to the scene with <code>self.scene.cli.command(...)</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>@abstractmethod\ndef commands(self) -&gt; None:\n    \"\"\"Add commands to the scene with `self.scene.cli.command(...)`\"\"\"\n    ...\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.panel_module_type","title":"panel_module_type","text":"<pre><code>panel_module_type: str\n</code></pre> <p>Suggested typer panel for identifying this module type</p>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.panel_module_self","title":"panel_module_self","text":"<pre><code>panel_module_self: str\n</code></pre> <p>Suggested typer panel for identifying this unique module</p>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.who","title":"who","text":"<pre><code>who: str\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.log_info","title":"log_info","text":"<pre><code>log_info(*args, **kwargs) -&gt; str\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>def log_info(self, *args, **kwargs) -&gt; str:\n    return log.info(self.who, *args, **kwargs)\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.log_success","title":"log_success","text":"<pre><code>log_success(*args, **kwargs) -&gt; str\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>def log_success(self, *args, **kwargs) -&gt; str:\n    return log.success(self.who, *args, **kwargs)\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.log_warning","title":"log_warning","text":"<pre><code>log_warning(*args, **kwargs) -&gt; str\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>def log_warning(self, *args, **kwargs) -&gt; str:\n    return log.warning(self.who, *args, **kwargs)\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.log_error","title":"log_error","text":"<pre><code>log_error(*args, **kwargs) -&gt; str\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>def log_error(self, *args, **kwargs) -&gt; str:\n    return log.error(self.who, *args, **kwargs)\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.log_debug","title":"log_debug","text":"<pre><code>log_debug(*args, **kwargs) -&gt; str\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>def log_debug(self, *args, **kwargs) -&gt; str:\n    return log.debug(self.who, *args, **kwargs)\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.log_minor","title":"log_minor","text":"<pre><code>log_minor(*args, **kwargs) -&gt; str\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>def log_minor(self, *args, **kwargs) -&gt; str:\n    return log.minor(self.who, *args, **kwargs)\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.includes","title":"includes","text":"<pre><code>includes() -&gt; Iterable[dict[str, str]]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>@abstractmethod\ndef includes(self) -&gt; Iterable[dict[str, str]]:\n    yield \"\"\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.defines","title":"defines","text":"<pre><code>defines() -&gt; Iterable[str]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>@abstractmethod\ndef defines(self) -&gt; Iterable[str]:\n    yield None\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.__shaderflow_ui__","title":"__shaderflow_ui__","text":"<pre><code>__shaderflow_ui__() -&gt; None\n</code></pre> <p>Basic info of a Module</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>def __shaderflow_ui__(self) -&gt; None:\n    \"\"\"Basic info of a Module\"\"\"\n    # Todo: Make automatic Imgui methods\n\n    # Module - self.__ui__ must be implemented\n    if not getattr(self.__ui__, \"__isabstractmethod__\", False):\n        self.__ui__()\n\n    # Module - self.ui must be implemented\n    if not getattr(self.ui, \"__isabstractmethod__\", False):\n        self.ui()\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.__ui__","title":"__ui__","text":"<pre><code>__ui__() -&gt; None\n</code></pre> <p>Internal method for self.ui</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>@abstractmethod\ndef __ui__(self) -&gt; None:\n    \"\"\"Internal method for self.ui\"\"\"\n    pass\n</code></pre>"},{"location":"code/shaderflow/module/#ShaderFlow.Module.ShaderModule.ui","title":"ui","text":"<pre><code>ui() -&gt; None\n</code></pre> <p>Draw the UI for this module</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Module.py</code> <pre><code>@abstractmethod\ndef ui(self) -&gt; None:\n    \"\"\"\n    Draw the UI for this module\n    \"\"\"\n    pass\n</code></pre>"},{"location":"code/shaderflow/scene/","title":"File: <code>ShaderFlow/Scene.py</code>","text":""},{"location":"code/shaderflow/scene/#ShaderFlow.Scene","title":"ShaderFlow.Scene","text":""},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.WindowBackend","title":"WindowBackend","text":"<p>               Bases: <code>BrokenEnum</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>class WindowBackend(BrokenEnum):\n    Headless = \"headless\"\n    GLFW     = \"glfw\"\n\n    @classmethod\n    def infer(cls) -&gt; Self:\n        if (option := Environment.get(\"WINDOW_BACKEND\")):\n            if (value := cls.get(option)) is None:\n                raise ValueError((f\"Invalid window backend '{option}', options are {cls.values()}\"))\n            return value\n\n        if (\"main\" in sys.argv) and (args := sys.argv[sys.argv.index(\"main\"):]):\n            if any(x in args for x in (\"--render\", \"-r\", \"--output\", \"-o\")):\n                return cls.Headless\n\n        return cls.GLFW\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.WindowBackend.Headless","title":"Headless","text":"<pre><code>Headless = 'headless'\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.WindowBackend.GLFW","title":"GLFW","text":"<pre><code>GLFW = 'glfw'\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.WindowBackend.infer","title":"infer","text":"<pre><code>infer() -&gt; Self\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>@classmethod\ndef infer(cls) -&gt; Self:\n    if (option := Environment.get(\"WINDOW_BACKEND\")):\n        if (value := cls.get(option)) is None:\n            raise ValueError((f\"Invalid window backend '{option}', options are {cls.values()}\"))\n        return value\n\n    if (\"main\" in sys.argv) and (args := sys.argv[sys.argv.index(\"main\"):]):\n        if any(x in args for x in (\"--render\", \"-r\", \"--output\", \"-o\")):\n            return cls.Headless\n\n    return cls.GLFW\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting","title":"Exporting","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>@define\nclass Exporting:\n    scene: ShaderScene\n\n    @property\n    def ffmpeg(self) -&gt; BrokenFFmpeg:\n        return self.scene.ffmpeg\n\n    # # Progress\n\n    frame: int = 0\n    start: float = Factory(perf_counter)\n    relay: Optional[Callable[[int, int], None]] = None\n    bar: tqdm.tqdm = None\n\n    def update(self) -&gt; None:\n        self.frame += 1\n        if (self.relay is not None):\n            self.relay(self.frame, self.total_frames)\n        if (self.bar is not None):\n            self.bar.update(1)\n\n    @property\n    def finished(self) -&gt; bool:\n        return (self.frame &gt;= self.scene.total_frames)\n\n    # # FFmpeg configuration\n\n    def ffmpeg_clean(self) -&gt; None:\n        self.ffmpeg.clear(video_codec=False, audio_codec=False)\n\n    def ffmpeg_sizes(self, width: int, height: int) -&gt; None:\n        self.ffmpeg.set_time(self.scene.runtime)\n        self.ffmpeg.pipe_input(pixel_format=(\"rgba\" if self.scene.alpha else \"rgb24\"),\n            width=self.scene.width, height=self.scene.height, framerate=self.scene.fps)\n        self.ffmpeg.scale(width=width, height=height).vflip()\n\n    # Todo: Special output targets (pipe, tcp)\n    def ffmpeg_output(self, base: str, output: str, format: str, _started: str) -&gt; None:\n        output = BrokenPath.get(output)\n        output = output or Path(f\"({_started}) {self.scene.scene_name}\")\n        output = output if output.is_absolute() else (base/output)\n        output = output.with_suffix(\".\" + (format or output.suffix or 'mp4').replace(\".\", \"\"))\n        output = self.scene.export_name(output)\n        BrokenPath.mkdir(output.parent, echo=False)\n        self.ffmpeg.output(path=output)\n\n    # Actions\n\n    def ffhook(self) -&gt; None:\n        for module in self.scene.modules:\n            module.ffhook(self.ffmpeg)\n\n    def popen(self) -&gt; None:\n        self.process = self.ffmpeg.popen(stdin=PIPE, stderr=PIPE)\n        self.fileno = self.process.stdin.fileno()\n        self.bar = tqdm.tqdm(\n            total=self.scene.total_frames,\n            disable=(bool(self.relay) or self.scene.realtime),\n            desc=f\"Scene #{self.scene.index} ({self.scene.scene_name}) \u2192 Video\",\n            colour=\"#43BFEF\",\n            unit=\" frames\",\n            dynamic_ncols=True,\n            mininterval=1/30,\n            maxinterval=0.5,\n            smoothing=0.1,\n            leave=False,\n        )\n\n    # # Buffer and piping\n\n    buffers: deque[moderngl.Buffer] = Factory(deque)\n\n    def make_buffers(self, n: int=2) -&gt; None:\n        self.buffers = deque(self.scene._final.texture.new_buffer() for _ in range(n))\n\n    def release_buffers(self) -&gt; None:\n        for buffer in self.buffers:\n            buffer.release()\n\n    process: subprocess.Popen = None\n    fileno: int = None\n\n    def pipe(self, noturbo: bool=False) -&gt; None:\n        \"\"\"Write a new frame to FFmpeg\"\"\"\n        if (self.process is None):\n            return\n\n        # Raise exception on FFmpeg error\n        if (self.process.poll() is not None):\n            raise RuntimeError((\n                \"FFmpeg process closed unexpectedly with traceback:\\n\"\n                f\"{self.process.stderr.read().decode('utf-8')}\"\n            ))\n\n        # Cycle through proxy buffers\n        buffer = self.buffers[self.frame % len(self.buffers)]\n        turbopipe.sync(buffer)\n        self.scene.fbo.read_into(buffer)\n\n        # Write to FFmpeg stdin\n        if noturbo:\n            self.process.stdin.write(buffer.read())\n        else:\n            turbopipe.pipe(buffer, self.fileno)\n\n    # # Finish\n\n    took: Optional[float] = None\n\n    def finish(self) -&gt; None:\n        if self.scene.exporting:\n            self.scene.log_info((\n                \"Waiting for FFmpeg process to finish encoding \"\n                \"(Queued writes, codecs lookahead, buffers, etc)\"\n            ))\n            turbopipe.close()\n            self.release_buffers()\n            self.process.stdin.close()\n            self.process.wait()\n        self.took = (perf_counter() - self.start)\n        self.bar.close()\n\n    def log_stats(self, output: Path) -&gt; None:\n        self.scene.log_info(f\"Finished rendering ({output})\", echo=(self.scene.exporting))\n        self.scene.log_info((\n            f\"\u2022 Stats: \"\n            f\"(Took [cyan]{self.took:.2f}s[/]) at \"\n            f\"([cyan]{(self.frame/self.took):.2f}fps[/] | \"\n            f\"[cyan]{(self.scene.runtime/self.took):.2f}x[/] Realtime) with \"\n            f\"({self.frame} Total Frames)\"\n        ))\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.scene","title":"scene","text":"<pre><code>scene: ShaderScene\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.ffmpeg","title":"ffmpeg","text":"<pre><code>ffmpeg: BrokenFFmpeg\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.frame","title":"frame","text":"<pre><code>frame: int = 0\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.start","title":"start","text":"<pre><code>start: float = Factory(perf_counter)\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.relay","title":"relay","text":"<pre><code>relay: Optional[Callable[[int, int], None]] = None\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.bar","title":"bar","text":"<pre><code>bar: tqdm.tqdm = None\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.update","title":"update","text":"<pre><code>update() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def update(self) -&gt; None:\n    self.frame += 1\n    if (self.relay is not None):\n        self.relay(self.frame, self.total_frames)\n    if (self.bar is not None):\n        self.bar.update(1)\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.finished","title":"finished","text":"<pre><code>finished: bool\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.ffmpeg_clean","title":"ffmpeg_clean","text":"<pre><code>ffmpeg_clean() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def ffmpeg_clean(self) -&gt; None:\n    self.ffmpeg.clear(video_codec=False, audio_codec=False)\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.ffmpeg_sizes","title":"ffmpeg_sizes","text":"<pre><code>ffmpeg_sizes(width: int, height: int) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def ffmpeg_sizes(self, width: int, height: int) -&gt; None:\n    self.ffmpeg.set_time(self.scene.runtime)\n    self.ffmpeg.pipe_input(pixel_format=(\"rgba\" if self.scene.alpha else \"rgb24\"),\n        width=self.scene.width, height=self.scene.height, framerate=self.scene.fps)\n    self.ffmpeg.scale(width=width, height=height).vflip()\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.ffmpeg_output","title":"ffmpeg_output","text":"<pre><code>ffmpeg_output(\n    base: str, output: str, format: str, _started: str\n) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def ffmpeg_output(self, base: str, output: str, format: str, _started: str) -&gt; None:\n    output = BrokenPath.get(output)\n    output = output or Path(f\"({_started}) {self.scene.scene_name}\")\n    output = output if output.is_absolute() else (base/output)\n    output = output.with_suffix(\".\" + (format or output.suffix or 'mp4').replace(\".\", \"\"))\n    output = self.scene.export_name(output)\n    BrokenPath.mkdir(output.parent, echo=False)\n    self.ffmpeg.output(path=output)\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.ffhook","title":"ffhook","text":"<pre><code>ffhook() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def ffhook(self) -&gt; None:\n    for module in self.scene.modules:\n        module.ffhook(self.ffmpeg)\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.popen","title":"popen","text":"<pre><code>popen() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def popen(self) -&gt; None:\n    self.process = self.ffmpeg.popen(stdin=PIPE, stderr=PIPE)\n    self.fileno = self.process.stdin.fileno()\n    self.bar = tqdm.tqdm(\n        total=self.scene.total_frames,\n        disable=(bool(self.relay) or self.scene.realtime),\n        desc=f\"Scene #{self.scene.index} ({self.scene.scene_name}) \u2192 Video\",\n        colour=\"#43BFEF\",\n        unit=\" frames\",\n        dynamic_ncols=True,\n        mininterval=1/30,\n        maxinterval=0.5,\n        smoothing=0.1,\n        leave=False,\n    )\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.buffers","title":"buffers","text":"<pre><code>buffers: deque[moderngl.Buffer] = Factory(deque)\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.make_buffers","title":"make_buffers","text":"<pre><code>make_buffers(n: int = 2) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def make_buffers(self, n: int=2) -&gt; None:\n    self.buffers = deque(self.scene._final.texture.new_buffer() for _ in range(n))\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.release_buffers","title":"release_buffers","text":"<pre><code>release_buffers() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def release_buffers(self) -&gt; None:\n    for buffer in self.buffers:\n        buffer.release()\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.process","title":"process","text":"<pre><code>process: subprocess.Popen = None\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.fileno","title":"fileno","text":"<pre><code>fileno: int = None\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.pipe","title":"pipe","text":"<pre><code>pipe(noturbo: bool = False) -&gt; None\n</code></pre> <p>Write a new frame to FFmpeg</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def pipe(self, noturbo: bool=False) -&gt; None:\n    \"\"\"Write a new frame to FFmpeg\"\"\"\n    if (self.process is None):\n        return\n\n    # Raise exception on FFmpeg error\n    if (self.process.poll() is not None):\n        raise RuntimeError((\n            \"FFmpeg process closed unexpectedly with traceback:\\n\"\n            f\"{self.process.stderr.read().decode('utf-8')}\"\n        ))\n\n    # Cycle through proxy buffers\n    buffer = self.buffers[self.frame % len(self.buffers)]\n    turbopipe.sync(buffer)\n    self.scene.fbo.read_into(buffer)\n\n    # Write to FFmpeg stdin\n    if noturbo:\n        self.process.stdin.write(buffer.read())\n    else:\n        turbopipe.pipe(buffer, self.fileno)\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.took","title":"took","text":"<pre><code>took: Optional[float] = None\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.finish","title":"finish","text":"<pre><code>finish() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def finish(self) -&gt; None:\n    if self.scene.exporting:\n        self.scene.log_info((\n            \"Waiting for FFmpeg process to finish encoding \"\n            \"(Queued writes, codecs lookahead, buffers, etc)\"\n        ))\n        turbopipe.close()\n        self.release_buffers()\n        self.process.stdin.close()\n        self.process.wait()\n    self.took = (perf_counter() - self.start)\n    self.bar.close()\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.Exporting.log_stats","title":"log_stats","text":"<pre><code>log_stats(output: Path) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def log_stats(self, output: Path) -&gt; None:\n    self.scene.log_info(f\"Finished rendering ({output})\", echo=(self.scene.exporting))\n    self.scene.log_info((\n        f\"\u2022 Stats: \"\n        f\"(Took [cyan]{self.took:.2f}s[/]) at \"\n        f\"([cyan]{(self.frame/self.took):.2f}fps[/] | \"\n        f\"[cyan]{(self.scene.runtime/self.took):.2f}x[/] Realtime) with \"\n        f\"({self.frame} Total Frames)\"\n    ))\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene","title":"ShaderScene","text":"<p>               Bases: <code>ShaderModule</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>@define\nclass ShaderScene(ShaderModule):\n\n    # -------------------------------------------|\n    # Common configuration\n\n    class Config(BrokenModel):\n        \"\"\"A class that contains all specific configurations of the scene\"\"\"\n        name: str = None\n\n    config: Config = field()\n\n    @config.default\n    def _config(self) -&gt; Config:\n        # Note: Gets the last-defined Config\n        return type(self).Config()\n\n    @property\n    def scene_name(self) -&gt; str:\n        return (self.config.name or type(self).__name__)\n\n    # -------------------------------------------|\n    # ShaderModules\n\n    modules: deque[ShaderModule] = Factory(deque)\n    \"\"\"List of all Modules on the Scene, in order of addition (including the Scene itself)\"\"\"\n\n    ffmpeg: BrokenFFmpeg = Factory(BrokenFFmpeg)\n    \"\"\"FFmpeg configuration for exporting (encoding) videos\"\"\"\n\n    frametimer: ShaderFrametimer = None\n    \"\"\"Automatically added frametimer module of the Scene\"\"\"\n\n    keyboard: ShaderKeyboard = None\n    \"\"\"Automatically added keyboard module of the Scene\"\"\"\n\n    camera: ShaderCamera = None\n    \"\"\"Automatically added camera module of the Scene\"\"\"\n\n    # -------------------------------------------|\n    # Fractional SSAA\n\n    shader: ShaderProgram = None\n    \"\"\"The main ShaderObject of the Scene, the visible content of the Window\"\"\"\n\n    alpha: bool = False\n    \"\"\"Makes the final texture have an alpha channel\"\"\"\n\n    _final: ShaderProgram = None\n    \"\"\"Internal ShaderObject used for a Fractional Super-Sampling Anti-Aliasing (SSAA). This shader\n    samples the texture from the user's final self.shader, which is rendered at SSAA resolution\"\"\"\n\n    @property\n    def fbo(self) -&gt; moderngl.Framebuffer:\n        \"\"\"The final framebuffer with the current frame\"\"\"\n        return self._final.texture.fbo\n\n    subsample: int = field(default=2, converter=lambda x: int(max(1, x)))\n    \"\"\"The kernel size of the final SSAA downsample\"\"\"\n\n    quality: float = field(default=50.0, converter=lambda x: clamp(float(x), 0.0, 100.0))\n    \"\"\"Visual quality level (0-100%), if implemented on the Shader/Scene\"\"\"\n\n    # # Commands\n\n    cli: BrokenTyper = Factory(lambda: BrokenTyper(chain=True))\n    \"\"\"This Scene's BrokenTyper instance for the CLI. Commands are added by any module in the\n    `self.commands` method. The `self.main` is always added to it\"\"\"\n\n    scene_panel: str = \"\ud83d\udd25 Scene commands\"\n\n    def __post__(self):\n        self.cli.description = (self.cli.description or type(self).__doc__)\n        self.ffmpeg.typer_vcodecs(self.cli)\n        self.ffmpeg.typer_acodecs(self.cli)\n        self.cli._panel = self.scene_panel\n        self.cli.command(self.main)\n        self._build()\n\n    def _build(self):\n        self.log_info(f\"Initializing scene [bold blue]'{self.scene_name}'[/] with backend {self.backend}\")\n\n        # Some ImGUI operations must only be done once to avoid memory leaks\n        if (imfirst := (imgui.get_current_context() is None)):\n            imgui.create_context()\n        self.imguio = imgui.get_io()\n        self.imguio.set_ini_filename(str(Broken.PROJECT.DIRECTORIES.CONFIG/\"imgui.ini\"))\n        self.imguio.font_global_scale = Environment.float(\"IMGUI_FONT_SCALE\", 1.0)\n        imfirst and self.imguio.fonts.add_font_from_file_ttf(\n            str(Broken.BROKEN.RESOURCES.FONTS/\"DejaVuSans.ttf\"),\n            16*self.imguio.font_global_scale,\n        )\n\n        # Default modules\n        self.init_window()\n        self.frametimer = ShaderFrametimer(scene=self)\n        self.keyboard = ShaderKeyboard(scene=self)\n        self.camera = ShaderCamera(scene=self)\n\n        # Create the SSAA Workaround engines\n        self._final = ShaderProgram(scene=self, name=\"iFinal\")\n        self._final.fragment = (SHADERFLOW.RESOURCES.FRAGMENT/\"Final.glsl\")\n        self._final.texture.components = (3 + int(self.alpha))\n        self._final.texture.dtype = numpy.uint8\n        self._final.texture.final = True\n        self._final.texture.track = 1.0\n        self.shader = ShaderProgram(scene=self, name=\"iScreen\")\n        self.shader.texture.repeat(False)\n        self.shader.texture.track = 1.0\n        self.build()\n\n    def __del__(self):\n\n        # Release OpenGL items and windows\n        for module in self.modules:\n            module.destroy()\n        with contextlib.suppress(AttributeError):\n            self.opengl.release()\n        with contextlib.suppress(AttributeError):\n            self.window.destroy()\n\n        # Deeper cyclic references\n        gc.collect()\n\n    # ---------------------------------------------------------------------------------------------|\n    # Temporal\n\n    time: Seconds = field(default=0.0, converter=float)\n    \"\"\"Current virtual time of the scene. Everything should depend on it for flexibility\"\"\"\n\n    start: Seconds = field(default=0.0, converter=float)\n    \"\"\"Start time offset added to self.time\"\"\"\n\n    speed: float = Factory(lambda: DynamicNumber(value=1, frequency=3))\n    \"\"\"Time scale factor, used for `dt`, which integrates to `time`\"\"\"\n\n    runtime: Seconds = field(default=10.0, converter=float)\n    \"\"\"Total duration of the scene, set by user or longest module\"\"\"\n\n    fps: Hertz = field(default=60.0, converter=float)\n    \"\"\"Target frames per second rendering speed\"\"\"\n\n    dt: Seconds = field(default=0.0, converter=float)\n    \"\"\"Virtual delta time since last frame, time scaled by `speed`. Use `self.rdt` for real delta\"\"\"\n\n    rdt: Seconds = field(default=0.0, converter=float)\n    \"\"\"Real life, physical delta time since last frame. Use `self.dt` for virtual scaled version\"\"\"\n\n    @property\n    def tau(self) -&gt; float:\n        \"\"\"Normalized time value relative to runtime between 0 and 1\"\"\"\n        return (self.time / self.runtime) % 1.0\n\n    @property\n    def cycle(self) -&gt; float:\n        \"\"\"A number from 0 to 2pi that ends on the runtime ('normalized angular time')\"\"\"\n        return (self.tau * math.tau)\n\n    @property\n    def frametime(self) -&gt; Seconds:\n        \"\"\"Ideal time between two frames. This value is coupled with `fps`\"\"\"\n        return (1.0 / self.fps)\n\n    @frametime.setter\n    def frametime(self, value: Seconds):\n        self.fps = (1.0 / value)\n\n    @property\n    def frame(self) -&gt; int:\n        \"\"\"Current frame index being rendered. This value is coupled with 'time' and 'fps'\"\"\"\n        return round(self.time * self.fps)\n\n    @frame.setter\n    def frame(self, value: int):\n        self.time = (value / self.fps)\n\n    @property\n    def total_frames(self) -&gt; int:\n        return round(self.runtime * self.fps)\n\n    # Total Duration\n\n    @property\n    def duration(self) -&gt; Seconds:\n        return self.runtime\n\n    @property\n    def max_duration(self) -&gt; Seconds:\n        \"\"\"The longest module duration\"\"\"\n        return max(module.duration or 0.0 for module in self.modules)\n\n    def set_duration(self, override: Seconds=None) -&gt; Seconds:\n        \"\"\"Either force the duration, find the longest module or use base duration\"\"\"\n        self.runtime  = (override or self.max_duration)\n        self.runtime /= self.speed.value\n        return self.runtime\n\n    # ---------------------------------------------------------------------------------------------|\n    # Window properties\n\n    def _window_proxy(self, attribute, value) -&gt; Any:\n        name: str = attribute.name\n\n        if (name == \"exclusive\"):\n            name = \"mouse_exclusivity\"\n\n        with contextlib.suppress(AttributeError):\n            self.log_debug(f\"Changing Window attribute '{name}' to '{value}'\")\n            setattr(self.window, name, value)\n\n        return value\n\n    title: str = field(default=\"ShaderFlow\", on_setattr=_window_proxy)\n    \"\"\"Realtime window 'title' property\"\"\"\n\n    resizable: bool = field(default=True, on_setattr=_window_proxy)\n    \"\"\"Realtime window 'is resizable' property\"\"\"\n\n    fullscreen: bool = field(default=False, on_setattr=_window_proxy)\n    \"\"\"Realtime window 'is fullscreen' property\"\"\"\n\n    exclusive: bool = field(default=False, on_setattr=_window_proxy)\n    \"\"\"Realtime window 'mouse exclusivity' property\"\"\"\n\n    visible: bool = field(default=False, on_setattr=_window_proxy)\n    \"\"\"Realtime window 'is visible' property\"\"\"\n\n    @property\n    def hidden(self) -&gt; bool:\n        \"\"\"Realtime window 'is hidden' property\"\"\"\n        return (not self.visible)\n\n    @hidden.setter\n    def hidden(self, value: bool):\n        self.visible = (not value)\n\n    # # Video modes and monitor\n\n    monitor: int = field(default=Environment.int(\"MONITOR\", 0), converter=int)\n    \"\"\"Monitor index to base the window parameters on\"\"\"\n\n    @property\n    def glfw_monitor(self) -&gt; Optional[glfw._GLFWmonitor]:\n        if (monitors := glfw.get_monitors()):\n            return monitors[self.monitor]\n\n    @property\n    def glfw_video_mode(self) -&gt; Optional[Dict]:\n        if (monitor := self.glfw_monitor):\n            return glfw.get_video_mode(monitor)\n\n    @property\n    def monitor_framerate(self) -&gt; float:\n        \"\"\"Note: Defaults to 60 if no monitor is found or non-real time\"\"\"\n        if (not self.realtime):\n            return 60.0\n        if (mode := self.glfw_video_mode):\n            return mode.refresh_rate or 60.0\n        return 60.0\n\n    @property\n    def monitor_size(self) -&gt; Optional[tuple[int, int]]:\n        if self.exporting:\n            return None\n        if (mode := self.glfw_video_mode):\n            return (mode.size.width, mode.size.height)\n\n    @property\n    def monitor_width(self) -&gt; Optional[int]:\n        if (resolution := self.monitor_size):\n            return resolution[0]\n\n    @property\n    def monitor_height(self) -&gt; Optional[int]:\n        if (resolution := self.monitor_size):\n            return resolution[1]\n\n    # ---------------------------------------------------------------------------------------------|\n    # Resolution\n\n    @property\n    def components(self) -&gt; int:\n        return self._final.texture.components\n\n    # # Scale\n\n    _scale: float = field(default=1.0, converter=lambda x: max(0.01, x))\n\n    @property\n    def scale(self) -&gt; float:\n        \"\"\"Resolution scale factor, the `self.width` and `self.height` are multiplied by this\"\"\"\n        return self._scale\n\n    @scale.setter\n    def scale(self, value: float):\n        self.log_debug(f\"Changing Resolution Scale to ({value})\")\n        self.resize(scale=value)\n\n    # # Width\n\n    _width: int = field(default=1920)\n\n    @property\n    def width(self) -&gt; int:\n        return self._width\n\n    @width.setter\n    def width(self, value: int):\n        self.resize(width=(value*self._scale))\n\n    # # Height\n\n    _height: int = field(default=1080)\n\n    @property\n    def height(self) -&gt; int:\n        return self._height\n\n    @height.setter\n    def height(self, value: int):\n        self.resize(height=(value*self._scale))\n\n    # # SSAA\n\n    _ssaa: float = field(default=1.0, converter=lambda x: max(0.01, float(x)))\n\n    @property\n    def ssaa(self) -&gt; float:\n        \"\"\"(Fractional) Super Sampling Anti-Aliasing (SSAA) factor [^1]\n\n        Render in a virtual resolution of this multiplier, then resample to the original resolution\n        - Values higher than 1 improves the image quality, maximum visual quality at 2\n        - Significant GPU cost of O(N^2): quadruples the GPU use at 2, or 25% at 0.5\n\n        [^1]: https://en.wikipedia.org/wiki/Supersampling (Uniform grid distribution)\n        \"\"\"\n        return self._ssaa\n\n    @ssaa.setter\n    def ssaa(self, value: float):\n        self.log_debug(f\"Changing Fractional SSAA to {value}\")\n        self._ssaa = value\n        self.relay(ShaderMessage.Shader.RecreateTextures)\n\n    # # Resolution (With, Height)\n\n    @property\n    def resolution(self) -&gt; tuple[int, int]:\n        return (self.width, self.height)\n\n    @resolution.setter\n    def resolution(self, value: tuple[int, int]):\n        self.resize(*value)\n\n    @property\n    def render_resolution(self) -&gt; tuple[int, int]:\n        \"\"\"Internal true rendering resolution with SSAA applied\"\"\"\n        return (int(self.width*self.ssaa), int(self.height*self.ssaa))\n\n    # # Aspect Ratio\n\n    _aspect_ratio: float = None\n\n    @property\n    def aspect_ratio(self) -&gt; float:\n        \"\"\"Either the forced `self._aspect_ratio` or dynamic from `self.width/self.height`. When set\n        and resizing, the logic of `BrokenResolution.fit` is applied to enforce ratios\"\"\"\n        return self._aspect_ratio or (self.width/self.height)\n\n    @aspect_ratio.setter\n    def aspect_ratio(self, value: Union[float, str]):\n        self.log_debug(f\"Changing Aspect Ratio to {value}\")\n\n        # The aspect ratio can be sent as a fraction or \"none\", \"false\"\n        if isinstance(value, str):\n            value = eval(value.replace(\":\", \"/\").capitalize())\n\n        # Optimization: Only change if different\n        if (self._aspect_ratio == value):\n            return\n\n        self._aspect_ratio = value\n\n        if (self.backend == WindowBackend.GLFW):\n            num, den = limited_ratio(self._aspect_ratio, limit=2**20) or (glfw.DONT_CARE, glfw.DONT_CARE)\n            glfw.set_window_aspect_ratio(self.window._window, num, den)\n\n    def resize(self,\n        width: Union[int, float]=Unchanged,\n        height: Union[int, float]=Unchanged,\n        *,\n        ratio: Union[Unchanged, float, str]=Unchanged,\n        bounds: tuple[int, int]=Unchanged,\n        scale: float=Unchanged,\n        ssaa: float=Unchanged,\n    ) -&gt; tuple[int, int]:\n\n        # Maybe update auxiliary properties\n        self.aspect_ratio = overrides(self._aspect_ratio, ratio)\n        self._scale = overrides(self._scale, scale)\n        self._ssaa = overrides(self._ssaa, ssaa)\n\n        # The parameters aren't trivial. The idea is to fit resolution from the scale-less components,\n        # so scaling isn't carried over, then to apply scaling (self.resolution)\n        resolution = BrokenResolution.fit(\n            old=(self._width, self._height),\n            new=(width, height),\n            max=(bounds or self.monitor_size),\n            ar=self._aspect_ratio,\n            scale=self._scale,\n        )\n\n        # Optimization: Only resize if target is different\n        if (resolution != (self.width, self.height)):\n            self._width, self._height = resolution\n            self.window.size = self.resolution\n            self.relay(ShaderMessage.Shader.RecreateTextures)\n            self.log_info(f\"Resized Window to {self.resolution}\")\n\n        return self.resolution\n\n    # ---------------------------------------------------------------------------------------------|\n    # Window, OpenGL, Backend\n\n    backend: WindowBackend = Factory(lambda: WindowBackend.infer())\n    \"\"\"The ModernGL Window Backend. **Cannot be changed after creation**. Can also be set with the\n    environment variable `WINDOW_BACKEND=&lt;backend&gt;`, where `backend = {glfw, headless}`\"\"\"\n\n    opengl: moderngl.Context = None\n    \"\"\"ModernGL Context of this Scene. The thread accessing this MUST own or ENTER its context for\n    creating, changing, deleting objects; more often than not, it's the Main thread\"\"\"\n\n    window: ModernglWindow = None\n    \"\"\"ModernGL Window instance at `site-packages/moderngl_window.context.&lt;self.backend&gt;.Window`\"\"\"\n\n    imgui: ModernglWindowRenderer = None\n    \"\"\"ModernGL Imgui integration class bound to the Window\"\"\"\n\n    imguio: Any = None\n    \"\"\"Imgui IO object\"\"\"\n\n    def init_window(self) -&gt; None:\n        \"\"\"Create the window and the OpenGL context\"\"\"\n        if self.window:\n            raise RuntimeError(\"Window backend cannot be changed after creation\")\n\n        # Linux: Use EGL for creating a OpenGL context, allows true headless with GPU acceleration\n        # Note: (https://forums.developer.nvidia.com/t/81412) (https://brokensrc.dev/get/docker/)\n        backend = (\"egl\" if BrokenPlatform.OnLinux and Environment.flag(\"WINDOW_EGL\", 1) else None)\n\n        # Dynamically import and instantiate the ModernGL Window class\n        module = f\"moderngl_window.context.{denum(self.backend).lower()}\"\n        self.window = importlib.import_module(module).Window(\n            size=self.resolution,\n            title=self.title,\n            resizable=self.resizable,\n            visible=self.visible,\n            fullscreen=self.fullscreen,\n            backend=backend,\n            vsync=False,\n        )\n        ShaderKeyboard.set_keymap(self.window.keys)\n        self.imgui  = ModernglWindowRenderer(self.window)\n        self.opengl = self.window.ctx\n\n        # Bind window events to relay\n        self.window.resize_func               = (self.__window_resize__)\n        self.window.close_func                = (self.__window_close__)\n        self.window.iconify_func              = (self.__window_iconify__)\n        self.window.key_event_func            = (self.__window_key_event__)\n        self.window.mouse_position_event_func = (self.__window_mouse_position_event__)\n        self.window.mouse_press_event_func    = (self.__window_mouse_press_event__)\n        self.window.mouse_release_event_func  = (self.__window_mouse_release_event__)\n        self.window.mouse_drag_event_func     = (self.__window_mouse_drag_event__)\n        self.window.mouse_scroll_event_func   = (self.__window_mouse_scroll_event__)\n        self.window.unicode_char_entered_func = (self.__window_unicode_char_entered__)\n        self.window.files_dropped_event_func  = (self.__window_files_dropped_event__)\n\n        if (self.backend == WindowBackend.GLFW):\n            if (icon := Broken.PROJECT.RESOURCES.ICON_PNG).exists():\n                BrokenWorker.thread(self.window.set_icon, icon_path=icon)\n            glfw.set_cursor_enter_callback(self.window._window, (self.__window_mouse_enter_event__))\n            glfw.set_drop_callback(self.window._window, (self.__window_files_dropped_event__))\n            ShaderKeyboard.Keys.LEFT_SHIFT = glfw.KEY_LEFT_SHIFT\n            ShaderKeyboard.Keys.LEFT_CTRL  = glfw.KEY_LEFT_CONTROL\n            ShaderKeyboard.Keys.LEFT_ALT   = glfw.KEY_LEFT_ALT\n\n        self.log_info(f\"OpenGL Renderer: {self.opengl.info['GL_RENDERER']}\")\n\n    def screenshot(self) -&gt; numpy.ndarray:\n        \"\"\"Take a screenshot of the screen and return a numpy array with the data\"\"\"\n        data = self.fbo.read(viewport=(0, 0, self.width, self.height))\n        data = numpy.ndarray((self.height, self.width, self.components), dtype=numpy.uint8, buffer=data)\n        return numpy.flipud(data)\n\n    # ---------------------------------------------------------------------------------------------|\n    # User actions\n\n    @property\n    def directory(self) -&gt; Path:\n        \"\"\"Path of the current Scene file Python script. This works by searching up the call stack\n        for the first context whose filename isn't the local __file__ (of ShaderFlow.Scene)\"\"\"\n        # Idea: Maybe `type(self).mro()[0]` could help\n        for frame in inspect.stack():\n            if (frame.filename != __file__):\n                return Path(frame.filename).parent\n\n    def read_file(self, file: Path, *, bytes: bool=False) -&gt; Union[str, bytes]:\n        \"\"\"Read a file relative to the current Scene Python script\"\"\"\n        file = (self.directory/file)\n        self.log_info(f\"Reading file ({file})\")\n        return LoadBytes(file) if bytes else LoadString(file)\n\n    # ---------------------------------------------------------------------------------------------|\n    # Main event loop\n\n    scheduler: BrokenScheduler = Factory(BrokenScheduler)\n    \"\"\"Scheduler for the Scene, handles all the tasks and their execution\"\"\"\n\n    vsync: SchedulerTask = None\n    \"\"\"Task for the Scene's main event loop, the rendering of the next frame\"\"\"\n\n    quit: PlainTracker = Factory(lambda: PlainTracker(False))\n    \"\"\"Should the scene end the main event loop? Use as `if scene.quit():`\"\"\"\n\n    on_frame: BrokenRelay = Factory(BrokenRelay)\n    \"\"\"Hook for after a frame is rendered\"\"\"\n\n    def next(self, dt: float=0.0) -&gt; None:\n        \"\"\"Integrate time, update all modules and render the next frame\"\"\"\n\n        # Fixme: Windows: https://github.com/glfw/glfw/pull/1426\n        # Immediately swap the buffer with previous frame for vsync\n        if (not self.exporting):\n            self.window.swap_buffers()\n\n        # Note: Updates in reverse order of addition (child -&gt; parent -&gt; root)\n        # Note: Updates non-engine first, as the pipeline might change\n        for module in self.modules:\n            if not isinstance(module, ShaderProgram):\n                module.update()\n        for module in reversed(self.modules):\n            if isinstance(module, ShaderProgram):\n                module.update()\n\n        self._render_ui()\n        self.on_frame()\n\n        # Temporal logic is run afterwards, so frame zero is t=0\n        self.speed.next(dt=abs(dt))\n        self.vsync.fps = self.fps\n        self.dt    = dt * self.speed\n        self.rdt   = dt\n        self.time += self.dt\n\n    realtime: bool = True\n    \"\"\"'Realtime' mode: Running with a window and user interaction\"\"\"\n\n    exporting: bool = False\n    \"\"\"Is this Scene exporting to a video file?\"\"\"\n\n    freewheel: bool = False\n    \"\"\"'Not realtime' mode: Either Exporting, Rendering or Benchmarking\"\"\"\n\n    headless: bool = False\n    \"\"\"Running Headlessly, without a window and user interaction\"\"\"\n\n    loop: int = field(default=1, converter=int)\n    \"\"\"Number of times to loop the exported video. One 1 keeps original, two 2 doubles the length.\n    Ideally have seamless transitions on the shader based on self.tau and/or/no audio input\"\"\"\n\n    index: int = 0\n    \"\"\"Current Batch exporting video index\"\"\"\n\n    @abstractmethod\n    def export_name(self, path: Path) -&gt; Path:\n        \"\"\"Change the video file name being exported based on the current batch index. By default,\n        the name is unchanged in single export, else the stem is appended with the batch index\"\"\"\n        if (self.index &gt; 0):\n            return path.with_stem(f\"{path.stem}_{self.index}\")\n        return path\n\n    def main(self,\n        width:      Annotated[int,   Option(\"--width\",      \"-w\", help=\"[bold red   ](\ud83d\udd34 Basic  )[/] Width  of the rendering resolution [medium_purple3](None to keep or find by --ar aspect ratio)[/] [dim](1920 on init)[/]\")]=None,\n        height:     Annotated[int,   Option(\"--height\",     \"-h\", help=\"[bold red   ](\ud83d\udd34 Basic  )[/] Height of the rendering resolution [medium_purple3](None to keep or find by --ar aspect ratio)[/] [dim](1080 on init)[/]\")]=None,\n        fps:        Annotated[float, Option(\"--fps\",        \"-f\", help=\"[bold red   ](\ud83d\udd34 Basic  )[/] Target frames per second [medium_purple3](Defaults to the monitor framerate on realtime else 60)[/]\")]=None,\n        scale:      Annotated[float, Option(\"--scale\",      \"-x\", help=\"[bold red   ](\ud83d\udd34 Basic  )[/] Post-multiply width and height by a scale factor [medium_purple3](None to keep)[/] [dim](1.0 on init)[/]\")]=None,\n        ratio:      Annotated[str,   Option(\"--ar\",         \"-X\", help=\"[bold red   ](\ud83d\udd34 Basic  )[/] Force resolution aspect ratio [green](Examples: '16:9', '16/9', '1.777')[/] [medium_purple3](None for dynamic)[/]\")]=None,\n        noskip:     Annotated[bool,  Option(\"--no-skip\",          help=\"[bold red   ](\ud83d\udd34 Window )[/] [dim]No frames are skipped if the rendering is behind schedule [medium_purple3](Limits maximum dt to 1/fps)[/]\")]=False,\n        fullscreen: Annotated[bool,  Option(\"--fullscreen\",       help=\"[bold red   ](\ud83d\udd34 Window )[/] [dim]Start the realtime window in fullscreen mode [medium_purple3](Toggle with F11)[/]\")]=False,\n        maximize:   Annotated[bool,  Option(\"--maximize\",   \"-M\", help=\"[bold red   ](\ud83d\udd34 Window )[/] [dim]Start the realtime window in maximized mode\")]=False,\n        quality:    Annotated[float, Option(\"--quality\",    \"-q\", help=\"[bold yellow](\ud83d\udfe1 Quality)[/] Global quality level [green](0-100%)[/] [yellow](If implemented on the scene/shader)[/] [medium_purple3](None to keep, default 50%)[/]\")]=None,\n        ssaa:       Annotated[float, Option(\"--ssaa\",       \"-s\", help=\"[bold yellow](\ud83d\udfe1 Quality)[/] Super sampling anti aliasing factor [green](0-4)[/] [yellow](N^2 GPU cost)[/] [medium_purple3](None to keep, default 1)[/]\")]=None,\n        subsample:  Annotated[int,   Option(\"--subsample\",        help=\"[bold yellow](\ud83d\udfe1 Quality)[/] Subpixel downsample kernel size for the final SSAA [green](1-4)[/] [medium_purple3](None to keep, default 2)[/]\")]=None,\n        render:     Annotated[bool,  Option(\"--render\",     \"-r\", help=\"[bold green ](\ud83d\udfe2 Export )[/] Export the Scene to a video file defined on --output [dim](Implicit if present)[/]\")]=False,\n        time:       Annotated[str,   Option(\"--time\",       \"-t\", help=\"[bold green ](\ud83d\udfe2 Export )[/] Total length of the exported video [dim](Loop duration)[/] [medium_purple3](None to keep, default 10 or longest module)[/]\")]=None,\n        output:     Annotated[str,   Option(\"--output\",     \"-o\", help=\"[bold green ](\ud83d\udfe2 Export )[/] Output video file name [green]('absolute', 'relative', 'plain' path)[/] [dim]($base/$(plain or $scene-$date))[/]\")]=None,\n        format:     Annotated[str,   Option(\"--format\",     \"-F\", help=\"[bold green ](\ud83d\udfe2 Export )[/] Output video container [green]('mp4', 'mkv', 'webm', 'avi, '...')[/] [yellow](--output one is prioritized)[/]\")]=None,\n        base:       Annotated[Path,  Option(\"--base\",       \"-D\", help=\"[bold green ](\ud83d\udfe2 Export )[/] Export base directory [medium_purple3](If plain name)[/]\")]=Broken.PROJECT.DIRECTORIES.DATA,\n        start:      Annotated[float, Option(\"--start\",      \"-T\", help=\"[bold green ](\ud83d\udfe2 Export )[/] Start time offset of the exported video [yellow](Time is shifted by this)[/] [medium_purple3](None to keep)[/] [dim](0 on init)[/]\")]=None,\n        speed:      Annotated[float, Option(\"--speed\",      \"-S\", help=\"[bold green ](\ud83d\udfe2 Export )[/] Time speed factor of the scene [yellow](Duration is stretched by 1/speed)[/] [medium_purple3](None to keep)[/] [dim](1 on init)[/]\")]=None,\n        batch:      Annotated[str,   Option(\"--batch\",      \"-b\", help=\"[bold green ](\ud83d\udfe2 Export )[/] Hyphenated indices range to export multiple videos, if implemented [medium_purple3](1,5-7,10)[/medium_purple3]\")]=\"0\",\n        loop:       Annotated[int,   Option(\"--loop\",       \"-l\", help=\"[bold blue  ](\ud83d\udd35 Special)[/] Exported videos loop copies [yellow](Final duration is multiplied by this)[/] [dim](1 on init)[/]\")]=None,\n        freewheel:  Annotated[bool,  Option(\"--freewheel\",        help=\"[bold blue  ](\ud83d\udd35 Special)[/] Unlock the Scene's event loop framerate, implicit when exporting [medium_purple3](Use SKIP_GPU=1 for CPU only benchmark)[/]\")]=False,\n        raw:        Annotated[bool,  Option(\"--raw\",              help=\"[bold blue  ](\ud83d\udd35 Special)[/] Send raw OpenGL frames before GPU SSAA to FFmpeg [medium_purple3](Enabled if SSAA&lt;1)[/] [dim](CPU Downsampling)[/]\")]=False,\n        open:       Annotated[bool,  Option(\"--open\",             help=\"[bold blue  ](\ud83d\udd35 Special)[/] Open the directory where the video was saved after finishing rendering\")]=False,\n        relaxed:    Annotated[bool,  Option(\"--relaxed\",          help=\"[bold blue  ](\ud83d\udd35 Special)[/] [dim]Use a relaxed but lower CPU overhead frametime sleep function on realtime mode\")]=False,\n        buffers:    Annotated[int,   Option(\"--buffers\",    \"-N\", help=\"[bold blue  ](\ud83d\udd35 Turbo  )[/] [dim]Maximum number of pre-rendered frames to be piped into FFmpeg[/dim]\")]=3,\n        noturbo:    Annotated[bool,  Option(\"--no-turbo\",         help=\"[bold blue  ](\ud83d\udd35 Turbo  )[/] [dim]Disables [steel_blue1][link=https://github.com/BrokenSource/TurboPipe]TurboPipe[/link][/steel_blue1] fast exporting, may fix segfaults on older hardware[/dim]\")]=False,\n        # Special: Not part of the cli\n        progress:   Annotated[Optional[Callable[[int, int], None]], BrokenTyper.exclude()]=None,\n        bounds:     Annotated[Optional[tuple[int, int]], BrokenTyper.exclude()]=None,\n        # Batch exporting internal use\n        _initial:   Annotated[tuple[int, int], BrokenTyper.exclude()]=None,\n        _index:     Annotated[int,  BrokenTyper.exclude()]=None,\n        _started:   Annotated[str,  BrokenTyper.exclude()]=None,\n        _outputs:   Annotated[Path, BrokenTyper.exclude()]=None,\n    ) -&gt; Optional[list[Path]]:\n        \"\"\"\n        Main event loop of the scene\n        \"\"\"\n\n        # -----------------------------------------------------------------------------------------|\n        # Batch exporting implementation\n\n        if (_index is None):\n\n            # One-shot internal reference variables\n            _started = __import__(\"arrow\").now().format(\"YYYY-MM-DD HH-mm-ss\")\n            _initial = self.resolution\n            _outputs = list()\n\n            for _index in hyphen_range(batch):\n                try:\n                    self.quit(set=False)\n                    ShaderScene.main(**locals())\n                except ShaderBatchStop:\n                    self.log_minor(f\"Batch exporting stopped at index {_index}\")\n                    break\n\n            if (self.exporting and open):\n                BrokenPath.explore(_outputs[0].parent)\n\n            # Revert to the original resolution\n            self._width, self._height = _initial\n            return _outputs\n\n        # -----------------------------------------------------------------------------------------|\n\n        self.exporting  = (render or bool(output))\n        self.freewheel  = (self.exporting or freewheel)\n        self.headless   = (self.freewheel)\n        self.realtime   = (not self.headless)\n        self.title      = (f\"ShaderFlow | {self.scene_name}\")\n        self.fps        = overrides(self.monitor_framerate, fps)\n        self.subsample  = overrides(self.subsample, subsample)\n        self.quality    = overrides(self.quality, quality)\n        self.start      = overrides(self.start, start)\n        self.loop       = overrides(self.loop, loop)\n        self.ssaa       = overrides(self.ssaa, ssaa)\n        self.fullscreen = (fullscreen)\n        self.index      = _index\n        self.time       = 0\n        self.speed.set(speed or self.speed.value)\n        self.relay(ShaderMessage.Shader.Compile)\n        self._width, self._height = _initial\n        self.scheduler.clear()\n\n        # Set module defaults or overrides\n        for module in self.modules:\n            module.setup()\n\n        # Try parsing a time, else eval a math expression if a string is given or keep as is\n        self.set_duration((timeparse(time) or eval(time)) if isinstance(time, str) else time)\n\n        # Calculate the final resolution\n        _width, _height = self.resize(\n            width=width, height=height,\n            ratio=ratio, scale=scale,\n            bounds=bounds,\n        )\n\n        # Optimization: Save bandwidth by piping native frames\n        if self.freewheel and (raw or self.ssaa &lt; 1):\n            self.resize(*self.render_resolution, scale=1, ssaa=1)\n\n        # Some scenes might take a while to setup\n        self.visible = (not self.headless)\n\n        if (maximize and (self.backend == WindowBackend.GLFW)):\n            glfw.maximize_window(self.window._window)\n\n        # Status tracker and refactored exporting utilities\n        export = Exporting(self, relay=progress)\n\n        # Configure FFmpeg and Popen it\n        if (self.exporting):\n            export.ffmpeg_clean()\n            export.ffmpeg_sizes(width=_width, height=_height)\n            export.ffmpeg_output(base=base, output=output, format=format, _started=_started)\n            export.make_buffers(buffers)\n            export.ffhook()\n            export.popen()\n\n        # Add self.next to the event loop\n        self.vsync = self.scheduler.new(\n            task=self.next,\n            frequency=self.fps,\n            freewheel=self.freewheel,\n            frameskip=(not noskip),\n            precise=(not relaxed),\n        )\n\n        # True main event loop\n        while (task := self.scheduler.next()):\n            if (task != self.vsync):\n                continue\n            if (self.quit()):\n                break\n            if self.realtime:\n                continue\n\n            export.pipe(noturbo=noturbo)\n            export.update()\n\n            if export.finished:\n                export.finish()\n                output = BrokenFFmpeg.loop(output, times=self.loop)\n                export.log_stats(output=output)\n                _outputs.append(output)\n                break\n\n    # ---------------------------------------------------------------------------------------------|\n    # Module\n\n    def handle(self, message: ShaderMessage) -&gt; None:\n\n        if isinstance(message, ShaderMessage.Window.Close):\n            self.log_info(\"Received Window Close Event\")\n            self.hidden = True\n            self.quit(True)\n\n        elif isinstance(message, ShaderMessage.Keyboard.KeyDown):\n            if (message.key == ShaderKeyboard.Keys.O):\n                self.log_info(\"(O  ) Resetting the scene\")\n                for module in self.modules:\n                    module.setup()\n                self.time = 0\n\n            elif (message.key == ShaderKeyboard.Keys.R):\n                self.log_info(\"(R  ) Reloading shaders\")\n                self.relay(ShaderMessage.Shader.Compile)\n\n            elif (message.key == ShaderKeyboard.Keys.TAB):\n                self.log_info(\"(TAB) Toggling menu\")\n                self.render_ui = (not self.render_ui)\n\n            elif (message.key == ShaderKeyboard.Keys.F1):\n                self.log_info(\"(F1 ) Toggling exclusive mode\")\n                self.exclusive = (not self.exclusive)\n\n            elif (message.key == ShaderKeyboard.Keys.F2):\n                import arrow\n                image = Image.fromarray(self.screenshot())\n                time  = arrow.now().format(\"YYYY-MM-DD_HH-mm-ss\")\n                path  = Broken.PROJECT.DIRECTORIES.SCREENSHOTS/f\"({time}) {self.scene_name}.png\"\n                self.log_minor(f\"(F2 ) Saving screenshot to ({path})\")\n                BrokenWorker.thread(image.save, fp=path)\n\n            elif (message.key == ShaderKeyboard.Keys.F11):\n                self.log_info(\"(F11) Toggling fullscreen\")\n                self.fullscreen = (not self.fullscreen)\n\n        elif isinstance(message, (ShaderMessage.Mouse.Drag, ShaderMessage.Mouse.Position)):\n            self.mouse_gluv = (message.u, message.v)\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        yield Uniform(\"float\", \"iTime\",        self.time + self.start)\n        yield Uniform(\"float\", \"iTau\",         self.tau)\n        yield Uniform(\"float\", \"iDuration\",    self.duration)\n        yield Uniform(\"float\", \"iDeltatime\",   self.dt)\n        yield Uniform(\"vec2\",  \"iResolution\",  self.resolution)\n        yield Uniform(\"float\", \"iWantAspect\",  self.aspect_ratio)\n        yield Uniform(\"float\", \"iQuality\",     self.quality/100)\n        yield Uniform(\"float\", \"iSSAA\",        self.ssaa)\n        yield Uniform(\"float\", \"iFramerate\",   self.fps)\n        yield Uniform(\"int\",   \"iFrame\",       self.frame)\n        yield Uniform(\"bool\",  \"iRealtime\",    self.realtime)\n        yield Uniform(\"vec2\",  \"iMouse\",       self.mouse_gluv)\n        yield Uniform(\"bool\",  \"iMouseInside\", self.mouse_inside)\n        for i in range(1, 3):\n            yield Uniform(\"bool\", f\"iMouse{i}\", self.mouse_buttons[i])\n\n    # ---------------------------------------------------------------------------------------------|\n    # Internal window events\n\n    def __window_resize__(self, width: int, height: int) -&gt; None:\n\n        # Don't listen to resizes when exporting, as the final resolution might be\n        # greater than the monitor and the window will resize down to fit\n        if self.exporting:\n            return\n        self.imgui.resize(width, height)\n        self._width, self._height = width, height\n        self.relay(ShaderMessage.Shader.RecreateTextures)\n\n    def __window_close__(self) -&gt; None:\n        self.relay(ShaderMessage.Window.Close())\n\n    def __window_iconify__(self, state: bool) -&gt; None:\n        self.relay(ShaderMessage.Window.Iconify(state=state))\n\n    def __window_files_dropped_event__(self, window, files: list[str]) -&gt; None:\n        self.relay(ShaderMessage.Window.FileDrop(files=files))\n\n    # # Keyboard related events\n\n    def __window_key_event__(self, key: int, action: int, modifiers: int) -&gt; None:\n        self.imgui.key_event(key, action, modifiers)\n        if self.imguio.want_capture_keyboard and self.render_ui:\n            return\n        if action == ShaderKeyboard.Keys.ACTION_PRESS:\n            self.relay(ShaderMessage.Keyboard.KeyDown(key=key, modifiers=modifiers))\n        elif action == ShaderKeyboard.Keys.ACTION_RELEASE:\n            self.relay(ShaderMessage.Keyboard.KeyUp(key=key, modifiers=modifiers))\n        self.relay(ShaderMessage.Keyboard.Press(key=key, action=action, modifiers=modifiers))\n\n    def __window_unicode_char_entered__(self, char: str) -&gt; None:\n        if self.imguio.want_capture_keyboard and self.render_ui:\n            return\n        self.relay(ShaderMessage.Keyboard.Unicode(char=char))\n\n    # # Mouse related events\n\n    mouse_gluv: tuple[float, float] = Factory(lambda: (0, 0))\n\n    def __xy2uv__(self, x: int=0, y: int=0) -&gt; dict[str, float]:\n        \"\"\"Convert a XY pixel coordinate into a Center-UV normalized coordinate\"\"\"\n        return dict(\n            u=2*(x/self.width  - 0.5),\n            v=2*(y/self.height - 0.5)*(-1),\n            x=x, y=y,\n        )\n\n    def __dxdy2dudv__(self, dx: int=0, dy: int=0) -&gt; dict[str, float]:\n        \"\"\"Convert a dx dy pixel coordinate into a Center-UV normalized coordinate\"\"\"\n        return dict(\n            du=2*(dx/self.width)*(self.width/self.height),\n            dv=2*(dy/self.height)*(-1),\n            dx=dx, dy=dy,\n        )\n\n    mouse_buttons: dict[int, bool] = Factory(lambda: {k: False for k in range(1, 6)})\n\n    def __window_mouse_press_event__(self, x: int, y: int, button: int) -&gt; None:\n        self.imgui.mouse_press_event(x, y, button)\n        if self.imguio.want_capture_mouse and self.render_ui:\n            return\n        self.mouse_buttons[button] = True\n        self.relay(ShaderMessage.Mouse.Press(\n            **self.__xy2uv__(x, y),\n            button=button\n        ))\n\n    def __window_mouse_release_event__(self, x: int, y: int, button: int) -&gt; None:\n        self.imgui.mouse_release_event(x, y, button)\n        if self.imguio.want_capture_mouse and self.render_ui:\n            return\n        self.mouse_buttons[button] = False\n        self.relay(ShaderMessage.Mouse.Release(\n            **self.__xy2uv__(x, y),\n            button=button\n        ))\n\n    mouse_inside: bool = False\n\n    def __window_mouse_enter_event__(self, window, inside: bool) -&gt; None:\n        self.mouse_inside = inside\n        self.relay(ShaderMessage.Mouse.Enter(state=inside))\n\n    def __window_mouse_scroll_event__(self, dx: int, dy: int) -&gt; None:\n        self.imgui.mouse_scroll_event(dx, dy)\n        if self.imguio.want_capture_mouse and self.render_ui:\n            return\n        elif self.keyboard(ShaderKeyboard.Keys.LEFT_ALT):\n            self.speed.target += (dy)*0.2\n            return\n        self.relay(ShaderMessage.Mouse.Scroll(\n            **self.__dxdy2dudv__(dx=dx, dy=dy)\n        ))\n\n    def __window_mouse_position_event__(self, x: int, y: int, dx: int, dy: int) -&gt; None:\n        self.imgui.mouse_position_event(x, y, dx, dy)\n        if self.imguio.want_capture_mouse and self.render_ui:\n            return\n        self.relay(ShaderMessage.Mouse.Position(\n            **self.__dxdy2dudv__(dx=dx, dy=dy),\n            **self.__xy2uv__(x=x, y=y)\n        ))\n\n    _mouse_drag_time_factor: float = 4\n    \"\"\"How much seconds to scroll in time when the mouse moves the full window height\"\"\"\n\n    def __window_mouse_drag_event__(self, x: int, y: int, dx: int, dy: int) -&gt; None:\n        self.imgui.mouse_drag_event(x, y, dx, dy)\n        if self.imguio.want_capture_mouse and self.render_ui:\n            return\n\n        # Rotate the camera on Shift\n        if self.keyboard(ShaderKeyboard.Keys.LEFT_CTRL):\n            cx, cy = (x-self.width/2), (y-self.height/2)\n            angle = math.atan2(cy+dy, cx+dx) - math.atan2(cy, cx)\n            if (abs(angle) &gt; math.pi): angle -= 2*math.pi\n            self.camera.rotate(self.camera.forward, angle=math.degrees(angle))\n            return\n\n        elif self.exclusive:\n            self.camera.apply_zoom(dy/500)\n            self.camera.rotate(self.camera.forward, angle=-dx/10)\n            return\n\n        # Time Travel on Alt\n        elif self.keyboard(ShaderKeyboard.Keys.LEFT_ALT):\n            self.time -= self._mouse_drag_time_factor * (dy/self.height)\n            return\n\n        self.relay(ShaderMessage.Mouse.Drag(\n            **self.__dxdy2dudv__(dx=dx, dy=dy),\n            **self.__xy2uv__(x=x, y=y)\n        ))\n\n    # ---------------------------------------------------------------------------------------------|\n    # Todo: Move UI to own class: For main menu, settings, exporting, etc\n\n    render_ui: bool = False\n    \"\"\"Whether to render the Main UI\"\"\"\n\n    # Fixme: Move to somewhere better\n    def _render_ui(self):\n        if not self.render_ui:\n            return\n\n        self._final.texture.fbo.use()\n        imgui.push_style_var(imgui.StyleVar_.window_border_size, 0.0)\n        imgui.push_style_var(imgui.StyleVar_.window_rounding, 8)\n        imgui.push_style_var(imgui.StyleVar_.tab_rounding, 8)\n        imgui.push_style_var(imgui.StyleVar_.grab_rounding, 8)\n        imgui.push_style_var(imgui.StyleVar_.frame_rounding, 8)\n        imgui.push_style_var(imgui.StyleVar_.child_rounding, 8)\n        imgui.push_style_color(imgui.Col_.frame_bg, (0.1, 0.1, 0.1, 0.5))\n        imgui.new_frame()\n        imgui.set_next_window_pos((0, 0))\n        imgui.set_next_window_bg_alpha(0.6)\n        imgui.begin(f\"{self.name}\", False, imgui.WindowFlags_.no_move | imgui.WindowFlags_.no_resize | imgui.WindowFlags_.no_collapse | imgui.WindowFlags_.always_auto_resize)\n\n        # Render every module\n        for module in self.modules:\n            if imgui.tree_node_ex(\n                f\"{module.uuid:&gt;2} - {type(module).__name__.replace('ShaderFlow', '')}\",\n                imgui.TreeNodeFlags_.default_open | imgui.TreeNodeFlags_.leaf | imgui.TreeNodeFlags_.bullet\n            ):\n                module.__shaderflow_ui__()\n                imgui.spacing()\n                imgui.tree_pop()\n\n        imgui.end()\n        imgui.pop_style_color()\n        imgui.pop_style_var(6)\n        imgui.render()\n        self.imgui.render(imgui.get_draw_data())\n\n    def __ui__(self) -&gt; None:\n\n        # Render status\n        imgui.text(f\"Resolution: {self.render_resolution} -&gt; {self.resolution} @ {self.ssaa:.2f}x SSAA\")\n\n        # Framerate\n        imgui.spacing()\n        if (state := imgui.slider_float(\"Framerate\", self.fps, 10, 240, \"%.0f\"))[0]:\n            self.fps = round(state[1])\n        for fps in (options := (24, 30, 60, 120, 144, 240)):\n            if (state := imgui.button(f\"{fps} Hz\")):\n                self.fps = fps\n            if fps != options[-1]:\n                imgui.same_line()\n\n        # Temporal\n        imgui.spacing()\n        if (state := imgui.slider_float(\"Time Scale\", self.speed.target, -2, 2, \"%.2f\"))[0]:\n            self.speed.target = state[1]\n        for scale in (options := (-10, -5, -2, -1, 0, 1, 2, 5, 10)):\n            if (state := imgui.button(f\"{scale}x\")):\n                self.speed.target = scale\n            if scale != options[-1]:\n                imgui.same_line()\n\n        # SSAA\n        imgui.spacing()\n        if (state := imgui.slider_float(\"SSAA\", self.ssaa, 0.01, 4, \"%.2f\"))[0]:\n            self.ssaa = state[1]\n        for ssaa in (options := (0.1, 0.25, 0.5, 1.0, 1.25, 1.5, 2.0, 4.0)):\n            if (state := imgui.button(f\"{ssaa}x\")):\n                self.ssaa = ssaa\n            if ssaa != options[-1]:\n                imgui.same_line()\n\n        # Subsample\n        imgui.spacing()\n        if (state := imgui.slider_int(\"Subsample\", self.subsample, 1, 4)) != self.subsample:\n            self.subsample = state[1]\n\n        # Quality\n        imgui.spacing()\n        if (state := imgui.slider_float(\"Quality\", self.quality, 0, 100, \"%.0f%%\"))[0]:\n            self.quality = state[1]\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.Config","title":"Config","text":"<p>               Bases: <code>BrokenModel</code></p> <p>A class that contains all specific configurations of the scene</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>class Config(BrokenModel):\n    \"\"\"A class that contains all specific configurations of the scene\"\"\"\n    name: str = None\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.Config.name","title":"name","text":"<pre><code>name: str = None\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.config","title":"config","text":"<pre><code>config: Config = field()\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.scene_name","title":"scene_name","text":"<pre><code>scene_name: str\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.modules","title":"modules","text":"<pre><code>modules: deque[ShaderModule] = Factory(deque)\n</code></pre> <p>List of all Modules on the Scene, in order of addition (including the Scene itself)</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.ffmpeg","title":"ffmpeg","text":"<pre><code>ffmpeg: BrokenFFmpeg = Factory(BrokenFFmpeg)\n</code></pre> <p>FFmpeg configuration for exporting (encoding) videos</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.frametimer","title":"frametimer","text":"<pre><code>frametimer: ShaderFrametimer = None\n</code></pre> <p>Automatically added frametimer module of the Scene</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.keyboard","title":"keyboard","text":"<pre><code>keyboard: ShaderKeyboard = None\n</code></pre> <p>Automatically added keyboard module of the Scene</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.camera","title":"camera","text":"<pre><code>camera: ShaderCamera = None\n</code></pre> <p>Automatically added camera module of the Scene</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.shader","title":"shader","text":"<pre><code>shader: ShaderProgram = None\n</code></pre> <p>The main ShaderObject of the Scene, the visible content of the Window</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.alpha","title":"alpha","text":"<pre><code>alpha: bool = False\n</code></pre> <p>Makes the final texture have an alpha channel</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.fbo","title":"fbo","text":"<pre><code>fbo: moderngl.Framebuffer\n</code></pre> <p>The final framebuffer with the current frame</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.subsample","title":"subsample","text":"<pre><code>subsample: int = field(\n    default=2, converter=lambda x: int(max(1, x))\n)\n</code></pre> <p>The kernel size of the final SSAA downsample</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.quality","title":"quality","text":"<pre><code>quality: float = field(\n    default=50.0,\n    converter=lambda x: clamp(float(x), 0.0, 100.0),\n)\n</code></pre> <p>Visual quality level (0-100%), if implemented on the Shader/Scene</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.cli","title":"cli","text":"<pre><code>cli: BrokenTyper = Factory(lambda: BrokenTyper(chain=True))\n</code></pre> <p>This Scene's BrokenTyper instance for the CLI. Commands are added by any module in the <code>self.commands</code> method. The <code>self.main</code> is always added to it</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.scene_panel","title":"scene_panel","text":"<pre><code>scene_panel: str = '\ud83d\udd25 Scene commands'\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__post__","title":"__post__","text":"<pre><code>__post__()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __post__(self):\n    self.cli.description = (self.cli.description or type(self).__doc__)\n    self.ffmpeg.typer_vcodecs(self.cli)\n    self.ffmpeg.typer_acodecs(self.cli)\n    self.cli._panel = self.scene_panel\n    self.cli.command(self.main)\n    self._build()\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__del__","title":"__del__","text":"<pre><code>__del__()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __del__(self):\n\n    # Release OpenGL items and windows\n    for module in self.modules:\n        module.destroy()\n    with contextlib.suppress(AttributeError):\n        self.opengl.release()\n    with contextlib.suppress(AttributeError):\n        self.window.destroy()\n\n    # Deeper cyclic references\n    gc.collect()\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.time","title":"time","text":"<pre><code>time: Seconds = field(default=0.0, converter=float)\n</code></pre> <p>Current virtual time of the scene. Everything should depend on it for flexibility</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.start","title":"start","text":"<pre><code>start: Seconds = field(default=0.0, converter=float)\n</code></pre> <p>Start time offset added to self.time</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.speed","title":"speed","text":"<pre><code>speed: float = Factory(\n    lambda: DynamicNumber(value=1, frequency=3)\n)\n</code></pre> <p>Time scale factor, used for <code>dt</code>, which integrates to <code>time</code></p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.runtime","title":"runtime","text":"<pre><code>runtime: Seconds = field(default=10.0, converter=float)\n</code></pre> <p>Total duration of the scene, set by user or longest module</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.fps","title":"fps","text":"<pre><code>fps: Hertz = field(default=60.0, converter=float)\n</code></pre> <p>Target frames per second rendering speed</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.dt","title":"dt","text":"<pre><code>dt: Seconds = field(default=0.0, converter=float)\n</code></pre> <p>Virtual delta time since last frame, time scaled by <code>speed</code>. Use <code>self.rdt</code> for real delta</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.rdt","title":"rdt","text":"<pre><code>rdt: Seconds = field(default=0.0, converter=float)\n</code></pre> <p>Real life, physical delta time since last frame. Use <code>self.dt</code> for virtual scaled version</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.tau","title":"tau","text":"<pre><code>tau: float\n</code></pre> <p>Normalized time value relative to runtime between 0 and 1</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.cycle","title":"cycle","text":"<pre><code>cycle: float\n</code></pre> <p>A number from 0 to 2pi that ends on the runtime ('normalized angular time')</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.frametime","title":"frametime","text":"<pre><code>frametime: Seconds\n</code></pre> <p>Ideal time between two frames. This value is coupled with <code>fps</code></p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.frame","title":"frame","text":"<pre><code>frame: int\n</code></pre> <p>Current frame index being rendered. This value is coupled with 'time' and 'fps'</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.total_frames","title":"total_frames","text":"<pre><code>total_frames: int\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.duration","title":"duration","text":"<pre><code>duration: Seconds\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.max_duration","title":"max_duration","text":"<pre><code>max_duration: Seconds\n</code></pre> <p>The longest module duration</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.set_duration","title":"set_duration","text":"<pre><code>set_duration(override: Seconds = None) -&gt; Seconds\n</code></pre> <p>Either force the duration, find the longest module or use base duration</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def set_duration(self, override: Seconds=None) -&gt; Seconds:\n    \"\"\"Either force the duration, find the longest module or use base duration\"\"\"\n    self.runtime  = (override or self.max_duration)\n    self.runtime /= self.speed.value\n    return self.runtime\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.title","title":"title","text":"<pre><code>title: str = field(\n    default=\"ShaderFlow\", on_setattr=_window_proxy\n)\n</code></pre> <p>Realtime window 'title' property</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.resizable","title":"resizable","text":"<pre><code>resizable: bool = field(\n    default=True, on_setattr=_window_proxy\n)\n</code></pre> <p>Realtime window 'is resizable' property</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.fullscreen","title":"fullscreen","text":"<pre><code>fullscreen: bool = field(\n    default=False, on_setattr=_window_proxy\n)\n</code></pre> <p>Realtime window 'is fullscreen' property</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.exclusive","title":"exclusive","text":"<pre><code>exclusive: bool = field(\n    default=False, on_setattr=_window_proxy\n)\n</code></pre> <p>Realtime window 'mouse exclusivity' property</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.visible","title":"visible","text":"<pre><code>visible: bool = field(\n    default=False, on_setattr=_window_proxy\n)\n</code></pre> <p>Realtime window 'is visible' property</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.hidden","title":"hidden","text":"<pre><code>hidden: bool\n</code></pre> <p>Realtime window 'is hidden' property</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.monitor","title":"monitor","text":"<pre><code>monitor: int = field(\n    default=Environment.int(\"MONITOR\", 0), converter=int\n)\n</code></pre> <p>Monitor index to base the window parameters on</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.glfw_monitor","title":"glfw_monitor","text":"<pre><code>glfw_monitor: Optional[glfw._GLFWmonitor]\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.glfw_video_mode","title":"glfw_video_mode","text":"<pre><code>glfw_video_mode: Optional[Dict]\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.monitor_framerate","title":"monitor_framerate","text":"<pre><code>monitor_framerate: float\n</code></pre> <p>Note: Defaults to 60 if no monitor is found or non-real time</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.monitor_size","title":"monitor_size","text":"<pre><code>monitor_size: Optional[tuple[int, int]]\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.monitor_width","title":"monitor_width","text":"<pre><code>monitor_width: Optional[int]\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.monitor_height","title":"monitor_height","text":"<pre><code>monitor_height: Optional[int]\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.components","title":"components","text":"<pre><code>components: int\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.scale","title":"scale","text":"<pre><code>scale: float\n</code></pre> <p>Resolution scale factor, the <code>self.width</code> and <code>self.height</code> are multiplied by this</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.width","title":"width","text":"<pre><code>width: int\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.height","title":"height","text":"<pre><code>height: int\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.ssaa","title":"ssaa","text":"<pre><code>ssaa: float\n</code></pre> <p>(Fractional) Super Sampling Anti-Aliasing (SSAA) factor <sup>1</sup></p> <p>Render in a virtual resolution of this multiplier, then resample to the original resolution - Values higher than 1 improves the image quality, maximum visual quality at 2 - Significant GPU cost of O(N^2): quadruples the GPU use at 2, or 25% at 0.5</p> <ol> <li> <p>https://en.wikipedia.org/wiki/Supersampling (Uniform grid distribution)\u00a0\u21a9</p> </li> </ol>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.resolution","title":"resolution","text":"<pre><code>resolution: tuple[int, int]\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.render_resolution","title":"render_resolution","text":"<pre><code>render_resolution: tuple[int, int]\n</code></pre> <p>Internal true rendering resolution with SSAA applied</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.aspect_ratio","title":"aspect_ratio","text":"<pre><code>aspect_ratio: float\n</code></pre> <p>Either the forced <code>self._aspect_ratio</code> or dynamic from <code>self.width/self.height</code>. When set and resizing, the logic of <code>BrokenResolution.fit</code> is applied to enforce ratios</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.resize","title":"resize","text":"<pre><code>resize(\n    width: Union[int, float] = Unchanged,\n    height: Union[int, float] = Unchanged,\n    *,\n    ratio: Union[Unchanged, float, str] = Unchanged,\n    bounds: tuple[int, int] = Unchanged,\n    scale: float = Unchanged,\n    ssaa: float = Unchanged\n) -&gt; tuple[int, int]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def resize(self,\n    width: Union[int, float]=Unchanged,\n    height: Union[int, float]=Unchanged,\n    *,\n    ratio: Union[Unchanged, float, str]=Unchanged,\n    bounds: tuple[int, int]=Unchanged,\n    scale: float=Unchanged,\n    ssaa: float=Unchanged,\n) -&gt; tuple[int, int]:\n\n    # Maybe update auxiliary properties\n    self.aspect_ratio = overrides(self._aspect_ratio, ratio)\n    self._scale = overrides(self._scale, scale)\n    self._ssaa = overrides(self._ssaa, ssaa)\n\n    # The parameters aren't trivial. The idea is to fit resolution from the scale-less components,\n    # so scaling isn't carried over, then to apply scaling (self.resolution)\n    resolution = BrokenResolution.fit(\n        old=(self._width, self._height),\n        new=(width, height),\n        max=(bounds or self.monitor_size),\n        ar=self._aspect_ratio,\n        scale=self._scale,\n    )\n\n    # Optimization: Only resize if target is different\n    if (resolution != (self.width, self.height)):\n        self._width, self._height = resolution\n        self.window.size = self.resolution\n        self.relay(ShaderMessage.Shader.RecreateTextures)\n        self.log_info(f\"Resized Window to {self.resolution}\")\n\n    return self.resolution\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.backend","title":"backend","text":"<pre><code>backend: WindowBackend = Factory(\n    lambda: WindowBackend.infer()\n)\n</code></pre> <p>The ModernGL Window Backend. Cannot be changed after creation. Can also be set with the environment variable <code>WINDOW_BACKEND=&lt;backend&gt;</code>, where <code>backend = {glfw, headless}</code></p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.opengl","title":"opengl","text":"<pre><code>opengl: moderngl.Context = None\n</code></pre> <p>ModernGL Context of this Scene. The thread accessing this MUST own or ENTER its context for creating, changing, deleting objects; more often than not, it's the Main thread</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.window","title":"window","text":"<pre><code>window: ModernglWindow = None\n</code></pre> <p>ModernGL Window instance at <code>site-packages/moderngl_window.context.&lt;self.backend&gt;.Window</code></p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.imgui","title":"imgui","text":"<pre><code>imgui: ModernglWindowRenderer = None\n</code></pre> <p>ModernGL Imgui integration class bound to the Window</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.imguio","title":"imguio","text":"<pre><code>imguio: Any = None\n</code></pre> <p>Imgui IO object</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.init_window","title":"init_window","text":"<pre><code>init_window() -&gt; None\n</code></pre> <p>Create the window and the OpenGL context</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def init_window(self) -&gt; None:\n    \"\"\"Create the window and the OpenGL context\"\"\"\n    if self.window:\n        raise RuntimeError(\"Window backend cannot be changed after creation\")\n\n    # Linux: Use EGL for creating a OpenGL context, allows true headless with GPU acceleration\n    # Note: (https://forums.developer.nvidia.com/t/81412) (https://brokensrc.dev/get/docker/)\n    backend = (\"egl\" if BrokenPlatform.OnLinux and Environment.flag(\"WINDOW_EGL\", 1) else None)\n\n    # Dynamically import and instantiate the ModernGL Window class\n    module = f\"moderngl_window.context.{denum(self.backend).lower()}\"\n    self.window = importlib.import_module(module).Window(\n        size=self.resolution,\n        title=self.title,\n        resizable=self.resizable,\n        visible=self.visible,\n        fullscreen=self.fullscreen,\n        backend=backend,\n        vsync=False,\n    )\n    ShaderKeyboard.set_keymap(self.window.keys)\n    self.imgui  = ModernglWindowRenderer(self.window)\n    self.opengl = self.window.ctx\n\n    # Bind window events to relay\n    self.window.resize_func               = (self.__window_resize__)\n    self.window.close_func                = (self.__window_close__)\n    self.window.iconify_func              = (self.__window_iconify__)\n    self.window.key_event_func            = (self.__window_key_event__)\n    self.window.mouse_position_event_func = (self.__window_mouse_position_event__)\n    self.window.mouse_press_event_func    = (self.__window_mouse_press_event__)\n    self.window.mouse_release_event_func  = (self.__window_mouse_release_event__)\n    self.window.mouse_drag_event_func     = (self.__window_mouse_drag_event__)\n    self.window.mouse_scroll_event_func   = (self.__window_mouse_scroll_event__)\n    self.window.unicode_char_entered_func = (self.__window_unicode_char_entered__)\n    self.window.files_dropped_event_func  = (self.__window_files_dropped_event__)\n\n    if (self.backend == WindowBackend.GLFW):\n        if (icon := Broken.PROJECT.RESOURCES.ICON_PNG).exists():\n            BrokenWorker.thread(self.window.set_icon, icon_path=icon)\n        glfw.set_cursor_enter_callback(self.window._window, (self.__window_mouse_enter_event__))\n        glfw.set_drop_callback(self.window._window, (self.__window_files_dropped_event__))\n        ShaderKeyboard.Keys.LEFT_SHIFT = glfw.KEY_LEFT_SHIFT\n        ShaderKeyboard.Keys.LEFT_CTRL  = glfw.KEY_LEFT_CONTROL\n        ShaderKeyboard.Keys.LEFT_ALT   = glfw.KEY_LEFT_ALT\n\n    self.log_info(f\"OpenGL Renderer: {self.opengl.info['GL_RENDERER']}\")\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.screenshot","title":"screenshot","text":"<pre><code>screenshot() -&gt; numpy.ndarray\n</code></pre> <p>Take a screenshot of the screen and return a numpy array with the data</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def screenshot(self) -&gt; numpy.ndarray:\n    \"\"\"Take a screenshot of the screen and return a numpy array with the data\"\"\"\n    data = self.fbo.read(viewport=(0, 0, self.width, self.height))\n    data = numpy.ndarray((self.height, self.width, self.components), dtype=numpy.uint8, buffer=data)\n    return numpy.flipud(data)\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.directory","title":"directory","text":"<pre><code>directory: Path\n</code></pre> <p>Path of the current Scene file Python script. This works by searching up the call stack for the first context whose filename isn't the local file (of ShaderFlow.Scene)</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.read_file","title":"read_file","text":"<pre><code>read_file(\n    file: Path, *, bytes: bool = False\n) -&gt; Union[str, bytes]\n</code></pre> <p>Read a file relative to the current Scene Python script</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def read_file(self, file: Path, *, bytes: bool=False) -&gt; Union[str, bytes]:\n    \"\"\"Read a file relative to the current Scene Python script\"\"\"\n    file = (self.directory/file)\n    self.log_info(f\"Reading file ({file})\")\n    return LoadBytes(file) if bytes else LoadString(file)\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.scheduler","title":"scheduler","text":"<pre><code>scheduler: BrokenScheduler = Factory(BrokenScheduler)\n</code></pre> <p>Scheduler for the Scene, handles all the tasks and their execution</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.vsync","title":"vsync","text":"<pre><code>vsync: SchedulerTask = None\n</code></pre> <p>Task for the Scene's main event loop, the rendering of the next frame</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.quit","title":"quit","text":"<pre><code>quit: PlainTracker = Factory(lambda: PlainTracker(False))\n</code></pre> <p>Should the scene end the main event loop? Use as <code>if scene.quit():</code></p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.on_frame","title":"on_frame","text":"<pre><code>on_frame: BrokenRelay = Factory(BrokenRelay)\n</code></pre> <p>Hook for after a frame is rendered</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.next","title":"next","text":"<pre><code>next(dt: float = 0.0) -&gt; None\n</code></pre> <p>Integrate time, update all modules and render the next frame</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def next(self, dt: float=0.0) -&gt; None:\n    \"\"\"Integrate time, update all modules and render the next frame\"\"\"\n\n    # Fixme: Windows: https://github.com/glfw/glfw/pull/1426\n    # Immediately swap the buffer with previous frame for vsync\n    if (not self.exporting):\n        self.window.swap_buffers()\n\n    # Note: Updates in reverse order of addition (child -&gt; parent -&gt; root)\n    # Note: Updates non-engine first, as the pipeline might change\n    for module in self.modules:\n        if not isinstance(module, ShaderProgram):\n            module.update()\n    for module in reversed(self.modules):\n        if isinstance(module, ShaderProgram):\n            module.update()\n\n    self._render_ui()\n    self.on_frame()\n\n    # Temporal logic is run afterwards, so frame zero is t=0\n    self.speed.next(dt=abs(dt))\n    self.vsync.fps = self.fps\n    self.dt    = dt * self.speed\n    self.rdt   = dt\n    self.time += self.dt\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.realtime","title":"realtime","text":"<pre><code>realtime: bool = True\n</code></pre> <p>'Realtime' mode: Running with a window and user interaction</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.exporting","title":"exporting","text":"<pre><code>exporting: bool = False\n</code></pre> <p>Is this Scene exporting to a video file?</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.freewheel","title":"freewheel","text":"<pre><code>freewheel: bool = False\n</code></pre> <p>'Not realtime' mode: Either Exporting, Rendering or Benchmarking</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.headless","title":"headless","text":"<pre><code>headless: bool = False\n</code></pre> <p>Running Headlessly, without a window and user interaction</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.loop","title":"loop","text":"<pre><code>loop: int = field(default=1, converter=int)\n</code></pre> <p>Number of times to loop the exported video. One 1 keeps original, two 2 doubles the length. Ideally have seamless transitions on the shader based on self.tau and/or/no audio input</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.index","title":"index","text":"<pre><code>index: int = 0\n</code></pre> <p>Current Batch exporting video index</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.export_name","title":"export_name","text":"<pre><code>export_name(path: Path) -&gt; Path\n</code></pre> <p>Change the video file name being exported based on the current batch index. By default, the name is unchanged in single export, else the stem is appended with the batch index</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>@abstractmethod\ndef export_name(self, path: Path) -&gt; Path:\n    \"\"\"Change the video file name being exported based on the current batch index. By default,\n    the name is unchanged in single export, else the stem is appended with the batch index\"\"\"\n    if (self.index &gt; 0):\n        return path.with_stem(f\"{path.stem}_{self.index}\")\n    return path\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.main","title":"main","text":"<pre><code>main(\n    width: Annotated[\n        int,\n        Option(\n            \"--width\",\n            \"-w\",\n            help=\"[bold red   ](\ud83d\udd34 Basic  )[/] Width  of the rendering resolution [medium_purple3](None to keep or find by --ar aspect ratio)[/] [dim](1920 on init)[/]\",\n        ),\n    ] = None,\n    height: Annotated[\n        int,\n        Option(\n            \"--height\",\n            \"-h\",\n            help=\"[bold red   ](\ud83d\udd34 Basic  )[/] Height of the rendering resolution [medium_purple3](None to keep or find by --ar aspect ratio)[/] [dim](1080 on init)[/]\",\n        ),\n    ] = None,\n    fps: Annotated[\n        float,\n        Option(\n            \"--fps\",\n            \"-f\",\n            help=\"[bold red   ](\ud83d\udd34 Basic  )[/] Target frames per second [medium_purple3](Defaults to the monitor framerate on realtime else 60)[/]\",\n        ),\n    ] = None,\n    scale: Annotated[\n        float,\n        Option(\n            \"--scale\",\n            \"-x\",\n            help=\"[bold red   ](\ud83d\udd34 Basic  )[/] Post-multiply width and height by a scale factor [medium_purple3](None to keep)[/] [dim](1.0 on init)[/]\",\n        ),\n    ] = None,\n    ratio: Annotated[\n        str,\n        Option(\n            \"--ar\",\n            \"-X\",\n            help=\"[bold red   ](\ud83d\udd34 Basic  )[/] Force resolution aspect ratio [green](Examples: '16:9', '16/9', '1.777')[/] [medium_purple3](None for dynamic)[/]\",\n        ),\n    ] = None,\n    noskip: Annotated[\n        bool,\n        Option(\n            \"--no-skip\",\n            help=\"[bold red   ](\ud83d\udd34 Window )[/] [dim]No frames are skipped if the rendering is behind schedule [medium_purple3](Limits maximum dt to 1/fps)[/]\",\n        ),\n    ] = False,\n    fullscreen: Annotated[\n        bool,\n        Option(\n            \"--fullscreen\",\n            help=\"[bold red   ](\ud83d\udd34 Window )[/] [dim]Start the realtime window in fullscreen mode [medium_purple3](Toggle with F11)[/]\",\n        ),\n    ] = False,\n    maximize: Annotated[\n        bool,\n        Option(\n            \"--maximize\",\n            \"-M\",\n            help=\"[bold red   ](\ud83d\udd34 Window )[/] [dim]Start the realtime window in maximized mode\",\n        ),\n    ] = False,\n    quality: Annotated[\n        float,\n        Option(\n            \"--quality\",\n            \"-q\",\n            help=\"[bold yellow](\ud83d\udfe1 Quality)[/] Global quality level [green](0-100%)[/] [yellow](If implemented on the scene/shader)[/] [medium_purple3](None to keep, default 50%)[/]\",\n        ),\n    ] = None,\n    ssaa: Annotated[\n        float,\n        Option(\n            \"--ssaa\",\n            \"-s\",\n            help=\"[bold yellow](\ud83d\udfe1 Quality)[/] Super sampling anti aliasing factor [green](0-4)[/] [yellow](N^2 GPU cost)[/] [medium_purple3](None to keep, default 1)[/]\",\n        ),\n    ] = None,\n    subsample: Annotated[\n        int,\n        Option(\n            \"--subsample\",\n            help=\"[bold yellow](\ud83d\udfe1 Quality)[/] Subpixel downsample kernel size for the final SSAA [green](1-4)[/] [medium_purple3](None to keep, default 2)[/]\",\n        ),\n    ] = None,\n    render: Annotated[\n        bool,\n        Option(\n            \"--render\",\n            \"-r\",\n            help=\"[bold green ](\ud83d\udfe2 Export )[/] Export the Scene to a video file defined on --output [dim](Implicit if present)[/]\",\n        ),\n    ] = False,\n    time: Annotated[\n        str,\n        Option(\n            \"--time\",\n            \"-t\",\n            help=\"[bold green ](\ud83d\udfe2 Export )[/] Total length of the exported video [dim](Loop duration)[/] [medium_purple3](None to keep, default 10 or longest module)[/]\",\n        ),\n    ] = None,\n    output: Annotated[\n        str,\n        Option(\n            \"--output\",\n            \"-o\",\n            help=\"[bold green ](\ud83d\udfe2 Export )[/] Output video file name [green]('absolute', 'relative', 'plain' path)[/] [dim]($base/$(plain or $scene-$date))[/]\",\n        ),\n    ] = None,\n    format: Annotated[\n        str,\n        Option(\n            \"--format\",\n            \"-F\",\n            help=\"[bold green ](\ud83d\udfe2 Export )[/] Output video container [green]('mp4', 'mkv', 'webm', 'avi, '...')[/] [yellow](--output one is prioritized)[/]\",\n        ),\n    ] = None,\n    base: Annotated[\n        Path,\n        Option(\n            \"--base\",\n            \"-D\",\n            help=\"[bold green ](\ud83d\udfe2 Export )[/] Export base directory [medium_purple3](If plain name)[/]\",\n        ),\n    ] = Broken.PROJECT.DIRECTORIES.DATA,\n    start: Annotated[\n        float,\n        Option(\n            \"--start\",\n            \"-T\",\n            help=\"[bold green ](\ud83d\udfe2 Export )[/] Start time offset of the exported video [yellow](Time is shifted by this)[/] [medium_purple3](None to keep)[/] [dim](0 on init)[/]\",\n        ),\n    ] = None,\n    speed: Annotated[\n        float,\n        Option(\n            \"--speed\",\n            \"-S\",\n            help=\"[bold green ](\ud83d\udfe2 Export )[/] Time speed factor of the scene [yellow](Duration is stretched by 1/speed)[/] [medium_purple3](None to keep)[/] [dim](1 on init)[/]\",\n        ),\n    ] = None,\n    batch: Annotated[\n        str,\n        Option(\n            \"--batch\",\n            \"-b\",\n            help=\"[bold green ](\ud83d\udfe2 Export )[/] Hyphenated indices range to export multiple videos, if implemented [medium_purple3](1,5-7,10)[/medium_purple3]\",\n        ),\n    ] = \"0\",\n    loop: Annotated[\n        int,\n        Option(\n            \"--loop\",\n            \"-l\",\n            help=\"[bold blue  ](\ud83d\udd35 Special)[/] Exported videos loop copies [yellow](Final duration is multiplied by this)[/] [dim](1 on init)[/]\",\n        ),\n    ] = None,\n    freewheel: Annotated[\n        bool,\n        Option(\n            \"--freewheel\",\n            help=\"[bold blue  ](\ud83d\udd35 Special)[/] Unlock the Scene's event loop framerate, implicit when exporting [medium_purple3](Use SKIP_GPU=1 for CPU only benchmark)[/]\",\n        ),\n    ] = False,\n    raw: Annotated[\n        bool,\n        Option(\n            \"--raw\",\n            help=\"[bold blue  ](\ud83d\udd35 Special)[/] Send raw OpenGL frames before GPU SSAA to FFmpeg [medium_purple3](Enabled if SSAA&lt;1)[/] [dim](CPU Downsampling)[/]\",\n        ),\n    ] = False,\n    open: Annotated[\n        bool,\n        Option(\n            \"--open\",\n            help=\"[bold blue  ](\ud83d\udd35 Special)[/] Open the directory where the video was saved after finishing rendering\",\n        ),\n    ] = False,\n    relaxed: Annotated[\n        bool,\n        Option(\n            \"--relaxed\",\n            help=\"[bold blue  ](\ud83d\udd35 Special)[/] [dim]Use a relaxed but lower CPU overhead frametime sleep function on realtime mode\",\n        ),\n    ] = False,\n    buffers: Annotated[\n        int,\n        Option(\n            \"--buffers\",\n            \"-N\",\n            help=\"[bold blue  ](\ud83d\udd35 Turbo  )[/] [dim]Maximum number of pre-rendered frames to be piped into FFmpeg[/dim]\",\n        ),\n    ] = 3,\n    noturbo: Annotated[\n        bool,\n        Option(\n            \"--no-turbo\",\n            help=\"[bold blue  ](\ud83d\udd35 Turbo  )[/] [dim]Disables [steel_blue1][link=https://github.com/BrokenSource/TurboPipe]TurboPipe[/link][/steel_blue1] fast exporting, may fix segfaults on older hardware[/dim]\",\n        ),\n    ] = False,\n    progress: Annotated[\n        Optional[Callable[[int, int], None]],\n        BrokenTyper.exclude(),\n    ] = None,\n    bounds: Annotated[\n        Optional[tuple[int, int]], BrokenTyper.exclude()\n    ] = None,\n    _initial: Annotated[\n        tuple[int, int], BrokenTyper.exclude()\n    ] = None,\n    _index: Annotated[int, BrokenTyper.exclude()] = None,\n    _started: Annotated[str, BrokenTyper.exclude()] = None,\n    _outputs: Annotated[Path, BrokenTyper.exclude()] = None,\n) -&gt; Optional[list[Path]]\n</code></pre> <p>Main event loop of the scene</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def main(self,\n    width:      Annotated[int,   Option(\"--width\",      \"-w\", help=\"[bold red   ](\ud83d\udd34 Basic  )[/] Width  of the rendering resolution [medium_purple3](None to keep or find by --ar aspect ratio)[/] [dim](1920 on init)[/]\")]=None,\n    height:     Annotated[int,   Option(\"--height\",     \"-h\", help=\"[bold red   ](\ud83d\udd34 Basic  )[/] Height of the rendering resolution [medium_purple3](None to keep or find by --ar aspect ratio)[/] [dim](1080 on init)[/]\")]=None,\n    fps:        Annotated[float, Option(\"--fps\",        \"-f\", help=\"[bold red   ](\ud83d\udd34 Basic  )[/] Target frames per second [medium_purple3](Defaults to the monitor framerate on realtime else 60)[/]\")]=None,\n    scale:      Annotated[float, Option(\"--scale\",      \"-x\", help=\"[bold red   ](\ud83d\udd34 Basic  )[/] Post-multiply width and height by a scale factor [medium_purple3](None to keep)[/] [dim](1.0 on init)[/]\")]=None,\n    ratio:      Annotated[str,   Option(\"--ar\",         \"-X\", help=\"[bold red   ](\ud83d\udd34 Basic  )[/] Force resolution aspect ratio [green](Examples: '16:9', '16/9', '1.777')[/] [medium_purple3](None for dynamic)[/]\")]=None,\n    noskip:     Annotated[bool,  Option(\"--no-skip\",          help=\"[bold red   ](\ud83d\udd34 Window )[/] [dim]No frames are skipped if the rendering is behind schedule [medium_purple3](Limits maximum dt to 1/fps)[/]\")]=False,\n    fullscreen: Annotated[bool,  Option(\"--fullscreen\",       help=\"[bold red   ](\ud83d\udd34 Window )[/] [dim]Start the realtime window in fullscreen mode [medium_purple3](Toggle with F11)[/]\")]=False,\n    maximize:   Annotated[bool,  Option(\"--maximize\",   \"-M\", help=\"[bold red   ](\ud83d\udd34 Window )[/] [dim]Start the realtime window in maximized mode\")]=False,\n    quality:    Annotated[float, Option(\"--quality\",    \"-q\", help=\"[bold yellow](\ud83d\udfe1 Quality)[/] Global quality level [green](0-100%)[/] [yellow](If implemented on the scene/shader)[/] [medium_purple3](None to keep, default 50%)[/]\")]=None,\n    ssaa:       Annotated[float, Option(\"--ssaa\",       \"-s\", help=\"[bold yellow](\ud83d\udfe1 Quality)[/] Super sampling anti aliasing factor [green](0-4)[/] [yellow](N^2 GPU cost)[/] [medium_purple3](None to keep, default 1)[/]\")]=None,\n    subsample:  Annotated[int,   Option(\"--subsample\",        help=\"[bold yellow](\ud83d\udfe1 Quality)[/] Subpixel downsample kernel size for the final SSAA [green](1-4)[/] [medium_purple3](None to keep, default 2)[/]\")]=None,\n    render:     Annotated[bool,  Option(\"--render\",     \"-r\", help=\"[bold green ](\ud83d\udfe2 Export )[/] Export the Scene to a video file defined on --output [dim](Implicit if present)[/]\")]=False,\n    time:       Annotated[str,   Option(\"--time\",       \"-t\", help=\"[bold green ](\ud83d\udfe2 Export )[/] Total length of the exported video [dim](Loop duration)[/] [medium_purple3](None to keep, default 10 or longest module)[/]\")]=None,\n    output:     Annotated[str,   Option(\"--output\",     \"-o\", help=\"[bold green ](\ud83d\udfe2 Export )[/] Output video file name [green]('absolute', 'relative', 'plain' path)[/] [dim]($base/$(plain or $scene-$date))[/]\")]=None,\n    format:     Annotated[str,   Option(\"--format\",     \"-F\", help=\"[bold green ](\ud83d\udfe2 Export )[/] Output video container [green]('mp4', 'mkv', 'webm', 'avi, '...')[/] [yellow](--output one is prioritized)[/]\")]=None,\n    base:       Annotated[Path,  Option(\"--base\",       \"-D\", help=\"[bold green ](\ud83d\udfe2 Export )[/] Export base directory [medium_purple3](If plain name)[/]\")]=Broken.PROJECT.DIRECTORIES.DATA,\n    start:      Annotated[float, Option(\"--start\",      \"-T\", help=\"[bold green ](\ud83d\udfe2 Export )[/] Start time offset of the exported video [yellow](Time is shifted by this)[/] [medium_purple3](None to keep)[/] [dim](0 on init)[/]\")]=None,\n    speed:      Annotated[float, Option(\"--speed\",      \"-S\", help=\"[bold green ](\ud83d\udfe2 Export )[/] Time speed factor of the scene [yellow](Duration is stretched by 1/speed)[/] [medium_purple3](None to keep)[/] [dim](1 on init)[/]\")]=None,\n    batch:      Annotated[str,   Option(\"--batch\",      \"-b\", help=\"[bold green ](\ud83d\udfe2 Export )[/] Hyphenated indices range to export multiple videos, if implemented [medium_purple3](1,5-7,10)[/medium_purple3]\")]=\"0\",\n    loop:       Annotated[int,   Option(\"--loop\",       \"-l\", help=\"[bold blue  ](\ud83d\udd35 Special)[/] Exported videos loop copies [yellow](Final duration is multiplied by this)[/] [dim](1 on init)[/]\")]=None,\n    freewheel:  Annotated[bool,  Option(\"--freewheel\",        help=\"[bold blue  ](\ud83d\udd35 Special)[/] Unlock the Scene's event loop framerate, implicit when exporting [medium_purple3](Use SKIP_GPU=1 for CPU only benchmark)[/]\")]=False,\n    raw:        Annotated[bool,  Option(\"--raw\",              help=\"[bold blue  ](\ud83d\udd35 Special)[/] Send raw OpenGL frames before GPU SSAA to FFmpeg [medium_purple3](Enabled if SSAA&lt;1)[/] [dim](CPU Downsampling)[/]\")]=False,\n    open:       Annotated[bool,  Option(\"--open\",             help=\"[bold blue  ](\ud83d\udd35 Special)[/] Open the directory where the video was saved after finishing rendering\")]=False,\n    relaxed:    Annotated[bool,  Option(\"--relaxed\",          help=\"[bold blue  ](\ud83d\udd35 Special)[/] [dim]Use a relaxed but lower CPU overhead frametime sleep function on realtime mode\")]=False,\n    buffers:    Annotated[int,   Option(\"--buffers\",    \"-N\", help=\"[bold blue  ](\ud83d\udd35 Turbo  )[/] [dim]Maximum number of pre-rendered frames to be piped into FFmpeg[/dim]\")]=3,\n    noturbo:    Annotated[bool,  Option(\"--no-turbo\",         help=\"[bold blue  ](\ud83d\udd35 Turbo  )[/] [dim]Disables [steel_blue1][link=https://github.com/BrokenSource/TurboPipe]TurboPipe[/link][/steel_blue1] fast exporting, may fix segfaults on older hardware[/dim]\")]=False,\n    # Special: Not part of the cli\n    progress:   Annotated[Optional[Callable[[int, int], None]], BrokenTyper.exclude()]=None,\n    bounds:     Annotated[Optional[tuple[int, int]], BrokenTyper.exclude()]=None,\n    # Batch exporting internal use\n    _initial:   Annotated[tuple[int, int], BrokenTyper.exclude()]=None,\n    _index:     Annotated[int,  BrokenTyper.exclude()]=None,\n    _started:   Annotated[str,  BrokenTyper.exclude()]=None,\n    _outputs:   Annotated[Path, BrokenTyper.exclude()]=None,\n) -&gt; Optional[list[Path]]:\n    \"\"\"\n    Main event loop of the scene\n    \"\"\"\n\n    # -----------------------------------------------------------------------------------------|\n    # Batch exporting implementation\n\n    if (_index is None):\n\n        # One-shot internal reference variables\n        _started = __import__(\"arrow\").now().format(\"YYYY-MM-DD HH-mm-ss\")\n        _initial = self.resolution\n        _outputs = list()\n\n        for _index in hyphen_range(batch):\n            try:\n                self.quit(set=False)\n                ShaderScene.main(**locals())\n            except ShaderBatchStop:\n                self.log_minor(f\"Batch exporting stopped at index {_index}\")\n                break\n\n        if (self.exporting and open):\n            BrokenPath.explore(_outputs[0].parent)\n\n        # Revert to the original resolution\n        self._width, self._height = _initial\n        return _outputs\n\n    # -----------------------------------------------------------------------------------------|\n\n    self.exporting  = (render or bool(output))\n    self.freewheel  = (self.exporting or freewheel)\n    self.headless   = (self.freewheel)\n    self.realtime   = (not self.headless)\n    self.title      = (f\"ShaderFlow | {self.scene_name}\")\n    self.fps        = overrides(self.monitor_framerate, fps)\n    self.subsample  = overrides(self.subsample, subsample)\n    self.quality    = overrides(self.quality, quality)\n    self.start      = overrides(self.start, start)\n    self.loop       = overrides(self.loop, loop)\n    self.ssaa       = overrides(self.ssaa, ssaa)\n    self.fullscreen = (fullscreen)\n    self.index      = _index\n    self.time       = 0\n    self.speed.set(speed or self.speed.value)\n    self.relay(ShaderMessage.Shader.Compile)\n    self._width, self._height = _initial\n    self.scheduler.clear()\n\n    # Set module defaults or overrides\n    for module in self.modules:\n        module.setup()\n\n    # Try parsing a time, else eval a math expression if a string is given or keep as is\n    self.set_duration((timeparse(time) or eval(time)) if isinstance(time, str) else time)\n\n    # Calculate the final resolution\n    _width, _height = self.resize(\n        width=width, height=height,\n        ratio=ratio, scale=scale,\n        bounds=bounds,\n    )\n\n    # Optimization: Save bandwidth by piping native frames\n    if self.freewheel and (raw or self.ssaa &lt; 1):\n        self.resize(*self.render_resolution, scale=1, ssaa=1)\n\n    # Some scenes might take a while to setup\n    self.visible = (not self.headless)\n\n    if (maximize and (self.backend == WindowBackend.GLFW)):\n        glfw.maximize_window(self.window._window)\n\n    # Status tracker and refactored exporting utilities\n    export = Exporting(self, relay=progress)\n\n    # Configure FFmpeg and Popen it\n    if (self.exporting):\n        export.ffmpeg_clean()\n        export.ffmpeg_sizes(width=_width, height=_height)\n        export.ffmpeg_output(base=base, output=output, format=format, _started=_started)\n        export.make_buffers(buffers)\n        export.ffhook()\n        export.popen()\n\n    # Add self.next to the event loop\n    self.vsync = self.scheduler.new(\n        task=self.next,\n        frequency=self.fps,\n        freewheel=self.freewheel,\n        frameskip=(not noskip),\n        precise=(not relaxed),\n    )\n\n    # True main event loop\n    while (task := self.scheduler.next()):\n        if (task != self.vsync):\n            continue\n        if (self.quit()):\n            break\n        if self.realtime:\n            continue\n\n        export.pipe(noturbo=noturbo)\n        export.update()\n\n        if export.finished:\n            export.finish()\n            output = BrokenFFmpeg.loop(output, times=self.loop)\n            export.log_stats(output=output)\n            _outputs.append(output)\n            break\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.handle","title":"handle","text":"<pre><code>handle(message: ShaderMessage) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def handle(self, message: ShaderMessage) -&gt; None:\n\n    if isinstance(message, ShaderMessage.Window.Close):\n        self.log_info(\"Received Window Close Event\")\n        self.hidden = True\n        self.quit(True)\n\n    elif isinstance(message, ShaderMessage.Keyboard.KeyDown):\n        if (message.key == ShaderKeyboard.Keys.O):\n            self.log_info(\"(O  ) Resetting the scene\")\n            for module in self.modules:\n                module.setup()\n            self.time = 0\n\n        elif (message.key == ShaderKeyboard.Keys.R):\n            self.log_info(\"(R  ) Reloading shaders\")\n            self.relay(ShaderMessage.Shader.Compile)\n\n        elif (message.key == ShaderKeyboard.Keys.TAB):\n            self.log_info(\"(TAB) Toggling menu\")\n            self.render_ui = (not self.render_ui)\n\n        elif (message.key == ShaderKeyboard.Keys.F1):\n            self.log_info(\"(F1 ) Toggling exclusive mode\")\n            self.exclusive = (not self.exclusive)\n\n        elif (message.key == ShaderKeyboard.Keys.F2):\n            import arrow\n            image = Image.fromarray(self.screenshot())\n            time  = arrow.now().format(\"YYYY-MM-DD_HH-mm-ss\")\n            path  = Broken.PROJECT.DIRECTORIES.SCREENSHOTS/f\"({time}) {self.scene_name}.png\"\n            self.log_minor(f\"(F2 ) Saving screenshot to ({path})\")\n            BrokenWorker.thread(image.save, fp=path)\n\n        elif (message.key == ShaderKeyboard.Keys.F11):\n            self.log_info(\"(F11) Toggling fullscreen\")\n            self.fullscreen = (not self.fullscreen)\n\n    elif isinstance(message, (ShaderMessage.Mouse.Drag, ShaderMessage.Mouse.Position)):\n        self.mouse_gluv = (message.u, message.v)\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    yield Uniform(\"float\", \"iTime\",        self.time + self.start)\n    yield Uniform(\"float\", \"iTau\",         self.tau)\n    yield Uniform(\"float\", \"iDuration\",    self.duration)\n    yield Uniform(\"float\", \"iDeltatime\",   self.dt)\n    yield Uniform(\"vec2\",  \"iResolution\",  self.resolution)\n    yield Uniform(\"float\", \"iWantAspect\",  self.aspect_ratio)\n    yield Uniform(\"float\", \"iQuality\",     self.quality/100)\n    yield Uniform(\"float\", \"iSSAA\",        self.ssaa)\n    yield Uniform(\"float\", \"iFramerate\",   self.fps)\n    yield Uniform(\"int\",   \"iFrame\",       self.frame)\n    yield Uniform(\"bool\",  \"iRealtime\",    self.realtime)\n    yield Uniform(\"vec2\",  \"iMouse\",       self.mouse_gluv)\n    yield Uniform(\"bool\",  \"iMouseInside\", self.mouse_inside)\n    for i in range(1, 3):\n        yield Uniform(\"bool\", f\"iMouse{i}\", self.mouse_buttons[i])\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__window_resize__","title":"__window_resize__","text":"<pre><code>__window_resize__(width: int, height: int) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __window_resize__(self, width: int, height: int) -&gt; None:\n\n    # Don't listen to resizes when exporting, as the final resolution might be\n    # greater than the monitor and the window will resize down to fit\n    if self.exporting:\n        return\n    self.imgui.resize(width, height)\n    self._width, self._height = width, height\n    self.relay(ShaderMessage.Shader.RecreateTextures)\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__window_close__","title":"__window_close__","text":"<pre><code>__window_close__() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __window_close__(self) -&gt; None:\n    self.relay(ShaderMessage.Window.Close())\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__window_iconify__","title":"__window_iconify__","text":"<pre><code>__window_iconify__(state: bool) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __window_iconify__(self, state: bool) -&gt; None:\n    self.relay(ShaderMessage.Window.Iconify(state=state))\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__window_files_dropped_event__","title":"__window_files_dropped_event__","text":"<pre><code>__window_files_dropped_event__(\n    window, files: list[str]\n) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __window_files_dropped_event__(self, window, files: list[str]) -&gt; None:\n    self.relay(ShaderMessage.Window.FileDrop(files=files))\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__window_key_event__","title":"__window_key_event__","text":"<pre><code>__window_key_event__(\n    key: int, action: int, modifiers: int\n) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __window_key_event__(self, key: int, action: int, modifiers: int) -&gt; None:\n    self.imgui.key_event(key, action, modifiers)\n    if self.imguio.want_capture_keyboard and self.render_ui:\n        return\n    if action == ShaderKeyboard.Keys.ACTION_PRESS:\n        self.relay(ShaderMessage.Keyboard.KeyDown(key=key, modifiers=modifiers))\n    elif action == ShaderKeyboard.Keys.ACTION_RELEASE:\n        self.relay(ShaderMessage.Keyboard.KeyUp(key=key, modifiers=modifiers))\n    self.relay(ShaderMessage.Keyboard.Press(key=key, action=action, modifiers=modifiers))\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__window_unicode_char_entered__","title":"__window_unicode_char_entered__","text":"<pre><code>__window_unicode_char_entered__(char: str) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __window_unicode_char_entered__(self, char: str) -&gt; None:\n    if self.imguio.want_capture_keyboard and self.render_ui:\n        return\n    self.relay(ShaderMessage.Keyboard.Unicode(char=char))\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.mouse_gluv","title":"mouse_gluv","text":"<pre><code>mouse_gluv: tuple[float, float] = Factory(lambda: (0, 0))\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__xy2uv__","title":"__xy2uv__","text":"<pre><code>__xy2uv__(x: int = 0, y: int = 0) -&gt; dict[str, float]\n</code></pre> <p>Convert a XY pixel coordinate into a Center-UV normalized coordinate</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __xy2uv__(self, x: int=0, y: int=0) -&gt; dict[str, float]:\n    \"\"\"Convert a XY pixel coordinate into a Center-UV normalized coordinate\"\"\"\n    return dict(\n        u=2*(x/self.width  - 0.5),\n        v=2*(y/self.height - 0.5)*(-1),\n        x=x, y=y,\n    )\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__dxdy2dudv__","title":"__dxdy2dudv__","text":"<pre><code>__dxdy2dudv__(dx: int = 0, dy: int = 0) -&gt; dict[str, float]\n</code></pre> <p>Convert a dx dy pixel coordinate into a Center-UV normalized coordinate</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __dxdy2dudv__(self, dx: int=0, dy: int=0) -&gt; dict[str, float]:\n    \"\"\"Convert a dx dy pixel coordinate into a Center-UV normalized coordinate\"\"\"\n    return dict(\n        du=2*(dx/self.width)*(self.width/self.height),\n        dv=2*(dy/self.height)*(-1),\n        dx=dx, dy=dy,\n    )\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.mouse_buttons","title":"mouse_buttons","text":"<pre><code>mouse_buttons: dict[int, bool] = Factory(lambda: {k: Falsefor k in range(1, 6)})\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__window_mouse_press_event__","title":"__window_mouse_press_event__","text":"<pre><code>__window_mouse_press_event__(\n    x: int, y: int, button: int\n) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __window_mouse_press_event__(self, x: int, y: int, button: int) -&gt; None:\n    self.imgui.mouse_press_event(x, y, button)\n    if self.imguio.want_capture_mouse and self.render_ui:\n        return\n    self.mouse_buttons[button] = True\n    self.relay(ShaderMessage.Mouse.Press(\n        **self.__xy2uv__(x, y),\n        button=button\n    ))\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__window_mouse_release_event__","title":"__window_mouse_release_event__","text":"<pre><code>__window_mouse_release_event__(\n    x: int, y: int, button: int\n) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __window_mouse_release_event__(self, x: int, y: int, button: int) -&gt; None:\n    self.imgui.mouse_release_event(x, y, button)\n    if self.imguio.want_capture_mouse and self.render_ui:\n        return\n    self.mouse_buttons[button] = False\n    self.relay(ShaderMessage.Mouse.Release(\n        **self.__xy2uv__(x, y),\n        button=button\n    ))\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.mouse_inside","title":"mouse_inside","text":"<pre><code>mouse_inside: bool = False\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__window_mouse_enter_event__","title":"__window_mouse_enter_event__","text":"<pre><code>__window_mouse_enter_event__(window, inside: bool) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __window_mouse_enter_event__(self, window, inside: bool) -&gt; None:\n    self.mouse_inside = inside\n    self.relay(ShaderMessage.Mouse.Enter(state=inside))\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__window_mouse_scroll_event__","title":"__window_mouse_scroll_event__","text":"<pre><code>__window_mouse_scroll_event__(dx: int, dy: int) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __window_mouse_scroll_event__(self, dx: int, dy: int) -&gt; None:\n    self.imgui.mouse_scroll_event(dx, dy)\n    if self.imguio.want_capture_mouse and self.render_ui:\n        return\n    elif self.keyboard(ShaderKeyboard.Keys.LEFT_ALT):\n        self.speed.target += (dy)*0.2\n        return\n    self.relay(ShaderMessage.Mouse.Scroll(\n        **self.__dxdy2dudv__(dx=dx, dy=dy)\n    ))\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__window_mouse_position_event__","title":"__window_mouse_position_event__","text":"<pre><code>__window_mouse_position_event__(\n    x: int, y: int, dx: int, dy: int\n) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __window_mouse_position_event__(self, x: int, y: int, dx: int, dy: int) -&gt; None:\n    self.imgui.mouse_position_event(x, y, dx, dy)\n    if self.imguio.want_capture_mouse and self.render_ui:\n        return\n    self.relay(ShaderMessage.Mouse.Position(\n        **self.__dxdy2dudv__(dx=dx, dy=dy),\n        **self.__xy2uv__(x=x, y=y)\n    ))\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__window_mouse_drag_event__","title":"__window_mouse_drag_event__","text":"<pre><code>__window_mouse_drag_event__(\n    x: int, y: int, dx: int, dy: int\n) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __window_mouse_drag_event__(self, x: int, y: int, dx: int, dy: int) -&gt; None:\n    self.imgui.mouse_drag_event(x, y, dx, dy)\n    if self.imguio.want_capture_mouse and self.render_ui:\n        return\n\n    # Rotate the camera on Shift\n    if self.keyboard(ShaderKeyboard.Keys.LEFT_CTRL):\n        cx, cy = (x-self.width/2), (y-self.height/2)\n        angle = math.atan2(cy+dy, cx+dx) - math.atan2(cy, cx)\n        if (abs(angle) &gt; math.pi): angle -= 2*math.pi\n        self.camera.rotate(self.camera.forward, angle=math.degrees(angle))\n        return\n\n    elif self.exclusive:\n        self.camera.apply_zoom(dy/500)\n        self.camera.rotate(self.camera.forward, angle=-dx/10)\n        return\n\n    # Time Travel on Alt\n    elif self.keyboard(ShaderKeyboard.Keys.LEFT_ALT):\n        self.time -= self._mouse_drag_time_factor * (dy/self.height)\n        return\n\n    self.relay(ShaderMessage.Mouse.Drag(\n        **self.__dxdy2dudv__(dx=dx, dy=dy),\n        **self.__xy2uv__(x=x, y=y)\n    ))\n</code></pre>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.render_ui","title":"render_ui","text":"<pre><code>render_ui: bool = False\n</code></pre> <p>Whether to render the Main UI</p>"},{"location":"code/shaderflow/scene/#ShaderFlow.Scene.ShaderScene.__ui__","title":"__ui__","text":"<pre><code>__ui__() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Scene.py</code> <pre><code>def __ui__(self) -&gt; None:\n\n    # Render status\n    imgui.text(f\"Resolution: {self.render_resolution} -&gt; {self.resolution} @ {self.ssaa:.2f}x SSAA\")\n\n    # Framerate\n    imgui.spacing()\n    if (state := imgui.slider_float(\"Framerate\", self.fps, 10, 240, \"%.0f\"))[0]:\n        self.fps = round(state[1])\n    for fps in (options := (24, 30, 60, 120, 144, 240)):\n        if (state := imgui.button(f\"{fps} Hz\")):\n            self.fps = fps\n        if fps != options[-1]:\n            imgui.same_line()\n\n    # Temporal\n    imgui.spacing()\n    if (state := imgui.slider_float(\"Time Scale\", self.speed.target, -2, 2, \"%.2f\"))[0]:\n        self.speed.target = state[1]\n    for scale in (options := (-10, -5, -2, -1, 0, 1, 2, 5, 10)):\n        if (state := imgui.button(f\"{scale}x\")):\n            self.speed.target = scale\n        if scale != options[-1]:\n            imgui.same_line()\n\n    # SSAA\n    imgui.spacing()\n    if (state := imgui.slider_float(\"SSAA\", self.ssaa, 0.01, 4, \"%.2f\"))[0]:\n        self.ssaa = state[1]\n    for ssaa in (options := (0.1, 0.25, 0.5, 1.0, 1.25, 1.5, 2.0, 4.0)):\n        if (state := imgui.button(f\"{ssaa}x\")):\n            self.ssaa = ssaa\n        if ssaa != options[-1]:\n            imgui.same_line()\n\n    # Subsample\n    imgui.spacing()\n    if (state := imgui.slider_int(\"Subsample\", self.subsample, 1, 4)) != self.subsample:\n        self.subsample = state[1]\n\n    # Quality\n    imgui.spacing()\n    if (state := imgui.slider_float(\"Quality\", self.quality, 0, 100, \"%.0f%%\"))[0]:\n        self.quality = state[1]\n</code></pre>"},{"location":"code/shaderflow/server/","title":"File: <code>ShaderFlow/Server.py</code>","text":""},{"location":"code/shaderflow/server/#ShaderFlow.Server","title":"ShaderFlow.Server","text":""},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config","title":"Config","text":"<p>               Bases: <code>BrokenModel</code>, <code>FrozenHash</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Server.py</code> <pre><code>class Config(BrokenModel, FrozenHash):\n    class VideoSettings(BrokenModel):\n        \"\"\"Mirrors exporting-worthy Scene.main() arguments\"\"\"\n        width:   Optional[int]   = Field(None, ge=2, le=16384)\n        height:  Optional[int]   = Field(None, ge=2, le=16384)\n        ratio:   Optional[float] = Field(None, gt=0.0)\n        bounds:  Optional[tuple[int, int]] = Field(None)\n        scale:   float = Field(1.0,  gt=0.0)\n        fps:     float = Field(60.0, gt=0.0)\n        quality: float = Field(50.0, ge=0.0, le=100.0)\n        ssaa:    float = Field(1.0,  ge=0.0, le=2.0)\n        time:    float = Field(10.0, ge=0.0)\n        start:   float = Field(0.0,  ge=0.0)\n        speed:   float = Field(1.0,  gt=0.0)\n        loop:    int   = Field(1,    ge=1)\n        batch:   str   = Field(\"0\")\n        buffers: int   = Field(2,    ge=1)\n        noturbo: bool  = Field(False)\n        format:  str   = Field(\"mp4\")\n\n    video: VideoSettings = Field(default_factory=VideoSettings)\n    ffmpeg: BrokenFFmpeg = Field(default_factory=BrokenFFmpeg)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings","title":"VideoSettings","text":"<p>               Bases: <code>BrokenModel</code></p> <p>Mirrors exporting-worthy Scene.main() arguments</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Server.py</code> <pre><code>class VideoSettings(BrokenModel):\n    \"\"\"Mirrors exporting-worthy Scene.main() arguments\"\"\"\n    width:   Optional[int]   = Field(None, ge=2, le=16384)\n    height:  Optional[int]   = Field(None, ge=2, le=16384)\n    ratio:   Optional[float] = Field(None, gt=0.0)\n    bounds:  Optional[tuple[int, int]] = Field(None)\n    scale:   float = Field(1.0,  gt=0.0)\n    fps:     float = Field(60.0, gt=0.0)\n    quality: float = Field(50.0, ge=0.0, le=100.0)\n    ssaa:    float = Field(1.0,  ge=0.0, le=2.0)\n    time:    float = Field(10.0, ge=0.0)\n    start:   float = Field(0.0,  ge=0.0)\n    speed:   float = Field(1.0,  gt=0.0)\n    loop:    int   = Field(1,    ge=1)\n    batch:   str   = Field(\"0\")\n    buffers: int   = Field(2,    ge=1)\n    noturbo: bool  = Field(False)\n    format:  str   = Field(\"mp4\")\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings.width","title":"width","text":"<pre><code>width: Optional[int] = Field(None, ge=2, le=16384)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings.height","title":"height","text":"<pre><code>height: Optional[int] = Field(None, ge=2, le=16384)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings.ratio","title":"ratio","text":"<pre><code>ratio: Optional[float] = Field(None, gt=0.0)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings.bounds","title":"bounds","text":"<pre><code>bounds: Optional[tuple[int, int]] = Field(None)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings.scale","title":"scale","text":"<pre><code>scale: float = Field(1.0, gt=0.0)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings.fps","title":"fps","text":"<pre><code>fps: float = Field(60.0, gt=0.0)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings.quality","title":"quality","text":"<pre><code>quality: float = Field(50.0, ge=0.0, le=100.0)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings.ssaa","title":"ssaa","text":"<pre><code>ssaa: float = Field(1.0, ge=0.0, le=2.0)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings.time","title":"time","text":"<pre><code>time: float = Field(10.0, ge=0.0)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings.start","title":"start","text":"<pre><code>start: float = Field(0.0, ge=0.0)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings.speed","title":"speed","text":"<pre><code>speed: float = Field(1.0, gt=0.0)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings.loop","title":"loop","text":"<pre><code>loop: int = Field(1, ge=1)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings.batch","title":"batch","text":"<pre><code>batch: str = Field('0')\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings.buffers","title":"buffers","text":"<pre><code>buffers: int = Field(2, ge=1)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings.noturbo","title":"noturbo","text":"<pre><code>noturbo: bool = Field(False)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.VideoSettings.format","title":"format","text":"<pre><code>format: str = Field('mp4')\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.video","title":"video","text":"<pre><code>video: VideoSettings = Field(default_factory=VideoSettings)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.Config.ffmpeg","title":"ffmpeg","text":"<pre><code>ffmpeg: BrokenFFmpeg = Field(default_factory=BrokenFFmpeg)\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.render","title":"render","text":"<pre><code>render(self, config: Optional[Config] = None) -&gt; bytes\n</code></pre> <p>Render a video file with the current configuration</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Server.py</code> <pre><code>def render(self, config: Optional[Config]=None) -&gt; bytes:\n    \"\"\"Render a video file with the current configuration\"\"\"\n    self.config = (config or self.config)\n\n    try:\n        with tempfile.NamedTemporaryFile(\n            suffix=(\".\"+self.config.video.format),\n            delete=False,\n        ) as temp:\n            video: bytes = self.main(\n                **self.config.video.dict(),\n                output=Path(temp.name),\n                progress=False\n            )[0].read_bytes()\n    finally:\n        with contextlib.suppress(FileNotFoundError):\n            os.unlink(temp.name)\n\n    return video\n</code></pre>"},{"location":"code/shaderflow/server/#ShaderFlow.Server.worker","title":"worker","text":"<pre><code>worker(cls)\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Server.py</code> <pre><code>@classmethod\ndef worker(cls):\n    scene = cls(backend=\"headless\")\n\n    for endurance in itertools.count(1):\n        ...\n</code></pre>"},{"location":"code/shaderflow/shader/","title":"File: <code>ShaderFlow/Shader.py</code>","text":""},{"location":"code/shaderflow/shader/#ShaderFlow.Shader","title":"ShaderFlow.Shader","text":""},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.WATCHDOG","title":"WATCHDOG","text":"<pre><code>WATCHDOG = Observer()\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderDumper","title":"ShaderDumper","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>@define\nclass ShaderDumper:\n    shader: ShaderProgram # Fixme: Extending a parent class with refactored functionality\n    \"\"\"Parent ShaderObject instance\"\"\"\n\n    error: str\n    \"\"\"str(_moderngl.Error) exception\"\"\"\n\n    fragment: str\n    \"\"\"Potentially faulty Fragment shader\"\"\"\n\n    vertex: str\n    \"\"\"Potentially faulty Vertex shader\"\"\"\n\n    context: int = 5\n    \"\"\"Number of lines to show before and after the faulty line\"\"\"\n\n    _parser = re.compile(r\"^0\\((\\d+)\\)\\s*:\\s*error\\s* (\\w+):\\s(.*)\", re.MULTILINE)\n\n    @property\n    def code(self) -&gt; str:\n        \"\"\"Simple heuristic to choose what shader cause the error\"\"\"\n        if (\"fragment_shader\" in self.error):\n            return self.fragment\n        elif (\"vertex_shader\" in self.error):\n            return self.vertex\n        raise RuntimeError(f\"Cannot determine shader from error: {self.error}\")\n\n    @property\n    def lines(self) -&gt; list[str]:\n        return self.code.splitlines()\n\n    def dump(self):\n        directory = Broken.PROJECT.DIRECTORIES.DUMP\n        # BrokenPath.remove(directory, echo=False)\n        self.shader.log_error(f\"Dumping shaders to {directory}\")\n        (directory/f\"{self.shader.uuid}.frag\").write_text(self.fragment, encoding=\"utf-8\")\n        (directory/f\"{self.shader.uuid}.vert\").write_text(self.vertex, encoding=\"utf-8\")\n        (directory/f\"{self.shader.uuid}-error.md\" ).write_text(self.error, encoding=\"utf-8\")\n\n        import rich\n        from rich.panel import Panel\n        from rich.syntax import Syntax\n\n        # Visual only: Print highlighted code panels of all errors\n        for match in ShaderDumper._parser.finditer(self.error):\n            lineno, errno, message = match.groups()\n            lineno = int(lineno)\n            start  = max(0, lineno - self.context - 1)\n            end    = min(len(self.lines), lineno + self.context)\n            code   = []\n\n            for i, line in enumerate(self.lines[start:end]):\n                div = (\"&gt;\" if (i+start+1 == lineno) else \"|\")\n                code.append(f\"({i+start+1:3d}) {div} {line}\")\n\n            rich.print(Panel(\n                Syntax(code='\\n'.join(code), lexer=\"glsl\"),\n                title=f\"({errno} at Module #{self.shader.uuid}, Line {lineno}): {message}\",\n            ))\n            break\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderDumper.shader","title":"shader","text":"<pre><code>shader: ShaderProgram\n</code></pre> <p>Parent ShaderObject instance</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderDumper.error","title":"error","text":"<pre><code>error: str\n</code></pre> <p>str(_moderngl.Error) exception</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderDumper.fragment","title":"fragment","text":"<pre><code>fragment: str\n</code></pre> <p>Potentially faulty Fragment shader</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderDumper.vertex","title":"vertex","text":"<pre><code>vertex: str\n</code></pre> <p>Potentially faulty Vertex shader</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderDumper.context","title":"context","text":"<pre><code>context: int = 5\n</code></pre> <p>Number of lines to show before and after the faulty line</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderDumper.code","title":"code","text":"<pre><code>code: str\n</code></pre> <p>Simple heuristic to choose what shader cause the error</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderDumper.lines","title":"lines","text":"<pre><code>lines: list[str]\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderDumper.dump","title":"dump","text":"<pre><code>dump()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def dump(self):\n    directory = Broken.PROJECT.DIRECTORIES.DUMP\n    # BrokenPath.remove(directory, echo=False)\n    self.shader.log_error(f\"Dumping shaders to {directory}\")\n    (directory/f\"{self.shader.uuid}.frag\").write_text(self.fragment, encoding=\"utf-8\")\n    (directory/f\"{self.shader.uuid}.vert\").write_text(self.vertex, encoding=\"utf-8\")\n    (directory/f\"{self.shader.uuid}-error.md\" ).write_text(self.error, encoding=\"utf-8\")\n\n    import rich\n    from rich.panel import Panel\n    from rich.syntax import Syntax\n\n    # Visual only: Print highlighted code panels of all errors\n    for match in ShaderDumper._parser.finditer(self.error):\n        lineno, errno, message = match.groups()\n        lineno = int(lineno)\n        start  = max(0, lineno - self.context - 1)\n        end    = min(len(self.lines), lineno + self.context)\n        code   = []\n\n        for i, line in enumerate(self.lines[start:end]):\n            div = (\"&gt;\" if (i+start+1 == lineno) else \"|\")\n            code.append(f\"({i+start+1:3d}) {div} {line}\")\n\n        rich.print(Panel(\n            Syntax(code='\\n'.join(code), lexer=\"glsl\"),\n            title=f\"({errno} at Module #{self.shader.uuid}, Line {lineno}): {message}\",\n        ))\n        break\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram","title":"ShaderProgram","text":"<p>               Bases: <code>ShaderModule</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>@define\nclass ShaderProgram(ShaderModule):\n    version: int = 330\n    \"\"\"OpenGL Version to use for the shader\"\"\"\n\n    clear: bool = False\n    \"\"\"Clear the final texture before rendering\"\"\"\n\n    instances: int = 1\n    \"\"\"Number of gl_InstanceID's to render per render pass\"\"\"\n\n    texture: ShaderTexture = None\n    \"\"\"ShaderTexture Module that this Shader renders to in layers and temporal\"\"\"\n\n    def build(self):\n        self.texture = ShaderTexture(scene=self.scene, name=self.name, track=True)\n        self.fragment_variable(OutVariable(\"vec4\", \"fragColor\"))\n        self.vertex_variable(InVariable(\"vec2\", \"vertex_position\"))\n        self.vertex_variable(InVariable(\"vec2\", \"vertex_gluv\"))\n        self.traverse_variable(ShaderVariable(\"vec2\", \"fragCoord\"))\n        self.traverse_variable(ShaderVariable(\"vec2\", \"stxy\"))\n        self.traverse_variable(ShaderVariable(\"vec2\", \"glxy\"))\n        self.traverse_variable(ShaderVariable(\"vec2\", \"stuv\"))\n        self.traverse_variable(ShaderVariable(\"vec2\", \"astuv\"))\n        self.traverse_variable(ShaderVariable(\"vec2\", \"gluv\"))\n        self.traverse_variable(ShaderVariable(\"vec2\", \"agluv\"))\n        self.traverse_variable(FlatVariable(\"int\", \"instance\"))\n\n        # Add a fullscreen center-(0, 0) uv rectangle\n        for x, y in itertools.product((-1, 1), (-1, 1)):\n            self.add_vertice(x=x, y=y, u=x, v=y)\n\n        # Load default vertex and fragment shaders\n        self.vertex   = (SHADERFLOW.RESOURCES.VERTEX/\"Default.glsl\")\n        self.fragment = (SHADERFLOW.RESOURCES.FRAGMENT/\"Default.glsl\")\n\n    # # Variable handling\n\n    vertex_variables: OrderedSet = Factory(OrderedSet)\n    \"\"\"Variables metaprogramming that will be added to the Vertex Shader\"\"\"\n\n    fragment_variables: OrderedSet = Factory(OrderedSet)\n    \"\"\"Variables metaprogramming that will be added to the Fragment Shader\"\"\"\n\n    def vertex_variable(self, variable: ShaderVariable) -&gt; None:\n        self.vertex_variables.add(variable)\n\n    def fragment_variable(self, variable: ShaderVariable) -&gt; None:\n        self.fragment_variables.add(variable)\n\n    def common_variable(self, variable: ShaderVariable) -&gt; None:\n        self.fragment_variable(variable)\n        self.vertex_variable(variable)\n\n    def traverse_variable(self, variable: ShaderVariable) -&gt; None:\n        self.fragment_variable(variable.copy(direction=\"in\"))\n        self.vertex_variable(variable.copy(direction=\"out\"))\n\n    # # Vertices\n\n    vertices: list[float] = Factory(list)\n    \"\"\"Vertices of the shader. More often than not, a Fullscreen Quad\"\"\"\n\n    vbo: moderngl.Buffer = None\n    \"\"\"Buffer object for the vertices of the shader\"\"\"\n\n    vao: moderngl.VertexArray = None\n    \"\"\"State object for the 'rendering' of the shader\"\"\"\n\n    def add_vertice(self, x: float=0, y: float=0, u: float=0, v: float=0) -&gt; None:\n        self.vertices.extend((x, y, u, v))\n\n    @property\n    def vao_definition(self) -&gt; tuple[str]:\n        \"\"\"Outputs: (\"2f 2f\", \"render_vertex\", \"coords_vertex\")\"\"\"\n        sizes, names = [], []\n        for variable in self.vertex_variables:\n            if variable.direction == \"in\":\n                sizes.append(variable.size_string)\n                names.append(variable.name)\n        return (\" \".join(sizes), *names)\n\n    # # Metaprogramming\n\n    include_directories: OrderedSet[Path] = Factory(lambda: OrderedSet((\n        SHADERFLOW.RESOURCES.SHADERS,\n    )))\n\n    _include_regex = re.compile(r'^\\s*#include\\s+\"(.+)\"\\s*$', re.MULTILINE)\n    \"\"\"Finds all whole lines `#include \"file\"` directives in the shader\"\"\"\n\n    def _build_shader(self,\n        content: LoadableString,\n        variables: Iterable[ShaderVariable],\n        *, _type: str\n    ) -&gt; str:\n        \"\"\"Build the final shader from the contents provided\"\"\"\n        separator: str = (\"// \" + \"-\"*96 + \"|\\n\")\n        code: deque[LoadableString] = deque()\n\n        @contextlib.contextmanager\n        def section(name: str=\"\"):\n            code.append(f\"\\n\\n{separator}\")\n            code.append(f\"// Metaprogramming ({name})\\n\")\n            yield None\n\n        # Must define version first; fixed headers\n        code.append(f\"#version {self.version}\")\n        code.append(f\"#define {_type}\")\n\n        with section(\"Variables\"):\n            code.extend(item.declaration for item in variables)\n\n        # Fixme: Inject defines after content includes; deprecate this\n        with section(\"Include - ShaderFlow\"):\n            code.append(SHADERFLOW.RESOURCES.SHADERS_INCLUDE/\"ShaderFlow.glsl\")\n\n        # Add all modules includes to the shader\n        for module in self.scene.modules:\n            for defines in module.defines():\n                code.append(defines)\n\n            for include in filter(None, module.includes()):\n                with section(f\"Include - {type(module).__name__}@{module.uuid}\"):\n                    code.append(include)\n\n        # Add shader content itself\n        with section(\"Content\"):\n            code.append(content)\n\n        # Join all parts for includes post-processing\n        code: str = '\\n'.join(map(LoadString, code))\n\n        # Solve includes recursively until no more are found\n        while (match := ShaderProgram._include_regex.search(code)):\n            replaces, include = match.group(0), match.group(1)\n\n            # Optimization: Skip already included to avoid clutter\n            if (tag := f\"// Include - {include}\") in code:\n                code = code.replace(replaces, \"\")\n                continue\n\n            # Note: Breaks to guarantee order of includes\n            for directory in self.include_directories:\n                if (path := next(directory.rglob(include))):\n                    code = code.replace(replaces, dedent(f\"\"\"\n                        {separator}{tag}{separator}\n                        {path.read_text(\"utf-8\")}\n                    \"\"\"))\n                    self._watchshader(path)\n                    break\n            else:\n                raise FileNotFoundError(f\"Include file {include} not found in include directories\")\n\n        return code\n\n    # # Hot reloading\n\n    def _watchshader(self, path: Path) -&gt; Any:\n        from watchdog.events import FileSystemEventHandler\n\n        @define(eq=False)\n        class Handler(FileSystemEventHandler):\n            shader: ShaderProgram\n            def on_modified(self, event):\n                if (not self.shader.scene.freewheel):\n                    self.shader.scene.scheduler.once(self.shader.compile)\n\n        # Add the Shader Path to the watchdog for changes. Only ignore 'File Too Long'\n        # exceptions when non-path strings as we can't get max len easily per system\n        try:\n            if (path := BrokenPath.get(path, exists=True)):\n                WATCHDOG.schedule(Handler(self), path)\n        except OSError as error:\n            if error.errno != errno.ENAMETOOLONG:\n                raise error\n\n        return path\n\n    # # Vertex shader\n\n    _vertex: Union[Path, str] = \"\"\n    \"\"\"The 'User Content' of the Vertex Shader, interted after the Metaprogramming.\n    A Path value will be watched for changes and shaders will be automatically reloaded\"\"\"\n\n    def make_vertex(self, content: str) -&gt; str:\n        return self._build_shader(\n            content=LoadString(content),\n            variables=self.vertex_variables,\n            _type=\"VERTEX\"\n        )\n\n    @property\n    def vertex(self) -&gt; str:\n        return self.make_vertex(self._vertex)\n\n    @vertex.setter\n    def vertex(self, value: Union[Path, str]):\n        self._watchshader(value)\n        self._vertex = value\n\n    # # Fragment shader\n\n    _fragment: Union[Path, str] = \"\"\n    \"\"\"The 'User Content' of the Fragment Shader, interted after the Metaprogramming.\n    A Path value will be watched for changes and shaders will be automatically reloaded\"\"\"\n\n    def make_fragment(self, content: str) -&gt; str:\n        return self._build_shader(\n            content=LoadString(content),\n            variables=self.fragment_variables,\n            _type=\"FRAGMENT\"\n        )\n\n    @property\n    def fragment(self) -&gt; str:\n        return self.make_fragment(self._fragment)\n\n    @fragment.setter\n    def fragment(self, value: Union[Path, str]):\n        self._watchshader(value)\n        self._fragment = value\n\n    # # Rendering\n\n    program: moderngl.Program = None\n    \"\"\"ModernGL 'Compiled Shaders' object\"\"\"\n\n    def compile(self, _vertex: str=None, _fragment: str=None) -&gt; Self:\n\n        # Add pipeline variable definitions\n        for variable in self.full_pipeline():\n            self.common_variable(variable)\n\n        # Metaprogram either injected or proper shaders\n        fragment = self.make_fragment(_fragment or self._fragment)\n        vertex = self.make_vertex(_vertex or self._vertex)\n\n        try:\n            self.program = self.scene.opengl.program(vertex, fragment)\n        except _moderngl.Error as error:\n            ShaderDumper(\n                shader=self,\n                error=str(error),\n                vertex=vertex,\n                fragment=fragment\n            ).dump()\n\n            if (_vertex or _fragment):\n                raise RuntimeError(self.log_error(\"Recursion on Missing Texture Shader Loading\"))\n\n            self.log_error(\"Error compiling shaders, loading missing texture shader\")\n            self.compile(\n                _vertex  =LoadString(SHADERFLOW.RESOURCES.VERTEX/\"Default.glsl\"),\n                _fragment=LoadString(SHADERFLOW.RESOURCES.FRAGMENT/\"Missing.glsl\")\n            )\n\n        # Render the vertices that are defined on the shader\n        self.vbo = self.scene.opengl.buffer(numpy.array(self.vertices, dtype=\"f4\"))\n        self.vao = self.scene.opengl.vertex_array(\n            self.program, [(self.vbo, *self.vao_definition)],\n            skip_errors=True\n        )\n\n        return self\n\n    # # Uniforms\n\n    def set_uniform(self, name: str, value: Any=None) -&gt; None:\n        if (self.program is None):\n            raise RuntimeError(self.log_error(\"Shader hasn't been compiled yet\"))\n        if (value is not None) and (uniform := self.program.get(name, None)):\n            uniform.value = denum(value)\n\n    def get_uniform(self, name: str) -&gt; Optional[Any]:\n        return self.program.get(name, None)\n\n    # # Module\n\n    SKIP_GPU: bool = Environment.flag(\"SKIP_GPU\", 0)\n    \"\"\"Do not render shaders, useful for benchmarking raw Python performance\"\"\"\n\n    def render_to_fbo(self, fbo: moderngl.Framebuffer, clear: bool=True) -&gt; None:\n        if self.SKIP_GPU:\n            return\n        fbo.use()\n        clear or fbo.clear()\n        self.vao.render(\n            moderngl.TRIANGLE_STRIP,\n            instances=self.instances\n        )\n\n    def use_pipeline(self, pipeline: Iterable[ShaderVariable], *, _index: int=0) -&gt; None:\n        for variable in pipeline:\n            # if variable not in self.fragment_variables:\n            #     self.load_shaders()\n            if (variable.type == \"sampler2D\"):\n                self.set_uniform(variable.name, _index)\n                variable.value.use(_index)\n                _index += 1\n                continue\n            self.set_uniform(variable.name, variable.value)\n\n    def render(self) -&gt; None:\n\n        # Optimization: Final shader doesn't need the full pipeline\n        if self.texture.final:\n            self.use_pipeline(self.scene.shader.texture.pipeline())\n            self.use_pipeline((\n                Uniform(\"vec2\",  \"iResolution\", self.scene.resolution),\n                Uniform(\"int\",   \"iSubsample\",  self.scene.subsample),\n            ))\n            self.render_to_fbo(self.texture.fbo, clear=False)\n            return None\n\n        self.use_pipeline(self.full_pipeline())\n\n        # Optimization: Only the iLayer uniform changes\n        for layer, box in enumerate(self.texture.row(0)):\n            self.set_uniform(\"iLayer\", layer)\n            self.render_to_fbo(fbo=box.fbo, clear=box.clear)\n\n        self.texture.roll()\n\n    def update(self) -&gt; None:\n        self.render()\n\n    def handle(self, message: ShaderMessage) -&gt; None:\n        if isinstance(message, ShaderMessage.Shader.Compile):\n            self.compile()\n        elif isinstance(message, ShaderMessage.Shader.Render):\n            self.render()\n\n    def __ui__(self) -&gt; None:\n        if imgui.button(\"Reload\"):\n            self.compile()\n        imgui.same_line()\n        if imgui.button(\"Dump\"):\n            self.dump_shaders()\n        if imgui.tree_node(\"Pipeline\"):\n            for variable in self.full_pipeline():\n                imgui.text(f\"{variable.name.ljust(16)}: {variable.value}\")\n            imgui.tree_pop()\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.version","title":"version","text":"<pre><code>version: int = 330\n</code></pre> <p>OpenGL Version to use for the shader</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.clear","title":"clear","text":"<pre><code>clear: bool = False\n</code></pre> <p>Clear the final texture before rendering</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.instances","title":"instances","text":"<pre><code>instances: int = 1\n</code></pre> <p>Number of gl_InstanceID's to render per render pass</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.texture","title":"texture","text":"<pre><code>texture: ShaderTexture = None\n</code></pre> <p>ShaderTexture Module that this Shader renders to in layers and temporal</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.build","title":"build","text":"<pre><code>build()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def build(self):\n    self.texture = ShaderTexture(scene=self.scene, name=self.name, track=True)\n    self.fragment_variable(OutVariable(\"vec4\", \"fragColor\"))\n    self.vertex_variable(InVariable(\"vec2\", \"vertex_position\"))\n    self.vertex_variable(InVariable(\"vec2\", \"vertex_gluv\"))\n    self.traverse_variable(ShaderVariable(\"vec2\", \"fragCoord\"))\n    self.traverse_variable(ShaderVariable(\"vec2\", \"stxy\"))\n    self.traverse_variable(ShaderVariable(\"vec2\", \"glxy\"))\n    self.traverse_variable(ShaderVariable(\"vec2\", \"stuv\"))\n    self.traverse_variable(ShaderVariable(\"vec2\", \"astuv\"))\n    self.traverse_variable(ShaderVariable(\"vec2\", \"gluv\"))\n    self.traverse_variable(ShaderVariable(\"vec2\", \"agluv\"))\n    self.traverse_variable(FlatVariable(\"int\", \"instance\"))\n\n    # Add a fullscreen center-(0, 0) uv rectangle\n    for x, y in itertools.product((-1, 1), (-1, 1)):\n        self.add_vertice(x=x, y=y, u=x, v=y)\n\n    # Load default vertex and fragment shaders\n    self.vertex   = (SHADERFLOW.RESOURCES.VERTEX/\"Default.glsl\")\n    self.fragment = (SHADERFLOW.RESOURCES.FRAGMENT/\"Default.glsl\")\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.vertex_variables","title":"vertex_variables","text":"<pre><code>vertex_variables: OrderedSet = Factory(OrderedSet)\n</code></pre> <p>Variables metaprogramming that will be added to the Vertex Shader</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.fragment_variables","title":"fragment_variables","text":"<pre><code>fragment_variables: OrderedSet = Factory(OrderedSet)\n</code></pre> <p>Variables metaprogramming that will be added to the Fragment Shader</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.vertex_variable","title":"vertex_variable","text":"<pre><code>vertex_variable(variable: ShaderVariable) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def vertex_variable(self, variable: ShaderVariable) -&gt; None:\n    self.vertex_variables.add(variable)\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.fragment_variable","title":"fragment_variable","text":"<pre><code>fragment_variable(variable: ShaderVariable) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def fragment_variable(self, variable: ShaderVariable) -&gt; None:\n    self.fragment_variables.add(variable)\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.common_variable","title":"common_variable","text":"<pre><code>common_variable(variable: ShaderVariable) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def common_variable(self, variable: ShaderVariable) -&gt; None:\n    self.fragment_variable(variable)\n    self.vertex_variable(variable)\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.traverse_variable","title":"traverse_variable","text":"<pre><code>traverse_variable(variable: ShaderVariable) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def traverse_variable(self, variable: ShaderVariable) -&gt; None:\n    self.fragment_variable(variable.copy(direction=\"in\"))\n    self.vertex_variable(variable.copy(direction=\"out\"))\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.vertices","title":"vertices","text":"<pre><code>vertices: list[float] = Factory(list)\n</code></pre> <p>Vertices of the shader. More often than not, a Fullscreen Quad</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.vbo","title":"vbo","text":"<pre><code>vbo: moderngl.Buffer = None\n</code></pre> <p>Buffer object for the vertices of the shader</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.vao","title":"vao","text":"<pre><code>vao: moderngl.VertexArray = None\n</code></pre> <p>State object for the 'rendering' of the shader</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.add_vertice","title":"add_vertice","text":"<pre><code>add_vertice(\n    x: float = 0, y: float = 0, u: float = 0, v: float = 0\n) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def add_vertice(self, x: float=0, y: float=0, u: float=0, v: float=0) -&gt; None:\n    self.vertices.extend((x, y, u, v))\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.vao_definition","title":"vao_definition","text":"<pre><code>vao_definition: tuple[str]\n</code></pre> <p>Outputs: (\"2f 2f\", \"render_vertex\", \"coords_vertex\")</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.include_directories","title":"include_directories","text":"<pre><code>include_directories: OrderedSet[Path] = Factory(\n    lambda: OrderedSet((SHADERFLOW.RESOURCES.SHADERS,))\n)\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.make_vertex","title":"make_vertex","text":"<pre><code>make_vertex(content: str) -&gt; str\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def make_vertex(self, content: str) -&gt; str:\n    return self._build_shader(\n        content=LoadString(content),\n        variables=self.vertex_variables,\n        _type=\"VERTEX\"\n    )\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.vertex","title":"vertex","text":"<pre><code>vertex: str\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.make_fragment","title":"make_fragment","text":"<pre><code>make_fragment(content: str) -&gt; str\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def make_fragment(self, content: str) -&gt; str:\n    return self._build_shader(\n        content=LoadString(content),\n        variables=self.fragment_variables,\n        _type=\"FRAGMENT\"\n    )\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.fragment","title":"fragment","text":"<pre><code>fragment: str\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.program","title":"program","text":"<pre><code>program: moderngl.Program = None\n</code></pre> <p>ModernGL 'Compiled Shaders' object</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.compile","title":"compile","text":"<pre><code>compile(_vertex: str = None, _fragment: str = None) -&gt; Self\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def compile(self, _vertex: str=None, _fragment: str=None) -&gt; Self:\n\n    # Add pipeline variable definitions\n    for variable in self.full_pipeline():\n        self.common_variable(variable)\n\n    # Metaprogram either injected or proper shaders\n    fragment = self.make_fragment(_fragment or self._fragment)\n    vertex = self.make_vertex(_vertex or self._vertex)\n\n    try:\n        self.program = self.scene.opengl.program(vertex, fragment)\n    except _moderngl.Error as error:\n        ShaderDumper(\n            shader=self,\n            error=str(error),\n            vertex=vertex,\n            fragment=fragment\n        ).dump()\n\n        if (_vertex or _fragment):\n            raise RuntimeError(self.log_error(\"Recursion on Missing Texture Shader Loading\"))\n\n        self.log_error(\"Error compiling shaders, loading missing texture shader\")\n        self.compile(\n            _vertex  =LoadString(SHADERFLOW.RESOURCES.VERTEX/\"Default.glsl\"),\n            _fragment=LoadString(SHADERFLOW.RESOURCES.FRAGMENT/\"Missing.glsl\")\n        )\n\n    # Render the vertices that are defined on the shader\n    self.vbo = self.scene.opengl.buffer(numpy.array(self.vertices, dtype=\"f4\"))\n    self.vao = self.scene.opengl.vertex_array(\n        self.program, [(self.vbo, *self.vao_definition)],\n        skip_errors=True\n    )\n\n    return self\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.set_uniform","title":"set_uniform","text":"<pre><code>set_uniform(name: str, value: Any = None) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def set_uniform(self, name: str, value: Any=None) -&gt; None:\n    if (self.program is None):\n        raise RuntimeError(self.log_error(\"Shader hasn't been compiled yet\"))\n    if (value is not None) and (uniform := self.program.get(name, None)):\n        uniform.value = denum(value)\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.get_uniform","title":"get_uniform","text":"<pre><code>get_uniform(name: str) -&gt; Optional[Any]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def get_uniform(self, name: str) -&gt; Optional[Any]:\n    return self.program.get(name, None)\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.SKIP_GPU","title":"SKIP_GPU","text":"<pre><code>SKIP_GPU: bool = Environment.flag('SKIP_GPU', 0)\n</code></pre> <p>Do not render shaders, useful for benchmarking raw Python performance</p>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.render_to_fbo","title":"render_to_fbo","text":"<pre><code>render_to_fbo(\n    fbo: moderngl.Framebuffer, clear: bool = True\n) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def render_to_fbo(self, fbo: moderngl.Framebuffer, clear: bool=True) -&gt; None:\n    if self.SKIP_GPU:\n        return\n    fbo.use()\n    clear or fbo.clear()\n    self.vao.render(\n        moderngl.TRIANGLE_STRIP,\n        instances=self.instances\n    )\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.use_pipeline","title":"use_pipeline","text":"<pre><code>use_pipeline(\n    pipeline: Iterable[ShaderVariable], *, _index: int = 0\n) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def use_pipeline(self, pipeline: Iterable[ShaderVariable], *, _index: int=0) -&gt; None:\n    for variable in pipeline:\n        # if variable not in self.fragment_variables:\n        #     self.load_shaders()\n        if (variable.type == \"sampler2D\"):\n            self.set_uniform(variable.name, _index)\n            variable.value.use(_index)\n            _index += 1\n            continue\n        self.set_uniform(variable.name, variable.value)\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.render","title":"render","text":"<pre><code>render() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def render(self) -&gt; None:\n\n    # Optimization: Final shader doesn't need the full pipeline\n    if self.texture.final:\n        self.use_pipeline(self.scene.shader.texture.pipeline())\n        self.use_pipeline((\n            Uniform(\"vec2\",  \"iResolution\", self.scene.resolution),\n            Uniform(\"int\",   \"iSubsample\",  self.scene.subsample),\n        ))\n        self.render_to_fbo(self.texture.fbo, clear=False)\n        return None\n\n    self.use_pipeline(self.full_pipeline())\n\n    # Optimization: Only the iLayer uniform changes\n    for layer, box in enumerate(self.texture.row(0)):\n        self.set_uniform(\"iLayer\", layer)\n        self.render_to_fbo(fbo=box.fbo, clear=box.clear)\n\n    self.texture.roll()\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.update","title":"update","text":"<pre><code>update() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def update(self) -&gt; None:\n    self.render()\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.handle","title":"handle","text":"<pre><code>handle(message: ShaderMessage) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def handle(self, message: ShaderMessage) -&gt; None:\n    if isinstance(message, ShaderMessage.Shader.Compile):\n        self.compile()\n    elif isinstance(message, ShaderMessage.Shader.Render):\n        self.render()\n</code></pre>"},{"location":"code/shaderflow/shader/#ShaderFlow.Shader.ShaderProgram.__ui__","title":"__ui__","text":"<pre><code>__ui__() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Shader.py</code> <pre><code>def __ui__(self) -&gt; None:\n    if imgui.button(\"Reload\"):\n        self.compile()\n    imgui.same_line()\n    if imgui.button(\"Dump\"):\n        self.dump_shaders()\n    if imgui.tree_node(\"Pipeline\"):\n        for variable in self.full_pipeline():\n            imgui.text(f\"{variable.name.ljust(16)}: {variable.value}\")\n        imgui.tree_pop()\n</code></pre>"},{"location":"code/shaderflow/texture/","title":"File: <code>ShaderFlow/Texture.py</code>","text":""},{"location":"code/shaderflow/texture/#ShaderFlow.Texture","title":"ShaderFlow.Texture","text":""},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.numpy2mgltype","title":"numpy2mgltype","text":"<pre><code>numpy2mgltype(type: Union[numpy.dtype, str]) -&gt; str\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def numpy2mgltype(type: Union[numpy.dtype, str]) -&gt; str:\n    if isinstance(type, str):\n        return type\n    if isinstance(type, numpy.dtype):\n        type = type.type\n    return {\n        numpy.uint8:   \"f1\",\n        numpy.uint16:  \"u2\",\n        numpy.float16: \"f2\",\n        numpy.float32: \"f4\",\n    }.get(type)\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.TextureFilter","title":"TextureFilter","text":"<p>               Bases: <code>BrokenEnum</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>class TextureFilter(BrokenEnum):\n    # Fixme: Disallow bad combinations of filter and types\n    Nearest = \"nearest\"\n    Linear  = \"linear\"\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.TextureFilter.Nearest","title":"Nearest","text":"<pre><code>Nearest = 'nearest'\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.TextureFilter.Linear","title":"Linear","text":"<pre><code>Linear = 'linear'\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.Anisotropy","title":"Anisotropy","text":"<p>               Bases: <code>BrokenEnum</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>class Anisotropy(BrokenEnum):\n    x1  = 1\n    x2  = 2\n    x4  = 4\n    x8  = 8\n    x16 = 16\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.Anisotropy.x1","title":"x1","text":"<pre><code>x1 = 1\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.Anisotropy.x2","title":"x2","text":"<pre><code>x2 = 2\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.Anisotropy.x4","title":"x4","text":"<pre><code>x4 = 4\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.Anisotropy.x8","title":"x8","text":"<pre><code>x8 = 8\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.Anisotropy.x16","title":"x16","text":"<pre><code>x16 = 16\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.TextureBox","title":"TextureBox","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>@define\nclass TextureBox:\n    texture: moderngl.Texture = None\n    fbo:     moderngl.Framebuffer = None\n    data:    bytes = field(default=None, repr=False)\n    clear:   bool  = False\n    empty:   bool  = True\n\n    def release(self) -&gt; None:\n        (self.texture or Nothing()).release()\n        (self.fbo     or Nothing()).release()\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.TextureBox.texture","title":"texture","text":"<pre><code>texture: moderngl.Texture = None\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.TextureBox.fbo","title":"fbo","text":"<pre><code>fbo: moderngl.Framebuffer = None\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.TextureBox.data","title":"data","text":"<pre><code>data: bytes = field(default=None, repr=False)\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.TextureBox.clear","title":"clear","text":"<pre><code>clear: bool = False\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.TextureBox.empty","title":"empty","text":"<pre><code>empty: bool = True\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.TextureBox.release","title":"release","text":"<pre><code>release() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def release(self) -&gt; None:\n    (self.texture or Nothing()).release()\n    (self.fbo     or Nothing()).release()\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture","title":"ShaderTexture","text":"<p>               Bases: <code>ShaderModule</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>@define\nclass ShaderTexture(ShaderModule):\n    name: str = None\n\n    def __post__(self):\n        self.make()\n\n    # -------------------------------------------|\n\n    def __smart__(self, attr, value, method) -&gt; Any:\n        if (converter := attr.converter):\n            value = converter(value)\n        if getattr(self, attr.name) != value:\n            self.__setstate__({attr.name: value})\n            method()\n        return value\n\n    def __apply__(self, attr, value) -&gt; Any:\n        return self.__smart__(attr, value, self.apply)\n\n    def __make__(self, attr, value) -&gt; Any:\n        return self.__smart__(attr, value, self.make)\n\n    # -------------------------------------------|\n\n    final: bool = field(default=False, converter=bool)\n    \"\"\"Is this bound to the final FSSAA ShaderObject?\"\"\"\n\n    track: float = field(default=0.0, converter=float, on_setattr=__make__)\n    \"\"\"Match the scene's resolution times this factor on this texture\"\"\"\n\n    filter: TextureFilter = TextureFilter.Linear.field(on_setattr=__apply__)\n    \"\"\"The interpolation filter applied to the texture when sampling on the GPU\"\"\"\n\n    anisotropy: Anisotropy = Anisotropy.x16.field(on_setattr=__apply__)\n    \"\"\"Anisotropic filter level, improves texture quality at oblique angles\"\"\"\n\n    mipmaps: bool = field(default=False, converter=bool, on_setattr=__apply__)\n    \"\"\"Compute mipmaps for this texture, improves quality at large distances\"\"\"\n\n    repeat_x: bool = field(default=True, converter=bool, on_setattr=__apply__)\n    \"\"\"Should the texture repeat on the X axis when out of bounds or clamp\"\"\"\n\n    repeat_y: bool = field(default=True, converter=bool, on_setattr=__apply__)\n    \"\"\"Should the texture repeat on the Y axis when out of bounds or clamp\"\"\"\n\n    def repeat(self, value: bool) -&gt; Self:\n        \"\"\"Syntatic sugar for setting both repeat_x and repeat_y\"\"\"\n        self.repeat_x = self.repeat_y = bool(value)\n        return self.apply()\n\n    @property\n    def moderngl_filter(self) -&gt; int:\n        return dict(\n            linear=moderngl.LINEAR,\n            nearest=moderngl.NEAREST,\n            linear_mipmap=moderngl.LINEAR_MIPMAP_LINEAR,\n            nearest_mipmap=moderngl.NEAREST_MIPMAP_NEAREST,\n        ).get(self.filter.value + (\"_mipmap\"*self.mipmaps))\n\n    # -------------------------------------------|\n\n    # Width\n\n    _width: int = field(default=1, converter=int)\n\n    @property\n    def width(self) -&gt; int:\n        if not self.track:\n            return self._width\n        return self.resolution[0]\n\n    @width.setter\n    def width(self, value: int):\n        if (self._width == value):\n            return\n        self._width = value\n        self.make()\n\n    # Height\n\n    _height: int = field(default=1, converter=int)\n\n    @property\n    def height(self) -&gt; int:\n        if not self.track:\n            return self._height\n        return self.resolution[1]\n\n    @height.setter\n    def height(self, value: int):\n        if (self._height == value):\n            return\n        self._height = value\n        self.make()\n\n    components: int = field(default=4, converter=int, on_setattr=__make__)\n    \"\"\"Number of color channels per pixel (1 Grayscale, 2 RG, 3 RGB, 4 RGBA)\"\"\"\n\n    dtype: numpy.dtype = field(\n        default=numpy.uint8,\n        converter=numpy.dtype,\n        on_setattr=__make__)\n    \"\"\"Data type of the texture for each pixel channel\"\"\"\n\n    @property\n    def resolution(self) -&gt; tuple[int, int]:\n        if not self.track:\n            return (self._width, self._height)\n        def scale(data):\n            return tuple(max(1, int(x*self.track)) for x in data)\n        if self.final:\n            return scale(self.scene.resolution)\n        return scale(self.scene.render_resolution)\n\n    @resolution.setter\n    def resolution(self, value: tuple[int, int]):\n        if not self.track:\n            self.width, self.height = value\n\n    @property\n    def size(self) -&gt; tuple[int, int]:\n        return self.resolution\n\n    @size.setter\n    def size(self, value: tuple[int, int]):\n        self.resolution = value\n\n    @property\n    def aspect_ratio(self) -&gt; float:\n        return self.width/(self.height or 1)\n\n    # Bytes size and Zero filling\n\n    @property\n    def zeros(self) -&gt; numpy.ndarray:\n        return numpy.zeros((*self.size, self.components), dtype=self.dtype)\n\n    @property\n    def bytes_per_pixel(self) -&gt; int:\n        return (self.dtype.itemsize * self.components)\n\n    @property\n    def size_t(self) -&gt; int:\n        \"\"\"Size of the texture data in bytes\"\"\"\n        return (self.width * self.height * self.bytes_per_pixel)\n\n    def new_buffer(self) -&gt; moderngl.Buffer:\n        \"\"\"Make a new buffer with the current size of the texture\"\"\"\n        return self.scene.opengl.buffer(reserve=self.size_t)\n\n    # -------------------------------------------|\n\n    matrix: deque[deque[TextureBox]] = Factory(deque)\n    \"\"\"Matrix of previous frames (temporal) and their layers (layers)\"\"\"\n\n    temporal: int = field(default=1, converter=int, on_setattr=__make__)\n    \"\"\"Number of previous frames to be stored\"\"\"\n\n    layers: int = field(default=1, converter=int, on_setattr=__make__)\n    \"\"\"Number of layers to be stored, useful in single-shader multipass\"\"\"\n\n    @property\n    def boxes(self) -&gt; Iterable[tuple[int, int, TextureBox]]:\n        for t, temporal in enumerate(self.matrix):\n            for b, box in enumerate(temporal):\n                yield (t, b, box)\n\n    def row(self, n: int=0) -&gt; Iterable[TextureBox]:\n        yield from self.matrix[n]\n\n    def make(self) -&gt; Self:\n        if (max(self.size) &gt; (limit := self.scene.opengl.info['GL_MAX_VIEWPORT_DIMS'][0])):\n            raise Exception(f\"Texture size too large for this OpenGL context: {self.size} &gt; {limit}\")\n\n        # Populate the matrix with current size\n        for row in pop_fill(self.matrix, deque, self.temporal):\n            pop_fill(row, TextureBox, self.layers)\n\n        # Recreate texture boxes\n        for (_, _, box) in self.boxes:\n            box.release()\n            box.texture = self.scene.opengl.texture(\n                components=self.components,\n                dtype=numpy2mgltype(self.dtype),\n                size=self.size)\n            box.fbo = self.scene.opengl.framebuffer(\n                color_attachments=[box.texture])\n\n            # Rewrite previous data if same size\n            if box.data and (self.size_t == len(box.data)):\n                box.texture.write(box.data)\n\n        return self.apply()\n\n    def apply(self) -&gt; Self:\n        \"\"\"Apply filters and flags to all textures\"\"\"\n        for (_, _, box) in self.boxes:\n            if self.mipmaps:\n                box.texture.build_mipmaps()\n            box.texture.filter     = (self.moderngl_filter, self.moderngl_filter)\n            box.texture.anisotropy = self.anisotropy.value\n            box.texture.repeat_x   = self.repeat_x\n            box.texture.repeat_y   = self.repeat_y\n        return self\n\n    def destroy(self) -&gt; None:\n        for (_, _, box) in self.boxes:\n            box.release()\n\n    def get_box(self, temporal: int=0, layer: int=-1) -&gt; Optional[TextureBox]:\n        \"\"\"Note: Points to the current final box\"\"\"\n        return list_get(list_get(self.matrix, temporal), layer)\n\n    @property\n    def fbo(self) -&gt; moderngl.Framebuffer:\n        \"\"\"Final and most Recent FBO of this Texture\"\"\"\n        if (self.final and self.scene.realtime):\n            return self.scene.window.fbo\n        return self.get_box().fbo\n\n    @property\n    def texture(self) -&gt; moderngl.Texture:\n        \"\"\"Final and most Recent Texture of this Texture\"\"\"\n        return self.get_box().texture\n\n    def roll(self, n: int=1) -&gt; Self:\n        \"\"\"Rotate the temporal layers by $n times\"\"\"\n        self.matrix.rotate(n)\n        return self\n\n    # -------------------------------------------|\n    # Input and Output\n\n    def write(self,\n        data: bytes=None,\n        *,\n        temporal: int=0,\n        layer: int=-1,\n        viewport: tuple[int, int, int, int]=None,\n    ) -&gt; Self:\n        box = self.get_box(temporal, layer)\n        box.texture.write(data, viewport=viewport)\n        if (not viewport):\n            box.data = bytes(data)\n        box.empty = False\n        return self\n\n    def from_numpy(self, data: numpy.ndarray) -&gt; Self:\n        unpack = list(data.shape)\n        if len(unpack) == 2:\n            unpack.append(1)\n        self._height, self._width, self.components = unpack\n        self.dtype = data.dtype\n        self.make()\n        self.write(numpy.flip(data, axis=0).tobytes())\n        return self\n\n    def from_image(self, image: LoadableImage) -&gt; Self:\n        return self.from_numpy(numpy.array(LoadImage(image)))\n\n    def clear(self, temporal: int=0, layer: int=-1) -&gt; Self:\n        return self.write(self.zeros, temporal=temporal, layer=layer)\n\n    def is_empty(self, temporal: int=0, layer: int=-1) -&gt; bool:\n        return self.get_box(temporal, layer).empty\n\n    # Todo: Sampling functions with numpy index ranges\n\n    # -------------------------------------------|\n    # Module\n\n    def _coord2name(self, temporal: int, layer: int) -&gt; str:\n        return f\"{self.name}{temporal}x{layer}\"\n\n    def defines(self) -&gt; Iterable[str]:\n        if not self.name:\n            return\n\n        # Define last frames as plain name (iTex0x(-1) -&gt; iTex, iTex1x(-1) -&gt; iTex1)\n        for temporal in range(self.temporal):\n            yield f\"#define {self.name}{temporal or ''} {self.name}{temporal}x{self.layers-1}\"\n\n        # Function to sample a dynamic temporal, layer\n        yield f\"\\nvec4 {self.name}Texture(int temporal, int layer, vec2 astuv) {{\"\n        yield \"    if (false) return vec4(0);\"\n        for temporal in range(self.temporal):\n            for layer in range(self.layers):\n                yield f\"    else if (temporal == {temporal} &amp;&amp; layer == {layer}) return texture({self._coord2name(temporal, layer)}, astuv);\"\n        yield \"    else {return vec4(0);}\"\n        yield \"}\"\n\n    def handle(self, message: ShaderMessage):\n        if self.track and isinstance(message, ShaderMessage.Shader.RecreateTextures):\n            self.make()\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        if not self.name:\n            return\n        yield Uniform(\"int\", \"iLayer\", None)\n        yield Uniform(\"vec2\",  f\"{self.name}Size\",     self.size)\n        # yield Uniform(\"float\", f\"{self.name}AspectRatio\", self.aspect_ratio)\n        yield Uniform(\"int\",   f\"{self.name}Layers\",   self.layers)\n        yield Uniform(\"int\",   f\"{self.name}Temporal\", self.temporal)\n        for (t, b, box) in self.boxes:\n            yield Uniform(\"sampler2D\", self._coord2name(t, b), box.texture)\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.name","title":"name","text":"<pre><code>name: str = None\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.__post__","title":"__post__","text":"<pre><code>__post__()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def __post__(self):\n    self.make()\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.__smart__","title":"__smart__","text":"<pre><code>__smart__(attr, value, method) -&gt; Any\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def __smart__(self, attr, value, method) -&gt; Any:\n    if (converter := attr.converter):\n        value = converter(value)\n    if getattr(self, attr.name) != value:\n        self.__setstate__({attr.name: value})\n        method()\n    return value\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.__apply__","title":"__apply__","text":"<pre><code>__apply__(attr, value) -&gt; Any\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def __apply__(self, attr, value) -&gt; Any:\n    return self.__smart__(attr, value, self.apply)\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.__make__","title":"__make__","text":"<pre><code>__make__(attr, value) -&gt; Any\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def __make__(self, attr, value) -&gt; Any:\n    return self.__smart__(attr, value, self.make)\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.final","title":"final","text":"<pre><code>final: bool = field(default=False, converter=bool)\n</code></pre> <p>Is this bound to the final FSSAA ShaderObject?</p>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.track","title":"track","text":"<pre><code>track: float = field(\n    default=0.0, converter=float, on_setattr=__make__\n)\n</code></pre> <p>Match the scene's resolution times this factor on this texture</p>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.filter","title":"filter","text":"<pre><code>filter: TextureFilter = TextureFilter.Linear.field(\n    on_setattr=__apply__\n)\n</code></pre> <p>The interpolation filter applied to the texture when sampling on the GPU</p>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.anisotropy","title":"anisotropy","text":"<pre><code>anisotropy: Anisotropy = Anisotropy.x16.field(\n    on_setattr=__apply__\n)\n</code></pre> <p>Anisotropic filter level, improves texture quality at oblique angles</p>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.mipmaps","title":"mipmaps","text":"<pre><code>mipmaps: bool = field(\n    default=False, converter=bool, on_setattr=__apply__\n)\n</code></pre> <p>Compute mipmaps for this texture, improves quality at large distances</p>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.repeat_x","title":"repeat_x","text":"<pre><code>repeat_x: bool = field(\n    default=True, converter=bool, on_setattr=__apply__\n)\n</code></pre> <p>Should the texture repeat on the X axis when out of bounds or clamp</p>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.repeat_y","title":"repeat_y","text":"<pre><code>repeat_y: bool = field(\n    default=True, converter=bool, on_setattr=__apply__\n)\n</code></pre> <p>Should the texture repeat on the Y axis when out of bounds or clamp</p>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.repeat","title":"repeat","text":"<pre><code>repeat(value: bool) -&gt; Self\n</code></pre> <p>Syntatic sugar for setting both repeat_x and repeat_y</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def repeat(self, value: bool) -&gt; Self:\n    \"\"\"Syntatic sugar for setting both repeat_x and repeat_y\"\"\"\n    self.repeat_x = self.repeat_y = bool(value)\n    return self.apply()\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.moderngl_filter","title":"moderngl_filter","text":"<pre><code>moderngl_filter: int\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.width","title":"width","text":"<pre><code>width: int\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.height","title":"height","text":"<pre><code>height: int\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.components","title":"components","text":"<pre><code>components: int = field(\n    default=4, converter=int, on_setattr=__make__\n)\n</code></pre> <p>Number of color channels per pixel (1 Grayscale, 2 RG, 3 RGB, 4 RGBA)</p>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.dtype","title":"dtype","text":"<pre><code>dtype: numpy.dtype = field(\n    default=numpy.uint8,\n    converter=numpy.dtype,\n    on_setattr=__make__,\n)\n</code></pre> <p>Data type of the texture for each pixel channel</p>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.resolution","title":"resolution","text":"<pre><code>resolution: tuple[int, int]\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.size","title":"size","text":"<pre><code>size: tuple[int, int]\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.aspect_ratio","title":"aspect_ratio","text":"<pre><code>aspect_ratio: float\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.zeros","title":"zeros","text":"<pre><code>zeros: numpy.ndarray\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.bytes_per_pixel","title":"bytes_per_pixel","text":"<pre><code>bytes_per_pixel: int\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.size_t","title":"size_t","text":"<pre><code>size_t: int\n</code></pre> <p>Size of the texture data in bytes</p>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.new_buffer","title":"new_buffer","text":"<pre><code>new_buffer() -&gt; moderngl.Buffer\n</code></pre> <p>Make a new buffer with the current size of the texture</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def new_buffer(self) -&gt; moderngl.Buffer:\n    \"\"\"Make a new buffer with the current size of the texture\"\"\"\n    return self.scene.opengl.buffer(reserve=self.size_t)\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.matrix","title":"matrix","text":"<pre><code>matrix: deque[deque[TextureBox]] = Factory(deque)\n</code></pre> <p>Matrix of previous frames (temporal) and their layers (layers)</p>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.temporal","title":"temporal","text":"<pre><code>temporal: int = field(\n    default=1, converter=int, on_setattr=__make__\n)\n</code></pre> <p>Number of previous frames to be stored</p>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.layers","title":"layers","text":"<pre><code>layers: int = field(\n    default=1, converter=int, on_setattr=__make__\n)\n</code></pre> <p>Number of layers to be stored, useful in single-shader multipass</p>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.boxes","title":"boxes","text":"<pre><code>boxes: Iterable[tuple[int, int, TextureBox]]\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.row","title":"row","text":"<pre><code>row(n: int = 0) -&gt; Iterable[TextureBox]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def row(self, n: int=0) -&gt; Iterable[TextureBox]:\n    yield from self.matrix[n]\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.make","title":"make","text":"<pre><code>make() -&gt; Self\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def make(self) -&gt; Self:\n    if (max(self.size) &gt; (limit := self.scene.opengl.info['GL_MAX_VIEWPORT_DIMS'][0])):\n        raise Exception(f\"Texture size too large for this OpenGL context: {self.size} &gt; {limit}\")\n\n    # Populate the matrix with current size\n    for row in pop_fill(self.matrix, deque, self.temporal):\n        pop_fill(row, TextureBox, self.layers)\n\n    # Recreate texture boxes\n    for (_, _, box) in self.boxes:\n        box.release()\n        box.texture = self.scene.opengl.texture(\n            components=self.components,\n            dtype=numpy2mgltype(self.dtype),\n            size=self.size)\n        box.fbo = self.scene.opengl.framebuffer(\n            color_attachments=[box.texture])\n\n        # Rewrite previous data if same size\n        if box.data and (self.size_t == len(box.data)):\n            box.texture.write(box.data)\n\n    return self.apply()\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.apply","title":"apply","text":"<pre><code>apply() -&gt; Self\n</code></pre> <p>Apply filters and flags to all textures</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def apply(self) -&gt; Self:\n    \"\"\"Apply filters and flags to all textures\"\"\"\n    for (_, _, box) in self.boxes:\n        if self.mipmaps:\n            box.texture.build_mipmaps()\n        box.texture.filter     = (self.moderngl_filter, self.moderngl_filter)\n        box.texture.anisotropy = self.anisotropy.value\n        box.texture.repeat_x   = self.repeat_x\n        box.texture.repeat_y   = self.repeat_y\n    return self\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.destroy","title":"destroy","text":"<pre><code>destroy() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def destroy(self) -&gt; None:\n    for (_, _, box) in self.boxes:\n        box.release()\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.get_box","title":"get_box","text":"<pre><code>get_box(\n    temporal: int = 0, layer: int = -1\n) -&gt; Optional[TextureBox]\n</code></pre> <p>Note: Points to the current final box</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def get_box(self, temporal: int=0, layer: int=-1) -&gt; Optional[TextureBox]:\n    \"\"\"Note: Points to the current final box\"\"\"\n    return list_get(list_get(self.matrix, temporal), layer)\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.fbo","title":"fbo","text":"<pre><code>fbo: moderngl.Framebuffer\n</code></pre> <p>Final and most Recent FBO of this Texture</p>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.texture","title":"texture","text":"<pre><code>texture: moderngl.Texture\n</code></pre> <p>Final and most Recent Texture of this Texture</p>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.roll","title":"roll","text":"<pre><code>roll(n: int = 1) -&gt; Self\n</code></pre> <p>Rotate the temporal layers by $n times</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def roll(self, n: int=1) -&gt; Self:\n    \"\"\"Rotate the temporal layers by $n times\"\"\"\n    self.matrix.rotate(n)\n    return self\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.write","title":"write","text":"<pre><code>write(\n    data: bytes = None,\n    *,\n    temporal: int = 0,\n    layer: int = -1,\n    viewport: tuple[int, int, int, int] = None\n) -&gt; Self\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def write(self,\n    data: bytes=None,\n    *,\n    temporal: int=0,\n    layer: int=-1,\n    viewport: tuple[int, int, int, int]=None,\n) -&gt; Self:\n    box = self.get_box(temporal, layer)\n    box.texture.write(data, viewport=viewport)\n    if (not viewport):\n        box.data = bytes(data)\n    box.empty = False\n    return self\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.from_numpy","title":"from_numpy","text":"<pre><code>from_numpy(data: numpy.ndarray) -&gt; Self\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def from_numpy(self, data: numpy.ndarray) -&gt; Self:\n    unpack = list(data.shape)\n    if len(unpack) == 2:\n        unpack.append(1)\n    self._height, self._width, self.components = unpack\n    self.dtype = data.dtype\n    self.make()\n    self.write(numpy.flip(data, axis=0).tobytes())\n    return self\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.from_image","title":"from_image","text":"<pre><code>from_image(image: LoadableImage) -&gt; Self\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def from_image(self, image: LoadableImage) -&gt; Self:\n    return self.from_numpy(numpy.array(LoadImage(image)))\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.clear","title":"clear","text":"<pre><code>clear(temporal: int = 0, layer: int = -1) -&gt; Self\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def clear(self, temporal: int=0, layer: int=-1) -&gt; Self:\n    return self.write(self.zeros, temporal=temporal, layer=layer)\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.is_empty","title":"is_empty","text":"<pre><code>is_empty(temporal: int = 0, layer: int = -1) -&gt; bool\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def is_empty(self, temporal: int=0, layer: int=-1) -&gt; bool:\n    return self.get_box(temporal, layer).empty\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.defines","title":"defines","text":"<pre><code>defines() -&gt; Iterable[str]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def defines(self) -&gt; Iterable[str]:\n    if not self.name:\n        return\n\n    # Define last frames as plain name (iTex0x(-1) -&gt; iTex, iTex1x(-1) -&gt; iTex1)\n    for temporal in range(self.temporal):\n        yield f\"#define {self.name}{temporal or ''} {self.name}{temporal}x{self.layers-1}\"\n\n    # Function to sample a dynamic temporal, layer\n    yield f\"\\nvec4 {self.name}Texture(int temporal, int layer, vec2 astuv) {{\"\n    yield \"    if (false) return vec4(0);\"\n    for temporal in range(self.temporal):\n        for layer in range(self.layers):\n            yield f\"    else if (temporal == {temporal} &amp;&amp; layer == {layer}) return texture({self._coord2name(temporal, layer)}, astuv);\"\n    yield \"    else {return vec4(0);}\"\n    yield \"}\"\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.handle","title":"handle","text":"<pre><code>handle(message: ShaderMessage)\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def handle(self, message: ShaderMessage):\n    if self.track and isinstance(message, ShaderMessage.Shader.RecreateTextures):\n        self.make()\n</code></pre>"},{"location":"code/shaderflow/texture/#ShaderFlow.Texture.ShaderTexture.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Texture.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    if not self.name:\n        return\n    yield Uniform(\"int\", \"iLayer\", None)\n    yield Uniform(\"vec2\",  f\"{self.name}Size\",     self.size)\n    # yield Uniform(\"float\", f\"{self.name}AspectRatio\", self.aspect_ratio)\n    yield Uniform(\"int\",   f\"{self.name}Layers\",   self.layers)\n    yield Uniform(\"int\",   f\"{self.name}Temporal\", self.temporal)\n    for (t, b, box) in self.boxes:\n        yield Uniform(\"sampler2D\", self._coord2name(t, b), box.texture)\n</code></pre>"},{"location":"code/shaderflow/variable/","title":"File: <code>ShaderFlow/Variable.py</code>","text":""},{"location":"code/shaderflow/variable/#ShaderFlow.Variable","title":"ShaderFlow.Variable","text":""},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.GlslQualifier","title":"GlslQualifier","text":"<pre><code>GlslQualifier = Literal['uniform', 'attribute', 'varying']\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.GlslType","title":"GlslType","text":"<pre><code>GlslType = Literal[\n    \"sampler2D\",\n    \"float\",\n    \"int\",\n    \"bool\",\n    \"vec2\",\n    \"vec3\",\n    \"vec4\",\n    \"mat2\",\n    \"mat3\",\n    \"mat4\",\n]\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.GlslDirection","title":"GlslDirection","text":"<pre><code>GlslDirection = Literal['in', 'out']\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.GlslInterpolation","title":"GlslInterpolation","text":"<pre><code>GlslInterpolation = Literal[\n    \"flat\", \"smooth\", \"noperspective\"\n]\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.DECLARATION_ORDER","title":"DECLARATION_ORDER","text":"<pre><code>DECLARATION_ORDER = (\n    \"interpolation\",\n    \"direction\",\n    \"qualifier\",\n    \"type\",\n    \"name\",\n)\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.ShaderVariable","title":"ShaderVariable","text":"<p>               Bases: <code>BrokenFluent</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Variable.py</code> <pre><code>@define(eq=False, slots=True)\nclass ShaderVariable(BrokenFluent):\n    type: GlslType\n    name: str\n    value: Optional[Any] = None\n    qualifier: Optional[GlslQualifier] = None\n    direction: Optional[GlslDirection] = None\n    interpolation: Optional[GlslInterpolation] = None\n\n    def __hash__(self) -&gt; int:\n        return hash(self.name)\n\n    def __eq__(self, other: Self) -&gt; bool:\n        return (self.name == other.name)\n\n    @property\n    def size_string(self) -&gt; str:\n        return dict(\n            float=\"f\",\n            int=\"i\",\n            bool=\"i\",\n            vec2=\"2f\",\n            vec3=\"3f\",\n            vec4=\"4f\",\n        ).get(self.type)\n\n    @property\n    def declaration(self) -&gt; str:\n        parts = (getattr(self, key, None) for key in DECLARATION_ORDER)\n        return \" \".join(filter(None, parts)).strip() + \";\"\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.ShaderVariable.type","title":"type","text":"<pre><code>type: GlslType\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.ShaderVariable.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.ShaderVariable.value","title":"value","text":"<pre><code>value: Optional[Any] = None\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.ShaderVariable.qualifier","title":"qualifier","text":"<pre><code>qualifier: Optional[GlslQualifier] = None\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.ShaderVariable.direction","title":"direction","text":"<pre><code>direction: Optional[GlslDirection] = None\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.ShaderVariable.interpolation","title":"interpolation","text":"<pre><code>interpolation: Optional[GlslInterpolation] = None\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.ShaderVariable.__hash__","title":"__hash__","text":"<pre><code>__hash__() -&gt; int\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Variable.py</code> <pre><code>def __hash__(self) -&gt; int:\n    return hash(self.name)\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.ShaderVariable.__eq__","title":"__eq__","text":"<pre><code>__eq__(other: Self) -&gt; bool\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Variable.py</code> <pre><code>def __eq__(self, other: Self) -&gt; bool:\n    return (self.name == other.name)\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.ShaderVariable.size_string","title":"size_string","text":"<pre><code>size_string: str\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.ShaderVariable.declaration","title":"declaration","text":"<pre><code>declaration: str\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.Uniform","title":"Uniform","text":"<p>               Bases: <code>ShaderVariable</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Variable.py</code> <pre><code>@define(eq=False, slots=True)\nclass Uniform(ShaderVariable):\n    qualifier: GlslQualifier = \"uniform\"\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.Uniform.qualifier","title":"qualifier","text":"<pre><code>qualifier: GlslQualifier = 'uniform'\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.InVariable","title":"InVariable","text":"<p>               Bases: <code>ShaderVariable</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Variable.py</code> <pre><code>@define(eq=False, slots=True)\nclass InVariable(ShaderVariable):\n    direction: GlslDirection = \"in\"\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.InVariable.direction","title":"direction","text":"<pre><code>direction: GlslDirection = 'in'\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.OutVariable","title":"OutVariable","text":"<p>               Bases: <code>ShaderVariable</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Variable.py</code> <pre><code>@define(eq=False, slots=True)\nclass OutVariable(ShaderVariable):\n    direction: GlslDirection = \"out\"\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.OutVariable.direction","title":"direction","text":"<pre><code>direction: GlslDirection = 'out'\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.FlatVariable","title":"FlatVariable","text":"<p>               Bases: <code>ShaderVariable</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Variable.py</code> <pre><code>@define(eq=False, slots=True)\nclass FlatVariable(ShaderVariable):\n    interpolation: GlslInterpolation = \"flat\"\n</code></pre>"},{"location":"code/shaderflow/variable/#ShaderFlow.Variable.FlatVariable.interpolation","title":"interpolation","text":"<pre><code>interpolation: GlslInterpolation = 'flat'\n</code></pre>"},{"location":"code/shaderflow/common/__init__/","title":"File: <code>ShaderFlow/Common/__init__.py</code>","text":""},{"location":"code/shaderflow/common/__init__/#ShaderFlow.Common","title":"ShaderFlow.Common","text":""},{"location":"code/shaderflow/common/notes/","title":"File: <code>ShaderFlow/Common/Notes.py</code>","text":""},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes","title":"ShaderFlow.Common.Notes","text":""},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.PIANO_NOTES","title":"PIANO_NOTES","text":"<pre><code>PIANO_NOTES = 'C C# D D# E F F# G G# A A# B'.split()\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote","title":"BrokenPianoNote","text":"<p>               Bases: <code>BrokenFluent</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Common/Notes.py</code> <pre><code>@define(eq=False)\nclass BrokenPianoNote(BrokenFluent):\n    note:     int   = 60\n    start:    float = 0\n    end:      float = 0\n    channel:  int   = 0\n    velocity: int   = 100\n    tuning:   float = 440\n\n    def __hash__(self):\n        return hash((self.note, self.start, self.end, self.channel, self.velocity))\n\n    def idk_hash(self):\n        return hash((self.note, self.channel))\n\n    def __eq__(self, other):\n        return hash(self) == hash(other)\n\n    # # Initialization\n\n    @classmethod\n    @functools.lru_cache\n    def from_index(cls, note: int, **kwargs) -&gt; \"BrokenPianoNote\":\n        return cls(note=note, **kwargs)\n\n    @classmethod\n    @functools.lru_cache\n    def from_name(cls, name: str, **kwargs) -&gt; \"BrokenPianoNote\":\n        return cls(note=BrokenPianoNote.name_to_index(name), **kwargs)\n\n    @classmethod\n    @functools.lru_cache\n    def from_frequency(cls, frequency: float, **kwargs) -&gt; \"BrokenPianoNote\":\n        return cls(note=BrokenPianoNote.frequency_to_index(frequency), **kwargs)\n\n    @classmethod\n    @functools.lru_cache\n    def get(cls, object: Any, **kwargs) -&gt; Self:\n        if isinstance(object, BrokenPianoNote):\n            return object(**kwargs)\n        elif isinstance(object, int):\n            return cls.from_index(object, **kwargs)\n        elif isinstance(object, str):\n            return cls.from_name(object, **kwargs)\n        elif isinstance(object, float):\n            return cls.from_frequency(object, **kwargs)\n        return cls(**kwargs)\n\n    # # Conversion\n\n    @staticmethod\n    @functools.lru_cache\n    def index_to_name(index: int) -&gt; str:\n        return f\"{PIANO_NOTES[index % 12]}{index//12 - 1}\"\n\n    @staticmethod\n    @functools.lru_cache\n    def index_to_frequency(index: int, *, tuning: float=440) -&gt; float:\n        return tuning * 2**((index - 69)/12)\n\n    @staticmethod\n    @functools.lru_cache\n    def name_to_index(name: str) -&gt; int:\n        note, octave = name[:-1].upper(), int(name[-1])\n        return PIANO_NOTES.index(note) + 12*(octave + 1)\n\n    @staticmethod\n    @functools.lru_cache\n    def name_to_frequency(name: str, *, tuning: float=440) -&gt; float:\n        return BrokenPianoNote.index_to_frequency(BrokenPianoNote.name_to_index(name), tuning=tuning)\n\n    @staticmethod\n    @functools.lru_cache\n    def frequency_to_index(frequency: float, *, tuning: float=440) -&gt; int:\n        return round(12*math.log2(frequency/tuning) + 69)\n\n    @staticmethod\n    @functools.lru_cache\n    def frequency_to_name(frequency: float, *, tuning: float=440) -&gt; str:\n        return BrokenPianoNote.index_to_name(BrokenPianoNote.frequency_to_index(frequency, tuning=tuning))\n\n    # # Utilities\n\n    @property\n    def frequency(self) -&gt; float:\n        return BrokenPianoNote.index_to_frequency(self.note, tuning=self.tuning)\n\n    @frequency.setter\n    def frequency(self, value: float):\n        self.note = BrokenPianoNote.frequency_to_index(value, tuning=self.tuning)\n\n    @property\n    def name(self) -&gt; str:\n        return BrokenPianoNote.index_to_name(self.note)\n\n    @name.setter\n    def name(self, value: str):\n        self.note = BrokenPianoNote.name_to_index(value)\n\n    # Black and White\n\n    def is_white(note: int) -&gt; bool:\n        return (note % 12) in {0, 2, 4, 5, 7, 9, 11}\n\n    def is_black(note: int) -&gt; bool:\n        return (note % 12) in {1, 3, 6, 8, 10}\n\n    @property\n    def white(self) -&gt; bool:\n        return BrokenPianoNote.is_white(self.note)\n\n    @property\n    def black(self) -&gt; bool:\n        return BrokenPianoNote.is_black(self.note)\n\n    # Temporal\n\n    @property\n    def duration(self):\n        return self.end - self.start\n\n    @duration.setter\n    def duration(self, value: float):\n        self.end = self.start + value\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.note","title":"note","text":"<pre><code>note: int = 60\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.start","title":"start","text":"<pre><code>start: float = 0\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.end","title":"end","text":"<pre><code>end: float = 0\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.channel","title":"channel","text":"<pre><code>channel: int = 0\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.velocity","title":"velocity","text":"<pre><code>velocity: int = 100\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.tuning","title":"tuning","text":"<pre><code>tuning: float = 440\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.__hash__","title":"__hash__","text":"<pre><code>__hash__()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Common/Notes.py</code> <pre><code>def __hash__(self):\n    return hash((self.note, self.start, self.end, self.channel, self.velocity))\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.idk_hash","title":"idk_hash","text":"<pre><code>idk_hash()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Common/Notes.py</code> <pre><code>def idk_hash(self):\n    return hash((self.note, self.channel))\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.__eq__","title":"__eq__","text":"<pre><code>__eq__(other)\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Common/Notes.py</code> <pre><code>def __eq__(self, other):\n    return hash(self) == hash(other)\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.from_index","title":"from_index","text":"<pre><code>from_index(note: int, **kwargs) -&gt; BrokenPianoNote\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Common/Notes.py</code> <pre><code>@classmethod\n@functools.lru_cache\ndef from_index(cls, note: int, **kwargs) -&gt; \"BrokenPianoNote\":\n    return cls(note=note, **kwargs)\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.from_name","title":"from_name","text":"<pre><code>from_name(name: str, **kwargs) -&gt; BrokenPianoNote\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Common/Notes.py</code> <pre><code>@classmethod\n@functools.lru_cache\ndef from_name(cls, name: str, **kwargs) -&gt; \"BrokenPianoNote\":\n    return cls(note=BrokenPianoNote.name_to_index(name), **kwargs)\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.from_frequency","title":"from_frequency","text":"<pre><code>from_frequency(\n    frequency: float, **kwargs\n) -&gt; BrokenPianoNote\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Common/Notes.py</code> <pre><code>@classmethod\n@functools.lru_cache\ndef from_frequency(cls, frequency: float, **kwargs) -&gt; \"BrokenPianoNote\":\n    return cls(note=BrokenPianoNote.frequency_to_index(frequency), **kwargs)\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.get","title":"get","text":"<pre><code>get(object: Any, **kwargs) -&gt; Self\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Common/Notes.py</code> <pre><code>@classmethod\n@functools.lru_cache\ndef get(cls, object: Any, **kwargs) -&gt; Self:\n    if isinstance(object, BrokenPianoNote):\n        return object(**kwargs)\n    elif isinstance(object, int):\n        return cls.from_index(object, **kwargs)\n    elif isinstance(object, str):\n        return cls.from_name(object, **kwargs)\n    elif isinstance(object, float):\n        return cls.from_frequency(object, **kwargs)\n    return cls(**kwargs)\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.index_to_name","title":"index_to_name","text":"<pre><code>index_to_name(index: int) -&gt; str\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Common/Notes.py</code> <pre><code>@staticmethod\n@functools.lru_cache\ndef index_to_name(index: int) -&gt; str:\n    return f\"{PIANO_NOTES[index % 12]}{index//12 - 1}\"\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.index_to_frequency","title":"index_to_frequency","text":"<pre><code>index_to_frequency(\n    index: int, *, tuning: float = 440\n) -&gt; float\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Common/Notes.py</code> <pre><code>@staticmethod\n@functools.lru_cache\ndef index_to_frequency(index: int, *, tuning: float=440) -&gt; float:\n    return tuning * 2**((index - 69)/12)\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.name_to_index","title":"name_to_index","text":"<pre><code>name_to_index(name: str) -&gt; int\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Common/Notes.py</code> <pre><code>@staticmethod\n@functools.lru_cache\ndef name_to_index(name: str) -&gt; int:\n    note, octave = name[:-1].upper(), int(name[-1])\n    return PIANO_NOTES.index(note) + 12*(octave + 1)\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.name_to_frequency","title":"name_to_frequency","text":"<pre><code>name_to_frequency(\n    name: str, *, tuning: float = 440\n) -&gt; float\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Common/Notes.py</code> <pre><code>@staticmethod\n@functools.lru_cache\ndef name_to_frequency(name: str, *, tuning: float=440) -&gt; float:\n    return BrokenPianoNote.index_to_frequency(BrokenPianoNote.name_to_index(name), tuning=tuning)\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.frequency_to_index","title":"frequency_to_index","text":"<pre><code>frequency_to_index(\n    frequency: float, *, tuning: float = 440\n) -&gt; int\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Common/Notes.py</code> <pre><code>@staticmethod\n@functools.lru_cache\ndef frequency_to_index(frequency: float, *, tuning: float=440) -&gt; int:\n    return round(12*math.log2(frequency/tuning) + 69)\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.frequency_to_name","title":"frequency_to_name","text":"<pre><code>frequency_to_name(\n    frequency: float, *, tuning: float = 440\n) -&gt; str\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Common/Notes.py</code> <pre><code>@staticmethod\n@functools.lru_cache\ndef frequency_to_name(frequency: float, *, tuning: float=440) -&gt; str:\n    return BrokenPianoNote.index_to_name(BrokenPianoNote.frequency_to_index(frequency, tuning=tuning))\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.frequency","title":"frequency","text":"<pre><code>frequency: float\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.is_white","title":"is_white","text":"<pre><code>is_white(note: int) -&gt; bool\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Common/Notes.py</code> <pre><code>def is_white(note: int) -&gt; bool:\n    return (note % 12) in {0, 2, 4, 5, 7, 9, 11}\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.is_black","title":"is_black","text":"<pre><code>is_black(note: int) -&gt; bool\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Common/Notes.py</code> <pre><code>def is_black(note: int) -&gt; bool:\n    return (note % 12) in {1, 3, 6, 8, 10}\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.white","title":"white","text":"<pre><code>white: bool\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.black","title":"black","text":"<pre><code>black: bool\n</code></pre>"},{"location":"code/shaderflow/common/notes/#ShaderFlow.Common.Notes.BrokenPianoNote.duration","title":"duration","text":"<pre><code>duration\n</code></pre>"},{"location":"code/shaderflow/imgui/__init__/","title":"File: <code>ShaderFlow/Imgui/__init__.py</code>","text":""},{"location":"code/shaderflow/imgui/__init__/#ShaderFlow.Imgui","title":"ShaderFlow.Imgui","text":""},{"location":"code/shaderflow/modules/__init__/","title":"File: <code>ShaderFlow/Modules/__init__.py</code>","text":""},{"location":"code/shaderflow/modules/__init__/#ShaderFlow.Modules","title":"ShaderFlow.Modules","text":""},{"location":"code/shaderflow/modules/audio/","title":"File: <code>ShaderFlow/Modules/Audio.py</code>","text":""},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio","title":"ShaderFlow.Modules.Audio","text":""},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.fuzzy_string_search","title":"fuzzy_string_search","text":"<pre><code>fuzzy_string_search(\n    string: str,\n    choices: list[str],\n    many: int = 1,\n    minimum_score: int = 0,\n) -&gt; list[tuple[str, int]]\n</code></pre> <p>Fuzzy search a string in a list of strings, returns a list of matches</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def fuzzy_string_search(string: str, choices: list[str], many: int=1, minimum_score: int=0) -&gt; list[tuple[str, int]]:\n    \"\"\"Fuzzy search a string in a list of strings, returns a list of matches\"\"\"\n    with warnings.catch_warnings():\n        warnings.filterwarnings(\"ignore\")\n        import thefuzz.process\n        result = thefuzz.process.extract(string, choices, limit=many)\n        if many == 1:\n            return result[0]\n        return result\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.root_mean_square","title":"root_mean_square","text":"<pre><code>root_mean_square(data) -&gt; float\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def root_mean_square(data) -&gt; float:\n    return numpy.sqrt(numpy.mean(numpy.square(data)))\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudioMode","title":"BrokenAudioMode","text":"<p>               Bases: <code>BrokenEnum</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>class BrokenAudioMode(BrokenEnum):\n    Realtime = \"realtime\"\n    File     = \"file\"\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudioMode.Realtime","title":"Realtime","text":"<pre><code>Realtime = 'realtime'\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudioMode.File","title":"File","text":"<pre><code>File = 'file'\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio","title":"BrokenAudio","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>@define(slots=False)\nclass BrokenAudio:\n    mode: BrokenAudioMode = BrokenAudioMode.Realtime.field()\n\n    data: numpy.ndarray = None\n    \"\"\"Progressive audio data, shape: (channels, samples)\"\"\"\n\n    dtype: numpy.dtype = numpy.float32\n    \"\"\"Data type of the audio samples\"\"\"\n\n    tell: int = 0\n    \"\"\"The number of samples read from the audio so far\"\"\"\n\n    def __post__(self):\n        BrokenWorker.thread(self._play_thread)\n        BrokenWorker.thread(self._record_thread)\n        self.create_buffer()\n\n    @property\n    def buffer_size(self) -&gt; Samples:\n        return int(self.samplerate*self.buffer_seconds)\n\n    @property\n    def shape(self) -&gt; tuple[Channels, Samples]:\n        return (self.channels, self.buffer_size)\n\n    def create_buffer(self) -&gt; None:\n        self.data = numpy.zeros(self.shape, dtype=self.dtype)\n\n    def add_data(self, data: numpy.ndarray) -&gt; Optional[numpy.ndarray]:\n        \"\"\"\n        Roll the data to the left by the length of the new data; copy new data to the end\n        Note: Channel count must match the buffer's one\n\n        Args:\n            data: The new data of shape: (channels, length)\n\n        Returns:\n            The data that was written, if any\n        \"\"\"\n        data = numpy.array(data, dtype=self.dtype)\n        length = data.shape[1]\n        self.data = numpy.roll(self.data, -length, axis=1)\n        self.data[:, -length:] = data\n        self.tell += length\n        return data\n\n    def get_data_between_samples(self, start: Samples, end: Samples) -&gt; numpy.ndarray:\n        return self.data[:, int(start):int(end)]\n\n    def get_data_between_seconds(self, start: Seconds, end: Seconds) -&gt; numpy.ndarray:\n        return self.get_data_between_samples(start*self.samplerate, end*self.samplerate)\n\n    def get_last_n_samples(self, n: Samples, *, offset: Samples=0) -&gt; numpy.ndarray:\n        return self.data[:, -(int(n+offset) + 1) : -(int(offset) + 1)]\n\n    def get_last_n_seconds(self, n: Seconds) -&gt; numpy.ndarray:\n        return self.get_last_n_samples(n*self.samplerate)\n\n    # -------------------------------------------|\n    # Sample Rate\n\n    _samplerate: Hertz = 44100\n\n    @property\n    def samplerate(self) -&gt; Hertz:\n        \"\"\"How many data points per second the audio is sampled at. Defaults to 44100\"\"\"\n        return (self._samplerate or 44100)\n\n    @samplerate.setter\n    def samplerate(self, value: Hertz):\n        self._samplerate = value\n        self.create_buffer()\n\n    # -------------------------------------------|\n    # Channels\n\n    _channels: int = 2\n\n    @property\n    def channels(self) -&gt; int:\n        \"\"\"Number of audio streams (channels). Two is stereo, one is mono. Defaults to 2\"\"\"\n        return self._channels or 2\n\n    @channels.setter\n    def channels(self, value: int):\n        self._channels = value\n        self.create_buffer()\n\n    # -------------------------------------------|\n    # History\n\n    _buffer_seconds: Seconds = 30.0\n\n    @property\n    def buffer_seconds(self) -&gt; Seconds:\n        \"\"\"Buffer length in seconds. Cheap on ram and fast, ideally have a decent side\"\"\"\n        # Note: To convince yourself, (48000 Hz) * (2 Channels) * (30 sec) * (f32=4 bytes) = 11 MB\n        return self._buffer_seconds\n\n    @buffer_seconds.setter\n    def buffer_seconds(self, value: Seconds):\n        self._buffer_seconds = value\n        self.create_buffer()\n\n    # -------------------------------------------|\n    # File\n\n    _file: Path = None\n    _file_reader: BrokenAudioReader = None\n    _file_stream: Generator[tuple[Seconds, numpy.ndarray], None, Seconds] = None\n\n    @property\n    def file(self) -&gt; Path:\n        return self._file\n\n    @file.setter\n    def file(self, value: Path):\n        self._file = BrokenPath.get(value)\n        if self._file and not (self._file.exists()):\n            return log.minor(f\"Audio File doesn't exist ({value})\")\n        self.samplerate   = BrokenFFmpeg.get_audio_samplerate(self.file, echo=False)\n        self.channels     = BrokenFFmpeg.get_audio_channels(self.file, echo=False)\n        self._file_reader = BrokenAudioReader(path=self.file)\n        self._file_stream = self._file_reader.stream\n        self.mode         = BrokenAudioMode.File\n        self.close_recorder()\n\n    # -------------------------------------------|\n    # Soundcard\n\n    recorder_device: Any = None\n    recorder: Any = None\n\n    @staticmethod\n    def recorders() -&gt; Iterable['soundcard._Recorder']:\n        yield from soundcard.all_microphones(include_loopback=True)\n\n    @staticmethod\n    def recorders_names() -&gt; Iterable[str]:\n        yield from map(lambda device: device.name, BrokenAudio.recorders())\n\n    speaker_device: Any = None\n    speaker: Any = None\n\n    @staticmethod\n    def speakers() -&gt; Iterable['soundcard._Speaker']:\n        yield from soundcard.all_speakers()\n\n    @staticmethod\n    def speakers_names() -&gt; Iterable[str]:\n        yield from map(lambda device: device.name, BrokenAudio.speakers())\n\n    def print_recorders(self) -&gt; None:\n        \"\"\"List and print all available Audio recording devices\"\"\"\n        log.info(\"Recording Devices:\")\n        for i, device in enumerate(BrokenAudio.recorders()):\n            log.info(f\"\u2022 ({i:2d}) Recorder: '{device.name}'\")\n\n    def print_speakers(self) -&gt; None:\n        \"\"\"List and print all available Audio playback devices\"\"\"\n        log.info(\"Playback Devices:\")\n        for i, device in enumerate(BrokenAudio.speakers()):\n            log.info(f\"\u2022 ({i:2d}) Speaker: '{device.name}'\")\n\n    def __fuzzy__(self, name: str, devices: Iterable[str]) -&gt; Optional[str]:\n        device_name = fuzzy_string_search(name, devices)[0]\n        return next(filter(lambda x: x.name == device_name, devices), None)\n\n    def open_speaker(self,\n        name: str=None,\n        *,\n        samplerate: Hertz=None,\n    ) -&gt; Self:\n        \"\"\"\n        Open a SoundCard device for playing real-time audio.\n\n        Args:\n            name: The name of the device to open. If None, the default speaker is used. The search\n                is fuzzy, so the match does not need to be exact\n\n            samplerate: If None, gets self.samplerate\n\n        Returns:\n            Self, Fluent interface\n        \"\"\"\n        (self.speaker or Nothing()).__exit__(None, None, None)\n\n        # Search for the Speaker\n        if name is None:\n            self.speaker_device = soundcard.default_speaker()\n        else:\n            self.speaker_device = self.__fuzzy__(name, self.speakers_names)\n\n        # Open the speaker\n        log.info(f\"Opening Speaker with Device ({self.speaker_device})\")\n        self.speaker = self.speaker_device.player(\n            samplerate=samplerate or self.samplerate,\n        ).__enter__()\n        return self\n\n    def close_speaker(self) -&gt; Self:\n        (self.speaker or Nothing()).__exit__(None, None, None)\n        self.speaker = None\n        return self\n\n    def open_recorder(self,\n        name: str=None,\n        *,\n        samplerate: Hertz=44100,\n        channels: list[int]=None,\n        blocksize: int=512,\n    ) -&gt; Self:\n        \"\"\"\n        Open a SoundCard device for recording real-time audio.\n\n        Args:\n            name: The name of the device to open. If None, the first loopback device or default\n                microphone is used. The search is fuzzy, so the match does not need to be exact\n\n            samplerate: The desired sample rate of the audio\n\n            channels: Channels to read from the device.\n                \u2022 None: Record all available channels\n                \u2022 list[int]: Record only the specified channels\n                \u2022 -1: (Linux: Mono mix of all channels) (MacOS: Silence)\n\n            blocksize: Desired minimum latency in samples, and also the number of recorded\n                samples at a time. Lower values reduces latency and increases CPU usage, which\n                funnily enough might cause latency issues\n\n        Returns:\n            Self, Fluent interface\n        \"\"\"\n        self.close_recorder()\n\n        # Search for default loopback device\n        if name is None:\n            for device in self.recorders():\n                if device.isloopback:\n                    self.recorder_device = device\n                    break\n            self.recorder_device = (self.recorder_device or soundcard.default_microphone())\n        else:\n            self.recorder_device = self.__fuzzy__(name, self.recorders_names())\n\n        # Open the recorder\n        log.info(f\"Opening Recorder with Device ({self.recorder_device})\")\n        self.recorder = self.recorder_device.recorder(\n            samplerate=samplerate,\n            channels=channels,\n            blocksize=blocksize,\n        ).__enter__()\n\n        # Update properties\n        self.samplerate = getattr(self.recorder, \"_samplerate\", samplerate)\n        self.channels   = self.recorder_device.channels\n        self.mode       = BrokenAudioMode.Realtime\n        return self\n\n    def close_recorder(self) -&gt; Self:\n        (self.recorder or Nothing()).__exit__(None, None, None)\n        self.recorder = None\n        return self\n\n    def record(self, numframes: int=None) -&gt; Optional[numpy.ndarray]:\n        \"\"\"Record a number of samples from the recorder. 'None' records all\"\"\"\n        if (self.recorder is not None):\n            return self.add_data(self.recorder.record(numframes=numframes).T)\n\n    def _record_thread(self) -&gt; None:\n        while True:\n            try:\n                if (self.record() is None):\n                    time.sleep(0.01)\n            except Exception:\n                pass\n\n    # # Playing\n\n    _play_queue: deque[numpy.ndarray] = Factory(deque)\n\n    def play(self, data: numpy.ndarray) -&gt; None:\n        \"\"\"Add a numpy array to the play queue. for non-blocking playback\"\"\"\n        if (self.speaker_device is not None):\n            self._play_queue.append(data)\n\n    def _play_thread(self) -&gt; None:\n        while True:\n            if (self._play_queue and self.speaker):\n                self.speaker.play(self._play_queue.popleft().T)\n                continue\n            time.sleep(0.01)\n\n    # -------------------------------------------|\n    # Properties utils\n\n    @property\n    def stereo(self) -&gt; bool:\n        return (self.channels == 2)\n\n    @property\n    def mono(self) -&gt; bool:\n        return (self.channels == 1)\n\n    @property\n    def duration(self) -&gt; Seconds:\n        if self.mode == BrokenAudioMode.Realtime:\n            return math.inf\n        if self.mode == BrokenAudioMode.File:\n            return BrokenFFmpeg.get_audio_duration(self.file)\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.mode","title":"mode","text":"<pre><code>mode: BrokenAudioMode = BrokenAudioMode.Realtime.field()\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.data","title":"data","text":"<pre><code>data: numpy.ndarray = None\n</code></pre> <p>Progressive audio data, shape: (channels, samples)</p>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.dtype","title":"dtype","text":"<pre><code>dtype: numpy.dtype = numpy.float32\n</code></pre> <p>Data type of the audio samples</p>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.tell","title":"tell","text":"<pre><code>tell: int = 0\n</code></pre> <p>The number of samples read from the audio so far</p>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.__post__","title":"__post__","text":"<pre><code>__post__()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def __post__(self):\n    BrokenWorker.thread(self._play_thread)\n    BrokenWorker.thread(self._record_thread)\n    self.create_buffer()\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.buffer_size","title":"buffer_size","text":"<pre><code>buffer_size: Samples\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.shape","title":"shape","text":"<pre><code>shape: tuple[Channels, Samples]\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.create_buffer","title":"create_buffer","text":"<pre><code>create_buffer() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def create_buffer(self) -&gt; None:\n    self.data = numpy.zeros(self.shape, dtype=self.dtype)\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.add_data","title":"add_data","text":"<pre><code>add_data(data: numpy.ndarray) -&gt; Optional[numpy.ndarray]\n</code></pre> <p>Roll the data to the left by the length of the new data; copy new data to the end Note: Channel count must match the buffer's one</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>numpy.ndarray</code>)           \u2013            <p>The new data of shape: (channels, length)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[numpy.ndarray]</code>           \u2013            <p>The data that was written, if any</p> </li> </ul> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def add_data(self, data: numpy.ndarray) -&gt; Optional[numpy.ndarray]:\n    \"\"\"\n    Roll the data to the left by the length of the new data; copy new data to the end\n    Note: Channel count must match the buffer's one\n\n    Args:\n        data: The new data of shape: (channels, length)\n\n    Returns:\n        The data that was written, if any\n    \"\"\"\n    data = numpy.array(data, dtype=self.dtype)\n    length = data.shape[1]\n    self.data = numpy.roll(self.data, -length, axis=1)\n    self.data[:, -length:] = data\n    self.tell += length\n    return data\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.get_data_between_samples","title":"get_data_between_samples","text":"<pre><code>get_data_between_samples(\n    start: Samples, end: Samples\n) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def get_data_between_samples(self, start: Samples, end: Samples) -&gt; numpy.ndarray:\n    return self.data[:, int(start):int(end)]\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.get_data_between_seconds","title":"get_data_between_seconds","text":"<pre><code>get_data_between_seconds(\n    start: Seconds, end: Seconds\n) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def get_data_between_seconds(self, start: Seconds, end: Seconds) -&gt; numpy.ndarray:\n    return self.get_data_between_samples(start*self.samplerate, end*self.samplerate)\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.get_last_n_samples","title":"get_last_n_samples","text":"<pre><code>get_last_n_samples(\n    n: Samples, *, offset: Samples = 0\n) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def get_last_n_samples(self, n: Samples, *, offset: Samples=0) -&gt; numpy.ndarray:\n    return self.data[:, -(int(n+offset) + 1) : -(int(offset) + 1)]\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.get_last_n_seconds","title":"get_last_n_seconds","text":"<pre><code>get_last_n_seconds(n: Seconds) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def get_last_n_seconds(self, n: Seconds) -&gt; numpy.ndarray:\n    return self.get_last_n_samples(n*self.samplerate)\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.samplerate","title":"samplerate","text":"<pre><code>samplerate: Hertz\n</code></pre> <p>How many data points per second the audio is sampled at. Defaults to 44100</p>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.channels","title":"channels","text":"<pre><code>channels: int\n</code></pre> <p>Number of audio streams (channels). Two is stereo, one is mono. Defaults to 2</p>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.buffer_seconds","title":"buffer_seconds","text":"<pre><code>buffer_seconds: Seconds\n</code></pre> <p>Buffer length in seconds. Cheap on ram and fast, ideally have a decent side</p>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.file","title":"file","text":"<pre><code>file: Path\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.recorder_device","title":"recorder_device","text":"<pre><code>recorder_device: Any = None\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.recorder","title":"recorder","text":"<pre><code>recorder: Any = None\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.recorders","title":"recorders","text":"<pre><code>recorders() -&gt; Iterable[soundcard._Recorder]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>@staticmethod\ndef recorders() -&gt; Iterable['soundcard._Recorder']:\n    yield from soundcard.all_microphones(include_loopback=True)\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.recorders_names","title":"recorders_names","text":"<pre><code>recorders_names() -&gt; Iterable[str]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>@staticmethod\ndef recorders_names() -&gt; Iterable[str]:\n    yield from map(lambda device: device.name, BrokenAudio.recorders())\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.speaker_device","title":"speaker_device","text":"<pre><code>speaker_device: Any = None\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.speaker","title":"speaker","text":"<pre><code>speaker: Any = None\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.speakers","title":"speakers","text":"<pre><code>speakers() -&gt; Iterable[soundcard._Speaker]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>@staticmethod\ndef speakers() -&gt; Iterable['soundcard._Speaker']:\n    yield from soundcard.all_speakers()\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.speakers_names","title":"speakers_names","text":"<pre><code>speakers_names() -&gt; Iterable[str]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>@staticmethod\ndef speakers_names() -&gt; Iterable[str]:\n    yield from map(lambda device: device.name, BrokenAudio.speakers())\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.print_recorders","title":"print_recorders","text":"<pre><code>print_recorders() -&gt; None\n</code></pre> <p>List and print all available Audio recording devices</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def print_recorders(self) -&gt; None:\n    \"\"\"List and print all available Audio recording devices\"\"\"\n    log.info(\"Recording Devices:\")\n    for i, device in enumerate(BrokenAudio.recorders()):\n        log.info(f\"\u2022 ({i:2d}) Recorder: '{device.name}'\")\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.print_speakers","title":"print_speakers","text":"<pre><code>print_speakers() -&gt; None\n</code></pre> <p>List and print all available Audio playback devices</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def print_speakers(self) -&gt; None:\n    \"\"\"List and print all available Audio playback devices\"\"\"\n    log.info(\"Playback Devices:\")\n    for i, device in enumerate(BrokenAudio.speakers()):\n        log.info(f\"\u2022 ({i:2d}) Speaker: '{device.name}'\")\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.__fuzzy__","title":"__fuzzy__","text":"<pre><code>__fuzzy__(\n    name: str, devices: Iterable[str]\n) -&gt; Optional[str]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def __fuzzy__(self, name: str, devices: Iterable[str]) -&gt; Optional[str]:\n    device_name = fuzzy_string_search(name, devices)[0]\n    return next(filter(lambda x: x.name == device_name, devices), None)\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.open_speaker","title":"open_speaker","text":"<pre><code>open_speaker(\n    name: str = None, *, samplerate: Hertz = None\n) -&gt; Self\n</code></pre> <p>Open a SoundCard device for playing real-time audio.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The name of the device to open. If None, the default speaker is used. The search is fuzzy, so the match does not need to be exact</p> </li> <li> <code>samplerate</code>               (<code>Hertz</code>, default:                   <code>None</code> )           \u2013            <p>If None, gets self.samplerate</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self, Fluent interface</p> </li> </ul> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def open_speaker(self,\n    name: str=None,\n    *,\n    samplerate: Hertz=None,\n) -&gt; Self:\n    \"\"\"\n    Open a SoundCard device for playing real-time audio.\n\n    Args:\n        name: The name of the device to open. If None, the default speaker is used. The search\n            is fuzzy, so the match does not need to be exact\n\n        samplerate: If None, gets self.samplerate\n\n    Returns:\n        Self, Fluent interface\n    \"\"\"\n    (self.speaker or Nothing()).__exit__(None, None, None)\n\n    # Search for the Speaker\n    if name is None:\n        self.speaker_device = soundcard.default_speaker()\n    else:\n        self.speaker_device = self.__fuzzy__(name, self.speakers_names)\n\n    # Open the speaker\n    log.info(f\"Opening Speaker with Device ({self.speaker_device})\")\n    self.speaker = self.speaker_device.player(\n        samplerate=samplerate or self.samplerate,\n    ).__enter__()\n    return self\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.close_speaker","title":"close_speaker","text":"<pre><code>close_speaker() -&gt; Self\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def close_speaker(self) -&gt; Self:\n    (self.speaker or Nothing()).__exit__(None, None, None)\n    self.speaker = None\n    return self\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.open_recorder","title":"open_recorder","text":"<pre><code>open_recorder(\n    name: str = None,\n    *,\n    samplerate: Hertz = 44100,\n    channels: list[int] = None,\n    blocksize: int = 512\n) -&gt; Self\n</code></pre> <p>Open a SoundCard device for recording real-time audio.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The name of the device to open. If None, the first loopback device or default microphone is used. The search is fuzzy, so the match does not need to be exact</p> </li> <li> <code>samplerate</code>               (<code>Hertz</code>, default:                   <code>44100</code> )           \u2013            <p>The desired sample rate of the audio</p> </li> <li> <code>channels</code>               (<code>list[int]</code>, default:                   <code>None</code> )           \u2013            <p>Channels to read from the device. \u2022 None: Record all available channels \u2022 list[int]: Record only the specified channels \u2022 -1: (Linux: Mono mix of all channels) (MacOS: Silence)</p> </li> <li> <code>blocksize</code>               (<code>int</code>, default:                   <code>512</code> )           \u2013            <p>Desired minimum latency in samples, and also the number of recorded samples at a time. Lower values reduces latency and increases CPU usage, which funnily enough might cause latency issues</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self, Fluent interface</p> </li> </ul> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def open_recorder(self,\n    name: str=None,\n    *,\n    samplerate: Hertz=44100,\n    channels: list[int]=None,\n    blocksize: int=512,\n) -&gt; Self:\n    \"\"\"\n    Open a SoundCard device for recording real-time audio.\n\n    Args:\n        name: The name of the device to open. If None, the first loopback device or default\n            microphone is used. The search is fuzzy, so the match does not need to be exact\n\n        samplerate: The desired sample rate of the audio\n\n        channels: Channels to read from the device.\n            \u2022 None: Record all available channels\n            \u2022 list[int]: Record only the specified channels\n            \u2022 -1: (Linux: Mono mix of all channels) (MacOS: Silence)\n\n        blocksize: Desired minimum latency in samples, and also the number of recorded\n            samples at a time. Lower values reduces latency and increases CPU usage, which\n            funnily enough might cause latency issues\n\n    Returns:\n        Self, Fluent interface\n    \"\"\"\n    self.close_recorder()\n\n    # Search for default loopback device\n    if name is None:\n        for device in self.recorders():\n            if device.isloopback:\n                self.recorder_device = device\n                break\n        self.recorder_device = (self.recorder_device or soundcard.default_microphone())\n    else:\n        self.recorder_device = self.__fuzzy__(name, self.recorders_names())\n\n    # Open the recorder\n    log.info(f\"Opening Recorder with Device ({self.recorder_device})\")\n    self.recorder = self.recorder_device.recorder(\n        samplerate=samplerate,\n        channels=channels,\n        blocksize=blocksize,\n    ).__enter__()\n\n    # Update properties\n    self.samplerate = getattr(self.recorder, \"_samplerate\", samplerate)\n    self.channels   = self.recorder_device.channels\n    self.mode       = BrokenAudioMode.Realtime\n    return self\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.close_recorder","title":"close_recorder","text":"<pre><code>close_recorder() -&gt; Self\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def close_recorder(self) -&gt; Self:\n    (self.recorder or Nothing()).__exit__(None, None, None)\n    self.recorder = None\n    return self\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.record","title":"record","text":"<pre><code>record(numframes: int = None) -&gt; Optional[numpy.ndarray]\n</code></pre> <p>Record a number of samples from the recorder. 'None' records all</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def record(self, numframes: int=None) -&gt; Optional[numpy.ndarray]:\n    \"\"\"Record a number of samples from the recorder. 'None' records all\"\"\"\n    if (self.recorder is not None):\n        return self.add_data(self.recorder.record(numframes=numframes).T)\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.play","title":"play","text":"<pre><code>play(data: numpy.ndarray) -&gt; None\n</code></pre> <p>Add a numpy array to the play queue. for non-blocking playback</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def play(self, data: numpy.ndarray) -&gt; None:\n    \"\"\"Add a numpy array to the play queue. for non-blocking playback\"\"\"\n    if (self.speaker_device is not None):\n        self._play_queue.append(data)\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.stereo","title":"stereo","text":"<pre><code>stereo: bool\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.mono","title":"mono","text":"<pre><code>mono: bool\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.BrokenAudio.duration","title":"duration","text":"<pre><code>duration: Seconds\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.ShaderAudio","title":"ShaderAudio","text":"<p>               Bases: <code>BrokenAudio</code>, <code>ShaderModule</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>@define\nclass ShaderAudio(BrokenAudio, ShaderModule):\n\n    # Todo: Move to a ShaderAudioProcessing class\n    volume: ShaderDynamics = None\n    std:    ShaderDynamics = None\n    final:  bool = True\n\n    def __post__(self):\n        self.volume = ShaderDynamics(\n            scene=self.scene, name=f\"{self.name}Volume\",\n            frequency=2, zeta=1, response=0, value=0,\n            integrate=True,\n        )\n        self.std = ShaderDynamics(\n            scene=self.scene, name=f\"{self.name}STD\",\n            frequency=10, zeta=1, response=0, value=0,\n        )\n\n    def commands(self):\n        return\n        self.scene.cli.command(self.print_recorders, panel=self.panel_module_type)\n        self.scene.cli.command(self.print_speakers, panel=self.panel_module_type)\n        self.scene.cli.command(self.open_recorder, name=f\"{self.name}-recorder\", panel=f\"{self.panel_module_type}: {self.name}\")\n        self.scene.cli.command(self.open_speaker, name=f\"{self.name}-speaker\", panel=f\"{self.panel_module_type}: {self.name}\")\n\n    @property\n    def duration(self) -&gt; Seconds:\n        return BrokenFFmpeg.get_audio_duration(self.file)\n\n    def setup(self):\n        self.file = self.file\n        if (self.final and self.scene.realtime):\n            if (self.mode == BrokenAudioMode.File):\n                self.open_speaker()\n            else:\n                self.open_recorder()\n\n    def ffhook(self, ffmpeg: BrokenFFmpeg) -&gt; None:\n        if BrokenPath.get(self.file, exists=True):\n            ffmpeg.input(path=self.file)\n            ffmpeg.shortest = True\n\n    def update(self):\n        try:\n            if self._file_stream:\n                self._file_reader.chunk = self.scene.rdt\n                data = next(self._file_stream).T\n                self.add_data(data)\n                self.play(data)\n        except StopIteration:\n            pass\n\n        self.volume.target = 2 * root_mean_square(self.get_last_n_seconds(0.1)) * (2**0.5)\n        self.std.target    = numpy.std(self.get_last_n_seconds(0.1))\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.ShaderAudio.volume","title":"volume","text":"<pre><code>volume: ShaderDynamics = None\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.ShaderAudio.std","title":"std","text":"<pre><code>std: ShaderDynamics = None\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.ShaderAudio.final","title":"final","text":"<pre><code>final: bool = True\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.ShaderAudio.__post__","title":"__post__","text":"<pre><code>__post__()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def __post__(self):\n    self.volume = ShaderDynamics(\n        scene=self.scene, name=f\"{self.name}Volume\",\n        frequency=2, zeta=1, response=0, value=0,\n        integrate=True,\n    )\n    self.std = ShaderDynamics(\n        scene=self.scene, name=f\"{self.name}STD\",\n        frequency=10, zeta=1, response=0, value=0,\n    )\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.ShaderAudio.commands","title":"commands","text":"<pre><code>commands()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def commands(self):\n    return\n    self.scene.cli.command(self.print_recorders, panel=self.panel_module_type)\n    self.scene.cli.command(self.print_speakers, panel=self.panel_module_type)\n    self.scene.cli.command(self.open_recorder, name=f\"{self.name}-recorder\", panel=f\"{self.panel_module_type}: {self.name}\")\n    self.scene.cli.command(self.open_speaker, name=f\"{self.name}-speaker\", panel=f\"{self.panel_module_type}: {self.name}\")\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.ShaderAudio.duration","title":"duration","text":"<pre><code>duration: Seconds\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.ShaderAudio.setup","title":"setup","text":"<pre><code>setup()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def setup(self):\n    self.file = self.file\n    if (self.final and self.scene.realtime):\n        if (self.mode == BrokenAudioMode.File):\n            self.open_speaker()\n        else:\n            self.open_recorder()\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.ShaderAudio.ffhook","title":"ffhook","text":"<pre><code>ffhook(ffmpeg: BrokenFFmpeg) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def ffhook(self, ffmpeg: BrokenFFmpeg) -&gt; None:\n    if BrokenPath.get(self.file, exists=True):\n        ffmpeg.input(path=self.file)\n        ffmpeg.shortest = True\n</code></pre>"},{"location":"code/shaderflow/modules/audio/#ShaderFlow.Modules.Audio.ShaderAudio.update","title":"update","text":"<pre><code>update()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Audio.py</code> <pre><code>def update(self):\n    try:\n        if self._file_stream:\n            self._file_reader.chunk = self.scene.rdt\n            data = next(self._file_stream).T\n            self.add_data(data)\n            self.play(data)\n    except StopIteration:\n        pass\n\n    self.volume.target = 2 * root_mean_square(self.get_last_n_seconds(0.1)) * (2**0.5)\n    self.std.target    = numpy.std(self.get_last_n_seconds(0.1))\n</code></pre>"},{"location":"code/shaderflow/modules/camera/","title":"File: <code>ShaderFlow/Modules/Camera.py</code>","text":""},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera","title":"ShaderFlow.Modules.Camera","text":"<p>The Camera requires some prior knowledge of a fun piece of math called Quaternions.</p> <p>They are 4D complex numbers that perfectly represents rotations in 3D space without the need of 3D rotation matrices (which are ugly!)*, and are pretty intuitive to use.</p> <ul> <li>https://github.com/moble/quaternion/wiki/Euler-angles-are-horrible</li> </ul> <p>Great resources for understanding Quaternions:</p> <p>\u2022 \"Quaternions and 3d rotation, explained interactively\" by @3blue1brown   - https://www.youtube.com/watch?v=d4EgbgTm0Bg</p> <p>\u2022 \"Visualizing quaternions (4d numbers) with stereographic projection\" by @3blue1brown   - https://www.youtube.com/watch?v=zjMuIxRvygQ</p> <p>\u2022 \"Visualizing quaternion, an explorable video series\" by Ben Eater and @3blue1brown   - https://eater.net/quaternions</p> <p>Useful resources on Linear Algebra and Coordinate Systems:</p> <p>\u2022 \"The Essence of Linear Algebra\" by @3blue1brown   - https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab</p> <p>\u2022 \"here, have a coordinate system chart~\" by @FreyaHolmer   - https://twitter.com/FreyaHolmer/status/1325556229410861056</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.Quaternion","title":"Quaternion","text":"<pre><code>Quaternion: TypeAlias = quaternion.quaternion\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.Vector3D","title":"Vector3D","text":"<pre><code>Vector3D: TypeAlias = numpy.ndarray\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.GlobalBasis","title":"GlobalBasis","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>class GlobalBasis:\n    Origin   = numpy.array(( 0,  0,  0), dtype=_dtype)\n    Null     = numpy.array(( 0,  0,  0), dtype=_dtype)\n    Up       = numpy.array(( 0,  1,  0), dtype=_dtype)\n    Down     = numpy.array(( 0, -1,  0), dtype=_dtype)\n    Left     = numpy.array((-1,  0,  0), dtype=_dtype)\n    Right    = numpy.array(( 1,  0,  0), dtype=_dtype)\n    Forward  = numpy.array(( 0,  0,  1), dtype=_dtype)\n    Backward = numpy.array(( 0,  0, -1), dtype=_dtype)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.GlobalBasis.Origin","title":"Origin","text":"<pre><code>Origin = numpy.array((0, 0, 0), dtype=_dtype)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.GlobalBasis.Null","title":"Null","text":"<pre><code>Null = numpy.array((0, 0, 0), dtype=_dtype)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.GlobalBasis.Up","title":"Up","text":"<pre><code>Up = numpy.array((0, 1, 0), dtype=_dtype)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.GlobalBasis.Down","title":"Down","text":"<pre><code>Down = numpy.array((0, -1, 0), dtype=_dtype)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.GlobalBasis.Left","title":"Left","text":"<pre><code>Left = numpy.array((-1, 0, 0), dtype=_dtype)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.GlobalBasis.Right","title":"Right","text":"<pre><code>Right = numpy.array((1, 0, 0), dtype=_dtype)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.GlobalBasis.Forward","title":"Forward","text":"<pre><code>Forward = numpy.array((0, 0, 1), dtype=_dtype)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.GlobalBasis.Backward","title":"Backward","text":"<pre><code>Backward = numpy.array((0, 0, -1), dtype=_dtype)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.CameraProjection","title":"CameraProjection","text":"<p>               Bases: <code>BrokenEnum</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>class CameraProjection(BrokenEnum):\n    Perspective = 0\n    \"\"\"\n    Project from a Plane A at the position to a Plane B at a distance of one\n    - The plane is always perpendicular to the camera's direction\n    - Plane A is multiplied by isometric, Plane B by Zoom\n    \"\"\"\n\n    VirtualReality = 1\n    \"\"\"Two halves of the screen, one for each eye, with a separation between them\"\"\"\n\n    Equirectangular = 2\n    \"\"\"The 360\u00b0 videos of platforms like YouTube, it's a simples sphere projected to the screen\n    where X defines the azimuth and Y the inclination, ranging such that they sweep the sphere\"\"\"\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.CameraProjection.Perspective","title":"Perspective","text":"<pre><code>Perspective = 0\n</code></pre> <p>Project from a Plane A at the position to a Plane B at a distance of one - The plane is always perpendicular to the camera's direction - Plane A is multiplied by isometric, Plane B by Zoom</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.CameraProjection.VirtualReality","title":"VirtualReality","text":"<pre><code>VirtualReality = 1\n</code></pre> <p>Two halves of the screen, one for each eye, with a separation between them</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.CameraProjection.Equirectangular","title":"Equirectangular","text":"<pre><code>Equirectangular = 2\n</code></pre> <p>The 360\u00b0 videos of platforms like YouTube, it's a simples sphere projected to the screen where X defines the azimuth and Y the inclination, ranging such that they sweep the sphere</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.CameraMode","title":"CameraMode","text":"<p>               Bases: <code>BrokenEnum</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>class CameraMode(BrokenEnum):\n    FreeCamera = 0\n    \"\"\"Free to rotate in any direction - do not ensure the 'up' direction matches the zenith\"\"\"\n\n    Camera2D = 1\n    \"\"\"Fixed direction, drag moves position on the plane of the screen\"\"\"\n\n    Spherical = 2\n    \"\"\"Always correct such that the camera orthonormal base is pointing 'UP'\"\"\"\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.CameraMode.FreeCamera","title":"FreeCamera","text":"<pre><code>FreeCamera = 0\n</code></pre> <p>Free to rotate in any direction - do not ensure the 'up' direction matches the zenith</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.CameraMode.Camera2D","title":"Camera2D","text":"<pre><code>Camera2D = 1\n</code></pre> <p>Fixed direction, drag moves position on the plane of the screen</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.CameraMode.Spherical","title":"Spherical","text":"<pre><code>Spherical = 2\n</code></pre> <p>Always correct such that the camera orthonormal base is pointing 'UP'</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.Algebra","title":"Algebra","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>class Algebra:\n\n    def quaternion(axis: Vector3D, angle: Degrees) -&gt; Quaternion:\n        \"\"\"Builds a quaternion that represents an rotation around an axis for an angle\"\"\"\n        return Quaternion(math.cos(theta := math.radians(angle/2)), *(math.sin(theta)*axis))\n\n    def rotate_vector(vector: Vector3D, R: Quaternion) -&gt; Vector3D:\n        \"\"\"Applies a Quaternion rotation to a vector\"\"\"\n        return quaternion.as_vector_part(R * quaternion.quaternion(0, *vector) * R.conjugate())\n\n    def angle(A: Vector3D, B: Vector3D) -&gt; Degrees:\n        \"\"\"\n        Returns the angle between two vectors by the linear algebra formula:\n        \u2022 Theta(A, B) = arccos( (A\u00b7B) / (|A|*|B|) )\n        \u2022 Safe for zero vector norm divisions\n        \u2022 Clips the arccos domain to [-1, 1] to avoid NaNs\n        \"\"\"\n        A, B = DynamicNumber.extract(A, B)\n\n        # Avoid zero divisions\n        if not (LA := numpy.linalg.norm(A)):\n            return 0.0\n        if not (LB := numpy.linalg.norm(B)):\n            return 0.0\n\n        # Avoid NaNs by clipping domain\n        cos = numpy.clip(numpy.dot(A, B)/(LA*LB), -1, 1)\n        return numpy.degrees(numpy.arccos(cos))\n\n    def unit_vector(vector: Vector3D) -&gt; Vector3D:\n        \"\"\"Returns the unit vector of a given vector, safely\"\"\"\n        if (magnitude := numpy.linalg.norm(vector)):\n            return (vector/magnitude)\n        return vector\n\n    @staticmethod\n    def safe(\n        *vector: Union[numpy.ndarray, tuple[float], float, int],\n        dimensions: int=3,\n        dtype: numpy.dtype=_dtype\n    ) -&gt; numpy.ndarray:\n        \"\"\"\n        Returns a safe numpy array from a given vector, with the correct dimensions and dtype\n        \"\"\"\n        return numpy.array(vector, dtype=dtype).reshape(dimensions)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.Algebra.quaternion","title":"quaternion","text":"<pre><code>quaternion(axis: Vector3D, angle: Degrees) -&gt; Quaternion\n</code></pre> <p>Builds a quaternion that represents an rotation around an axis for an angle</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>def quaternion(axis: Vector3D, angle: Degrees) -&gt; Quaternion:\n    \"\"\"Builds a quaternion that represents an rotation around an axis for an angle\"\"\"\n    return Quaternion(math.cos(theta := math.radians(angle/2)), *(math.sin(theta)*axis))\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.Algebra.rotate_vector","title":"rotate_vector","text":"<pre><code>rotate_vector(vector: Vector3D, R: Quaternion) -&gt; Vector3D\n</code></pre> <p>Applies a Quaternion rotation to a vector</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>def rotate_vector(vector: Vector3D, R: Quaternion) -&gt; Vector3D:\n    \"\"\"Applies a Quaternion rotation to a vector\"\"\"\n    return quaternion.as_vector_part(R * quaternion.quaternion(0, *vector) * R.conjugate())\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.Algebra.angle","title":"angle","text":"<pre><code>angle(A: Vector3D, B: Vector3D) -&gt; Degrees\n</code></pre> <p>Returns the angle between two vectors by the linear algebra formula: \u2022 Theta(A, B) = arccos( (A\u00b7B) / (|A|*|B|) ) \u2022 Safe for zero vector norm divisions \u2022 Clips the arccos domain to [-1, 1] to avoid NaNs</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>def angle(A: Vector3D, B: Vector3D) -&gt; Degrees:\n    \"\"\"\n    Returns the angle between two vectors by the linear algebra formula:\n    \u2022 Theta(A, B) = arccos( (A\u00b7B) / (|A|*|B|) )\n    \u2022 Safe for zero vector norm divisions\n    \u2022 Clips the arccos domain to [-1, 1] to avoid NaNs\n    \"\"\"\n    A, B = DynamicNumber.extract(A, B)\n\n    # Avoid zero divisions\n    if not (LA := numpy.linalg.norm(A)):\n        return 0.0\n    if not (LB := numpy.linalg.norm(B)):\n        return 0.0\n\n    # Avoid NaNs by clipping domain\n    cos = numpy.clip(numpy.dot(A, B)/(LA*LB), -1, 1)\n    return numpy.degrees(numpy.arccos(cos))\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.Algebra.unit_vector","title":"unit_vector","text":"<pre><code>unit_vector(vector: Vector3D) -&gt; Vector3D\n</code></pre> <p>Returns the unit vector of a given vector, safely</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>def unit_vector(vector: Vector3D) -&gt; Vector3D:\n    \"\"\"Returns the unit vector of a given vector, safely\"\"\"\n    if (magnitude := numpy.linalg.norm(vector)):\n        return (vector/magnitude)\n    return vector\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.Algebra.safe","title":"safe","text":"<pre><code>safe(\n    *vector: Union[numpy.ndarray, tuple[float], float, int],\n    dimensions: int = 3,\n    dtype: numpy.dtype = _dtype\n) -&gt; numpy.ndarray\n</code></pre> <p>Returns a safe numpy array from a given vector, with the correct dimensions and dtype</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>@staticmethod\ndef safe(\n    *vector: Union[numpy.ndarray, tuple[float], float, int],\n    dimensions: int=3,\n    dtype: numpy.dtype=_dtype\n) -&gt; numpy.ndarray:\n    \"\"\"\n    Returns a safe numpy array from a given vector, with the correct dimensions and dtype\n    \"\"\"\n    return numpy.array(vector, dtype=dtype).reshape(dimensions)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera","title":"ShaderCamera","text":"<p>               Bases: <code>ShaderModule</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>@define\nclass ShaderCamera(ShaderModule):\n    name:       str = \"iCamera\"\n    mode:       CameraMode       = CameraMode.Camera2D.field()\n    projection: CameraProjection = CameraProjection.Perspective.field()\n    separation: ShaderDynamics = None\n    rotation:   ShaderDynamics = None\n    position:   ShaderDynamics = None\n    zenith:     ShaderDynamics = None\n    zoom:       ShaderDynamics = None\n    isometric:  ShaderDynamics = None\n    orbital:    ShaderDynamics = None\n    dolly:      ShaderDynamics = None\n\n    def build(self):\n        self.position = ShaderDynamics(scene=self.scene,\n            name=f\"{self.name}Position\", real=True,\n            frequency=4, zeta=1, response=0,\n            value=numpy.copy(GlobalBasis.Origin)\n        )\n        self.separation = ShaderDynamics(scene=self.scene,\n            name=f\"{self.name}VRSeparation\", real=True,\n            frequency=0.5, zeta=1, response=0, value=0.05\n        )\n        self.rotation = ShaderDynamics(scene=self.scene,\n            name=f\"{self.name}Rotation\", real=True, primary=False,\n            frequency=5, zeta=1, response=0,\n            value=Quaternion(1, 0, 0, 0)\n        )\n        self.zenith = ShaderDynamics(scene=self.scene,\n            name=f\"{self.name}Zenith\", real=True,\n            frequency=1, zeta=1, response=0,\n            value=numpy.copy(GlobalBasis.Up)\n        )\n        self.zoom = ShaderDynamics(scene=self.scene,\n            name=f\"{self.name}Zoom\", real=True,\n            frequency=3, zeta=1, response=0, value=1\n        )\n        self.isometric = ShaderDynamics(scene=self.scene,\n            name=f\"{self.name}Isometric\", real=True,\n            frequency=1, zeta=1, response=0, value=0\n        )\n        self.focal_length = ShaderDynamics(scene=self.scene,\n            name=f\"{self.name}FocalLength\", real=True,\n            frequency=1, zeta=1, response=0, value=1\n        )\n        self.orbital = ShaderDynamics(scene=self.scene,\n            name=f\"{self.name}Orbital\", real=True,\n            frequency=1, zeta=1, response=0, value=0\n        )\n        self.dolly = ShaderDynamics(scene=self.scene,\n            name=f\"{self.name}Dolly\", real=True,\n            frequency=1, zeta=1, response=0, value=0\n        )\n\n    @property\n    def fov(self) -&gt; Degrees:\n        \"\"\"The vertical field of view angle, considers the isometric factor\"\"\"\n        return 2.0 * math.degrees(math.atan(self.zoom.value - self.isometric.value))\n\n    @fov.setter\n    def fov(self, value: Degrees):\n        self.zoom.target = math.tan(math.radians(value)/2.0) + self.isometric.value\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        yield Uniform(\"int\",  f\"{self.name}Mode\",       value=self.mode)\n        yield Uniform(\"int\",  f\"{self.name}Projection\", value=self.projection)\n        yield Uniform(\"vec3\", f\"{self.name}Right\",      value=self.right)\n        yield Uniform(\"vec3\", f\"{self.name}Upward\",     value=self.up)\n        yield Uniform(\"vec3\", f\"{self.name}Forward\",    value=self.forward)\n\n    def includes(self) -&gt; Iterable[str]:\n        yield SHADERFLOW.RESOURCES.SHADERS_INCLUDE/\"Camera.glsl\"\n\n    # ---------------------------------------------------------------------------------------------|\n    # Actions with vectors\n\n    def move(self, *direction: Vector3D, absolute: bool=False) -&gt; Self:\n        \"\"\"Move the camera in a direction relative to the camera's position\"\"\"\n        self.position.target += Algebra.safe(direction) - (self.position.target * absolute)\n        return self\n\n    def rotate(self, direction: Vector3D=GlobalBasis.Null, angle: Degrees=0.0) -&gt; Self:\n        \"\"\"Adds a cumulative rotation to the camera. Use \"look\" for absolute rotation\"\"\"\n        self.rotation.target  = Algebra.quaternion(direction, angle) * self.rotation.target\n        self.rotation.target /= numpy.linalg.norm(quaternion.as_float_array(self.rotation.target))\n        return self\n\n    def rotate2d(self, angle: Degrees=0.0) -&gt; Self:\n        \"\"\"Aligns the UP vector rotated on FORWARD direction. Same math angle on a cartesian plane\"\"\"\n        target = Algebra.rotate_vector(self.zenith.value, Algebra.quaternion(self.forward_target, angle))\n        return self.align(self.up_target, target)\n\n    def align(self, A: Vector3D, B: Vector3D, angle: Degrees=0.0) -&gt; Self:\n        \"\"\"Rotate the camera as if we were to align these two vectors\"\"\"\n        A, B = DynamicNumber.extract(A, B)\n        return self.rotate(\n            Algebra.unit_vector(numpy.cross(A, B)),\n            Algebra.angle(A, B) - angle\n        )\n\n    def look(self, *target: Vector3D) -&gt; Self:\n        \"\"\"Rotate the camera to look at some target point\"\"\"\n        return self.align(self.forward_target, Algebra.safe(target) - self.position.target)\n\n    # ---------------------------------------------------------------------------------------------|\n    # Interaction\n\n    def update(self):\n        dt = abs(self.scene.dt or self.scene.rdt)\n\n        # Movement on keys\n        move = numpy.copy(GlobalBasis.Null)\n\n        # WASD Shift Spacebar movement\n        if self.mode == CameraMode.Camera2D:\n            if self.scene.keyboard(ShaderKeyboard.Keys.W): move += GlobalBasis.Up\n            if self.scene.keyboard(ShaderKeyboard.Keys.A): move += GlobalBasis.Left\n            if self.scene.keyboard(ShaderKeyboard.Keys.S): move += GlobalBasis.Down\n            if self.scene.keyboard(ShaderKeyboard.Keys.D): move += GlobalBasis.Right\n        else:\n            if self.scene.keyboard(ShaderKeyboard.Keys.W): move += GlobalBasis.Forward\n            if self.scene.keyboard(ShaderKeyboard.Keys.A): move += GlobalBasis.Left\n            if self.scene.keyboard(ShaderKeyboard.Keys.S): move += GlobalBasis.Backward\n            if self.scene.keyboard(ShaderKeyboard.Keys.D): move += GlobalBasis.Right\n            if self.scene.keyboard(ShaderKeyboard.Keys.SPACE): move += GlobalBasis.Up\n            if self.scene.keyboard(ShaderKeyboard.Keys.LEFT_SHIFT): move += GlobalBasis.Down\n\n        if move.any():\n            move = Algebra.rotate_vector(move, self.rotation.target)\n            self.move(2 * Algebra.unit_vector(move) * self.zoom.value * dt)\n\n        # Rotation on Q and E\n        rotate = numpy.copy(GlobalBasis.Null)\n        if self.scene.keyboard(ShaderKeyboard.Keys.Q): rotate += GlobalBasis.Forward\n        if self.scene.keyboard(ShaderKeyboard.Keys.E): rotate += GlobalBasis.Backward\n        if rotate.any(): self.rotate(Algebra.rotate_vector(rotate, self.rotation.target), 45*dt)\n\n        # Alignment with the \"UP\" direction\n        if self.mode == CameraMode.Spherical:\n            self.align(self.right_target, self.zenith.target, 90)\n\n        # Isometric on T and G\n        if (self.scene.keyboard(ShaderKeyboard.Keys.T)):\n            self.isometric.target = clamp(self.isometric.target + 0.5*dt, 0, 1)\n        if (self.scene.keyboard(ShaderKeyboard.Keys.G)):\n            self.isometric.target = clamp(self.isometric.target - 0.5*dt, 0, 1)\n\n    def apply_zoom(self, value: float) -&gt; None:\n        # Note: Ensures a zoom in then out returns to the same value\n        if (value &gt; 0):\n            self.zoom.target *= (1 + value)\n        else:\n            self.zoom.target /= (1 - value)\n\n    def handle(self, message: ShaderMessage):\n\n        # Movement on Drag\n        if any([\n            isinstance(message, ShaderMessage.Mouse.Position) and self.scene.exclusive,\n            isinstance(message, ShaderMessage.Mouse.Drag)\n        ]):\n            if not (self.scene.mouse_buttons[1] or self.scene.exclusive):\n                return\n\n            # Rotate around the camera basis itself\n            if (self.mode == CameraMode.FreeCamera):\n                self.rotate(direction=self.up*self.zoom.value, angle= message.du*100)\n                self.rotate(direction=self.right*self.zoom.value, angle=-message.dv*100)\n\n            # Rotate relative to the XY plane\n            elif (self.mode == CameraMode.Camera2D):\n                move = (message.du*GlobalBasis.Right) + (message.dv*GlobalBasis.Up)\n                move = Algebra.rotate_vector(move, self.rotation.target)\n                self.move(move*(1 if self.scene.exclusive else -1)*self.zoom.value)\n\n            elif (self.mode == CameraMode.Spherical):\n                up = 1 if (Algebra.angle(self.up_target, self.zenith) &lt; 90) else -1\n                self.rotate(direction=self.zenith*up *self.zoom.value, angle= message.du*100)\n                self.rotate(direction=self.right*self.zoom.value, angle=-message.dv*100)\n\n        # Wheel Scroll Zoom\n        elif isinstance(message, ShaderMessage.Mouse.Scroll):\n            self.apply_zoom(-0.05*message.dy)\n\n        # Camera alignments and modes\n        elif isinstance(message, ShaderMessage.Keyboard.Press) and (message.action == 1):\n\n            # Switch camera modes\n            for _ in range(1):\n                if (message.key == ShaderKeyboard.Keys.NUMBER_1):\n                    self.mode = CameraMode.FreeCamera\n                elif (message.key == ShaderKeyboard.Keys.NUMBER_2):\n                    self.align(self.right_target,  GlobalBasis.Right)\n                    self.align(self.up_target, GlobalBasis.Up)\n                    self.mode = CameraMode.Camera2D\n                    self.position.target[2] = 0\n                    self.isometric.target = 0\n                    self.zoom.target = 1\n                elif (message.key == ShaderKeyboard.Keys.NUMBER_3):\n                    self.mode = CameraMode.Spherical\n                else: break\n            else:\n                self.log_info(f\"\u2022 Set mode to {self.mode}\")\n\n            # What is \"UP\", baby don't hurt me\n            for _ in range(1):\n                if (message.key == ShaderKeyboard.Keys.I):\n                    self.zenith.target = GlobalBasis.Right\n                elif (message.key == ShaderKeyboard.Keys.J):\n                    self.zenith.target = GlobalBasis.Up\n                elif (message.key == ShaderKeyboard.Keys.K):\n                    self.zenith.target = GlobalBasis.Forward\n                else: break\n            else:\n                self.log_info(f\"\u2022 Set zenith to {self.zenith.target}\")\n                self.align(self.forward_target, self.zenith.target)\n                self.align(self.up_target, self.zenith.target, 90)\n                self.align(self.right_target, self.zenith.target, 90)\n\n            # Switch Projection\n            if (message.key == ShaderKeyboard.Keys.P):\n                self.projection = next(self.projection)\n                self.log_info(f\"\u2022 Set projection to {self.projection}\")\n\n    # ---------------------------------------------------------------------------------------------|\n    # Bases and directions\n\n    @property\n    def right(self) -&gt; Vector3D:\n        \"\"\"The current 'right' direction relative to the camera\"\"\"\n        return Algebra.rotate_vector(GlobalBasis.Right, self.rotation.value)\n\n    @property\n    def right_target(self) -&gt; Vector3D:\n        \"\"\"The target 'right' direction the camera is aligning to\"\"\"\n        return Algebra.rotate_vector(GlobalBasis.Right, self.rotation.target)\n\n    @property\n    def left(self) -&gt; Vector3D:\n        \"\"\"The current 'left' direction relative to the camera\"\"\"\n        return (-1) * self.right\n\n    @property\n    def left_target(self) -&gt; Vector3D:\n        \"\"\"The target 'left' direction the camera is aligning to\"\"\"\n        return (-1) * self.right_target\n\n    @property\n    def up(self) -&gt; Vector3D:\n        \"\"\"The current 'upwards' direction relative to the camera\"\"\"\n        return Algebra.rotate_vector(GlobalBasis.Up, self.rotation.value)\n\n    @property\n    def up_target(self) -&gt; Vector3D:\n        \"\"\"The target 'upwards' direction the camera is aligning to\"\"\"\n        return Algebra.rotate_vector(GlobalBasis.Up, self.rotation.target)\n\n    @property\n    def down(self) -&gt; Vector3D:\n        \"\"\"The current 'downwards' direction relative to the camera\"\"\"\n        return (-1) * self.up\n\n    @property\n    def down_target(self) -&gt; Vector3D:\n        \"\"\"The target 'downwards' direction the camera is aligning to\"\"\"\n        return (-1) * self.up_target\n\n    @property\n    def forward(self) -&gt; Vector3D:\n        \"\"\"The current 'forward' direction relative to the camera\"\"\"\n        return Algebra.rotate_vector(GlobalBasis.Forward, self.rotation.value)\n\n    @property\n    def forward_target(self) -&gt; Vector3D:\n        \"\"\"The target 'forward' direction the camera is aligning to\"\"\"\n        return Algebra.rotate_vector(GlobalBasis.Forward, self.rotation.target)\n\n    @property\n    def backward(self) -&gt; Vector3D:\n        \"\"\"The current 'backward' direction relative to the camera\"\"\"\n        return (-1) * self.forward\n\n    @property\n    def backward_target(self) -&gt; Vector3D:\n        \"\"\"The target 'backward' direction the camera is aligning to\"\"\"\n        return (-1) * self.forward_target\n\n    # # Positions\n\n    @property\n    def x(self) -&gt; float:\n        \"\"\"The current X position of the camera\"\"\"\n        return self.position.value[0]\n\n    @x.setter\n    def x(self, value: float):\n        self.position.target[0] = value\n\n    @property\n    def y(self) -&gt; float:\n        \"\"\"The current Y position of the camera\"\"\"\n        return self.position.value[1]\n\n    @y.setter\n    def y(self, value: float):\n        self.position.target[1] = value\n\n    @property\n    def z(self) -&gt; float:\n        \"\"\"The current Z position of the camera\"\"\"\n        return self.position.value[2]\n\n    @z.setter\n    def z(self, value: float):\n        self.position.target[2] = value\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.name","title":"name","text":"<pre><code>name: str = 'iCamera'\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.mode","title":"mode","text":"<pre><code>mode: CameraMode = CameraMode.Camera2D.field()\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.projection","title":"projection","text":"<pre><code>projection: CameraProjection = (\n    CameraProjection.Perspective.field()\n)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.separation","title":"separation","text":"<pre><code>separation: ShaderDynamics = None\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.rotation","title":"rotation","text":"<pre><code>rotation: ShaderDynamics = None\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.position","title":"position","text":"<pre><code>position: ShaderDynamics = None\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.zenith","title":"zenith","text":"<pre><code>zenith: ShaderDynamics = None\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.zoom","title":"zoom","text":"<pre><code>zoom: ShaderDynamics = None\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.isometric","title":"isometric","text":"<pre><code>isometric: ShaderDynamics = None\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.orbital","title":"orbital","text":"<pre><code>orbital: ShaderDynamics = None\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.dolly","title":"dolly","text":"<pre><code>dolly: ShaderDynamics = None\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.build","title":"build","text":"<pre><code>build()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>def build(self):\n    self.position = ShaderDynamics(scene=self.scene,\n        name=f\"{self.name}Position\", real=True,\n        frequency=4, zeta=1, response=0,\n        value=numpy.copy(GlobalBasis.Origin)\n    )\n    self.separation = ShaderDynamics(scene=self.scene,\n        name=f\"{self.name}VRSeparation\", real=True,\n        frequency=0.5, zeta=1, response=0, value=0.05\n    )\n    self.rotation = ShaderDynamics(scene=self.scene,\n        name=f\"{self.name}Rotation\", real=True, primary=False,\n        frequency=5, zeta=1, response=0,\n        value=Quaternion(1, 0, 0, 0)\n    )\n    self.zenith = ShaderDynamics(scene=self.scene,\n        name=f\"{self.name}Zenith\", real=True,\n        frequency=1, zeta=1, response=0,\n        value=numpy.copy(GlobalBasis.Up)\n    )\n    self.zoom = ShaderDynamics(scene=self.scene,\n        name=f\"{self.name}Zoom\", real=True,\n        frequency=3, zeta=1, response=0, value=1\n    )\n    self.isometric = ShaderDynamics(scene=self.scene,\n        name=f\"{self.name}Isometric\", real=True,\n        frequency=1, zeta=1, response=0, value=0\n    )\n    self.focal_length = ShaderDynamics(scene=self.scene,\n        name=f\"{self.name}FocalLength\", real=True,\n        frequency=1, zeta=1, response=0, value=1\n    )\n    self.orbital = ShaderDynamics(scene=self.scene,\n        name=f\"{self.name}Orbital\", real=True,\n        frequency=1, zeta=1, response=0, value=0\n    )\n    self.dolly = ShaderDynamics(scene=self.scene,\n        name=f\"{self.name}Dolly\", real=True,\n        frequency=1, zeta=1, response=0, value=0\n    )\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.fov","title":"fov","text":"<pre><code>fov: Degrees\n</code></pre> <p>The vertical field of view angle, considers the isometric factor</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    yield Uniform(\"int\",  f\"{self.name}Mode\",       value=self.mode)\n    yield Uniform(\"int\",  f\"{self.name}Projection\", value=self.projection)\n    yield Uniform(\"vec3\", f\"{self.name}Right\",      value=self.right)\n    yield Uniform(\"vec3\", f\"{self.name}Upward\",     value=self.up)\n    yield Uniform(\"vec3\", f\"{self.name}Forward\",    value=self.forward)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.includes","title":"includes","text":"<pre><code>includes() -&gt; Iterable[str]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>def includes(self) -&gt; Iterable[str]:\n    yield SHADERFLOW.RESOURCES.SHADERS_INCLUDE/\"Camera.glsl\"\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.move","title":"move","text":"<pre><code>move(*direction: Vector3D, absolute: bool = False) -&gt; Self\n</code></pre> <p>Move the camera in a direction relative to the camera's position</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>def move(self, *direction: Vector3D, absolute: bool=False) -&gt; Self:\n    \"\"\"Move the camera in a direction relative to the camera's position\"\"\"\n    self.position.target += Algebra.safe(direction) - (self.position.target * absolute)\n    return self\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.rotate","title":"rotate","text":"<pre><code>rotate(\n    direction: Vector3D = GlobalBasis.Null,\n    angle: Degrees = 0.0,\n) -&gt; Self\n</code></pre> <p>Adds a cumulative rotation to the camera. Use \"look\" for absolute rotation</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>def rotate(self, direction: Vector3D=GlobalBasis.Null, angle: Degrees=0.0) -&gt; Self:\n    \"\"\"Adds a cumulative rotation to the camera. Use \"look\" for absolute rotation\"\"\"\n    self.rotation.target  = Algebra.quaternion(direction, angle) * self.rotation.target\n    self.rotation.target /= numpy.linalg.norm(quaternion.as_float_array(self.rotation.target))\n    return self\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.rotate2d","title":"rotate2d","text":"<pre><code>rotate2d(angle: Degrees = 0.0) -&gt; Self\n</code></pre> <p>Aligns the UP vector rotated on FORWARD direction. Same math angle on a cartesian plane</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>def rotate2d(self, angle: Degrees=0.0) -&gt; Self:\n    \"\"\"Aligns the UP vector rotated on FORWARD direction. Same math angle on a cartesian plane\"\"\"\n    target = Algebra.rotate_vector(self.zenith.value, Algebra.quaternion(self.forward_target, angle))\n    return self.align(self.up_target, target)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.align","title":"align","text":"<pre><code>align(\n    A: Vector3D, B: Vector3D, angle: Degrees = 0.0\n) -&gt; Self\n</code></pre> <p>Rotate the camera as if we were to align these two vectors</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>def align(self, A: Vector3D, B: Vector3D, angle: Degrees=0.0) -&gt; Self:\n    \"\"\"Rotate the camera as if we were to align these two vectors\"\"\"\n    A, B = DynamicNumber.extract(A, B)\n    return self.rotate(\n        Algebra.unit_vector(numpy.cross(A, B)),\n        Algebra.angle(A, B) - angle\n    )\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.look","title":"look","text":"<pre><code>look(*target: Vector3D) -&gt; Self\n</code></pre> <p>Rotate the camera to look at some target point</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>def look(self, *target: Vector3D) -&gt; Self:\n    \"\"\"Rotate the camera to look at some target point\"\"\"\n    return self.align(self.forward_target, Algebra.safe(target) - self.position.target)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.update","title":"update","text":"<pre><code>update()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>def update(self):\n    dt = abs(self.scene.dt or self.scene.rdt)\n\n    # Movement on keys\n    move = numpy.copy(GlobalBasis.Null)\n\n    # WASD Shift Spacebar movement\n    if self.mode == CameraMode.Camera2D:\n        if self.scene.keyboard(ShaderKeyboard.Keys.W): move += GlobalBasis.Up\n        if self.scene.keyboard(ShaderKeyboard.Keys.A): move += GlobalBasis.Left\n        if self.scene.keyboard(ShaderKeyboard.Keys.S): move += GlobalBasis.Down\n        if self.scene.keyboard(ShaderKeyboard.Keys.D): move += GlobalBasis.Right\n    else:\n        if self.scene.keyboard(ShaderKeyboard.Keys.W): move += GlobalBasis.Forward\n        if self.scene.keyboard(ShaderKeyboard.Keys.A): move += GlobalBasis.Left\n        if self.scene.keyboard(ShaderKeyboard.Keys.S): move += GlobalBasis.Backward\n        if self.scene.keyboard(ShaderKeyboard.Keys.D): move += GlobalBasis.Right\n        if self.scene.keyboard(ShaderKeyboard.Keys.SPACE): move += GlobalBasis.Up\n        if self.scene.keyboard(ShaderKeyboard.Keys.LEFT_SHIFT): move += GlobalBasis.Down\n\n    if move.any():\n        move = Algebra.rotate_vector(move, self.rotation.target)\n        self.move(2 * Algebra.unit_vector(move) * self.zoom.value * dt)\n\n    # Rotation on Q and E\n    rotate = numpy.copy(GlobalBasis.Null)\n    if self.scene.keyboard(ShaderKeyboard.Keys.Q): rotate += GlobalBasis.Forward\n    if self.scene.keyboard(ShaderKeyboard.Keys.E): rotate += GlobalBasis.Backward\n    if rotate.any(): self.rotate(Algebra.rotate_vector(rotate, self.rotation.target), 45*dt)\n\n    # Alignment with the \"UP\" direction\n    if self.mode == CameraMode.Spherical:\n        self.align(self.right_target, self.zenith.target, 90)\n\n    # Isometric on T and G\n    if (self.scene.keyboard(ShaderKeyboard.Keys.T)):\n        self.isometric.target = clamp(self.isometric.target + 0.5*dt, 0, 1)\n    if (self.scene.keyboard(ShaderKeyboard.Keys.G)):\n        self.isometric.target = clamp(self.isometric.target - 0.5*dt, 0, 1)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.apply_zoom","title":"apply_zoom","text":"<pre><code>apply_zoom(value: float) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>def apply_zoom(self, value: float) -&gt; None:\n    # Note: Ensures a zoom in then out returns to the same value\n    if (value &gt; 0):\n        self.zoom.target *= (1 + value)\n    else:\n        self.zoom.target /= (1 - value)\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.handle","title":"handle","text":"<pre><code>handle(message: ShaderMessage)\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Camera.py</code> <pre><code>def handle(self, message: ShaderMessage):\n\n    # Movement on Drag\n    if any([\n        isinstance(message, ShaderMessage.Mouse.Position) and self.scene.exclusive,\n        isinstance(message, ShaderMessage.Mouse.Drag)\n    ]):\n        if not (self.scene.mouse_buttons[1] or self.scene.exclusive):\n            return\n\n        # Rotate around the camera basis itself\n        if (self.mode == CameraMode.FreeCamera):\n            self.rotate(direction=self.up*self.zoom.value, angle= message.du*100)\n            self.rotate(direction=self.right*self.zoom.value, angle=-message.dv*100)\n\n        # Rotate relative to the XY plane\n        elif (self.mode == CameraMode.Camera2D):\n            move = (message.du*GlobalBasis.Right) + (message.dv*GlobalBasis.Up)\n            move = Algebra.rotate_vector(move, self.rotation.target)\n            self.move(move*(1 if self.scene.exclusive else -1)*self.zoom.value)\n\n        elif (self.mode == CameraMode.Spherical):\n            up = 1 if (Algebra.angle(self.up_target, self.zenith) &lt; 90) else -1\n            self.rotate(direction=self.zenith*up *self.zoom.value, angle= message.du*100)\n            self.rotate(direction=self.right*self.zoom.value, angle=-message.dv*100)\n\n    # Wheel Scroll Zoom\n    elif isinstance(message, ShaderMessage.Mouse.Scroll):\n        self.apply_zoom(-0.05*message.dy)\n\n    # Camera alignments and modes\n    elif isinstance(message, ShaderMessage.Keyboard.Press) and (message.action == 1):\n\n        # Switch camera modes\n        for _ in range(1):\n            if (message.key == ShaderKeyboard.Keys.NUMBER_1):\n                self.mode = CameraMode.FreeCamera\n            elif (message.key == ShaderKeyboard.Keys.NUMBER_2):\n                self.align(self.right_target,  GlobalBasis.Right)\n                self.align(self.up_target, GlobalBasis.Up)\n                self.mode = CameraMode.Camera2D\n                self.position.target[2] = 0\n                self.isometric.target = 0\n                self.zoom.target = 1\n            elif (message.key == ShaderKeyboard.Keys.NUMBER_3):\n                self.mode = CameraMode.Spherical\n            else: break\n        else:\n            self.log_info(f\"\u2022 Set mode to {self.mode}\")\n\n        # What is \"UP\", baby don't hurt me\n        for _ in range(1):\n            if (message.key == ShaderKeyboard.Keys.I):\n                self.zenith.target = GlobalBasis.Right\n            elif (message.key == ShaderKeyboard.Keys.J):\n                self.zenith.target = GlobalBasis.Up\n            elif (message.key == ShaderKeyboard.Keys.K):\n                self.zenith.target = GlobalBasis.Forward\n            else: break\n        else:\n            self.log_info(f\"\u2022 Set zenith to {self.zenith.target}\")\n            self.align(self.forward_target, self.zenith.target)\n            self.align(self.up_target, self.zenith.target, 90)\n            self.align(self.right_target, self.zenith.target, 90)\n\n        # Switch Projection\n        if (message.key == ShaderKeyboard.Keys.P):\n            self.projection = next(self.projection)\n            self.log_info(f\"\u2022 Set projection to {self.projection}\")\n</code></pre>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.right","title":"right","text":"<pre><code>right: Vector3D\n</code></pre> <p>The current 'right' direction relative to the camera</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.right_target","title":"right_target","text":"<pre><code>right_target: Vector3D\n</code></pre> <p>The target 'right' direction the camera is aligning to</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.left","title":"left","text":"<pre><code>left: Vector3D\n</code></pre> <p>The current 'left' direction relative to the camera</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.left_target","title":"left_target","text":"<pre><code>left_target: Vector3D\n</code></pre> <p>The target 'left' direction the camera is aligning to</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.up","title":"up","text":"<pre><code>up: Vector3D\n</code></pre> <p>The current 'upwards' direction relative to the camera</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.up_target","title":"up_target","text":"<pre><code>up_target: Vector3D\n</code></pre> <p>The target 'upwards' direction the camera is aligning to</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.down","title":"down","text":"<pre><code>down: Vector3D\n</code></pre> <p>The current 'downwards' direction relative to the camera</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.down_target","title":"down_target","text":"<pre><code>down_target: Vector3D\n</code></pre> <p>The target 'downwards' direction the camera is aligning to</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.forward","title":"forward","text":"<pre><code>forward: Vector3D\n</code></pre> <p>The current 'forward' direction relative to the camera</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.forward_target","title":"forward_target","text":"<pre><code>forward_target: Vector3D\n</code></pre> <p>The target 'forward' direction the camera is aligning to</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.backward","title":"backward","text":"<pre><code>backward: Vector3D\n</code></pre> <p>The current 'backward' direction relative to the camera</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.backward_target","title":"backward_target","text":"<pre><code>backward_target: Vector3D\n</code></pre> <p>The target 'backward' direction the camera is aligning to</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.x","title":"x","text":"<pre><code>x: float\n</code></pre> <p>The current X position of the camera</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.y","title":"y","text":"<pre><code>y: float\n</code></pre> <p>The current Y position of the camera</p>"},{"location":"code/shaderflow/modules/camera/#ShaderFlow.Modules.Camera.ShaderCamera.z","title":"z","text":"<pre><code>z: float\n</code></pre> <p>The current Z position of the camera</p>"},{"location":"code/shaderflow/modules/dynamics/","title":"File: <code>ShaderFlow/Modules/Dynamics.py</code>","text":""},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics","title":"ShaderFlow.Modules.Dynamics","text":""},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynType","title":"DynType","text":"<pre><code>DynType: TypeAlias = numpy.ndarray\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.INSTANT_FREQUENCY","title":"INSTANT_FREQUENCY","text":"<pre><code>INSTANT_FREQUENCY = 1000000.0\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder","title":"NumberDunder","text":"<p>               Bases: <code>Number</code></p> <p>Boring dunder methods for number-like objects</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>class NumberDunder(Number):\n    \"\"\"Boring dunder methods for number-like objects\"\"\"\n\n    def __float__(self) -&gt; float:\n        return float(self.value)\n    def __int__(self) -&gt; int:\n        return int(self.value)\n    def __str__(self) -&gt; str:\n        return str(self.value)\n\n    # Multiplication\n    def __mul__(self, other) -&gt; DynType:\n        return self.value * other\n    def __rmul__(self, other) -&gt; DynType:\n        return self * other\n\n    # Addition\n    def __add__(self, other) -&gt; DynType:\n        return self.value + other\n    def __radd__(self, other) -&gt; DynType:\n        return self + other\n\n    # Subtraction\n    def __sub__(self, other) -&gt; DynType:\n        return self.value - other\n    def __rsub__(self, other) -&gt; DynType:\n        return self - other\n\n    # Division\n    def __truediv__(self, other) -&gt; DynType:\n        return self.value / other\n    def __rtruediv__(self, other) -&gt; DynType:\n        return self / other\n\n    # Floor division\n    def __floordiv__(self, other) -&gt; DynType:\n        return self.value // other\n    def __rfloordiv__(self, other) -&gt; DynType:\n        return self // other\n\n    # Modulus\n    def __mod__(self, other) -&gt; DynType:\n        return self.value % other\n    def __rmod__(self, other) -&gt; DynType:\n        return self % other\n\n    # Power\n    def __pow__(self, other) -&gt; DynType:\n        return self.value ** other\n    def __rpow__(self, other) -&gt; DynType:\n        return self ** other\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__float__","title":"__float__","text":"<pre><code>__float__() -&gt; float\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __float__(self) -&gt; float:\n    return float(self.value)\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__int__","title":"__int__","text":"<pre><code>__int__() -&gt; int\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __int__(self) -&gt; int:\n    return int(self.value)\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __str__(self) -&gt; str:\n    return str(self.value)\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__mul__","title":"__mul__","text":"<pre><code>__mul__(other) -&gt; DynType\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __mul__(self, other) -&gt; DynType:\n    return self.value * other\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__rmul__","title":"__rmul__","text":"<pre><code>__rmul__(other) -&gt; DynType\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __rmul__(self, other) -&gt; DynType:\n    return self * other\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__add__","title":"__add__","text":"<pre><code>__add__(other) -&gt; DynType\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __add__(self, other) -&gt; DynType:\n    return self.value + other\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__radd__","title":"__radd__","text":"<pre><code>__radd__(other) -&gt; DynType\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __radd__(self, other) -&gt; DynType:\n    return self + other\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__sub__","title":"__sub__","text":"<pre><code>__sub__(other) -&gt; DynType\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __sub__(self, other) -&gt; DynType:\n    return self.value - other\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__rsub__","title":"__rsub__","text":"<pre><code>__rsub__(other) -&gt; DynType\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __rsub__(self, other) -&gt; DynType:\n    return self - other\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__truediv__","title":"__truediv__","text":"<pre><code>__truediv__(other) -&gt; DynType\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __truediv__(self, other) -&gt; DynType:\n    return self.value / other\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__rtruediv__","title":"__rtruediv__","text":"<pre><code>__rtruediv__(other) -&gt; DynType\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __rtruediv__(self, other) -&gt; DynType:\n    return self / other\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__floordiv__","title":"__floordiv__","text":"<pre><code>__floordiv__(other) -&gt; DynType\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __floordiv__(self, other) -&gt; DynType:\n    return self.value // other\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__rfloordiv__","title":"__rfloordiv__","text":"<pre><code>__rfloordiv__(other) -&gt; DynType\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __rfloordiv__(self, other) -&gt; DynType:\n    return self // other\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__mod__","title":"__mod__","text":"<pre><code>__mod__(other) -&gt; DynType\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __mod__(self, other) -&gt; DynType:\n    return self.value % other\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__rmod__","title":"__rmod__","text":"<pre><code>__rmod__(other) -&gt; DynType\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __rmod__(self, other) -&gt; DynType:\n    return self % other\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__pow__","title":"__pow__","text":"<pre><code>__pow__(other) -&gt; DynType\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __pow__(self, other) -&gt; DynType:\n    return self.value ** other\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.NumberDunder.__rpow__","title":"__rpow__","text":"<pre><code>__rpow__(other) -&gt; DynType\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __rpow__(self, other) -&gt; DynType:\n    return self ** other\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber","title":"DynamicNumber","text":"<p>               Bases: <code>NumberDunder</code>, <code>Number</code></p> <p>Simulate on time domain a progressive second order system</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber--sources","title":"Sources:","text":"<ul> <li>Control System classes on my university which I got 6/10 final grade but survived</li> <li>https://www.youtube.com/watch?v=KPoeNZZ6H4s &lt;- Math mostly took from here, thanks @t3ssel8r</li> <li>https://en.wikipedia.org/wiki/Semi-implicit_Euler_method</li> </ul> <p>This is a Python-port of the video's math, with custom implementation and extras</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>@define(slots=False)\nclass DynamicNumber(NumberDunder, Number):\n    \"\"\"\n    Simulate on time domain a progressive second order system\n\n    ### Sources:\n    - Control System classes on my university which I got 6/10 final grade but survived\n    - https://www.youtube.com/watch?v=KPoeNZZ6H4s &lt;- Math mostly took from here, thanks @t3ssel8r\n    - https://en.wikipedia.org/wiki/Semi-implicit_Euler_method\n\n    This is a Python-port of the video's math, with custom implementation and extras\n    \"\"\"\n\n    # # Base system values\n\n    def _ensure_numpy(self, value) -&gt; numpy.ndarray:\n        if isinstance(value, numpy.ndarray):\n            return value\n        return numpy.array(value, dtype=getattr(value, \"dtype\", self.dtype))\n\n    def _ensure_numpy_setattr(self, attribute, value) -&gt; numpy.ndarray:\n        return self._ensure_numpy(value)\n\n    value: DynType = field(default=0, on_setattr=_ensure_numpy_setattr)\n    \"\"\"The current value of the system. Prefer explicitly using it over the object itself\"\"\"\n\n    target: DynType = field(default=0, on_setattr=_ensure_numpy_setattr)\n    \"\"\"The target value the system is trying to reach, modeled by the parameters\"\"\"\n\n    dtype: numpy.dtype = field(default=numpy.float64)\n    \"\"\"Data type of the NumPy vectorized data\"\"\"\n\n    initial: DynType = field(default=None)\n    \"\"\"Initial value of the system, defaults to first value set\"\"\"\n\n    def __attrs_post_init__(self):\n        self.set(self.target or self.value)\n\n    def set(self, value: DynType, *, instant: bool=True) -&gt; None:\n        value = self._ensure_numpy(value)\n        self.value = deepcopy(value) if (instant) else self.value\n        self.target = deepcopy(value)\n        self.initial = deepcopy(value)\n        self.previous = deepcopy(value) if (instant) else self.previous\n\n        zeros = numpy.zeros_like(value)\n        self.integral = deepcopy(zeros)\n        self.derivative = deepcopy(zeros)\n        self.acceleration = deepcopy(zeros)\n\n    def reset(self, instant: bool=False):\n        self.set(self.initial, instant=instant)\n\n    # # Dynamics system parameters\n\n    frequency: float = 1.0\n    \"\"\"Natural frequency of the system in Hertz, \"the speed the system responds to a change in input\".\n    Also, the frequency it tends to vibrate at, doesn't affect shape of the resulting motion\"\"\"\n\n    zeta: float = 1.0\n    \"\"\"Damping coefficient, z=0 vibration never dies, z=1 is the critical limit where the system\n    does not overshoot, z&gt;1 increases this effect and the system takes longer to settle\"\"\"\n\n    response: float = 0.0\n    \"\"\"Defines the initial response \"time\" of the system, when r=1 the system responds instantly\n    to changes on the input, when r=0 the system takes a bit to respond (smoothstep like), when r&lt;0\n    the system \"anticipates\" motion\"\"\"\n\n    precision: float = 1e-6\n    \"\"\"If `max(target - value) &lt; precision`, the system stops updating to save computation\"\"\"\n\n    # # Auxiliary intrinsic variables\n\n    integral: DynType = 0.0\n    \"\"\"Integral of the system, the sum of all values over time\"\"\"\n\n    integrate: bool = False\n    \"\"\"Whether to integrate the system's value over time\"\"\"\n\n    derivative: DynType = 0.0\n    \"\"\"Derivative of the system, the rate of change of the value in ($unit/second)\"\"\"\n\n    acceleration: DynType = 0.0\n    \"\"\"Acceleration of the system, the rate of change of the derivative in ($unit/second^2)\"\"\"\n\n    previous: DynType = 0.0\n    \"\"\"Previous target value\"\"\"\n\n    @property\n    def instant(self) -&gt; bool:\n        \"\"\"Update the system immediately to the target value\"\"\"\n        return (self.frequency &gt;= INSTANT_FREQUENCY)\n\n    @property\n    def k1(self) -&gt; float:\n        \"\"\"Y velocity coefficient\"\"\"\n        return self.zeta / (pi * self.frequency)\n\n    @property\n    def k2(self) -&gt; float:\n        \"\"\"Y acceleration coefficient\"\"\"\n        return 1.0 / (self.radians*self.radians)\n\n    @property\n    def k3(self) -&gt; float:\n        \"\"\"X velocity coefficient\"\"\"\n        return (self.response * self.zeta) / (tau * self.frequency)\n\n    @property\n    def radians(self) -&gt; float:\n        \"\"\"Natural resonance frequency in radians per second\"\"\"\n        return (tau * self.frequency)\n\n    @property\n    def damping(self) -&gt; float:\n        \"\"\"Damping ratio of some sort\"\"\"\n        return self.radians * (abs(self.zeta*self.zeta - 1.0))**0.5\n\n    def next(self, target: Optional[DynType]=None, dt: float=1.0) -&gt; DynType:\n        \"\"\"\n        Update the system to the next time step, optionally with a new target value\n        # Fixme: There is a HUGE potential for speed gains if we don't create many temporary ndarray\n\n        Args:\n            target: Next target value to reach, None for previous\n            dt:     Time delta since last update\n\n        Returns:\n            The system's self.value\n        \"\"\"\n        if (not dt):\n            return self.value\n\n        # Update target and recreate if necessary\n        if (target is not None):\n            self.target = self._ensure_numpy(target)\n\n            if (self.target.shape != self.value.shape):\n                self.set(target)\n\n        # Todo: instant mode\n\n        # Optimization: Do not compute if within precision to target\n        if (numpy.abs(self.target - self.value).max() &lt; self.precision):\n            if (self.integrate):\n                self.integral += (self.value * dt)\n            return self.value\n\n        # \"Estimate velocity\"\n        velocity = (self.target - self.previous)/dt\n        self.previous = self.target\n\n        # \"Clamp k2 to stable values without jitter\"\n        if (self.radians*dt &lt; self.zeta):\n            k1 = self.k1\n            k2 = max(k1*dt, self.k2, 0.5*(k1+dt)*dt)\n\n        # \"Use pole matching when the system is very fast\"\n        else:\n            t1 = math.exp(-1 * self.zeta * self.radians * dt)\n            a1 = 2 * t1 * (math.cos if self.zeta &lt;= 1 else math.cosh)(self.damping*dt)\n            t2 = 1/(1 + t1*t1 - a1) * dt\n            k1 = t2 * (1 - t1*t1)\n            k2 = t2 * dt\n\n        # Integrate values\n        self.value       += (self.derivative * dt)\n        self.acceleration = (self.target + self.k3*velocity - self.value - k1*self.derivative)/k2\n        self.derivative  += (self.acceleration * dt)\n        if (self.integrate):\n            self.integral += (self.value * dt)\n        return self.value\n\n    @staticmethod\n    def extract(*objects: Union[Number, Self]) -&gt; tuple[Number]:\n        \"\"\"Extract the values from DynamicNumbers objects or return the same object\"\"\"\n        return tuple(obj.value if isinstance(obj, DynamicNumber) else obj for obj in objects)\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.value","title":"value","text":"<pre><code>value: DynType = field(\n    default=0, on_setattr=_ensure_numpy_setattr\n)\n</code></pre> <p>The current value of the system. Prefer explicitly using it over the object itself</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.target","title":"target","text":"<pre><code>target: DynType = field(\n    default=0, on_setattr=_ensure_numpy_setattr\n)\n</code></pre> <p>The target value the system is trying to reach, modeled by the parameters</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.dtype","title":"dtype","text":"<pre><code>dtype: numpy.dtype = field(default=numpy.float64)\n</code></pre> <p>Data type of the NumPy vectorized data</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.initial","title":"initial","text":"<pre><code>initial: DynType = field(default=None)\n</code></pre> <p>Initial value of the system, defaults to first value set</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.__attrs_post_init__","title":"__attrs_post_init__","text":"<pre><code>__attrs_post_init__()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def __attrs_post_init__(self):\n    self.set(self.target or self.value)\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.set","title":"set","text":"<pre><code>set(value: DynType, *, instant: bool = True) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def set(self, value: DynType, *, instant: bool=True) -&gt; None:\n    value = self._ensure_numpy(value)\n    self.value = deepcopy(value) if (instant) else self.value\n    self.target = deepcopy(value)\n    self.initial = deepcopy(value)\n    self.previous = deepcopy(value) if (instant) else self.previous\n\n    zeros = numpy.zeros_like(value)\n    self.integral = deepcopy(zeros)\n    self.derivative = deepcopy(zeros)\n    self.acceleration = deepcopy(zeros)\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.reset","title":"reset","text":"<pre><code>reset(instant: bool = False)\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def reset(self, instant: bool=False):\n    self.set(self.initial, instant=instant)\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.frequency","title":"frequency","text":"<pre><code>frequency: float = 1.0\n</code></pre> <p>Natural frequency of the system in Hertz, \"the speed the system responds to a change in input\". Also, the frequency it tends to vibrate at, doesn't affect shape of the resulting motion</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.zeta","title":"zeta","text":"<pre><code>zeta: float = 1.0\n</code></pre> <p>Damping coefficient, z=0 vibration never dies, z=1 is the critical limit where the system does not overshoot, z&gt;1 increases this effect and the system takes longer to settle</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.response","title":"response","text":"<pre><code>response: float = 0.0\n</code></pre> <p>Defines the initial response \"time\" of the system, when r=1 the system responds instantly to changes on the input, when r=0 the system takes a bit to respond (smoothstep like), when r&lt;0 the system \"anticipates\" motion</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.precision","title":"precision","text":"<pre><code>precision: float = 1e-06\n</code></pre> <p>If <code>max(target - value) &lt; precision</code>, the system stops updating to save computation</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.integral","title":"integral","text":"<pre><code>integral: DynType = 0.0\n</code></pre> <p>Integral of the system, the sum of all values over time</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.integrate","title":"integrate","text":"<pre><code>integrate: bool = False\n</code></pre> <p>Whether to integrate the system's value over time</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.derivative","title":"derivative","text":"<pre><code>derivative: DynType = 0.0\n</code></pre> <p>Derivative of the system, the rate of change of the value in ($unit/second)</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.acceleration","title":"acceleration","text":"<pre><code>acceleration: DynType = 0.0\n</code></pre> <p>Acceleration of the system, the rate of change of the derivative in ($unit/second^2)</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.previous","title":"previous","text":"<pre><code>previous: DynType = 0.0\n</code></pre> <p>Previous target value</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.instant","title":"instant","text":"<pre><code>instant: bool\n</code></pre> <p>Update the system immediately to the target value</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.k1","title":"k1","text":"<pre><code>k1: float\n</code></pre> <p>Y velocity coefficient</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.k2","title":"k2","text":"<pre><code>k2: float\n</code></pre> <p>Y acceleration coefficient</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.k3","title":"k3","text":"<pre><code>k3: float\n</code></pre> <p>X velocity coefficient</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.radians","title":"radians","text":"<pre><code>radians: float\n</code></pre> <p>Natural resonance frequency in radians per second</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.damping","title":"damping","text":"<pre><code>damping: float\n</code></pre> <p>Damping ratio of some sort</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.next","title":"next","text":"<pre><code>next(\n    target: Optional[DynType] = None, dt: float = 1.0\n) -&gt; DynType\n</code></pre> <p>Update the system to the next time step, optionally with a new target value</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.next--fixme-there-is-a-huge-potential-for-speed-gains-if-we-dont-create-many-temporary-ndarray","title":"Fixme: There is a HUGE potential for speed gains if we don't create many temporary ndarray","text":"<p>Parameters:</p> <ul> <li> <code>target</code>               (<code>Optional[DynType]</code>, default:                   <code>None</code> )           \u2013            <p>Next target value to reach, None for previous</p> </li> <li> <code>dt</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>Time delta since last update</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DynType</code>           \u2013            <p>The system's self.value</p> </li> </ul> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def next(self, target: Optional[DynType]=None, dt: float=1.0) -&gt; DynType:\n    \"\"\"\n    Update the system to the next time step, optionally with a new target value\n    # Fixme: There is a HUGE potential for speed gains if we don't create many temporary ndarray\n\n    Args:\n        target: Next target value to reach, None for previous\n        dt:     Time delta since last update\n\n    Returns:\n        The system's self.value\n    \"\"\"\n    if (not dt):\n        return self.value\n\n    # Update target and recreate if necessary\n    if (target is not None):\n        self.target = self._ensure_numpy(target)\n\n        if (self.target.shape != self.value.shape):\n            self.set(target)\n\n    # Todo: instant mode\n\n    # Optimization: Do not compute if within precision to target\n    if (numpy.abs(self.target - self.value).max() &lt; self.precision):\n        if (self.integrate):\n            self.integral += (self.value * dt)\n        return self.value\n\n    # \"Estimate velocity\"\n    velocity = (self.target - self.previous)/dt\n    self.previous = self.target\n\n    # \"Clamp k2 to stable values without jitter\"\n    if (self.radians*dt &lt; self.zeta):\n        k1 = self.k1\n        k2 = max(k1*dt, self.k2, 0.5*(k1+dt)*dt)\n\n    # \"Use pole matching when the system is very fast\"\n    else:\n        t1 = math.exp(-1 * self.zeta * self.radians * dt)\n        a1 = 2 * t1 * (math.cos if self.zeta &lt;= 1 else math.cosh)(self.damping*dt)\n        t2 = 1/(1 + t1*t1 - a1) * dt\n        k1 = t2 * (1 - t1*t1)\n        k2 = t2 * dt\n\n    # Integrate values\n    self.value       += (self.derivative * dt)\n    self.acceleration = (self.target + self.k3*velocity - self.value - k1*self.derivative)/k2\n    self.derivative  += (self.acceleration * dt)\n    if (self.integrate):\n        self.integral += (self.value * dt)\n    return self.value\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.DynamicNumber.extract","title":"extract","text":"<pre><code>extract(*objects: Union[Number, Self]) -&gt; tuple[Number]\n</code></pre> <p>Extract the values from DynamicNumbers objects or return the same object</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>@staticmethod\ndef extract(*objects: Union[Number, Self]) -&gt; tuple[Number]:\n    \"\"\"Extract the values from DynamicNumbers objects or return the same object\"\"\"\n    return tuple(obj.value if isinstance(obj, DynamicNumber) else obj for obj in objects)\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.ShaderDynamics","title":"ShaderDynamics","text":"<p>               Bases: <code>ShaderModule</code>, <code>DynamicNumber</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>@define\nclass ShaderDynamics(ShaderModule, DynamicNumber):\n    name: str  = \"iShaderDynamics\"\n    real: bool = False\n\n    primary: bool = True\n    \"\"\"Whether to output the value of the system as a uniform\"\"\"\n\n    differentiate: bool = False\n    \"\"\"Where to output the derivative of the system as a uniform\"\"\"\n\n    def build(self) -&gt; None:\n        DynamicNumber.__attrs_post_init__(self)\n\n    def setup(self) -&gt; None:\n        self.reset(instant=self.scene.freewheel)\n\n    def update(self) -&gt; None:\n        # Note: abs(dt) the system is unstable backwards in time (duh)\n        self.next(dt=abs(self.scene.rdt if self.real else self.scene.dt))\n\n    @property\n    def type(self) -&gt; Optional[str]:\n        if not (shape := self.value.shape):\n            return \"float\"\n        elif (shape[0] == 1):\n            return \"float\"\n        elif (shape[0] == 2):\n            return \"vec2\"\n        elif (shape[0] == 3):\n            return \"vec3\"\n        elif (shape[0] == 4):\n            return \"vec4\"\n        return None\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        if (not self.type):\n            return None\n\n        if (self.primary):\n            yield Uniform(self.type, f\"{self.name}\", self.value)\n\n        if (self.integrate):\n            yield Uniform(self.type, f\"{self.name}Integral\", self.integral)\n\n        if (self.differentiate):\n            yield Uniform(self.type, f\"{self.name}Derivative\", self.derivative)\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.ShaderDynamics.name","title":"name","text":"<pre><code>name: str = 'iShaderDynamics'\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.ShaderDynamics.real","title":"real","text":"<pre><code>real: bool = False\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.ShaderDynamics.primary","title":"primary","text":"<pre><code>primary: bool = True\n</code></pre> <p>Whether to output the value of the system as a uniform</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.ShaderDynamics.differentiate","title":"differentiate","text":"<pre><code>differentiate: bool = False\n</code></pre> <p>Where to output the derivative of the system as a uniform</p>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.ShaderDynamics.build","title":"build","text":"<pre><code>build() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def build(self) -&gt; None:\n    DynamicNumber.__attrs_post_init__(self)\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.ShaderDynamics.setup","title":"setup","text":"<pre><code>setup() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def setup(self) -&gt; None:\n    self.reset(instant=self.scene.freewheel)\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.ShaderDynamics.update","title":"update","text":"<pre><code>update() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def update(self) -&gt; None:\n    # Note: abs(dt) the system is unstable backwards in time (duh)\n    self.next(dt=abs(self.scene.rdt if self.real else self.scene.dt))\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.ShaderDynamics.type","title":"type","text":"<pre><code>type: Optional[str]\n</code></pre>"},{"location":"code/shaderflow/modules/dynamics/#ShaderFlow.Modules.Dynamics.ShaderDynamics.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Dynamics.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    if (not self.type):\n        return None\n\n    if (self.primary):\n        yield Uniform(self.type, f\"{self.name}\", self.value)\n\n    if (self.integrate):\n        yield Uniform(self.type, f\"{self.name}Integral\", self.integral)\n\n    if (self.differentiate):\n        yield Uniform(self.type, f\"{self.name}Derivative\", self.derivative)\n</code></pre>"},{"location":"code/shaderflow/modules/frametimer/","title":"File: <code>ShaderFlow/Modules/Frametimer.py</code>","text":""},{"location":"code/shaderflow/modules/frametimer/#ShaderFlow.Modules.Frametimer","title":"ShaderFlow.Modules.Frametimer","text":""},{"location":"code/shaderflow/modules/frametimer/#ShaderFlow.Modules.Frametimer.ShaderFrametimer","title":"ShaderFrametimer","text":"<p>               Bases: <code>ShaderModule</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Frametimer.py</code> <pre><code>@define\nclass ShaderFrametimer(ShaderModule):\n    frametimes: deque[float] = Factory(deque)\n    history: float = 2\n\n    @property\n    def length(self) -&gt; int:\n        return max(int(self.history * self.scene.fps), 10)\n\n    # Framerate manipulation\n\n    def update(self):\n        if (self.scene.rdt == 0):\n            return\n        self.frametimes.append(self.scene.rdt)\n        while len(self.frametimes) &gt; self.length:\n            self.frametimes.popleft()\n\n    def percent(self, percent: float=1) -&gt; float:\n        cut = int(len(self.frametimes) * (percent/100))\n        return numpy.sort(self.frametimes)[-cut:]\n\n    def __safe__(self, value):\n        return value if value &lt; 1e8 else 0\n\n    # # Frametimes\n\n    def frametime_average(self, percent: float=100) -&gt; float:\n        frametimes = self.percent(percent)\n        return sum(frametimes) / (len(frametimes) + 1e-9)\n\n    @property\n    def frametime_maximum(self) -&gt; float:\n        return max(self.frametimes)\n\n    @property\n    def frametime_minimum(self) -&gt; float:\n        return min(self.frametimes)\n\n    # # Framerates\n\n    def framerate_average(self, percent: float=100) -&gt; float:\n        return self.__safe__(1.0 / (self.frametime_average(percent) + 1e-9))\n\n    @property\n    def framerate_maximum(self) -&gt; float:\n        return self.__safe__(1.0 / (self.frametime_minimum + 1e-9))\n\n    @property\n    def framerate_minimum(self) -&gt; float:\n        return self.__safe__(1.0 / (self.frametime_maximum + 1e-9))\n\n    # ShaderFlow\n\n    def ui(self):\n        imgui.plot_lines(\n            (\n                f\"Target  {self.scene.fps:7.3f} fps\\n\"\n                f\"Average {self.framerate_average(100):7.3f} fps\\n\"\n                # f\"Low 10% {self.framerate_average(10):7.3f} fps\\n\"\n                # f\"Low  1% {self.framerate_average(1):7.3f} fps\\n\"\n                f\"Maximum {self.framerate_maximum:7.3f} fps\\n\"\n                f\"Minimum {self.framerate_minimum:7.3f} fps\\n\"\n            ),\n            numpy.array(self.frametimes, dtype=numpy.float32),\n            scale_min = 0,\n            graph_size = (0, 70)\n        )\n\n        if (state := imgui.input_float(\"History (Seconds)\", self.history, 0.5, 0.5, \"%.2f\"))[0]:\n            self.history = max(0, state[1])\n</code></pre>"},{"location":"code/shaderflow/modules/frametimer/#ShaderFlow.Modules.Frametimer.ShaderFrametimer.frametimes","title":"frametimes","text":"<pre><code>frametimes: deque[float] = Factory(deque)\n</code></pre>"},{"location":"code/shaderflow/modules/frametimer/#ShaderFlow.Modules.Frametimer.ShaderFrametimer.history","title":"history","text":"<pre><code>history: float = 2\n</code></pre>"},{"location":"code/shaderflow/modules/frametimer/#ShaderFlow.Modules.Frametimer.ShaderFrametimer.length","title":"length","text":"<pre><code>length: int\n</code></pre>"},{"location":"code/shaderflow/modules/frametimer/#ShaderFlow.Modules.Frametimer.ShaderFrametimer.update","title":"update","text":"<pre><code>update()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Frametimer.py</code> <pre><code>def update(self):\n    if (self.scene.rdt == 0):\n        return\n    self.frametimes.append(self.scene.rdt)\n    while len(self.frametimes) &gt; self.length:\n        self.frametimes.popleft()\n</code></pre>"},{"location":"code/shaderflow/modules/frametimer/#ShaderFlow.Modules.Frametimer.ShaderFrametimer.percent","title":"percent","text":"<pre><code>percent(percent: float = 1) -&gt; float\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Frametimer.py</code> <pre><code>def percent(self, percent: float=1) -&gt; float:\n    cut = int(len(self.frametimes) * (percent/100))\n    return numpy.sort(self.frametimes)[-cut:]\n</code></pre>"},{"location":"code/shaderflow/modules/frametimer/#ShaderFlow.Modules.Frametimer.ShaderFrametimer.__safe__","title":"__safe__","text":"<pre><code>__safe__(value)\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Frametimer.py</code> <pre><code>def __safe__(self, value):\n    return value if value &lt; 1e8 else 0\n</code></pre>"},{"location":"code/shaderflow/modules/frametimer/#ShaderFlow.Modules.Frametimer.ShaderFrametimer.frametime_average","title":"frametime_average","text":"<pre><code>frametime_average(percent: float = 100) -&gt; float\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Frametimer.py</code> <pre><code>def frametime_average(self, percent: float=100) -&gt; float:\n    frametimes = self.percent(percent)\n    return sum(frametimes) / (len(frametimes) + 1e-9)\n</code></pre>"},{"location":"code/shaderflow/modules/frametimer/#ShaderFlow.Modules.Frametimer.ShaderFrametimer.frametime_maximum","title":"frametime_maximum","text":"<pre><code>frametime_maximum: float\n</code></pre>"},{"location":"code/shaderflow/modules/frametimer/#ShaderFlow.Modules.Frametimer.ShaderFrametimer.frametime_minimum","title":"frametime_minimum","text":"<pre><code>frametime_minimum: float\n</code></pre>"},{"location":"code/shaderflow/modules/frametimer/#ShaderFlow.Modules.Frametimer.ShaderFrametimer.framerate_average","title":"framerate_average","text":"<pre><code>framerate_average(percent: float = 100) -&gt; float\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Frametimer.py</code> <pre><code>def framerate_average(self, percent: float=100) -&gt; float:\n    return self.__safe__(1.0 / (self.frametime_average(percent) + 1e-9))\n</code></pre>"},{"location":"code/shaderflow/modules/frametimer/#ShaderFlow.Modules.Frametimer.ShaderFrametimer.framerate_maximum","title":"framerate_maximum","text":"<pre><code>framerate_maximum: float\n</code></pre>"},{"location":"code/shaderflow/modules/frametimer/#ShaderFlow.Modules.Frametimer.ShaderFrametimer.framerate_minimum","title":"framerate_minimum","text":"<pre><code>framerate_minimum: float\n</code></pre>"},{"location":"code/shaderflow/modules/frametimer/#ShaderFlow.Modules.Frametimer.ShaderFrametimer.ui","title":"ui","text":"<pre><code>ui()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Frametimer.py</code> <pre><code>def ui(self):\n    imgui.plot_lines(\n        (\n            f\"Target  {self.scene.fps:7.3f} fps\\n\"\n            f\"Average {self.framerate_average(100):7.3f} fps\\n\"\n            # f\"Low 10% {self.framerate_average(10):7.3f} fps\\n\"\n            # f\"Low  1% {self.framerate_average(1):7.3f} fps\\n\"\n            f\"Maximum {self.framerate_maximum:7.3f} fps\\n\"\n            f\"Minimum {self.framerate_minimum:7.3f} fps\\n\"\n        ),\n        numpy.array(self.frametimes, dtype=numpy.float32),\n        scale_min = 0,\n        graph_size = (0, 70)\n    )\n\n    if (state := imgui.input_float(\"History (Seconds)\", self.history, 0.5, 0.5, \"%.2f\"))[0]:\n        self.history = max(0, state[1])\n</code></pre>"},{"location":"code/shaderflow/modules/keyboard/","title":"File: <code>ShaderFlow/Modules/Keyboard.py</code>","text":""},{"location":"code/shaderflow/modules/keyboard/#ShaderFlow.Modules.Keyboard","title":"ShaderFlow.Modules.Keyboard","text":""},{"location":"code/shaderflow/modules/keyboard/#ShaderFlow.Modules.Keyboard.__camel__","title":"__camel__","text":"<pre><code>__camel__(name: str) -&gt; str\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Keyboard.py</code> <pre><code>@functools.lru_cache(maxsize=None)\ndef __camel__(name: str) -&gt; str:\n    # Convert stuff like (NUMPAD_9 -&gt; Numpad9) and (Home -&gt; Home)\n    return \"\".join([word.capitalize() for word in name.split(\"_\")])\n</code></pre>"},{"location":"code/shaderflow/modules/keyboard/#ShaderFlow.Modules.Keyboard.ShaderKeyboard","title":"ShaderKeyboard","text":"<p>               Bases: <code>ShaderModule</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Keyboard.py</code> <pre><code>@define\nclass ShaderKeyboard(ShaderModule):\n    Keys    = None\n    DirKeys = None\n\n    _pressed: dict[int, bool] = Factory(dict)\n\n    @staticmethod\n    def set_keymap(keymap: ModernglKeys) -&gt; None:\n        ShaderKeyboard.DirKeys = {key: getattr(keymap, key) for key in dir(keymap) if not key.startswith(\"_\")}\n        ShaderKeyboard.Keys = keymap\n\n    def pressed(self, key: Union[int, ModernglKeys]=None) -&gt; bool:\n        return self._pressed.setdefault(key, False)\n\n    def __call__(self, *a, **k) -&gt; bool:\n        return self.pressed(*a, **k)\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        return\n        for name, key in ShaderKeyboard.DirKeys.items():\n            yield Uniform(\"bool\", f\"iKey{__camel__(name)}\", self._pressed.setdefault(key, False))\n\n    def handle(self, message: ShaderMessage):\n        if isinstance(message, ShaderMessage.Keyboard.Press):\n            self._pressed[message.key] = (message.action != ShaderKeyboard.Keys.ACTION_RELEASE)\n</code></pre>"},{"location":"code/shaderflow/modules/keyboard/#ShaderFlow.Modules.Keyboard.ShaderKeyboard.Keys","title":"Keys","text":"<pre><code>Keys = None\n</code></pre>"},{"location":"code/shaderflow/modules/keyboard/#ShaderFlow.Modules.Keyboard.ShaderKeyboard.DirKeys","title":"DirKeys","text":"<pre><code>DirKeys = None\n</code></pre>"},{"location":"code/shaderflow/modules/keyboard/#ShaderFlow.Modules.Keyboard.ShaderKeyboard.set_keymap","title":"set_keymap","text":"<pre><code>set_keymap(keymap: ModernglKeys) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Keyboard.py</code> <pre><code>@staticmethod\ndef set_keymap(keymap: ModernglKeys) -&gt; None:\n    ShaderKeyboard.DirKeys = {key: getattr(keymap, key) for key in dir(keymap) if not key.startswith(\"_\")}\n    ShaderKeyboard.Keys = keymap\n</code></pre>"},{"location":"code/shaderflow/modules/keyboard/#ShaderFlow.Modules.Keyboard.ShaderKeyboard.pressed","title":"pressed","text":"<pre><code>pressed(key: Union[int, ModernglKeys] = None) -&gt; bool\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Keyboard.py</code> <pre><code>def pressed(self, key: Union[int, ModernglKeys]=None) -&gt; bool:\n    return self._pressed.setdefault(key, False)\n</code></pre>"},{"location":"code/shaderflow/modules/keyboard/#ShaderFlow.Modules.Keyboard.ShaderKeyboard.__call__","title":"__call__","text":"<pre><code>__call__(*a, **k) -&gt; bool\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Keyboard.py</code> <pre><code>def __call__(self, *a, **k) -&gt; bool:\n    return self.pressed(*a, **k)\n</code></pre>"},{"location":"code/shaderflow/modules/keyboard/#ShaderFlow.Modules.Keyboard.ShaderKeyboard.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Keyboard.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    return\n    for name, key in ShaderKeyboard.DirKeys.items():\n        yield Uniform(\"bool\", f\"iKey{__camel__(name)}\", self._pressed.setdefault(key, False))\n</code></pre>"},{"location":"code/shaderflow/modules/keyboard/#ShaderFlow.Modules.Keyboard.ShaderKeyboard.handle","title":"handle","text":"<pre><code>handle(message: ShaderMessage)\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Keyboard.py</code> <pre><code>def handle(self, message: ShaderMessage):\n    if isinstance(message, ShaderMessage.Keyboard.Press):\n        self._pressed[message.key] = (message.action != ShaderKeyboard.Keys.ACTION_RELEASE)\n</code></pre>"},{"location":"code/shaderflow/modules/noise/","title":"File: <code>ShaderFlow/Modules/Noise.py</code>","text":""},{"location":"code/shaderflow/modules/noise/#ShaderFlow.Modules.Noise","title":"ShaderFlow.Modules.Noise","text":""},{"location":"code/shaderflow/modules/noise/#ShaderFlow.Modules.Noise.ShaderNoise","title":"ShaderNoise","text":"<p>               Bases: <code>ShaderModule</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Noise.py</code> <pre><code>@define\nclass ShaderNoise(ShaderModule):\n    name: str = \"Noise\"\n    seed: int = Factory(functools.partial(random.randint, 0, 10000))\n\n    # TODO: Convert these to BrokenSecondOrderShaderDynamics?\n\n    # Maximum amplitude (roughly)\n    amplitude: float = 1\n    frequency: float = 1\n    octaves:   int   = 1\n    roughness: float = 1\n\n    # # Number of dimensions for this noise\n\n    __dimensions__: int = 1\n\n    @property\n    def dimensions(self):\n        return self.__dimensions__\n\n    @dimensions.setter\n    def dimensions(self, value):\n        self.__dimensions__ = value\n        self.__simplex__ = [\n            opensimplex.OpenSimplex(seed=self.seed + dimension*1000)\n            for dimension in range(self.dimensions)\n        ]\n\n    @property\n    def type(self) -&gt; str:\n        return {\n            1: \"float\",\n            2: \"vec2\",\n            3: \"vec3\",\n        }[self.dimensions]\n\n    # Noise generator\n    __simplex__: opensimplex.OpenSimplex = None\n\n    def __init__(self, dimensions: int=1, *args, **kwargs):\n        self.__attrs_init__(*args, **kwargs)\n        self.dimensions = dimensions\n\n    def at(self, x: float=0, y: float=0, z: float=0) -&gt; float:\n        \"\"\"Internal function to return a noise value for three dimensions\"\"\"\n        noise = numpy.zeros(self.dimensions, dtype=numpy.float32)\n\n        for dimension in range(self.dimensions):\n            for octave in range(self.octaves):\n\n                # The \"position velocity\" due frequency of this octave\n                # \u00b7 One octave up, double the frequency\n                # \u00b7 Scale linearly with self.frequency\n                k = (2**octave) * self.frequency\n\n                # Amplitude of this octave so noise remains bounded\n                # \u00b7 Double the octave, half the amplitude\n                amplitude = self.amplitude * (self.roughness)**octave\n\n                # Sum this octave's noise to the total\n                # Fixme: x=0, y=0, z=0 yields the same noise for all octaves\n                noise[dimension] += self.__simplex__[dimension].noise3(x*k, y*k, z*k) * amplitude\n\n        return noise\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        yield Uniform(self.type, f\"i{self.name}\", self.at(self.scene.time))\n</code></pre>"},{"location":"code/shaderflow/modules/noise/#ShaderFlow.Modules.Noise.ShaderNoise.name","title":"name","text":"<pre><code>name: str = 'Noise'\n</code></pre>"},{"location":"code/shaderflow/modules/noise/#ShaderFlow.Modules.Noise.ShaderNoise.seed","title":"seed","text":"<pre><code>seed: int = Factory(\n    functools.partial(random.randint, 0, 10000)\n)\n</code></pre>"},{"location":"code/shaderflow/modules/noise/#ShaderFlow.Modules.Noise.ShaderNoise.amplitude","title":"amplitude","text":"<pre><code>amplitude: float = 1\n</code></pre>"},{"location":"code/shaderflow/modules/noise/#ShaderFlow.Modules.Noise.ShaderNoise.frequency","title":"frequency","text":"<pre><code>frequency: float = 1\n</code></pre>"},{"location":"code/shaderflow/modules/noise/#ShaderFlow.Modules.Noise.ShaderNoise.octaves","title":"octaves","text":"<pre><code>octaves: int = 1\n</code></pre>"},{"location":"code/shaderflow/modules/noise/#ShaderFlow.Modules.Noise.ShaderNoise.roughness","title":"roughness","text":"<pre><code>roughness: float = 1\n</code></pre>"},{"location":"code/shaderflow/modules/noise/#ShaderFlow.Modules.Noise.ShaderNoise.__dimensions__","title":"__dimensions__","text":"<pre><code>__dimensions__: int = 1\n</code></pre>"},{"location":"code/shaderflow/modules/noise/#ShaderFlow.Modules.Noise.ShaderNoise.type","title":"type","text":"<pre><code>type: str\n</code></pre>"},{"location":"code/shaderflow/modules/noise/#ShaderFlow.Modules.Noise.ShaderNoise.__simplex__","title":"__simplex__","text":"<pre><code>__simplex__: opensimplex.OpenSimplex = None\n</code></pre>"},{"location":"code/shaderflow/modules/noise/#ShaderFlow.Modules.Noise.ShaderNoise.__init__","title":"__init__","text":"<pre><code>__init__(dimensions: int = 1, *args, **kwargs)\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Noise.py</code> <pre><code>def __init__(self, dimensions: int=1, *args, **kwargs):\n    self.__attrs_init__(*args, **kwargs)\n    self.dimensions = dimensions\n</code></pre>"},{"location":"code/shaderflow/modules/noise/#ShaderFlow.Modules.Noise.ShaderNoise.dimensions","title":"dimensions","text":"<pre><code>dimensions = dimensions\n</code></pre>"},{"location":"code/shaderflow/modules/noise/#ShaderFlow.Modules.Noise.ShaderNoise.at","title":"at","text":"<pre><code>at(x: float = 0, y: float = 0, z: float = 0) -&gt; float\n</code></pre> <p>Internal function to return a noise value for three dimensions</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Noise.py</code> <pre><code>def at(self, x: float=0, y: float=0, z: float=0) -&gt; float:\n    \"\"\"Internal function to return a noise value for three dimensions\"\"\"\n    noise = numpy.zeros(self.dimensions, dtype=numpy.float32)\n\n    for dimension in range(self.dimensions):\n        for octave in range(self.octaves):\n\n            # The \"position velocity\" due frequency of this octave\n            # \u00b7 One octave up, double the frequency\n            # \u00b7 Scale linearly with self.frequency\n            k = (2**octave) * self.frequency\n\n            # Amplitude of this octave so noise remains bounded\n            # \u00b7 Double the octave, half the amplitude\n            amplitude = self.amplitude * (self.roughness)**octave\n\n            # Sum this octave's noise to the total\n            # Fixme: x=0, y=0, z=0 yields the same noise for all octaves\n            noise[dimension] += self.__simplex__[dimension].noise3(x*k, y*k, z*k) * amplitude\n\n    return noise\n</code></pre>"},{"location":"code/shaderflow/modules/noise/#ShaderFlow.Modules.Noise.ShaderNoise.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Noise.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    yield Uniform(self.type, f\"i{self.name}\", self.at(self.scene.time))\n</code></pre>"},{"location":"code/shaderflow/modules/piano/","title":"File: <code>ShaderFlow/Modules/Piano.py</code>","text":""},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano","title":"ShaderFlow.Modules.Piano","text":""},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.MAX_CHANNELS","title":"MAX_CHANNELS","text":"<pre><code>MAX_CHANNELS = 32\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.MAX_ROLLING","title":"MAX_ROLLING","text":"<pre><code>MAX_ROLLING = 256\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.MAX_NOTE","title":"MAX_NOTE","text":"<pre><code>MAX_NOTE = 128\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano","title":"ShaderPiano","text":"<p>               Bases: <code>ShaderModule</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>@define\nclass ShaderPiano(ShaderModule):\n    name: str = \"iPiano\"\n    \"\"\"Texture name prefixes for this Module\"\"\"\n\n    tempo: deque[tuple[Seconds, BPM]] = Factory(deque)\n    \"\"\"List of tempo changes at (seconds, bpm)\"\"\"\n\n    keys_texture: ShaderTexture = None\n    \"\"\"Velocities texture, X is MIDI index, Y is Velocity, size (MAX_NOTE, 1)\"\"\"\n\n    channel_texture: ShaderTexture = None\n    \"\"\"Channel being played texture, X is MIDI index, Y is Channel, size (MAX_NOTE, 1)\"\"\"\n\n    roll_texture: ShaderTexture = None\n    \"\"\"Piano roll'ling notes main texture'. The X coordinate is the MIDI index, pixels contains data\n    (start, end, channel, velocity), of each playing key on the Y. Size (MAX_ROLLING, MAX_NOTE)\"\"\"\n\n    time_offset: Seconds = 0\n    \"\"\"Offset the notes being played search from the current time\"\"\"\n\n    roll_time: Seconds = 2\n    \"\"\"How long the notes are visible\"\"\"\n\n    height: float = 0.275\n    \"\"\"Height of the piano in the shader (0-1)\"\"\"\n\n    black_ratio: float = 0.6\n    \"\"\"How long are black keys compared to white keys\"\"\"\n\n    global_minimum_note: int = MAX_NOTE\n    \"\"\"The lowest note in the loaded notes\"\"\"\n\n    global_maximum_note: int = 0\n    \"\"\"The highest note in the loaded notes\"\"\"\n\n    extra_keys: int = 6\n    \"\"\"Display the dynamic range plus this many keys on each side\"\"\"\n\n    lookahead: Seconds = 2\n    \"\"\"Lookup notes in (roll_time + this) for setting the dynamic ranges\"\"\"\n\n    release_before_end: Seconds = 0.03\n    \"\"\"Workaround for the transition between close/glued to be perceived\"\"\"\n\n    key_press_dynamics: DynamicNumber = Factory(lambda: DynamicNumber(\n        value=numpy.zeros(MAX_NOTE, dtype=numpy.float32),\n        frequency=4, zeta=0.4, response=0, precision=0\n    ))\n\n    note_range_dynamics: DynamicNumber = Factory(lambda: DynamicNumber(\n        value=numpy.zeros(2, dtype=numpy.float32),\n        frequency=0.05, zeta=1/(2**0.5), response=0,\n    ))\n\n    tree: dict[int, dict[int, deque[BrokenPianoNote]]] = Factory(dict)\n    \"\"\"Internal data structure for storing the notes\"\"\"\n\n    @property\n    def lookup_time(self) -&gt; Seconds:\n        \"\"\"The full lookup time we should care for future notes (rolling+future range)\"\"\"\n        return (self.roll_time + self.lookahead)\n\n    # # Internal\n\n    def build(self):\n        self.keys_texture    = ShaderTexture(scene=self.scene, name=f\"{self.name}Keys\").from_numpy(self._empty_keys())\n        self.channel_texture = ShaderTexture(scene=self.scene, name=f\"{self.name}Chan\").from_numpy(self._empty_keys())\n        self.roll_texture    = ShaderTexture(scene=self.scene, name=f\"{self.name}Roll\").from_numpy(self._empty_roll())\n        self.tempo_texture   = ShaderTexture(scene=self.scene, name=f\"{self.name}Tempo\").from_numpy(numpy.zeros((100, 1, 2), numpy.float32))\n\n    def _empty_keys(self) -&gt; numpy.ndarray:\n        return numpy.zeros((1, MAX_NOTE), dtype=numpy.float32)\n\n    def _empty_roll(self) -&gt; numpy.ndarray:\n        return numpy.zeros((MAX_NOTE, MAX_ROLLING, 4), dtype=numpy.float32)\n\n    # # Data structure\n\n    @staticmethod\n    def _ranges(start: Seconds, end: Seconds) -&gt; Iterable[int]:\n        return range(int(start), int(end)+1)\n\n    def clear(self):\n        self.tree.clear()\n\n    def add_note(self, note: Optional[BrokenPianoNote]) -&gt; None:\n        if note is None:\n            return\n        for index in self._ranges(note.start, note.end):\n            self.tree.setdefault(note.note, dict()).setdefault(index, deque()).append(note)\n        self.update_global_ranges(note.note)\n\n    @property\n    def notes(self) -&gt; Iterable[BrokenPianoNote]:\n        for block in self.tree.values():\n            for notes in block.values():\n                yield from notes\n\n    @property\n    def duration(self) -&gt; float:\n        return max((note.end for note in self.notes), default=0)\n\n    def __iter__(self) -&gt; Iterable[BrokenPianoNote]:\n        return self.notes\n\n    def notes_between(self, index: int, start: Seconds, end: Seconds) -&gt; Iterable[BrokenPianoNote]:\n        exists = set()\n        for other in self._ranges(start, end):\n            for note in self.tree.get(index, dict()).get(other, deque()):\n                if (note.start &gt; end):\n                    continue\n                if (id(note) in exists):\n                    continue\n                exists.add(id(note))\n                yield note\n\n    def update_global_ranges(self, note: int) -&gt; None:\n        self.global_minimum_note = min(self.global_minimum_note, note)\n        self.global_maximum_note = max(self.global_maximum_note, note)\n\n    @property\n    def maximum_velocity(self) -&gt; Optional[int]:\n        return max((note.velocity for note in self.notes), default=None)\n\n    @property\n    def minimum_velocity(self) -&gt; Optional[int]:\n        return min((note.velocity for note in self.notes), default=None)\n\n    def normalize_velocities(self, minimum: int=100, maximum: int=100) -&gt; None:\n        ma, mi = (self.maximum_velocity, self.minimum_velocity)\n\n        # Safe against (minimum-maximum=0)\n        def new(velocity: int) -&gt; int:\n            if (ma != mi):\n                int((velocity - mi)/(ma - mi)*(maximum - minimum) + minimum)\n            return int((maximum + minimum) / 2)\n\n        for note in self.notes:\n            note.velocity = new(note.velocity)\n\n    def load_midi(self, path: Path):\n        import pretty_midi\n\n        if not (path := BrokenPath.get(path)).exists():\n            self.log_warning(f\"Input Midi file not found ({path})\")\n            return\n\n        with Halo(log.info(f\"Loading Midi file at ({path})\")):\n            midi = pretty_midi.PrettyMIDI(str(path))\n            for channel, instrument in enumerate(midi.instruments):\n                if instrument.is_drum:\n                    pass\n                for note in instrument.notes:\n                    self.add_note(BrokenPianoNote(\n                        note=note.pitch,\n                        start=note.start,\n                        end=note.end,\n                        channel=channel,\n                        velocity=note.velocity,\n                    ))\n            # Add tempo changes\n            for when, tempo in zip(*midi.get_tempo_changes()):\n                self.tempo.append((when, tempo))\n\n        self.tempo_texture.clear()\n\n        for offset, (when, tempo) in enumerate(self.tempo):\n            self.tempo_texture.write(data=struct.pack(\"ff\", when, tempo), viewport=(0, offset, 1, 1))\n\n    # # Core Logic\n\n    # A (MAX_MIDI Notes x MAX_CHANNELS Channels) matrix of the end-most note being played\n    _playing_matrix: list[list[Optional[BrokenPianoNote]]] = Factory(lambda: [[None]*MAX_CHANNELS for _ in range(MAX_NOTE)])\n\n    def update(self):\n\n        # Utilities and trackers\n        time = (self.scene.time + self.time_offset)\n        upcoming = set()\n\n        # # Get and update pressed keys\n        self.key_press_dynamics.target.fill(0)\n        roll = self._empty_roll()\n\n        # Channel '-1' means the note is not being played !\n        channels = (self._empty_keys() - 1)\n\n        # Optimization: No need to check for the entire range \ud83d\ude09\n        for midi in range(self.global_minimum_note, self.global_maximum_note+1):\n            simultaneous = 0\n\n            for note in self.notes_between(midi, time, time+self.lookup_time):\n                upcoming.add(midi)\n\n                # Ignore notes out of the viewport\n                if (note.start &gt;= time+self.roll_time):\n                    continue\n\n                # Build a 2D Grid of the piano keys being played\n                # \u2022 Coordinate: (Note, #offset) @ (Start, End, Channel, Velocity)\n                if (simultaneous &lt; MAX_ROLLING):\n                    roll[note.note, simultaneous] = (note.start, note.end, note.channel, note.velocity)\n                    simultaneous += 1\n\n                # Skip non-playing notes\n                if not (note.start &lt;= time &lt;= note.end):\n                    continue\n\n                # Workaround: Don't play the full note, so close notes velocities are perceived twice\n                _note_too_small = (note.end - note.start) &lt; self.release_before_end\n                _shorter_note = (time &lt; (note.end - self.release_before_end))\n\n                if (_shorter_note or _note_too_small):\n                    self.key_press_dynamics.target[midi] = note.velocity\n\n                # Either way, the channel must be colored\n                channels[0][midi] = note.channel\n\n                # Find empty slots or notes that will end soon, replace and play\n                other = self._playing_matrix[midi][note.channel]\n                if (other is None) or (other.end &gt; note.end):\n                    play_velocity = int(128*((note.velocity/128)**0.5))\n                    self.fluid_key_down(midi, play_velocity, note.channel)\n                    self._playing_matrix[midi][note.channel] = note\n\n            # Find notes that are not being played\n            for channel in range(MAX_CHANNELS * self.scene.realtime):\n                if (other := self._playing_matrix[midi][channel]) and (other.end &lt; time):\n                    self._playing_matrix[midi][channel] = None\n                    self.fluid_key_up(midi, other.channel)\n\n        # Dynamic zoom velocity based on future lookup\n        self.note_range_dynamics.frequency = 0.5/self.lookup_time\n\n        # Set dynamic note range to the globals on the start\n        if sum(self.note_range_dynamics.value) == 0:\n            self.note_range_dynamics.value[:] = (self.global_minimum_note, self.global_maximum_note)\n\n        # Set new targets for dynamic keys\n        self.note_range_dynamics.target[:] = (\n            min(upcoming, default=self.global_minimum_note),\n            max(upcoming, default=self.global_maximum_note)\n        )\n\n        # Write to keys textures\n        self.note_range_dynamics.next(dt=abs(self.scene.dt))\n        self.key_press_dynamics.next(dt=abs(self.scene.dt))\n        self.keys_texture.write(data=self.key_press_dynamics.value)\n        self.roll_texture.write(data=roll)\n        self.channel_texture.write(data=channels)\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        yield Uniform(\"int\",   f\"{self.name}GlobalMin\",  self.global_minimum_note)\n        yield Uniform(\"int\",   f\"{self.name}GlobalMax\",  self.global_maximum_note)\n        yield Uniform(\"vec2\",  f\"{self.name}Dynamic\",    self.note_range_dynamics.value)\n        yield Uniform(\"float\", f\"{self.name}RollTime\",   self.roll_time)\n        yield Uniform(\"float\", f\"{self.name}Extra\",      self.extra_keys)\n        yield Uniform(\"float\", f\"{self.name}Height\",     self.height)\n        yield Uniform(\"int\",   f\"{self.name}Limit\",      MAX_ROLLING)\n        yield Uniform(\"float\", f\"{self.name}BlackRatio\", self.black_ratio)\n\n    # # Fluidsynth\n\n    fluidsynth: Any = None\n    soundfont:  Any = None\n\n    def fluid_load(self, sf2: Path, driver: str=(\"pulseaudio\" if BrokenPlatform.OnLinux else None)) -&gt; None:\n        if not (sf2 := BrokenPath.get(sf2)).exists():\n            self.log_warning(f\"Couldn't load SoundFont from path ({sf2}), will not have Real Time MIDI Audio\")\n            return\n\n        # Download FluidSynth for Windows\n        if BrokenPlatform.OnWindows:\n            FLUIDSYNTH = \"https://github.com/FluidSynth/fluidsynth/releases/download/v2.3.4/fluidsynth-2.3.4-win10-x64.zip\"\n            BrokenPath.add_to_path(BrokenPath.extract(BrokenPath.download(FLUIDSYNTH), BROKEN.DIRECTORIES.EXTERNALS), recurse=True)\n        elif BrokenPlatform.OnMacOS:\n            if not shutil.which(\"fluidsynth\"):\n                shell(\"brew\", \"install\", \"fluidsynth\")\n        elif BrokenPlatform.OnLinux:\n            self.log_warning(\"(Linux) Please install FluidSynth in your Package Manager if needed\")\n\n        import fluidsynth\n        self.fluidsynth = fluidsynth.Synth()\n        with Halo(log.info(f\"Loading FluidSynth SoundFont ({sf2.name})\")):\n            self.soundfont = self.fluidsynth.sfload(str(sf2))\n        self.fluidsynth.set_reverb(1, 1, 80, 1)\n        self.fluidsynth.start(driver=driver)\n        for channel in range(MAX_CHANNELS):\n            self.fluid_select(channel, 0, 0)\n\n    def fluid_select(self, channel: int=0, bank: int=0, preset: int=0) -&gt; None:\n        if self.fluidsynth and self.scene.realtime:\n            self.fluidsynth.program_select(channel, self.soundfont, bank, preset)\n\n    def fluid_key_down(self, note: int, velocity: int=127, channel: int=0) -&gt; None:\n        if self.fluidsynth and self.scene.realtime:\n            self.fluidsynth.noteon(channel, note, velocity)\n\n    def fluid_key_up(self, note: int, channel: int=0) -&gt; None:\n        if self.fluidsynth and self.scene.realtime:\n            self.fluidsynth.noteoff(channel, note)\n\n    def fluid_all_notes_off(self) -&gt; None:\n        if self.fluidsynth and self.scene.realtime:\n            for channel, note in itertools.product(range(MAX_CHANNELS), range(MAX_NOTE)):\n                self.fluidsynth.noteoff(channel, note)\n\n    def fluid_render(self,\n        midi: Path,\n        soundfont: Path=None,\n        output: Path=None\n    ) -&gt; Path:\n        if not self.fluidsynth:\n            return\n\n        # Get temporary cached file\n        if output is None:\n            midi_hash = hashlib.md5(BrokenPath.get(midi).read_bytes()).hexdigest()\n            output = Path(tempfile.gettempdir())/f\"ShaderFlow-Midi2Audio-{midi_hash}.wav\"\n\n        import midi2audio\n        with Halo(log.info(f\"Rendering FluidSynth Midi ({midi}) \u2192 ({output})\")):\n            midi2audio.FluidSynth(soundfont).midi_to_audio(midi, output)\n\n        # Normalize audio with FFmpeg\n        normalized = output.with_suffix(\".aac\")\n        with Halo(log.info(f\"Normalizing Audio ({output}) \u2192 ({normalized})\")):\n            (BrokenFFmpeg()\n                .quiet()\n                .input(output)\n                .filter(\"loudnorm\")\n                .aac()\n                .output(normalized)\n            ).run()\n\n        return BrokenPath.get(normalized)\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.name","title":"name","text":"<pre><code>name: str = 'iPiano'\n</code></pre> <p>Texture name prefixes for this Module</p>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.tempo","title":"tempo","text":"<pre><code>tempo: deque[tuple[Seconds, BPM]] = Factory(deque)\n</code></pre> <p>List of tempo changes at (seconds, bpm)</p>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.keys_texture","title":"keys_texture","text":"<pre><code>keys_texture: ShaderTexture = None\n</code></pre> <p>Velocities texture, X is MIDI index, Y is Velocity, size (MAX_NOTE, 1)</p>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.channel_texture","title":"channel_texture","text":"<pre><code>channel_texture: ShaderTexture = None\n</code></pre> <p>Channel being played texture, X is MIDI index, Y is Channel, size (MAX_NOTE, 1)</p>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.roll_texture","title":"roll_texture","text":"<pre><code>roll_texture: ShaderTexture = None\n</code></pre> <p>Piano roll'ling notes main texture'. The X coordinate is the MIDI index, pixels contains data (start, end, channel, velocity), of each playing key on the Y. Size (MAX_ROLLING, MAX_NOTE)</p>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.time_offset","title":"time_offset","text":"<pre><code>time_offset: Seconds = 0\n</code></pre> <p>Offset the notes being played search from the current time</p>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.roll_time","title":"roll_time","text":"<pre><code>roll_time: Seconds = 2\n</code></pre> <p>How long the notes are visible</p>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.height","title":"height","text":"<pre><code>height: float = 0.275\n</code></pre> <p>Height of the piano in the shader (0-1)</p>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.black_ratio","title":"black_ratio","text":"<pre><code>black_ratio: float = 0.6\n</code></pre> <p>How long are black keys compared to white keys</p>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.global_minimum_note","title":"global_minimum_note","text":"<pre><code>global_minimum_note: int = MAX_NOTE\n</code></pre> <p>The lowest note in the loaded notes</p>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.global_maximum_note","title":"global_maximum_note","text":"<pre><code>global_maximum_note: int = 0\n</code></pre> <p>The highest note in the loaded notes</p>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.extra_keys","title":"extra_keys","text":"<pre><code>extra_keys: int = 6\n</code></pre> <p>Display the dynamic range plus this many keys on each side</p>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.lookahead","title":"lookahead","text":"<pre><code>lookahead: Seconds = 2\n</code></pre> <p>Lookup notes in (roll_time + this) for setting the dynamic ranges</p>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.release_before_end","title":"release_before_end","text":"<pre><code>release_before_end: Seconds = 0.03\n</code></pre> <p>Workaround for the transition between close/glued to be perceived</p>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.key_press_dynamics","title":"key_press_dynamics","text":"<pre><code>key_press_dynamics: DynamicNumber = Factory(\n    lambda: DynamicNumber(\n        value=numpy.zeros(MAX_NOTE, dtype=numpy.float32),\n        frequency=4,\n        zeta=0.4,\n        response=0,\n        precision=0,\n    )\n)\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.note_range_dynamics","title":"note_range_dynamics","text":"<pre><code>note_range_dynamics: DynamicNumber = Factory(\n    lambda: DynamicNumber(\n        value=numpy.zeros(2, dtype=numpy.float32),\n        frequency=0.05,\n        zeta=1 / 2**0.5,\n        response=0,\n    )\n)\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.tree","title":"tree","text":"<pre><code>tree: dict[int, dict[int, deque[BrokenPianoNote]]] = (\n    Factory(dict)\n)\n</code></pre> <p>Internal data structure for storing the notes</p>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.lookup_time","title":"lookup_time","text":"<pre><code>lookup_time: Seconds\n</code></pre> <p>The full lookup time we should care for future notes (rolling+future range)</p>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.build","title":"build","text":"<pre><code>build()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>def build(self):\n    self.keys_texture    = ShaderTexture(scene=self.scene, name=f\"{self.name}Keys\").from_numpy(self._empty_keys())\n    self.channel_texture = ShaderTexture(scene=self.scene, name=f\"{self.name}Chan\").from_numpy(self._empty_keys())\n    self.roll_texture    = ShaderTexture(scene=self.scene, name=f\"{self.name}Roll\").from_numpy(self._empty_roll())\n    self.tempo_texture   = ShaderTexture(scene=self.scene, name=f\"{self.name}Tempo\").from_numpy(numpy.zeros((100, 1, 2), numpy.float32))\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>def clear(self):\n    self.tree.clear()\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.add_note","title":"add_note","text":"<pre><code>add_note(note: Optional[BrokenPianoNote]) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>def add_note(self, note: Optional[BrokenPianoNote]) -&gt; None:\n    if note is None:\n        return\n    for index in self._ranges(note.start, note.end):\n        self.tree.setdefault(note.note, dict()).setdefault(index, deque()).append(note)\n    self.update_global_ranges(note.note)\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.notes","title":"notes","text":"<pre><code>notes: Iterable[BrokenPianoNote]\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.duration","title":"duration","text":"<pre><code>duration: float\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterable[BrokenPianoNote]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>def __iter__(self) -&gt; Iterable[BrokenPianoNote]:\n    return self.notes\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.notes_between","title":"notes_between","text":"<pre><code>notes_between(\n    index: int, start: Seconds, end: Seconds\n) -&gt; Iterable[BrokenPianoNote]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>def notes_between(self, index: int, start: Seconds, end: Seconds) -&gt; Iterable[BrokenPianoNote]:\n    exists = set()\n    for other in self._ranges(start, end):\n        for note in self.tree.get(index, dict()).get(other, deque()):\n            if (note.start &gt; end):\n                continue\n            if (id(note) in exists):\n                continue\n            exists.add(id(note))\n            yield note\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.update_global_ranges","title":"update_global_ranges","text":"<pre><code>update_global_ranges(note: int) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>def update_global_ranges(self, note: int) -&gt; None:\n    self.global_minimum_note = min(self.global_minimum_note, note)\n    self.global_maximum_note = max(self.global_maximum_note, note)\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.maximum_velocity","title":"maximum_velocity","text":"<pre><code>maximum_velocity: Optional[int]\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.minimum_velocity","title":"minimum_velocity","text":"<pre><code>minimum_velocity: Optional[int]\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.normalize_velocities","title":"normalize_velocities","text":"<pre><code>normalize_velocities(\n    minimum: int = 100, maximum: int = 100\n) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>def normalize_velocities(self, minimum: int=100, maximum: int=100) -&gt; None:\n    ma, mi = (self.maximum_velocity, self.minimum_velocity)\n\n    # Safe against (minimum-maximum=0)\n    def new(velocity: int) -&gt; int:\n        if (ma != mi):\n            int((velocity - mi)/(ma - mi)*(maximum - minimum) + minimum)\n        return int((maximum + minimum) / 2)\n\n    for note in self.notes:\n        note.velocity = new(note.velocity)\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.load_midi","title":"load_midi","text":"<pre><code>load_midi(path: Path)\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>def load_midi(self, path: Path):\n    import pretty_midi\n\n    if not (path := BrokenPath.get(path)).exists():\n        self.log_warning(f\"Input Midi file not found ({path})\")\n        return\n\n    with Halo(log.info(f\"Loading Midi file at ({path})\")):\n        midi = pretty_midi.PrettyMIDI(str(path))\n        for channel, instrument in enumerate(midi.instruments):\n            if instrument.is_drum:\n                pass\n            for note in instrument.notes:\n                self.add_note(BrokenPianoNote(\n                    note=note.pitch,\n                    start=note.start,\n                    end=note.end,\n                    channel=channel,\n                    velocity=note.velocity,\n                ))\n        # Add tempo changes\n        for when, tempo in zip(*midi.get_tempo_changes()):\n            self.tempo.append((when, tempo))\n\n    self.tempo_texture.clear()\n\n    for offset, (when, tempo) in enumerate(self.tempo):\n        self.tempo_texture.write(data=struct.pack(\"ff\", when, tempo), viewport=(0, offset, 1, 1))\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.update","title":"update","text":"<pre><code>update()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>def update(self):\n\n    # Utilities and trackers\n    time = (self.scene.time + self.time_offset)\n    upcoming = set()\n\n    # # Get and update pressed keys\n    self.key_press_dynamics.target.fill(0)\n    roll = self._empty_roll()\n\n    # Channel '-1' means the note is not being played !\n    channels = (self._empty_keys() - 1)\n\n    # Optimization: No need to check for the entire range \ud83d\ude09\n    for midi in range(self.global_minimum_note, self.global_maximum_note+1):\n        simultaneous = 0\n\n        for note in self.notes_between(midi, time, time+self.lookup_time):\n            upcoming.add(midi)\n\n            # Ignore notes out of the viewport\n            if (note.start &gt;= time+self.roll_time):\n                continue\n\n            # Build a 2D Grid of the piano keys being played\n            # \u2022 Coordinate: (Note, #offset) @ (Start, End, Channel, Velocity)\n            if (simultaneous &lt; MAX_ROLLING):\n                roll[note.note, simultaneous] = (note.start, note.end, note.channel, note.velocity)\n                simultaneous += 1\n\n            # Skip non-playing notes\n            if not (note.start &lt;= time &lt;= note.end):\n                continue\n\n            # Workaround: Don't play the full note, so close notes velocities are perceived twice\n            _note_too_small = (note.end - note.start) &lt; self.release_before_end\n            _shorter_note = (time &lt; (note.end - self.release_before_end))\n\n            if (_shorter_note or _note_too_small):\n                self.key_press_dynamics.target[midi] = note.velocity\n\n            # Either way, the channel must be colored\n            channels[0][midi] = note.channel\n\n            # Find empty slots or notes that will end soon, replace and play\n            other = self._playing_matrix[midi][note.channel]\n            if (other is None) or (other.end &gt; note.end):\n                play_velocity = int(128*((note.velocity/128)**0.5))\n                self.fluid_key_down(midi, play_velocity, note.channel)\n                self._playing_matrix[midi][note.channel] = note\n\n        # Find notes that are not being played\n        for channel in range(MAX_CHANNELS * self.scene.realtime):\n            if (other := self._playing_matrix[midi][channel]) and (other.end &lt; time):\n                self._playing_matrix[midi][channel] = None\n                self.fluid_key_up(midi, other.channel)\n\n    # Dynamic zoom velocity based on future lookup\n    self.note_range_dynamics.frequency = 0.5/self.lookup_time\n\n    # Set dynamic note range to the globals on the start\n    if sum(self.note_range_dynamics.value) == 0:\n        self.note_range_dynamics.value[:] = (self.global_minimum_note, self.global_maximum_note)\n\n    # Set new targets for dynamic keys\n    self.note_range_dynamics.target[:] = (\n        min(upcoming, default=self.global_minimum_note),\n        max(upcoming, default=self.global_maximum_note)\n    )\n\n    # Write to keys textures\n    self.note_range_dynamics.next(dt=abs(self.scene.dt))\n    self.key_press_dynamics.next(dt=abs(self.scene.dt))\n    self.keys_texture.write(data=self.key_press_dynamics.value)\n    self.roll_texture.write(data=roll)\n    self.channel_texture.write(data=channels)\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    yield Uniform(\"int\",   f\"{self.name}GlobalMin\",  self.global_minimum_note)\n    yield Uniform(\"int\",   f\"{self.name}GlobalMax\",  self.global_maximum_note)\n    yield Uniform(\"vec2\",  f\"{self.name}Dynamic\",    self.note_range_dynamics.value)\n    yield Uniform(\"float\", f\"{self.name}RollTime\",   self.roll_time)\n    yield Uniform(\"float\", f\"{self.name}Extra\",      self.extra_keys)\n    yield Uniform(\"float\", f\"{self.name}Height\",     self.height)\n    yield Uniform(\"int\",   f\"{self.name}Limit\",      MAX_ROLLING)\n    yield Uniform(\"float\", f\"{self.name}BlackRatio\", self.black_ratio)\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.fluidsynth","title":"fluidsynth","text":"<pre><code>fluidsynth: Any = None\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.soundfont","title":"soundfont","text":"<pre><code>soundfont: Any = None\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.fluid_load","title":"fluid_load","text":"<pre><code>fluid_load(\n    sf2: Path,\n    driver: str = (\n        \"pulseaudio\" if BrokenPlatform.OnLinux else None\n    ),\n) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>def fluid_load(self, sf2: Path, driver: str=(\"pulseaudio\" if BrokenPlatform.OnLinux else None)) -&gt; None:\n    if not (sf2 := BrokenPath.get(sf2)).exists():\n        self.log_warning(f\"Couldn't load SoundFont from path ({sf2}), will not have Real Time MIDI Audio\")\n        return\n\n    # Download FluidSynth for Windows\n    if BrokenPlatform.OnWindows:\n        FLUIDSYNTH = \"https://github.com/FluidSynth/fluidsynth/releases/download/v2.3.4/fluidsynth-2.3.4-win10-x64.zip\"\n        BrokenPath.add_to_path(BrokenPath.extract(BrokenPath.download(FLUIDSYNTH), BROKEN.DIRECTORIES.EXTERNALS), recurse=True)\n    elif BrokenPlatform.OnMacOS:\n        if not shutil.which(\"fluidsynth\"):\n            shell(\"brew\", \"install\", \"fluidsynth\")\n    elif BrokenPlatform.OnLinux:\n        self.log_warning(\"(Linux) Please install FluidSynth in your Package Manager if needed\")\n\n    import fluidsynth\n    self.fluidsynth = fluidsynth.Synth()\n    with Halo(log.info(f\"Loading FluidSynth SoundFont ({sf2.name})\")):\n        self.soundfont = self.fluidsynth.sfload(str(sf2))\n    self.fluidsynth.set_reverb(1, 1, 80, 1)\n    self.fluidsynth.start(driver=driver)\n    for channel in range(MAX_CHANNELS):\n        self.fluid_select(channel, 0, 0)\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.fluid_select","title":"fluid_select","text":"<pre><code>fluid_select(\n    channel: int = 0, bank: int = 0, preset: int = 0\n) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>def fluid_select(self, channel: int=0, bank: int=0, preset: int=0) -&gt; None:\n    if self.fluidsynth and self.scene.realtime:\n        self.fluidsynth.program_select(channel, self.soundfont, bank, preset)\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.fluid_key_down","title":"fluid_key_down","text":"<pre><code>fluid_key_down(\n    note: int, velocity: int = 127, channel: int = 0\n) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>def fluid_key_down(self, note: int, velocity: int=127, channel: int=0) -&gt; None:\n    if self.fluidsynth and self.scene.realtime:\n        self.fluidsynth.noteon(channel, note, velocity)\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.fluid_key_up","title":"fluid_key_up","text":"<pre><code>fluid_key_up(note: int, channel: int = 0) -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>def fluid_key_up(self, note: int, channel: int=0) -&gt; None:\n    if self.fluidsynth and self.scene.realtime:\n        self.fluidsynth.noteoff(channel, note)\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.fluid_all_notes_off","title":"fluid_all_notes_off","text":"<pre><code>fluid_all_notes_off() -&gt; None\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>def fluid_all_notes_off(self) -&gt; None:\n    if self.fluidsynth and self.scene.realtime:\n        for channel, note in itertools.product(range(MAX_CHANNELS), range(MAX_NOTE)):\n            self.fluidsynth.noteoff(channel, note)\n</code></pre>"},{"location":"code/shaderflow/modules/piano/#ShaderFlow.Modules.Piano.ShaderPiano.fluid_render","title":"fluid_render","text":"<pre><code>fluid_render(\n    midi: Path, soundfont: Path = None, output: Path = None\n) -&gt; Path\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Piano.py</code> <pre><code>def fluid_render(self,\n    midi: Path,\n    soundfont: Path=None,\n    output: Path=None\n) -&gt; Path:\n    if not self.fluidsynth:\n        return\n\n    # Get temporary cached file\n    if output is None:\n        midi_hash = hashlib.md5(BrokenPath.get(midi).read_bytes()).hexdigest()\n        output = Path(tempfile.gettempdir())/f\"ShaderFlow-Midi2Audio-{midi_hash}.wav\"\n\n    import midi2audio\n    with Halo(log.info(f\"Rendering FluidSynth Midi ({midi}) \u2192 ({output})\")):\n        midi2audio.FluidSynth(soundfont).midi_to_audio(midi, output)\n\n    # Normalize audio with FFmpeg\n    normalized = output.with_suffix(\".aac\")\n    with Halo(log.info(f\"Normalizing Audio ({output}) \u2192 ({normalized})\")):\n        (BrokenFFmpeg()\n            .quiet()\n            .input(output)\n            .filter(\"loudnorm\")\n            .aac()\n            .output(normalized)\n        ).run()\n\n    return BrokenPath.get(normalized)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/","title":"File: <code>ShaderFlow/Modules/Spectrogram.py</code>","text":""},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram","title":"ShaderFlow.Modules.Spectrogram","text":""},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioFourierMagnitude","title":"BrokenAudioFourierMagnitude","text":"<p>Given an raw FFT, interpret the complex number as some size</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>class BrokenAudioFourierMagnitude:\n    \"\"\"Given an raw FFT, interpret the complex number as some size\"\"\"\n    def Amplitude(x: numpy.ndarray) -&gt; numpy.ndarray:\n        return numpy.abs(x)\n\n    def Power(x: numpy.ndarray) -&gt; numpy.ndarray:\n        return x*x.conjugate()\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioFourierMagnitude.Amplitude","title":"Amplitude","text":"<pre><code>Amplitude(x: numpy.ndarray) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>def Amplitude(x: numpy.ndarray) -&gt; numpy.ndarray:\n    return numpy.abs(x)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioFourierMagnitude.Power","title":"Power","text":"<pre><code>Power(x: numpy.ndarray) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>def Power(x: numpy.ndarray) -&gt; numpy.ndarray:\n    return x*x.conjugate()\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioFourierVolume","title":"BrokenAudioFourierVolume","text":"<p>Convert the FFT into the final spectrogram's magnitude bin</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>class BrokenAudioFourierVolume:\n    \"\"\"Convert the FFT into the final spectrogram's magnitude bin\"\"\"\n\n    def dBFS(x: numpy.ndarray) -&gt; numpy.ndarray:\n        return 10*numpy.log10(x)\n\n    def Sqrt(x: numpy.ndarray) -&gt; numpy.ndarray:\n        return numpy.sqrt(x)\n\n    def Linear(x: numpy.ndarray) -&gt; numpy.ndarray:\n        return x\n\n    def dBFsTremx(x: numpy.ndarray) -&gt; numpy.ndarray:\n        return 10*(numpy.log10(x+0.1) + 1)/1.0414\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioFourierVolume.dBFS","title":"dBFS","text":"<pre><code>dBFS(x: numpy.ndarray) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>def dBFS(x: numpy.ndarray) -&gt; numpy.ndarray:\n    return 10*numpy.log10(x)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioFourierVolume.Sqrt","title":"Sqrt","text":"<pre><code>Sqrt(x: numpy.ndarray) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>def Sqrt(x: numpy.ndarray) -&gt; numpy.ndarray:\n    return numpy.sqrt(x)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioFourierVolume.Linear","title":"Linear","text":"<pre><code>Linear(x: numpy.ndarray) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>def Linear(x: numpy.ndarray) -&gt; numpy.ndarray:\n    return x\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioFourierVolume.dBFsTremx","title":"dBFsTremx","text":"<pre><code>dBFsTremx(x: numpy.ndarray) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>def dBFsTremx(x: numpy.ndarray) -&gt; numpy.ndarray:\n    return 10*(numpy.log10(x+0.1) + 1)/1.0414\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioSpectrogramInterpolation","title":"BrokenAudioSpectrogramInterpolation","text":"<p>Interpolate the FFT values, discrete to continuous</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>class BrokenAudioSpectrogramInterpolation:\n    \"\"\"Interpolate the FFT values, discrete to continuous\"\"\"\n    #\n    # I can explain this better later, but the idea is here:\n    # \u2022 https://www.desmos.com/calculator/vvixdoooty\n    # \u2022 https://en.wikipedia.org/wiki/Whittaker%E2%80%93Shannon_interpolation_formula\n    #\n    # Sinc(x) is already normalized (divided by the area, pi) as in sinc(x) = sin(pi*x)/(pi*x).\n    #\n    # The general case for a interpolation formula is to normalize some function f(x) by its area.\n    # For example, in the case of exp(-x^2) as the function, its area is the  magical sqrt(pi)\n    # as seen in @3b1b https://www.youtube.com/watch?v=cy8r7WSuT1I\n    #\n\n    # Note: A value above 1.54 is recommended\n    def make_euler(end: float=1.54) -&gt; Callable:\n        return (lambda x: numpy.exp(-(2*x/end)**2) / (end*(pi**0.5)))\n\n    def Dirac(x):\n        dirac = numpy.zeros(x.shape)\n        dirac[numpy.round(x) == 0] = 1\n        return dirac\n\n    Euler = make_euler(end=1.2)\n\n    def Sinc(x: numpy.ndarray) -&gt; numpy.ndarray:\n        return numpy.abs(numpy.sinc(x))\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioSpectrogramInterpolation.make_euler","title":"make_euler","text":"<pre><code>make_euler(end: float = 1.54) -&gt; Callable\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>def make_euler(end: float=1.54) -&gt; Callable:\n    return (lambda x: numpy.exp(-(2*x/end)**2) / (end*(pi**0.5)))\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioSpectrogramInterpolation.Dirac","title":"Dirac","text":"<pre><code>Dirac(x)\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>def Dirac(x):\n    dirac = numpy.zeros(x.shape)\n    dirac[numpy.round(x) == 0] = 1\n    return dirac\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioSpectrogramInterpolation.Euler","title":"Euler","text":"<pre><code>Euler = make_euler(end=1.2)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioSpectrogramInterpolation.Sinc","title":"Sinc","text":"<pre><code>Sinc(x: numpy.ndarray) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>def Sinc(x: numpy.ndarray) -&gt; numpy.ndarray:\n    return numpy.abs(numpy.sinc(x))\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioSpectrogramScale","title":"BrokenAudioSpectrogramScale","text":"<p>Functions that defines the y scale of the spectrogram. Tuples of f(x) and f^-1(x)</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>class BrokenAudioSpectrogramScale:\n    \"\"\"Functions that defines the y scale of the spectrogram. Tuples of f(x) and f^-1(x)\"\"\"\n\n    # Octave, matches the piano keys\n    # Todo: Make a generic base exponent?\n    Octave = (\n        lambda x: (numpy.log(x)/numpy.log(2)),\n        lambda x: (2**x)\n    )\n\n    # Personally not a big fan\n    MEL = (\n        lambda x: 2595 * numpy.log10(1 + x/700),\n        lambda x: 700 * (10**(x/2595) - 1),\n    )\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioSpectrogramScale.Octave","title":"Octave","text":"<pre><code>Octave = (\n    lambda x: numpy.log(x) / numpy.log(2),\n    lambda x: 2**x,\n)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioSpectrogramScale.MEL","title":"MEL","text":"<pre><code>MEL = (\n    lambda x: 2595 * numpy.log10(1 + x / 700),\n    lambda x: 700 * 10**x / 2595 - 1,\n)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioSpectrogramWindow","title":"BrokenAudioSpectrogramWindow","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>class BrokenAudioSpectrogramWindow:\n\n    @functools.lru_cache\n    def hann_poisson_window(N: int, alpha: float=2) -&gt; numpy.ndarray:\n        \"\"\"\n        Generate a Hann-Poisson window\n\n        Args:\n            N: The number of window samples\n            alpha: Slope of the exponential\n\n        Returns:\n            numpy.array: Window samples\n        \"\"\"\n        n = numpy.arange(N)\n        hann    = 0.5 * (1 - numpy.cos(2 * numpy.pi * n / N))\n        poisson = numpy.exp(-alpha * numpy.abs(N - 2*n) / N)\n        return hann * poisson\n\n    @functools.lru_cache\n    def hanning(size: int) -&gt; numpy.ndarray:\n        \"\"\"Returns a hanning window of the given size\"\"\"\n        return numpy.hanning(size)\n\n    @functools.lru_cache\n    def none(size: int) -&gt; numpy.ndarray:\n        \"\"\"Returns a none window of the given size\"\"\"\n        return numpy.ones(size)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioSpectrogramWindow.hann_poisson_window","title":"hann_poisson_window","text":"<pre><code>hann_poisson_window(\n    N: int, alpha: float = 2\n) -&gt; numpy.ndarray\n</code></pre> <p>Generate a Hann-Poisson window</p> <p>Parameters:</p> <ul> <li> <code>N</code>               (<code>int</code>)           \u2013            <p>The number of window samples</p> </li> <li> <code>alpha</code>               (<code>float</code>, default:                   <code>2</code> )           \u2013            <p>Slope of the exponential</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>numpy.ndarray</code>           \u2013            <p>numpy.array: Window samples</p> </li> </ul> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>@functools.lru_cache\ndef hann_poisson_window(N: int, alpha: float=2) -&gt; numpy.ndarray:\n    \"\"\"\n    Generate a Hann-Poisson window\n\n    Args:\n        N: The number of window samples\n        alpha: Slope of the exponential\n\n    Returns:\n        numpy.array: Window samples\n    \"\"\"\n    n = numpy.arange(N)\n    hann    = 0.5 * (1 - numpy.cos(2 * numpy.pi * n / N))\n    poisson = numpy.exp(-alpha * numpy.abs(N - 2*n) / N)\n    return hann * poisson\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioSpectrogramWindow.hanning","title":"hanning","text":"<pre><code>hanning(size: int) -&gt; numpy.ndarray\n</code></pre> <p>Returns a hanning window of the given size</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>@functools.lru_cache\ndef hanning(size: int) -&gt; numpy.ndarray:\n    \"\"\"Returns a hanning window of the given size\"\"\"\n    return numpy.hanning(size)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenAudioSpectrogramWindow.none","title":"none","text":"<pre><code>none(size: int) -&gt; numpy.ndarray\n</code></pre> <p>Returns a none window of the given size</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>@functools.lru_cache\ndef none(size: int) -&gt; numpy.ndarray:\n    \"\"\"Returns a none window of the given size\"\"\"\n    return numpy.ones(size)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram","title":"BrokenSpectrogram","text":"Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>@define(slots=False)\nclass BrokenSpectrogram:\n    audio: BrokenAudio = Factory(BrokenAudio)\n\n    fft_n: int = field(default=12, converter=int)\n    \"\"\"2^n FFT size, higher values, higher frequency resolution, less responsiveness\"\"\"\n\n    sample_rateio: int = field(default=1, converter=int)\n    \"\"\"Resample the input data by a factor, int for FFT optimizations\"\"\"\n\n    # Spectrogram properties\n    scale:        tuple[callable] = BrokenAudioSpectrogramScale.Octave\n    interpolation:      callable  = BrokenAudioSpectrogramInterpolation.Euler\n    magnitude_function: callable  = BrokenAudioFourierMagnitude.Power\n    window_function:    callable  = BrokenAudioSpectrogramWindow.hanning\n    volume:             callable  = BrokenAudioFourierVolume.Sqrt\n\n    def __cache__(self) -&gt; int:\n        return hash((\n            self.fft_n,\n            self.minimum_frequency,\n            self.maximum_frequency,\n            self.spectrogram_bins,\n            self.sample_rateio,\n            self.magnitude_function,\n            self.interpolation,\n            self.scale,\n            self.volume,\n        ))\n\n    # # Fourier\n\n    @property\n    def fft_size(self) -&gt; Samples:\n        return int(2**(self.fft_n) * self.sample_rateio)\n\n    @property\n    def fft_bins(self) -&gt; int:\n        return int(self.fft_size/2 + 1)\n\n    @property\n    def fft_frequencies(self) -&gt; Union[numpy.ndarray, Hertz]:\n        return numpy.fft.rfftfreq(self.fft_size, 1/(self.audio.samplerate*self.sample_rateio))\n\n    def fft(self) -&gt; numpy.ndarray:\n        data = self.audio.get_last_n_samples(int(2**self.fft_n))\n\n        # Optionally resample the data\n        if self.sample_rateio != 1:\n            try:\n                import samplerate\n            except ModuleNotFoundError:\n                raise RuntimeError('\\n'.join((\n                    \"Please install 'samplerate' dependency for resampling:\"\n                    \"\u2022 Find it at: (https://pypi.org/project/samplerate)\"\n                )))\n            data = numpy.array([samplerate.resample(x, self.sample_rateio, 'linear') for x in data])\n\n        return self.magnitude_function(\n            numpy.fft.rfft(self.window_function(self.fft_size) * data)\n        ).astype(self.audio.dtype)\n\n    # # Spectrogram\n\n    def next(self) -&gt; numpy.ndarray:\n        return self.spectrogram_matrix.dot(self.fft().T).T\n        return self.volume([\n            self.spectrogram_matrix @ channel\n            for channel in self.fft()\n        ])\n\n    minimum_frequency: Hertz = 20.0\n    maximum_frequency: Hertz = 20000.0\n    spectrogram_bins:  int   = 1000\n\n    @property\n    def spectrogram_frequencies(self) -&gt; numpy.ndarray:\n        return self.scale[1](numpy.linspace(\n            self.scale[0](self.minimum_frequency),\n            self.scale[0](self.maximum_frequency),\n            self.spectrogram_bins,\n        ))\n\n    @property\n    @cachetools.cached(cache={}, key=lambda self: self.__cache__())\n    def spectrogram_matrix(self) -&gt; scipy.sparse.csr_matrix:\n        \"\"\"\n        Gets a transformation matrix that multiplied with self.fft yields \"spectrogram bins\" in custom scale\n\n        The idea to get the center frequencies on the custom scale is to compute the following:\n        $$ center_frequencies = T^-1(linspace(T(min), T(max), n)) $$\n\n        Where T(f) transforms a frequency to some scale (done in self.spectrogram_frequencies)\n\n        And then create many band-pass filters, each one centered on the center frequencies using\n        Whittaker-Shannon's interpolation formula per row of the matrix, considering the FFT bins as\n        a one-hertz-frequency function to interpolate, we find \"the around frequencies\" !\n        \"\"\"\n\n        # Whittaker-Shannon interpolation formula per row of the matrix\n        matrix = numpy.array([\n            self.interpolation(theoretical_index - numpy.arange(self.fft_bins))\n            for theoretical_index in (self.spectrogram_frequencies/self.fft_frequencies[1])\n        ], dtype=self.audio.dtype)\n\n        # Zero out near-zero values\n        matrix[numpy.abs(matrix) &lt; 1e-5] = 0\n\n        # Create a scipy sparse for much faster matrix multiplication\n        return scipy.sparse.csr_matrix(matrix)\n\n    def from_notes(self,\n        start: BrokenPianoNote,\n        end: BrokenPianoNote,\n        bins: int=1000,\n        piano: bool=False,\n        tuning: Hertz=440,\n    ):\n        start = BrokenPianoNote.get(start, tuning=tuning)\n        end   = BrokenPianoNote.get(end, tuning=tuning)\n        log.info(f\"Making Spectrogram Piano Matrix from notes ({start.name} - {end.name})\")\n        self.minimum_frequency = start.frequency\n        self.maximum_frequency = end.frequency\n        if not piano:\n            self.spectrogram_bins = bins\n        else:\n            # The advertised number of bins should start and end on a note\n            half_semitone = 2**(0.5/12)\n            self.spectrogram_bins = ((end.note - start.note) + 1)\n            self.minimum_frequency /= half_semitone\n            self.maximum_frequency *= half_semitone\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.audio","title":"audio","text":"<pre><code>audio: BrokenAudio = Factory(BrokenAudio)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.fft_n","title":"fft_n","text":"<pre><code>fft_n: int = field(default=12, converter=int)\n</code></pre> <p>2^n FFT size, higher values, higher frequency resolution, less responsiveness</p>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.sample_rateio","title":"sample_rateio","text":"<pre><code>sample_rateio: int = field(default=1, converter=int)\n</code></pre> <p>Resample the input data by a factor, int for FFT optimizations</p>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.scale","title":"scale","text":"<pre><code>scale: tuple[callable] = BrokenAudioSpectrogramScale.Octave\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.interpolation","title":"interpolation","text":"<pre><code>interpolation: callable = (\n    BrokenAudioSpectrogramInterpolation.Euler\n)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.magnitude_function","title":"magnitude_function","text":"<pre><code>magnitude_function: callable = (\n    BrokenAudioFourierMagnitude.Power\n)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.window_function","title":"window_function","text":"<pre><code>window_function: callable = (\n    BrokenAudioSpectrogramWindow.hanning\n)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.volume","title":"volume","text":"<pre><code>volume: callable = BrokenAudioFourierVolume.Sqrt\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.__cache__","title":"__cache__","text":"<pre><code>__cache__() -&gt; int\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>def __cache__(self) -&gt; int:\n    return hash((\n        self.fft_n,\n        self.minimum_frequency,\n        self.maximum_frequency,\n        self.spectrogram_bins,\n        self.sample_rateio,\n        self.magnitude_function,\n        self.interpolation,\n        self.scale,\n        self.volume,\n    ))\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.fft_size","title":"fft_size","text":"<pre><code>fft_size: Samples\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.fft_bins","title":"fft_bins","text":"<pre><code>fft_bins: int\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.fft_frequencies","title":"fft_frequencies","text":"<pre><code>fft_frequencies: Union[numpy.ndarray, Hertz]\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.fft","title":"fft","text":"<pre><code>fft() -&gt; numpy.ndarray\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>def fft(self) -&gt; numpy.ndarray:\n    data = self.audio.get_last_n_samples(int(2**self.fft_n))\n\n    # Optionally resample the data\n    if self.sample_rateio != 1:\n        try:\n            import samplerate\n        except ModuleNotFoundError:\n            raise RuntimeError('\\n'.join((\n                \"Please install 'samplerate' dependency for resampling:\"\n                \"\u2022 Find it at: (https://pypi.org/project/samplerate)\"\n            )))\n        data = numpy.array([samplerate.resample(x, self.sample_rateio, 'linear') for x in data])\n\n    return self.magnitude_function(\n        numpy.fft.rfft(self.window_function(self.fft_size) * data)\n    ).astype(self.audio.dtype)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.next","title":"next","text":"<pre><code>next() -&gt; numpy.ndarray\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>def next(self) -&gt; numpy.ndarray:\n    return self.spectrogram_matrix.dot(self.fft().T).T\n    return self.volume([\n        self.spectrogram_matrix @ channel\n        for channel in self.fft()\n    ])\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.minimum_frequency","title":"minimum_frequency","text":"<pre><code>minimum_frequency: Hertz = 20.0\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.maximum_frequency","title":"maximum_frequency","text":"<pre><code>maximum_frequency: Hertz = 20000.0\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.spectrogram_bins","title":"spectrogram_bins","text":"<pre><code>spectrogram_bins: int = 1000\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.spectrogram_frequencies","title":"spectrogram_frequencies","text":"<pre><code>spectrogram_frequencies: numpy.ndarray\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.spectrogram_matrix","title":"spectrogram_matrix","text":"<pre><code>spectrogram_matrix: scipy.sparse.csr_matrix\n</code></pre> <p>Gets a transformation matrix that multiplied with self.fft yields \"spectrogram bins\" in custom scale</p> <p>The idea to get the center frequencies on the custom scale is to compute the following: $$ center_frequencies = T^-1(linspace(T(min), T(max), n)) $$</p> <p>Where T(f) transforms a frequency to some scale (done in self.spectrogram_frequencies)</p> <p>And then create many band-pass filters, each one centered on the center frequencies using Whittaker-Shannon's interpolation formula per row of the matrix, considering the FFT bins as a one-hertz-frequency function to interpolate, we find \"the around frequencies\" !</p>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.BrokenSpectrogram.from_notes","title":"from_notes","text":"<pre><code>from_notes(\n    start: BrokenPianoNote,\n    end: BrokenPianoNote,\n    bins: int = 1000,\n    piano: bool = False,\n    tuning: Hertz = 440,\n)\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>def from_notes(self,\n    start: BrokenPianoNote,\n    end: BrokenPianoNote,\n    bins: int=1000,\n    piano: bool=False,\n    tuning: Hertz=440,\n):\n    start = BrokenPianoNote.get(start, tuning=tuning)\n    end   = BrokenPianoNote.get(end, tuning=tuning)\n    log.info(f\"Making Spectrogram Piano Matrix from notes ({start.name} - {end.name})\")\n    self.minimum_frequency = start.frequency\n    self.maximum_frequency = end.frequency\n    if not piano:\n        self.spectrogram_bins = bins\n    else:\n        # The advertised number of bins should start and end on a note\n        half_semitone = 2**(0.5/12)\n        self.spectrogram_bins = ((end.note - start.note) + 1)\n        self.minimum_frequency /= half_semitone\n        self.maximum_frequency *= half_semitone\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.ShaderSpectrogram","title":"ShaderSpectrogram","text":"<p>               Bases: <code>BrokenSpectrogram</code>, <code>ShaderModule</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>@define\nclass ShaderSpectrogram(BrokenSpectrogram, ShaderModule):\n    name: str = \"iSpectrogram\"\n    \"\"\"Prefix name and Texture name of the Shader Variables\"\"\"\n\n    length: Seconds = 5\n    \"\"\"Horizontal length of the Spectrogram content\"\"\"\n\n    offset: Samples = 0\n    \"\"\"Modulus of total samples written by length, used for scrolling mode\"\"\"\n\n    smooth: bool = False\n    \"\"\"Enables Linear interpolation on the Texture, not useful for Bars mode\"\"\"\n\n    scrolling: bool = False\n    \"\"\"\"\"\"\n\n    dynamics: DynamicNumber = None\n    \"\"\"Apply Dynamics to the FFT data\"\"\"\n\n    texture: ShaderTexture = None\n    \"\"\"Internal managed Texture\"\"\"\n\n    @property\n    def length_samples(self) -&gt; Samples:\n        return int(max(1, self.length*self.scene.fps))\n\n    @property\n    def _row_shape(self) -&gt; tuple[int, int]:\n        return (self.audio.channels, self.spectrogram_bins)\n\n    @property\n    def _row_zeros(self) -&gt; numpy.ndarray:\n        return numpy.zeros(self._row_shape, dtype=numpy.float32)\n\n    def __post__(self):\n        self.dynamics = DynamicNumber(\n            frequency=4, zeta=1, response=0,\n            dtype=numpy.float32,\n        )\n        self.texture = ShaderTexture(\n            scene=self.scene,\n            name=self.name,\n            dtype=numpy.float32,\n            repeat_y=False,\n        )\n\n    __same__: SameTracker = Factory(SameTracker)\n\n    def update(self):\n        self.texture.components = self.audio.channels\n        self.texture.filter = (\"linear\" if self.smooth else \"nearest\")\n        self.texture.height = self.spectrogram_bins\n        self.texture.width = self.length_samples\n        self.offset = (self.offset + 1) % self.length_samples\n        if (self.dynamics.value.shape != (self._row_shape)):\n            self.dynamics.set(self._row_zeros)\n        if not self.__same__(self.audio.tell):\n            self.dynamics.target = self.next().T.reshape(2, -1)\n        self.dynamics.next(dt=abs(self.scene.dt))\n        self.texture.write(\n            viewport=(self.offset, 0, 1, self.spectrogram_bins),\n            data=self.dynamics.value.astype(numpy.float32),\n        )\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        yield Uniform(\"int\",   f\"{self.name}Length\", self.length_samples)\n        yield Uniform(\"int\",   f\"{self.name}Bins\",   self.spectrogram_bins)\n        yield Uniform(\"float\", f\"{self.name}Offset\", self.offset/self.length_samples)\n        yield Uniform(\"int\",   f\"{self.name}Smooth\", self.smooth)\n        yield Uniform(\"float\", f\"{self.name}Min\",    self.spectrogram_frequencies[0])\n        yield Uniform(\"float\", f\"{self.name}Max\",    self.spectrogram_frequencies[-1])\n        yield Uniform(\"bool\",  f\"{self.name}Scroll\", self.scrolling)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.ShaderSpectrogram.name","title":"name","text":"<pre><code>name: str = 'iSpectrogram'\n</code></pre> <p>Prefix name and Texture name of the Shader Variables</p>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.ShaderSpectrogram.length","title":"length","text":"<pre><code>length: Seconds = 5\n</code></pre> <p>Horizontal length of the Spectrogram content</p>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.ShaderSpectrogram.offset","title":"offset","text":"<pre><code>offset: Samples = 0\n</code></pre> <p>Modulus of total samples written by length, used for scrolling mode</p>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.ShaderSpectrogram.smooth","title":"smooth","text":"<pre><code>smooth: bool = False\n</code></pre> <p>Enables Linear interpolation on the Texture, not useful for Bars mode</p>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.ShaderSpectrogram.scrolling","title":"scrolling","text":"<pre><code>scrolling: bool = False\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.ShaderSpectrogram.dynamics","title":"dynamics","text":"<pre><code>dynamics: DynamicNumber = None\n</code></pre> <p>Apply Dynamics to the FFT data</p>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.ShaderSpectrogram.texture","title":"texture","text":"<pre><code>texture: ShaderTexture = None\n</code></pre> <p>Internal managed Texture</p>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.ShaderSpectrogram.length_samples","title":"length_samples","text":"<pre><code>length_samples: Samples\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.ShaderSpectrogram.__post__","title":"__post__","text":"<pre><code>__post__()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>def __post__(self):\n    self.dynamics = DynamicNumber(\n        frequency=4, zeta=1, response=0,\n        dtype=numpy.float32,\n    )\n    self.texture = ShaderTexture(\n        scene=self.scene,\n        name=self.name,\n        dtype=numpy.float32,\n        repeat_y=False,\n    )\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.ShaderSpectrogram.__same__","title":"__same__","text":"<pre><code>__same__: SameTracker = Factory(SameTracker)\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.ShaderSpectrogram.update","title":"update","text":"<pre><code>update()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>def update(self):\n    self.texture.components = self.audio.channels\n    self.texture.filter = (\"linear\" if self.smooth else \"nearest\")\n    self.texture.height = self.spectrogram_bins\n    self.texture.width = self.length_samples\n    self.offset = (self.offset + 1) % self.length_samples\n    if (self.dynamics.value.shape != (self._row_shape)):\n        self.dynamics.set(self._row_zeros)\n    if not self.__same__(self.audio.tell):\n        self.dynamics.target = self.next().T.reshape(2, -1)\n    self.dynamics.next(dt=abs(self.scene.dt))\n    self.texture.write(\n        viewport=(self.offset, 0, 1, self.spectrogram_bins),\n        data=self.dynamics.value.astype(numpy.float32),\n    )\n</code></pre>"},{"location":"code/shaderflow/modules/spectrogram/#ShaderFlow.Modules.Spectrogram.ShaderSpectrogram.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Spectrogram.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    yield Uniform(\"int\",   f\"{self.name}Length\", self.length_samples)\n    yield Uniform(\"int\",   f\"{self.name}Bins\",   self.spectrogram_bins)\n    yield Uniform(\"float\", f\"{self.name}Offset\", self.offset/self.length_samples)\n    yield Uniform(\"int\",   f\"{self.name}Smooth\", self.smooth)\n    yield Uniform(\"float\", f\"{self.name}Min\",    self.spectrogram_frequencies[0])\n    yield Uniform(\"float\", f\"{self.name}Max\",    self.spectrogram_frequencies[-1])\n    yield Uniform(\"bool\",  f\"{self.name}Scroll\", self.scrolling)\n</code></pre>"},{"location":"code/shaderflow/modules/video/","title":"File: <code>ShaderFlow/Modules/Video.py</code>","text":""},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video","title":"ShaderFlow.Modules.Video","text":""},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames","title":"BrokenSmartVideoFrames","text":"<p>               Bases: <code>BrokenAttrs</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Video.py</code> <pre><code>@define(slots=False)\nclass BrokenSmartVideoFrames(BrokenAttrs):\n    path:     Path    = None\n    buffer:   Seconds = 60\n    threads:  int     = 6\n    quality:  int     = 95\n    time:     Seconds = 0\n    lossless: bool    = True\n    _width:   int     = None\n    _height:  int     = None\n    _fps:     Hertz   = None\n    _turbo:   Any     = None\n    _raw:     deque   = Factory(deque)\n    _frames:  dict    = Factory(dict)\n\n    # Dynamically set\n    encode:  Callable = None\n    decode:  Callable = None\n\n    @property\n    def max_raw(self) -&gt; int:\n        return self.threads*4\n\n    @property\n    def width(self) -&gt; int:\n        return self._width\n\n    @property\n    def height(self) -&gt; int:\n        return self._height\n\n    # # Initialization\n\n    LOSSLESS_MAX_BUFFER_LENGTH = 4\n\n    def __post__(self):\n        self._fps = BrokenFFmpeg.get_video_framerate(self.path)\n        self._width, self._height = BrokenFFmpeg.get_video_resolution(self.path)\n\n        if not all((self._fps, self._width, self._height)):\n            raise ValueError(\"Could not get video metadata\")\n\n        # TurboJPEG will raise if shared lib is not found\n        with contextlib.suppress(RuntimeError, ModuleNotFoundError):\n            import turbojpeg\n            self._turbo = turbojpeg.TurboJPEG()\n\n        if self.lossless:\n            self.log_warning(\"Using lossless frames. Limiting buffer length for Out of Memory safety\")\n            self.buffer = min(self.buffer, BrokenSmartVideoFrames.LOSSLESS_MAX_BUFFER_LENGTH)\n            self.encode = lambda frame: frame\n            self.decode = lambda frame: frame\n\n        elif (self._turbo is not None):\n            self.log_success(\"Using TurboJPEG for compression. Best speeds available\")\n            self.encode = lambda frame: self._turbo.encode(frame, quality=self.quality)\n            self.decode = lambda frame: self._turbo.decode(frame)\n\n        elif (\"cv2\" in sys.modules):\n            self.log_success(\"Using OpenCV for compression. Slower than TurboJPEG but enough\")\n            self.encode = lambda frame: cv2.imencode(\".jpeg\", frame)[1]\n            self.decode = lambda frame: cv2.imdecode(frame, cv2.IMREAD_COLOR)\n\n        else:\n            self.log_warning(\"Using PIL for compression. Performance killer GIL fallback\")\n            self.decode = lambda frame: PIL.Image.open(io.BytesIO(frame))\n            self.encode = lambda frame: PIL.Image.fromarray(frame).save(\n                io.BytesIO(), format=\"jpeg\", quality=self.quality\n            )\n\n        # Create worker threads. The good, the bad and the ugly\n        BrokenWorker.thread(self.extracto)\n        BrokenWorker.thread(self.deleter)\n        for _ in range(self.threads):\n            BrokenWorker.thread(self.worke)\n\n    # # Utilities\n\n    def time2index(self, time: Seconds) -&gt; int:\n        return int(time*self._fps)\n\n    def index2time(self, index: int) -&gt; Seconds:\n        return (index/self._fps)\n\n    # # Check if we can decode and encode with the libraries\n\n    def get_frame(self, time: Seconds) -&gt; tuple[int, numpy.ndarray]:\n        want = self.time2index(time)\n        self.time = time\n        import time\n\n        # Wait until the frame exists\n        while (jpeg := self._frames.get(want)) is None:\n            time.sleep(0.01)\n\n        return (want, lambda: self.decode(jpeg))\n\n    @property\n    def buffer_frames(self) -&gt; int:\n        return int(self.buffer*self._fps)\n\n    @property\n    def time_index(self) -&gt; int:\n        return self.time2index(self.time)\n\n    @property\n    def _future_index(self) -&gt; int:\n        return self.time_index + self.buffer_frames\n\n    def _future_window(self, index: int) -&gt; bool:\n        return index &lt; self._future_index\n\n    @property\n    def _past_index(self) -&gt; int:\n        return self.time_index - self.buffer_frames\n\n    def _past_window(self, index: int) -&gt; bool:\n        return self._past_index &lt; index\n\n    def _time_window(self, index: int) -&gt; bool:\n        return self._past_window(index) and self._future_window(index)\n\n    def _should_rewind(self, index: int) -&gt; bool:\n        \"\"\"Point must be older than the past cutoff to trigger a rewind\"\"\"\n        return (self.time_index + self.buffer_frames) &lt; index\n\n    # # Workers\n\n    _oldest: int = 0\n    _newest: int = 0\n\n    def extractor(self):\n        def forward():\n            for index, frame in enumerate(BrokenFFmpeg.iter_video_frames(self.path)):\n\n                # Skip already processed frames\n                if self._frames.get(index) is not None:\n                    continue\n\n                # Skip frames outside of the past time window\n                if not self._past_window(index):\n                    continue\n\n                while not self._future_window(index):\n                    if self._should_rewind(index):\n                        return\n                    time.sleep(0.01)\n\n                # Limit how much raw frames there can be\n                while len(self._raw) &gt; self.max_raw:\n                    time.sleep(0.01)\n\n                self._raw.append((index, frame))\n                self._newest = max(self._newest, index)\n\n        while True:\n            forward()\n\n    def worker(self):\n        \"\"\"Blindly get new frames from the deque, compress and store them\"\"\"\n        while True:\n            try:\n                index, frame = self._raw.popleft()\n                frame = numpy.array(numpy.flip(frame, axis=0))\n                self._frames[index] = self.encode(frame)\n            except IndexError:\n                time.sleep(0.01)\n\n    def deleter(self):\n        \"\"\"Delete old frames that are not in the time window\"\"\"\n        while True:\n            for index in range(self._oldest, self._past_index):\n                self._frames[index] = None\n                self._oldest = index\n            for index in range(self._newest, self._future_index, -1):\n                self._frames[index] = None\n                self._newest = index\n            time.sleep(0.5)\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.path","title":"path","text":"<pre><code>path: Path = None\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.buffer","title":"buffer","text":"<pre><code>buffer: Seconds = 60\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.threads","title":"threads","text":"<pre><code>threads: int = 6\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.quality","title":"quality","text":"<pre><code>quality: int = 95\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.time","title":"time","text":"<pre><code>time: Seconds = 0\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.lossless","title":"lossless","text":"<pre><code>lossless: bool = True\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.encode","title":"encode","text":"<pre><code>encode: Callable = None\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.decode","title":"decode","text":"<pre><code>decode: Callable = None\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.max_raw","title":"max_raw","text":"<pre><code>max_raw: int\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.width","title":"width","text":"<pre><code>width: int\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.height","title":"height","text":"<pre><code>height: int\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.LOSSLESS_MAX_BUFFER_LENGTH","title":"LOSSLESS_MAX_BUFFER_LENGTH","text":"<pre><code>LOSSLESS_MAX_BUFFER_LENGTH = 4\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.__post__","title":"__post__","text":"<pre><code>__post__()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Video.py</code> <pre><code>def __post__(self):\n    self._fps = BrokenFFmpeg.get_video_framerate(self.path)\n    self._width, self._height = BrokenFFmpeg.get_video_resolution(self.path)\n\n    if not all((self._fps, self._width, self._height)):\n        raise ValueError(\"Could not get video metadata\")\n\n    # TurboJPEG will raise if shared lib is not found\n    with contextlib.suppress(RuntimeError, ModuleNotFoundError):\n        import turbojpeg\n        self._turbo = turbojpeg.TurboJPEG()\n\n    if self.lossless:\n        self.log_warning(\"Using lossless frames. Limiting buffer length for Out of Memory safety\")\n        self.buffer = min(self.buffer, BrokenSmartVideoFrames.LOSSLESS_MAX_BUFFER_LENGTH)\n        self.encode = lambda frame: frame\n        self.decode = lambda frame: frame\n\n    elif (self._turbo is not None):\n        self.log_success(\"Using TurboJPEG for compression. Best speeds available\")\n        self.encode = lambda frame: self._turbo.encode(frame, quality=self.quality)\n        self.decode = lambda frame: self._turbo.decode(frame)\n\n    elif (\"cv2\" in sys.modules):\n        self.log_success(\"Using OpenCV for compression. Slower than TurboJPEG but enough\")\n        self.encode = lambda frame: cv2.imencode(\".jpeg\", frame)[1]\n        self.decode = lambda frame: cv2.imdecode(frame, cv2.IMREAD_COLOR)\n\n    else:\n        self.log_warning(\"Using PIL for compression. Performance killer GIL fallback\")\n        self.decode = lambda frame: PIL.Image.open(io.BytesIO(frame))\n        self.encode = lambda frame: PIL.Image.fromarray(frame).save(\n            io.BytesIO(), format=\"jpeg\", quality=self.quality\n        )\n\n    # Create worker threads. The good, the bad and the ugly\n    BrokenWorker.thread(self.extracto)\n    BrokenWorker.thread(self.deleter)\n    for _ in range(self.threads):\n        BrokenWorker.thread(self.worke)\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.time2index","title":"time2index","text":"<pre><code>time2index(time: Seconds) -&gt; int\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Video.py</code> <pre><code>def time2index(self, time: Seconds) -&gt; int:\n    return int(time*self._fps)\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.index2time","title":"index2time","text":"<pre><code>index2time(index: int) -&gt; Seconds\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Video.py</code> <pre><code>def index2time(self, index: int) -&gt; Seconds:\n    return (index/self._fps)\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.get_frame","title":"get_frame","text":"<pre><code>get_frame(time: Seconds) -&gt; tuple[int, numpy.ndarray]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Video.py</code> <pre><code>def get_frame(self, time: Seconds) -&gt; tuple[int, numpy.ndarray]:\n    want = self.time2index(time)\n    self.time = time\n    import time\n\n    # Wait until the frame exists\n    while (jpeg := self._frames.get(want)) is None:\n        time.sleep(0.01)\n\n    return (want, lambda: self.decode(jpeg))\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.buffer_frames","title":"buffer_frames","text":"<pre><code>buffer_frames: int\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.time_index","title":"time_index","text":"<pre><code>time_index: int\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.extractor","title":"extractor","text":"<pre><code>extractor()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Video.py</code> <pre><code>def extractor(self):\n    def forward():\n        for index, frame in enumerate(BrokenFFmpeg.iter_video_frames(self.path)):\n\n            # Skip already processed frames\n            if self._frames.get(index) is not None:\n                continue\n\n            # Skip frames outside of the past time window\n            if not self._past_window(index):\n                continue\n\n            while not self._future_window(index):\n                if self._should_rewind(index):\n                    return\n                time.sleep(0.01)\n\n            # Limit how much raw frames there can be\n            while len(self._raw) &gt; self.max_raw:\n                time.sleep(0.01)\n\n            self._raw.append((index, frame))\n            self._newest = max(self._newest, index)\n\n    while True:\n        forward()\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.worker","title":"worker","text":"<pre><code>worker()\n</code></pre> <p>Blindly get new frames from the deque, compress and store them</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Video.py</code> <pre><code>def worker(self):\n    \"\"\"Blindly get new frames from the deque, compress and store them\"\"\"\n    while True:\n        try:\n            index, frame = self._raw.popleft()\n            frame = numpy.array(numpy.flip(frame, axis=0))\n            self._frames[index] = self.encode(frame)\n        except IndexError:\n            time.sleep(0.01)\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.BrokenSmartVideoFrames.deleter","title":"deleter","text":"<pre><code>deleter()\n</code></pre> <p>Delete old frames that are not in the time window</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Video.py</code> <pre><code>def deleter(self):\n    \"\"\"Delete old frames that are not in the time window\"\"\"\n    while True:\n        for index in range(self._oldest, self._past_index):\n            self._frames[index] = None\n            self._oldest = index\n        for index in range(self._newest, self._future_index, -1):\n            self._frames[index] = None\n            self._newest = index\n        time.sleep(0.5)\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.ShaderVideo","title":"ShaderVideo","text":"<p>               Bases: <code>BrokenSmartVideoFrames</code>, <code>ShaderModule</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Video.py</code> <pre><code>@define\nclass ShaderVideo(BrokenSmartVideoFrames, ShaderModule):\n    name: str = \"iVideo\"\n    texture: ShaderTexture = None\n\n    temporal: int = 10\n    \"\"\"How many \"\"\"\n\n    on_frame: BrokenRelay = Factory(BrokenRelay)\n    \"\"\"Whenever a new video frame is decoded, this attribute is called. Preferably subscribe to\n    it with `video.on_frame.subscribe(callable)` or `video.on_frame @ (A, B, C)`, see BokenRelay\"\"\"\n\n    def __post__(self):\n        self.texture = ShaderTexture(\n            scene=self.scene,\n            name=self.name,\n            width=self.width,\n            height=self.height,\n            temporal=self.temporal,\n            components=3,\n            dtype=\"f1\"\n        )\n\n    __same__: SameTracker = Factory(SameTracker)\n\n    def update(self):\n        index, decode = self.get_frame(self.scene.time)\n\n        if not self.__same__(index):\n            image = decode()\n            self.texture.roll()\n            self.texture.write(image)\n            self.on_frame(image)\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.ShaderVideo.name","title":"name","text":"<pre><code>name: str = 'iVideo'\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.ShaderVideo.texture","title":"texture","text":"<pre><code>texture: ShaderTexture = None\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.ShaderVideo.temporal","title":"temporal","text":"<pre><code>temporal: int = 10\n</code></pre> <p>How many</p>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.ShaderVideo.on_frame","title":"on_frame","text":"<pre><code>on_frame: BrokenRelay = Factory(BrokenRelay)\n</code></pre> <p>Whenever a new video frame is decoded, this attribute is called. Preferably subscribe to it with <code>video.on_frame.subscribe(callable)</code> or <code>video.on_frame @ (A, B, C)</code>, see BokenRelay</p>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.ShaderVideo.__post__","title":"__post__","text":"<pre><code>__post__()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Video.py</code> <pre><code>def __post__(self):\n    self.texture = ShaderTexture(\n        scene=self.scene,\n        name=self.name,\n        width=self.width,\n        height=self.height,\n        temporal=self.temporal,\n        components=3,\n        dtype=\"f1\"\n    )\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.ShaderVideo.__same__","title":"__same__","text":"<pre><code>__same__: SameTracker = Factory(SameTracker)\n</code></pre>"},{"location":"code/shaderflow/modules/video/#ShaderFlow.Modules.Video.ShaderVideo.update","title":"update","text":"<pre><code>update()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Video.py</code> <pre><code>def update(self):\n    index, decode = self.get_frame(self.scene.time)\n\n    if not self.__same__(index):\n        image = decode()\n        self.texture.roll()\n        self.texture.write(image)\n        self.on_frame(image)\n</code></pre>"},{"location":"code/shaderflow/modules/waveform/","title":"File: <code>ShaderFlow/Modules/Waveform.py</code>","text":""},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform","title":"ShaderFlow.Modules.Waveform","text":""},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.WaveformReducer","title":"WaveformReducer","text":"<p>               Bases: <code>BrokenEnum</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Waveform.py</code> <pre><code>class WaveformReducer(BrokenEnum):\n    def Average(x: numpy.ndarray) -&gt; numpy.ndarray:\n        return numpy.sqrt(numpy.mean(numpy.abs(x), axis=2))\n\n    def RMS(x: numpy.ndarray) -&gt; numpy.ndarray:\n        return numpy.sqrt(numpy.sqrt(numpy.mean(x**2, axis=2))*(2**0.5))\n\n    def STD(x: numpy.ndarray) -&gt; numpy.ndarray:\n        return numpy.sqrt(numpy.std(x, axis=2))\n</code></pre>"},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.WaveformReducer.Average","title":"Average","text":"<pre><code>Average(x: numpy.ndarray) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Waveform.py</code> <pre><code>def Average(x: numpy.ndarray) -&gt; numpy.ndarray:\n    return numpy.sqrt(numpy.mean(numpy.abs(x), axis=2))\n</code></pre>"},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.WaveformReducer.RMS","title":"RMS","text":"<pre><code>RMS(x: numpy.ndarray) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Waveform.py</code> <pre><code>def RMS(x: numpy.ndarray) -&gt; numpy.ndarray:\n    return numpy.sqrt(numpy.sqrt(numpy.mean(x**2, axis=2))*(2**0.5))\n</code></pre>"},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.WaveformReducer.STD","title":"STD","text":"<pre><code>STD(x: numpy.ndarray) -&gt; numpy.ndarray\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Waveform.py</code> <pre><code>def STD(x: numpy.ndarray) -&gt; numpy.ndarray:\n    return numpy.sqrt(numpy.std(x, axis=2))\n</code></pre>"},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.ShaderWaveform","title":"ShaderWaveform","text":"<p>               Bases: <code>ShaderModule</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Waveform.py</code> <pre><code>@define\nclass ShaderWaveform(ShaderModule):\n\n    name: str = \"iWaveform\"\n    \"\"\"Prefix name and Texture name of the Shader Variables\"\"\"\n\n    audio: BrokenAudio = None\n    \"\"\"Audio class to read the data from\"\"\"\n\n    length: Seconds = 3\n    \"\"\"Horizontal length of the Waveform content\"\"\"\n\n    samplerate: Hertz = 60\n    \"\"\"Number of bars per second\"\"\"\n\n    reducer: WaveformReducer = WaveformReducer.Average\n    \"\"\"How to convert a (channels, length, samples) chunks into (channels, length)\"\"\"\n\n    smooth: bool = True\n    \"\"\"Enables Linear interpolation on the Texture, not much useful for Bars mode\"\"\"\n\n    texture: ShaderTexture = None\n    \"\"\"Internal managed Texture\"\"\"\n\n    @property\n    def length_samples(self) -&gt; Samples:\n        return int(max(1, self.length*self.scene.fps))\n\n    def build(self):\n        self.texture = ShaderTexture(\n            scene=self.scene,\n            name=self.name,\n            height=1,\n            mipmaps=False,\n            dtype=numpy.float32,\n        ).repeat(False)\n\n    @property\n    def chunk_size(self) -&gt; Samples:\n        return max(1, int(self.length*self.audio.samplerate/self._points))\n\n    @property\n    def _points(self) -&gt; int:\n        return self.length*self.samplerate\n\n    @property\n    def _offset(self) -&gt; int:\n        return self.audio.tell % self.chunk_size\n\n    @property\n    def _cutoff(self) -&gt; Samples:\n        return nearest(\n            number=self.audio.buffer_size,\n            multiple=self.chunk_size,\n            operator=math.floor,\n            cast=int,\n        )\n\n    _same: SameTracker = Factory(SameTracker)\n\n    def update(self):\n        if self._same(self.audio.tell):\n            return\n        self.texture.filter     = (\"linear\" if self.smooth else \"nearest\")\n        self.texture.components = self.audio.channels\n        self.texture.width      = self._points\n        start  = -int(self.chunk_size*self._points + self._offset + 1)\n        end    = -int(self._offset + 1)\n        chunks = self.audio.data[:, start:end]\n        chunks = chunks.reshape(self.audio.channels, -1, self.chunk_size)\n        chunks = self.reducer(chunks)\n        chunks = numpy.ascontiguousarray(chunks.T)\n        self.texture.write(chunks)\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        yield Uniform(\"int\", f\"{self.name}Length\", self.length_samples)\n</code></pre>"},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.ShaderWaveform.name","title":"name","text":"<pre><code>name: str = 'iWaveform'\n</code></pre> <p>Prefix name and Texture name of the Shader Variables</p>"},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.ShaderWaveform.audio","title":"audio","text":"<pre><code>audio: BrokenAudio = None\n</code></pre> <p>Audio class to read the data from</p>"},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.ShaderWaveform.length","title":"length","text":"<pre><code>length: Seconds = 3\n</code></pre> <p>Horizontal length of the Waveform content</p>"},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.ShaderWaveform.samplerate","title":"samplerate","text":"<pre><code>samplerate: Hertz = 60\n</code></pre> <p>Number of bars per second</p>"},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.ShaderWaveform.reducer","title":"reducer","text":"<pre><code>reducer: WaveformReducer = WaveformReducer.Average\n</code></pre> <p>How to convert a (channels, length, samples) chunks into (channels, length)</p>"},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.ShaderWaveform.smooth","title":"smooth","text":"<pre><code>smooth: bool = True\n</code></pre> <p>Enables Linear interpolation on the Texture, not much useful for Bars mode</p>"},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.ShaderWaveform.texture","title":"texture","text":"<pre><code>texture: ShaderTexture = None\n</code></pre> <p>Internal managed Texture</p>"},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.ShaderWaveform.length_samples","title":"length_samples","text":"<pre><code>length_samples: Samples\n</code></pre>"},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.ShaderWaveform.build","title":"build","text":"<pre><code>build()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Waveform.py</code> <pre><code>def build(self):\n    self.texture = ShaderTexture(\n        scene=self.scene,\n        name=self.name,\n        height=1,\n        mipmaps=False,\n        dtype=numpy.float32,\n    ).repeat(False)\n</code></pre>"},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.ShaderWaveform.chunk_size","title":"chunk_size","text":"<pre><code>chunk_size: Samples\n</code></pre>"},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.ShaderWaveform.update","title":"update","text":"<pre><code>update()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Waveform.py</code> <pre><code>def update(self):\n    if self._same(self.audio.tell):\n        return\n    self.texture.filter     = (\"linear\" if self.smooth else \"nearest\")\n    self.texture.components = self.audio.channels\n    self.texture.width      = self._points\n    start  = -int(self.chunk_size*self._points + self._offset + 1)\n    end    = -int(self._offset + 1)\n    chunks = self.audio.data[:, start:end]\n    chunks = chunks.reshape(self.audio.channels, -1, self.chunk_size)\n    chunks = self.reducer(chunks)\n    chunks = numpy.ascontiguousarray(chunks.T)\n    self.texture.write(chunks)\n</code></pre>"},{"location":"code/shaderflow/modules/waveform/#ShaderFlow.Modules.Waveform.ShaderWaveform.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Waveform.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    yield Uniform(\"int\", f\"{self.name}Length\", self.length_samples)\n</code></pre>"},{"location":"code/shaderflow/modules/others/__init__/","title":"File: <code>ShaderFlow/Modules/Others/__init__.py</code>","text":""},{"location":"code/shaderflow/modules/others/__init__/#ShaderFlow.Modules.Others","title":"ShaderFlow.Modules.Others","text":""},{"location":"code/shaderflow/modules/others/bouncing/","title":"File: <code>ShaderFlow/Modules/Others/Bouncing.py</code>","text":""},{"location":"code/shaderflow/modules/others/bouncing/#ShaderFlow.Modules.Others.Bouncing","title":"ShaderFlow.Modules.Others.Bouncing","text":""},{"location":"code/shaderflow/modules/others/bouncing/#ShaderFlow.Modules.Others.Bouncing.ShaderBouncing","title":"ShaderBouncing","text":"<p>               Bases: <code>ShaderModule</code></p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Others/Bouncing.py</code> <pre><code>@define\nclass ShaderBouncing(ShaderModule):\n    name: str = \"iBounce\"\n    position: numpy.ndarray = None\n    velocity: numpy.ndarray = None\n    aspect_ratio: float = 1\n\n    def setup(self):\n        self.set_velocity_polar(1, random.uniform(0, TAU))\n        self.position = numpy.array((0.0, 0.0))\n\n    def update(self):\n        self.position += (self.velocity * self.scene.dt)\n\n        for i, limit in enumerate((self.aspect_ratio, 1)):\n            if abs(self.position[i]) &gt; limit:\n                self.velocity[i] = -self.velocity[i]\n                self.position[i] = clamp(self.position[i], -limit, limit)\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        yield Uniform(\"vec2\", f\"{self.name}Position\", self.position)\n        yield Uniform(\"vec2\", f\"{self.name}Velocity\", self.velocity)\n\n    # # Quality of Life\n\n    def set_velocity_polar(self, magnitude: float, angle: Degrees):\n        self.velocity = magnitude*numpy.array((cos(angle), sin(angle)))\n\n    @property\n    def x(self) -&gt; float:\n        return self.position[0]\n\n    @property\n    def y(self) -&gt; float:\n        return self.position[1]\n\n    @x.setter\n    def x(self, value: float):\n        self.position[0] = value\n\n    @y.setter\n    def y(self, value: float):\n        self.position[1] = value\n\n    # # Advanced\n\n    def advanced_ratios(self, image: LoadableImage, steps: int=1000) -&gt; ShaderTexture:\n        \"\"\"Get a texture of `aspect_ratio(angle)` from linspace(0, tau, steps)\"\"\"\n        ratios = numpy.zeros((steps, 1), dtype=numpy.float32)\n        image = numpy.array(LoadImage(image))\n        width, height, _ = image.shape\n        bigger = max(width, height)\n\n        import cv2\n\n        # image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n        image = image[:, :, 3]\n\n        # Make anew image with a centered raw copy\n        square = numpy.zeros((bigger, bigger), dtype=numpy.uint8)\n        x, y = (bigger-width)//2, (bigger-height)//2\n        square[x:x+width, y:y+height] = image\n\n        # Rotate the image and find its alpha content bounding box\n        for i, angle in enumerate(numpy.linspace(0, 360, steps)):\n            rotation = cv2.getRotationMatrix2D((bigger/2, bigger/2), angle, 1)\n            rotated  = cv2.warpAffine(square, rotation, (bigger, bigger))\n            thresh   = cv2.threshold(rotated, 4, 255, cv2.THRESH_BINARY)[1]\n            contours = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[0]\n            _, _, w, h = cv2.boundingRect(max(contours, key=cv2.contourArea))\n            ratios[i][0] = (w/h)\n\n        return ShaderTexture(\n            name=f\"{self.name}AspectRatio\",\n            scene=self.scene,\n            components=1,\n            width=steps,\n            height=1,\n        ).from_numpy(ratios)\n</code></pre>"},{"location":"code/shaderflow/modules/others/bouncing/#ShaderFlow.Modules.Others.Bouncing.ShaderBouncing.name","title":"name","text":"<pre><code>name: str = 'iBounce'\n</code></pre>"},{"location":"code/shaderflow/modules/others/bouncing/#ShaderFlow.Modules.Others.Bouncing.ShaderBouncing.position","title":"position","text":"<pre><code>position: numpy.ndarray = None\n</code></pre>"},{"location":"code/shaderflow/modules/others/bouncing/#ShaderFlow.Modules.Others.Bouncing.ShaderBouncing.velocity","title":"velocity","text":"<pre><code>velocity: numpy.ndarray = None\n</code></pre>"},{"location":"code/shaderflow/modules/others/bouncing/#ShaderFlow.Modules.Others.Bouncing.ShaderBouncing.aspect_ratio","title":"aspect_ratio","text":"<pre><code>aspect_ratio: float = 1\n</code></pre>"},{"location":"code/shaderflow/modules/others/bouncing/#ShaderFlow.Modules.Others.Bouncing.ShaderBouncing.setup","title":"setup","text":"<pre><code>setup()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Others/Bouncing.py</code> <pre><code>def setup(self):\n    self.set_velocity_polar(1, random.uniform(0, TAU))\n    self.position = numpy.array((0.0, 0.0))\n</code></pre>"},{"location":"code/shaderflow/modules/others/bouncing/#ShaderFlow.Modules.Others.Bouncing.ShaderBouncing.update","title":"update","text":"<pre><code>update()\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Others/Bouncing.py</code> <pre><code>def update(self):\n    self.position += (self.velocity * self.scene.dt)\n\n    for i, limit in enumerate((self.aspect_ratio, 1)):\n        if abs(self.position[i]) &gt; limit:\n            self.velocity[i] = -self.velocity[i]\n            self.position[i] = clamp(self.position[i], -limit, limit)\n</code></pre>"},{"location":"code/shaderflow/modules/others/bouncing/#ShaderFlow.Modules.Others.Bouncing.ShaderBouncing.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Others/Bouncing.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    yield Uniform(\"vec2\", f\"{self.name}Position\", self.position)\n    yield Uniform(\"vec2\", f\"{self.name}Velocity\", self.velocity)\n</code></pre>"},{"location":"code/shaderflow/modules/others/bouncing/#ShaderFlow.Modules.Others.Bouncing.ShaderBouncing.set_velocity_polar","title":"set_velocity_polar","text":"<pre><code>set_velocity_polar(magnitude: float, angle: Degrees)\n</code></pre> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Others/Bouncing.py</code> <pre><code>def set_velocity_polar(self, magnitude: float, angle: Degrees):\n    self.velocity = magnitude*numpy.array((cos(angle), sin(angle)))\n</code></pre>"},{"location":"code/shaderflow/modules/others/bouncing/#ShaderFlow.Modules.Others.Bouncing.ShaderBouncing.x","title":"x","text":"<pre><code>x: float\n</code></pre>"},{"location":"code/shaderflow/modules/others/bouncing/#ShaderFlow.Modules.Others.Bouncing.ShaderBouncing.y","title":"y","text":"<pre><code>y: float\n</code></pre>"},{"location":"code/shaderflow/modules/others/bouncing/#ShaderFlow.Modules.Others.Bouncing.ShaderBouncing.advanced_ratios","title":"advanced_ratios","text":"<pre><code>advanced_ratios(\n    image: LoadableImage, steps: int = 1000\n) -&gt; ShaderTexture\n</code></pre> <p>Get a texture of <code>aspect_ratio(angle)</code> from linspace(0, tau, steps)</p> Source code in <code>Projects/ShaderFlow/ShaderFlow/Modules/Others/Bouncing.py</code> <pre><code>def advanced_ratios(self, image: LoadableImage, steps: int=1000) -&gt; ShaderTexture:\n    \"\"\"Get a texture of `aspect_ratio(angle)` from linspace(0, tau, steps)\"\"\"\n    ratios = numpy.zeros((steps, 1), dtype=numpy.float32)\n    image = numpy.array(LoadImage(image))\n    width, height, _ = image.shape\n    bigger = max(width, height)\n\n    import cv2\n\n    # image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    image = image[:, :, 3]\n\n    # Make anew image with a centered raw copy\n    square = numpy.zeros((bigger, bigger), dtype=numpy.uint8)\n    x, y = (bigger-width)//2, (bigger-height)//2\n    square[x:x+width, y:y+height] = image\n\n    # Rotate the image and find its alpha content bounding box\n    for i, angle in enumerate(numpy.linspace(0, 360, steps)):\n        rotation = cv2.getRotationMatrix2D((bigger/2, bigger/2), angle, 1)\n        rotated  = cv2.warpAffine(square, rotation, (bigger, bigger))\n        thresh   = cv2.threshold(rotated, 4, 255, cv2.THRESH_BINARY)[1]\n        contours = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[0]\n        _, _, w, h = cv2.boundingRect(max(contours, key=cv2.contourArea))\n        ratios[i][0] = (w/h)\n\n    return ShaderTexture(\n        name=f\"{self.name}AspectRatio\",\n        scene=self.scene,\n        components=1,\n        width=steps,\n        height=1,\n    ).from_numpy(ratios)\n</code></pre>"},{"location":"code/shaderflow/modules/staging/__init__/","title":"File: <code>ShaderFlow/Modules/Staging/__init__.py</code>","text":""},{"location":"code/shaderflow/modules/staging/__init__/#ShaderFlow.Modules.Staging","title":"ShaderFlow.Modules.Staging","text":""},{"location":"code/shaderflow/modules/staging/depthflow/","title":"File: <code>ShaderFlow/Modules/Staging/DepthFlow.py</code>","text":""},{"location":"code/shaderflow/modules/staging/depthflow/#ShaderFlow.Modules.Staging.DepthFlow","title":"ShaderFlow.Modules.Staging.DepthFlow","text":""},{"location":"code/shaderflow/modules/staging/opticalflow/","title":"File: <code>ShaderFlow/Modules/Staging/OpticalFlow.py</code>","text":""},{"location":"code/shaderflow/modules/staging/opticalflow/#ShaderFlow.Modules.Staging.OpticalFlow","title":"ShaderFlow.Modules.Staging.OpticalFlow","text":""},{"location":"code/spectronote/__init__/","title":"File: <code>SpectroNote/__init__.py</code>","text":""},{"location":"code/spectronote/__init__/#SpectroNote","title":"SpectroNote","text":""},{"location":"code/spectronote/__init__/#SpectroNote.SPECTRONOTE","title":"SPECTRONOTE","text":"<pre><code>SPECTRONOTE = BrokenProject(\n    PACKAGE=__file__,\n    APP_NAME=\"SpectroNote\",\n    APP_AUTHOR=\"BrokenSource\",\n    RESOURCES=SpectroNoteResources,\n)\n</code></pre>"},{"location":"code/spectronote/__main__/","title":"File: <code>SpectroNote/__main__.py</code>","text":""},{"location":"code/spectronote/__main__/#SpectroNote.__main__","title":"SpectroNote.__main__","text":""},{"location":"code/spectronote/__main__/#SpectroNote.__main__.main","title":"main","text":"<pre><code>main()\n</code></pre> Source code in <code>Projects/SpectroNote/SpectroNote/__main__.py</code> <pre><code>def main():\n    with BrokenProfiler(\"SPECTRONOTE\"):\n        spectronote = SpectroNoteScene()\n        spectronote.cli(sys.argv[1:])\n</code></pre>"},{"location":"code/spectronote/spectronote/","title":"File: <code>SpectroNote/SpectroNote.py</code>","text":""},{"location":"code/spectronote/spectronote/#SpectroNote.SpectroNote","title":"SpectroNote.SpectroNote","text":""},{"location":"code/spectronote/spectronote/#SpectroNote.SpectroNote.SpectroNoteScene","title":"SpectroNoteScene","text":"<p>               Bases: <code>ShaderScene</code></p> <p>\ud83c\udfa7 Piano-Perfect Audio Spectrogram. Unlock a hidden Absolute Pitch in you. Lightning fast, reliable, customizable</p> Source code in <code>Projects/SpectroNote/SpectroNote/SpectroNote.py</code> <pre><code>@define\nclass SpectroNoteScene(ShaderScene):\n    \"\"\"\ud83c\udfa7 Piano-Perfect Audio Spectrogram. Unlock a hidden Absolute Pitch in you. Lightning fast, reliable, customizable\"\"\"\n    __name__ = \"SpectroNote\"\n\n    # Scene parameters\n    piano_bins:   bool  = False\n    piano_range:  bool  = False\n    piano_size:   float = 0.05\n    black_ratio:  float = 0.5\n    border_ratio: float = 0.1\n    vertical:     bool  = False\n    tuning:       Hertz = 440\n\n    def build(self):\n        self.shader.fragment = SPECTRONOTE.RESOURCES.SHADERS/\"SpectroNote.frag\"\n        self.audio = ShaderAudio(scene=self, name=\"Audio\", file=\"/path/to/audio.ogg\")\n        self.spectrogram = ShaderSpectrogram(scene=self, audio=self.audio, smooth=True)\n\n        # Act immediately, good visuals and precision\n        self.spectrogram.dynamics.frequency = 20\n        # self.spectrogram.sample_rateio = 2\n        self.spectrogram.length = 5\n        self.spectrogram.fft_n = 13\n\n        # # Define ranges\n        PIANO_RANGE = dict(start=21, end=108)\n        FULL_RANGE = dict(start=20.0, end=20000.0)\n\n        self.spectrogram.from_notes(\n            **(PIANO_RANGE if self.piano_range else FULL_RANGE),\n            piano=self.piano_bins,\n            tuning=self.tuning,\n            bins=1440,\n        )\n\n    def pipeline(self) -&gt; Iterable[ShaderVariable]:\n        yield from ShaderScene.pipeline(self)\n        yield Uniform(\"float\", \"iPianoSize\",   self.piano_size)\n        yield Uniform(\"float\", \"iBlackRatio\",  self.black_ratio)\n        yield Uniform(\"float\", \"iBorderRatio\", self.border_ratio)\n        yield Uniform(\"bool\",  \"iVertical\",    self.vertical)\n</code></pre>"},{"location":"code/spectronote/spectronote/#SpectroNote.SpectroNote.SpectroNoteScene.__name__","title":"__name__","text":"<pre><code>__name__ = 'SpectroNote'\n</code></pre>"},{"location":"code/spectronote/spectronote/#SpectroNote.SpectroNote.SpectroNoteScene.piano_bins","title":"piano_bins","text":"<pre><code>piano_bins: bool = False\n</code></pre>"},{"location":"code/spectronote/spectronote/#SpectroNote.SpectroNote.SpectroNoteScene.piano_range","title":"piano_range","text":"<pre><code>piano_range: bool = False\n</code></pre>"},{"location":"code/spectronote/spectronote/#SpectroNote.SpectroNote.SpectroNoteScene.piano_size","title":"piano_size","text":"<pre><code>piano_size: float = 0.05\n</code></pre>"},{"location":"code/spectronote/spectronote/#SpectroNote.SpectroNote.SpectroNoteScene.black_ratio","title":"black_ratio","text":"<pre><code>black_ratio: float = 0.5\n</code></pre>"},{"location":"code/spectronote/spectronote/#SpectroNote.SpectroNote.SpectroNoteScene.border_ratio","title":"border_ratio","text":"<pre><code>border_ratio: float = 0.1\n</code></pre>"},{"location":"code/spectronote/spectronote/#SpectroNote.SpectroNote.SpectroNoteScene.vertical","title":"vertical","text":"<pre><code>vertical: bool = False\n</code></pre>"},{"location":"code/spectronote/spectronote/#SpectroNote.SpectroNote.SpectroNoteScene.tuning","title":"tuning","text":"<pre><code>tuning: Hertz = 440\n</code></pre>"},{"location":"code/spectronote/spectronote/#SpectroNote.SpectroNote.SpectroNoteScene.build","title":"build","text":"<pre><code>build()\n</code></pre> Source code in <code>Projects/SpectroNote/SpectroNote/SpectroNote.py</code> <pre><code>def build(self):\n    self.shader.fragment = SPECTRONOTE.RESOURCES.SHADERS/\"SpectroNote.frag\"\n    self.audio = ShaderAudio(scene=self, name=\"Audio\", file=\"/path/to/audio.ogg\")\n    self.spectrogram = ShaderSpectrogram(scene=self, audio=self.audio, smooth=True)\n\n    # Act immediately, good visuals and precision\n    self.spectrogram.dynamics.frequency = 20\n    # self.spectrogram.sample_rateio = 2\n    self.spectrogram.length = 5\n    self.spectrogram.fft_n = 13\n\n    # # Define ranges\n    PIANO_RANGE = dict(start=21, end=108)\n    FULL_RANGE = dict(start=20.0, end=20000.0)\n\n    self.spectrogram.from_notes(\n        **(PIANO_RANGE if self.piano_range else FULL_RANGE),\n        piano=self.piano_bins,\n        tuning=self.tuning,\n        bins=1440,\n    )\n</code></pre>"},{"location":"code/spectronote/spectronote/#SpectroNote.SpectroNote.SpectroNoteScene.pipeline","title":"pipeline","text":"<pre><code>pipeline() -&gt; Iterable[ShaderVariable]\n</code></pre> Source code in <code>Projects/SpectroNote/SpectroNote/SpectroNote.py</code> <pre><code>def pipeline(self) -&gt; Iterable[ShaderVariable]:\n    yield from ShaderScene.pipeline(self)\n    yield Uniform(\"float\", \"iPianoSize\",   self.piano_size)\n    yield Uniform(\"float\", \"iBlackRatio\",  self.black_ratio)\n    yield Uniform(\"float\", \"iBorderRatio\", self.border_ratio)\n    yield Uniform(\"bool\",  \"iVertical\",    self.vertical)\n</code></pre>"},{"location":"depthflow/","title":"DepthFlow","text":"DepthFlow Images to \u2192 3D Parallax effect video \u2022 A free and open source ImmersityAI alternative         Links \u2022     \u2705 Installation \u2022     \ud83d\udce6 Documentation \u2022     \u2b50\ufe0f ComfyUI \u2022     \ud83d\udd25 Issues \u2022     \u2764\ufe0f Funding <sub> YouTube \u2022     GitHub \u2022     Contact \u2022     Changelog \u2022     Uninstalling \u2022     License </sub>"},{"location":"depthflow/#description","title":"\ud83d\udd25 Description","text":"<p>DepthFlow is an advanced image-to-video converter that transforms static pictures into stunning 3D parallax animations. Bring photos to life with motion, featuring high quality and custom presets, perfect for digital art, social media, stock footage, fillers and more.</p> <p>\u2728 It works by combining an source image and its depthmap with the power of mathmagic!</p> <ul> <li> High quality results with seamless loops and artifact-free edges, ensuring a polished and professional look for your animations. Enhance your creations with upscalers and add a touch of magic with lens distortion, depth of field, vignette post effects!</li> <li> Fast processing with an heavily optimized GLSL Shader running on the GPU. Render up to 8k50fps with an RTX 3060, export videos with any resolution, codec, supersampling.</li> <li> Commercial use is encouraged \u2022 Kindly retribute back if you got value from it \u2764\ufe0f</li> <li> Powerful WebUI built with Gradio, for an user-friendly experience:</li> </ul> <p></p> <ul> <li> Use your own depthmaps, or let them be estimated with the latest AI models available!</li> <li> Customizable with a wide range of projection parameters, allowing you to precisely tweak the effect to your liking. Automate it with Python scripts for mass production!</li> <li> Self hosted with no watermarks, unlimited usage, portable ready-to-run executables. It's free and open source, no strings attached.</li> </ul> <p>\u2764\ufe0f Loving it? Your support is essential!</p> <p></p>"},{"location":"depthflow/#installation","title":"\ud83d\udce6 Installation","text":"<p>Head out to the Official Website for the latest installation instructions and more!</p> <p> </p>"},{"location":"depthflow/#usage","title":"\u2b50\ufe0f Usage","text":"<p>See all Quick Start options in the website as well!</p> <p> </p>"},{"location":"depthflow/#community","title":"\u267b\ufe0f Community","text":"<p>\u2705 Be featured here if you're using DepthFlow in your projects!</p> <p>Check out amazing community work built on top of DepthFlow:</p> <ul> <li>\u2b50\ufe0f ComfyUI Node Pack by @akatz-ai, also in CivitAI</li> </ul>"},{"location":"depthflow/learn/foundations/","title":"DepthFlow/Foundations","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p> <p>Many missing parts, mostly sketching ideas and structure.</p> <p>This page describes in depth<sup>1</sup> the DepthFlow project in a paper-like format</p> <p>Note: This is a mostly technical write-up with notable trivia, and it's not necessary to understand the math or history to use it. For what you should know, see Parameters.</p> DepthFlow: A fully featured steep parallax algorithm"},{"location":"depthflow/learn/foundations/#introduction","title":"Introduction","text":"<p>DepthFlow is a software that generates 3D parallax effect videos from images and their depthmaps. This is done by projecting the image in 3D space and rendering from a camera's perspective, with many different parameters that can vary over time.</p> <p>The code heavily relies on the ShaderFlow engine, providing high level abstractions and utilities such as exporting videos, camera modeling, and more. Technically speaking, DepthFlow is a ShaderFlow spin-off, so does other projects like Pianola and SpectroNote, where the main implementation is a feature simple, not-so-long but dense GLSL shader<sup>2</sup>.</p>"},{"location":"depthflow/learn/foundations/#motivation","title":"Motivation","text":"<p>The original idea for DepthFlow came from a desire to generate filler content and/or more interesting image inserts in videos<sup>3</sup>. I happened to be coding a music visualizer / shader infrastructure project for a couple of years, and I took the opportunity to side develop it.</p> <p>A year later, its applications proved to be much more versatile than I initially thought. It can be used for artistic purposes, automated channels, stock footage, wallpapers, music visualizers, commercials, web design, you name it. Apart from those, it would have been great to have a Free and Open Source tool, forever available, for this kind of task.</p>"},{"location":"depthflow/learn/foundations/#objective","title":"Objective","text":"<p>The end goal is to generate this projected image that an observer (camera) would see, as if it was looking from some point \\(O\\) in space, towards the scene.</p> <p>The inputs involved are:</p> <ol> <li>A source image that we want to project in 3D space;</li> <li>Its depth map<sup>4</sup>, defining the surface topology.</li> <li>A set of camera parameters defining the perspective.</li> <li>Additional resolution, rendering instructions.</li> </ol>"},{"location":"depthflow/learn/foundations/#mathematics","title":"Mathematics","text":"<p>This section will focus on the heuristics and analytics of the DepthFlow algorithm. We'll go through the main concepts and the math behind them, working with a simplified version of the problem first, and then expanding to the full implementation. I'll provide both the intuition and the formalism, as well as visualizations with Manim \u2728</p> <p>Before you continue, this will involve a lot of linear algebra, and I highly recommend learning the basics with The Essence of Linear Algebra series by 3Blue1Brown.</p>"},{"location":"depthflow/learn/foundations/#the-problem","title":"The problem","text":"<p>At first, I was overwhelmed by the complexity of the problem. Imagine-, you have a camera ray's origin and direction, and want to find a precise intersection with a certain surface with its topology defined by the depthmap. A couple of natural questions or facts are:</p> <ul> <li>The method must be discrete, as finding roots would be very expensive<sup>5</sup>,</li> <li>Then, how to find the closest distance to any point for ray marching?</li> <li>How to reduce artifacts by the discretization process?</li> <li>Is ray marching even the way to approach this?</li> <li>How to make it efficient and fast?</li> </ul> <p>In a way, some level of brute forcing is necessary, but we can make it smart. Another thing to realize is that the problem of finding the intersections is totally independent from the projection parameters. The parameters will define what the camera sees (ray origin and target), then it's just a matter of finding intersections with the scene and sampling.</p> <p>Note: It's possible to create a 3D mesh from the depthmap, and use standard rasterization for the effect. However, rendering this many quads would be very expensive, and a lot of non-linearity would be lost or hard to implement in the Euclidean space we'll see later.</p> <p>A key insight is to realize that the problem isn't inherently 3D, but 2D. The projection intersection will only ever happen \"below<sup>6</sup>\" the path a ray takes. Calculate for all, we're set.</p>"},{"location":"depthflow/learn/foundations/#definitions","title":"Definitions","text":"<p>For that, let's start defining the problem from basic, reasonable assumptions:</p> <ul> <li>The image is centered on the \\(xy\\) screen plane at \\(z = 1\\) (forward)</li> <li>The camera is at the origin \\((0, 0, 0)\\), looking forward \\((0, 0, 1)\\)</li> <li>The depthmap uses a (0=far) (1=near) convention</li> <li>The camera uses this modelling</li> </ul> <p>And additional</p> <ul> <li>The image's plane height grows towards the camera (\\(-z\\))</li> <li>The depthmap is scaled by a peak height \\(h\\)</li> </ul> <p>With only that, we can look at a 2D slice and solve the simplified problem!</p> <p>For more information on the coordinate system details or choice, see here</p>"},{"location":"depthflow/learn/foundations/#intersections","title":"Intersections","text":"<p>This is the simpler part of the problem. The camera's position and looking target will define a ray origin \\(O\\) and a target \\(T\\); consequently a direction vector</p> \\[\\vec{d} = T - O\\] <ol> <li> <p>Pun intended \ud83d\ude42\u00a0\u21a9</p> </li> <li> <p>As such, it can be easily ported to other shading languages or platforms, such as WebGL, HLSL, or Metal.\u00a0\u21a9</p> </li> <li> <p>I'm not a content producer myself, but a couple of close or ex-friends are/were\u00a0\u21a9</p> </li> <li> <p>Depthmaps are grayscale images (often colorized when presented) that provides relative (normalized) or absolute (value) distances of each pixel from the camera's perspective. Personally speaking, it's more natural to work with (dark=far, bright=near) convention.\u00a0\u21a9</p> </li> <li> <p>If not impossible, depthmap being a high degree polynomial, requiring computational methods on the GPU\u00a0\u21a9</p> </li> <li> <p>As if the projection plane was the ground; in a more formal way, the plane defined by the image's plane normal vector, and the ray direction of the camera.\u00a0\u21a9</p> </li> </ol>"},{"location":"depthflow/learn/parameters/","title":"DepthFlow/Parameters","text":"<p>This page focus on all shader-related parameters, and how they affect the final image (in practical terms). The main goal is for helping you to understand how to work with the software and parametrize it to your needs, create your own animations, and more.</p> <ul> <li>For rendering and exporting parameters, see the ShaderFlow page \u2728</li> <li>For understanding the math, see the Foundations page \ud83d\udcdc</li> </ul> <p>All parameters are controlled within the state dictionary class, acessible by:</p> <pre><code>from DepthFlow import DepthScene\n\nscene = DepthScene()\nscene.state.height = 0.3\nscene.state.offset_x = 1\n</code></pre> <p>Or settable by the command line as a animation component:</p> Terminal<pre><code># Note: This will only create a static image\ndepthflow config --height 0.3 --offset-x 1 main\n</code></pre> <p>However, they are best used within the <code>.update()</code> method for creating animations:</p> <pre><code>import math\n\nclass YourScene(DepthScene):\n    def update(self):\n        self.state.offset_x = 0.3 * math.sin(self.cycle)\n</code></pre> <p>Internally, they are used and sent when the render method is called for the shader, which non-surprisingly happens in the main event loop of the Scene, after all <code>.update()</code>'s.</p> <p>Directly controlling those makes more sense when managing the code within Python (and bypassing the animation system, which essentially does the same thing) for writing custom animations and more advanced interactions or behaviors.</p>"},{"location":"depthflow/learn/parameters/#parallax","title":"Parallax","text":"<p>This section is about the core parameters of DepthFlow.</p> <ul> <li> <p>Important: When parameters refers to depth values, the value is normalized. A <code>steady</code> value of \\(0.5\\), with a <code>height</code> of \\(0.3\\) means the perceptual <code>steady</code> values is at \\(0.15\\), (e.g.).</p> </li> <li> <p>Important: Depth values of zero are the farthest point, and values of one the closest.</p> </li> <li> <p>Note: The suggested ranges aren't enforced, but what makes sense in most cases.</p> </li> </ul>"},{"location":"depthflow/learn/parameters/#height","title":"Height","text":"<p>Type: <code>float</code>, Names: <code>height</code>, Range: <code>[0, 1]</code></p> <p>The <code>height</code> parameter defines the peak height of the projected surface at <code>depth=1</code>. It can be thought as the effect's global intensity parameter.</p> <p>It's arguably the most important parameter, virtually nothing happens without it</p> <ul> <li> <p>A value of 0 means the surface is flat, while a value of 1 means the surface's peak is on the same \\(xy\\) screen plane as the camera.</p> </li> <li> <p>Notice how in the video, the center doesn't touch the camera, as its <code>depth</code> value isn't \\(1\\), but the closer bottom edge \"gets below\" the camera's view.</p> </li> </ul>"},{"location":"depthflow/learn/parameters/#offset","title":"Offset","text":"<p>Type: <code>tuple[float, float]</code>, Names: <code>offset_x</code>, <code>offset_y</code>, Range: <code>[-2, 2]</code></p> <p>The <code>offset</code> parameter defines the parallax displacement of the projected surface. It can be thought as the camera's position parameter.</p> <p>This is the easiest way to add 'natural' movement to the scene</p> <ul> <li> <p>A value of 0 in a component means the surface and camera are centered, other values meaning depends on other parameters and the aspect ratio, it's a bit experimental.</p> </li> <li> <p>This parameter isn't a \"camera displacement\" you might expect:</p> <ol> <li>That would simply move the image around without changing the perspective, which is what the <code>center</code> parameter does.</li> <li>The camera always \"looks\" to the image (<code>origin</code> parameter) by adding an opposite bias to the ray's projection on how much the image is displaced.</li> </ol> </li> </ul> <p>As you might expect, setting \\(x=cos(t)\\) and \\(y=sin(t)\\) parameter to follow a circular motion, will create a \"orbiting\" effect around the center of the image.</p>"},{"location":"depthflow/learn/parameters/#steady","title":"Steady","text":"<p>Type: <code>float</code>, Names: <code>steady</code>, Range: <code>[-1, 1]</code></p> <p>The <code>steady</code> parameter defines the depth at which no offsets happen. It can be thought as the offsets focal depth parameter.</p> <p>It's a great way of adding subtle background movement or orbiting around a point</p> <ul> <li> <p>Notice how in the video, the orange line doesn't move when the <code>offset</code> changes, and the mirroring of relative directions when crossing this boundary.</p> </li> <li> <p>This parameter makes the ray projections \"pivot\" around this depth value internally.</p> </li> </ul>"},{"location":"depthflow/learn/parameters/#isometric","title":"Isometric","text":"<p>Type: <code>float</code>, Names: <code>isometric</code>, Range: <code>[0, 1]</code></p> <p>The <code>isometric</code> parameter defines how much perspective is applied. It can be thought as the planification effect parameter.</p> <p>It's the best way to mitigate edge or stretching distortions, at the cost of the 3D-ness of the video</p> <ul> <li> <p>A value of 0 means full perspective projection, while a value of 1 means the image is projected as if it was isometric (all rays are parallel).</p> <ol> <li>This completely negates the <code>height</code> parameter at <code>isometric=1</code></li> </ol> </li> <li> <p>This parameter makes effect more \"flat\" and \"2D\", in fact, a value of 1 turns offsets into a simple translation. A value of 0.5 is often recommended.</p> </li> </ul> <p>Notice how in the video below the offsets are \"flattened\", as if there was one layer per depth value and it was simply displaced in the \\(xy\\) plane. Consequently, more of the image is visible, as the peak values don't race towards the camera as much, at the cost of being flat.</p>"},{"location":"depthflow/learn/parameters/#dolly","title":"Dolly","text":"<p>Type: <code>float</code>, Names: <code>dolly</code>, Range: <code>[0, 10]</code></p> <p>The <code>dolly</code> parameter defines the camera's distance from the image. It's basically the same as the isometric effect parameter, but with different (natural) units.</p> <p>It's a great way for a more natural isometric effect control</p> <ul> <li>As you move away to objects, they appear more isometric, that's the reason why your face looks unnatural in close-up selfies.</li> <li>A <code>dolly</code> value of 0 is the same as <code>isometric=0</code></li> <li>A <code>dolly</code> value of \\(\\infty\\) is the same as <code>isometric=1</code></li> </ul> <p>As far as I know, the convertion factor between the two is given by:</p> \\[ \\text{isometric} = 1 - \\frac{1}{1 + \\text{dolly}} \\] <p>For the traditional 'dolly zoom' effect, combine it with the <code>focus</code> parameter.</p>"},{"location":"depthflow/learn/parameters/#focus","title":"Focus","text":"<p>Type: <code>float</code>, Names: <code>focus</code>, Range: <code>[-1, 1]</code></p> <p>The <code>focus</code> parameter defines the steady depth on isometric changes. It can be thought as the isometric focal depth parameter.</p> <p>It's a great way to add drama to the scene, or give attention to an object</p> <ul> <li> <p>Notice how in the video, the orange line doesn't move when the <code>isometric</code> changes, and the mirroring of perspective directions when crossing this boundary.</p> </li> <li> <p>This parameter makes this depth value the \\(z=1\\) plane internally.</p> </li> </ul>"},{"location":"depthflow/learn/parameters/#zoom","title":"Zoom","text":"<p>Type: <code>float</code>, Names: <code>zoom</code>, Range: <code>(0, 1]</code></p> <p>The <code>zoom</code> parameter defines the camera's field of view. It can be thought as the you-know-it parameter.</p> <p>It's a great way to crop the image</p> <ul> <li> <p>A value of 1 means the image is fully visible, while a value of 0.5 means a quarter of the image is visible.</p> </li> <li> <p>This is a \"digital zoom\", it simply stretches the coordinates internally.</p> </li> </ul>"},{"location":"depthflow/learn/parameters/#invert","title":"Invert","text":"<p>Type: <code>float</code>, Names: <code>invert</code>, Range: <code>[0, 1]</code></p> <p>The <code>invert</code> parameter interpolates between 0=far and 1=near and the opposite. It can be thought as the depth inversion parameter.</p> <p>This parameter is mostly useful when the input depth map is inverted</p> <ul> <li> <p>A value of 0.5 flattens the depth map and nothing happens, while a value of 1 inverts the depth map. Middle values can be thought as softening the depthmap.</p> </li> <li> <p>It wraps the surface inside-out when the value is above 0.5, and a lot of encroaching will happen, as the background is now the foreground.</p> </li> </ul>"},{"location":"depthflow/learn/parameters/#center","title":"Center","text":"<p>Type: <code>tuple[float, float]</code>, Names: <code>center_x</code>, <code>center_y</code>, Range: <code>([-ar, ar], [-1, 1])</code></p> <p>The <code>center</code> parameter defines the center of the image. It can be thought as the raw offset parameter.</p> <p>This is the easiest way to move the image around</p> <ul> <li> <p>A value of 0 in a component means the image is centered, other values applies a direct offset to the contents of the image.</p> </li> <li> <p>This parameter is a \"camera displacement\" you might expect, nothing fancy.</p> </li> </ul>"},{"location":"depthflow/learn/parameters/#origin","title":"Origin","text":"<p>Type: <code>tuple[float, float]</code>, Names: <code>origin_x</code>, <code>origin_y</code>, Range: <code>([-ar, ar], [-1, 1])</code></p> <p>The <code>origin</code> parameter defines the center point of offsets. It can be thought  as if the camera was above this point , without moving it.</p> <p>This is a good way to focus on a specific part of the image while feeling off-center</p> <ul> <li> <p>The value sets \"the origin\" of offsets to the projections of the image.</p> </li> <li> <p>It is also the value at which height changes only causes zooming</p> </li> </ul>"},{"location":"depthflow/learn/parameters/#depth-of-field","title":"Depth of Field","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p>"},{"location":"depthflow/learn/parameters/#vignette","title":"Vignette","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p>"},{"location":"depthflow/quick/","title":"\u26a1\ufe0f Quick start","text":"<p>This section focus on getting started with DepthFlow, demonstrating basic usage, commands, and features. The main goal is to help you create your first 3D parallax effect videos quickly and easily, from the command line, web interface, or custom scripts.</p> <p> Go to any section in the left sidebar to get started!</p> Before continuing: <p>From any installation method, you can simply run <code>depthflow</code> or double click the executables to see all top-most available commands (entry points). You should see something like:</p> <p>You can run any of the commands above plus <code>--help</code> to list all options for that command.</p> <p>For example, <code>depthflow gradio --help</code> will show all options for the web interface, running <code>depthflow --help</code> will show all CLI options (as is the default command).</p>"},{"location":"depthflow/quick/cli/","title":"DepthFlow/Command Line","text":"<p>\u2705 As DepthFlow is a ShaderFlow \"spin-off\" - a custom Scene - most of its documentation on commands, behavior, issues and options are shared between the two.</p> <ul> <li>The examples of each section shows a single functionality, but you can combine them<sup>1</sup>.</li> </ul>"},{"location":"depthflow/quick/cli/#simplest-command","title":"Simplest command","text":"<p>Start a realtime window with the default image and animation with:</p> <pre><code>depthflow main\n</code></pre> <ul> <li>Walk around with W A S D or Left click + Drag</li> <li>Drag and drop image files or URLs to load them</li> <li>Press Tab for a dev menu with some options</li> </ul>"},{"location":"depthflow/quick/cli/#using-your-images","title":"Using your images","text":"<p>Load an input image, and start the main event loop with:</p> <pre><code># Local images, either relative or absolute paths\ndepthflow input -i ./image.png main\n</code></pre> <pre><code># Remote images, like URLs\ndepthflow input -i https://w.wallhaven.cc/full/2y/wallhaven-2y6wwg.jpg main\n</code></pre> <ul> <li>Note: Make sure the image path exists, relative paths (not starting with <code>C:\\</code> or <code>/</code>) are relative to where the the executable or current working directory of the shell or is.</li> </ul>"},{"location":"depthflow/quick/cli/#exporting-a-video","title":"Exporting a video","text":"<p>Render 10 seconds of the animation to a video file with default settings with:</p> <pre><code>depthflow main -o ./output.mp4\n</code></pre> <p>See all rendering options with <code>depthflow main --help</code></p>"},{"location":"depthflow/quick/cli/#resolution","title":"Resolution","text":"<p>The output resolution, by default, will match the input image's one. You can send either <code>-w</code> or <code>-h</code> to force one component and fit the other based on the image's aspect ratio:</p> <pre><code># Renders a 2560x1440 (Quad HD) video\ndepthflow input -i ./image16x9.png main -h 1440\n</code></pre> <pre><code># Width is prioritized, this renders a 500x500 video\ndepthflow input -i ./image1000x1000.png main -w 500 -h 800\n</code></pre>"},{"location":"depthflow/quick/cli/#looping","title":"Looping","text":"<p>The output video will scale and loop perfectly, with a period set by the <code>--time</code> parameter:</p> <pre><code># Loops every 5 seconds\ndepthflow main -o ./output.mp4 --time 5\n</code></pre> <pre><code># 12 second video with 3 loops happening\ndepthflow main -o ./output.mp4 --time 4 --loops 3\n</code></pre>"},{"location":"depthflow/quick/cli/#video-encoder","title":"Video encoder","text":"<p>You can also easily change the video encoder:</p> <p>You can see all available codecs in <code>depthflow --help</code> !</p> <pre><code># Configure the H264 codec, see also `depthflow h264 --help`\ndepthflow h264 --preset fast main -o ./output.mp4\n</code></pre> <pre><code># Use the H264 codec with NVENC on a NVIDIA GPU\ndepthflow h264-nvenc main -o ./output.mp4\n</code></pre> <pre><code># I don't even have a RTX 40 to test this lol\ndepthflow av1-nvenc main -o ./output.mp4\n</code></pre>"},{"location":"depthflow/quick/cli/#quality","title":"Quality","text":"<p>The video is eternal, so getting the best render quality even if it takes longer is important. There's a couple of main factors that defines the final video quality:</p> <ol> <li> <p>Resolution: A combination of the input image and the exported video's resolution. Rendering at a higher resolution than the input image will not improve quality.</p> </li> <li> <p>Super Sampling Anti Aliasing: Rendering at a higher internal resolution and then downscaling to the output target mitigates edge artifacts and smooths them. The default is 1.2, and the maximum quality gains happen at 2.0, don't go above it.</p> </li> <li> <p>Quality parameter: The <code>depthflow main --quality 50</code> parameter defines how accurate calculating the projection's intersections are. A value of 0 is sufficient for subtle movements, and will create 'layers' artifacts at higher values. The default is 50, which is actually overkill for most cases, given how much optimized the code is.</p> </li> <li> <p>Depth map: Defines the accuracy of the parallax effect. The default estimator is a state of the art balance of speed, portability, quality, and should be enough.</p> </li> <li> <p>Video codec: The encoder compresses the video from unimaginably impractical sizes of raw data to something manageable. Briefly, CPU encoders yields the best compression, file sizes, and quality, but are slow(er) than GPU encoders, which are \"worse\" in every other situation. There's no better quality than the realtime window itself.</p> </li> </ol> <pre><code># The stuff explained above in a command:\ndepthflow main --quality 80 --ssaa 2 -o ./output.mp4\n</code></pre>"},{"location":"depthflow/quick/cli/#using-an-upscaler","title":"Using an upscaler","text":"<p>Upscale the input image before rendering the video with:</p> <pre><code># Use RealESRGAN to upscale the image (https://github.com/xinntao/Real-ESRGAN)\ndepthflow realesr input -i ./image.png main -o ./output.mp4\n</code></pre> <pre><code># Use Waifu2x to upscale the image (https://github.com/nihui/waifu2x-ncnn-vulkan)\ndepthflow waifu2x input -i ./image.png main -o ./output.mp4\n</code></pre>"},{"location":"depthflow/quick/cli/#custom-animations","title":"Custom animations","text":"<p>\ud83d\udea7 Animations are work in progress, and will change substantially \ud83d\udea7</p> <p>You can use a couple of high quality presets with:</p> <p>See any of <code>depthflow 'preset' --help</code> for more options!</p> <pre><code># Add a horizontal motion to the camera\ndepthflow horizontal main\n</code></pre> <pre><code># Add a vertical motion to the camera\ndepthflow vertical --linear main\n</code></pre> <pre><code># Add a circular motion to the camera\ndepthflow circle --intensity 0.3 main\n</code></pre> <pre><code># Add a dolly zoom to the camera\ndepthflow dolly --reverse -i 2 main\n</code></pre> <pre><code># Add a zoom-in motion to the camera\ndepthflow zoom main\n</code></pre>"},{"location":"depthflow/quick/cli/#batch-processing","title":"Batch processing","text":"<p><sup>\u26a0\ufe0f Note: Batch exporting feature is experimental and might have issues!</sup></p> <p>You can also batch process images and videos with:</p>"},{"location":"depthflow/quick/cli/#selecting-inputs","title":"Selecting inputs","text":"<pre><code># Multiple direct inputs, local paths:\ndepthflow input -i ./image1.png -i ./image2.png (...)\n\n# Or even URLs, though only one at a time:\ndepthflow input -i https://.. -i https://.. (...)\n</code></pre> <pre><code># All file contents of a folder\ndepthflow input -i ./images (...)\n</code></pre> <pre><code># Glob pattern matching\ndepthflow input -i ./images/*.png (...)\n</code></pre>"},{"location":"depthflow/quick/cli/#exporting","title":"Exporting","text":"<p>Let's assume there are <code>foo.png</code>, <code>bar.png</code>, and <code>baz.png</code> in the <code>./images</code> folder:</p> <ol> <li>Always have <code>-b all</code> or <code>--batch all</code> in the <code>main</code> command (or a range like <code>0-5</code> images)</li> <li>The output video basename will become a suffix of the exported video</li> </ol> <pre><code># This creates 'foo-batch.mp4', 'bar-batch.mp4', 'baz-batch.mp4' in the './outputs' folder\ndepthflow input -i ./images -b all main -o ./outputs/batch\n</code></pre> <p>The prefix is enforced mainly as there's no 'empty' file in a directory, but also useful in:</p> <pre><code># Create many different animations of the same image\ndepthflow input -i ./images orbital main -b all -o ./outputs/orbital\ndepthflow input -i ./images circle main -b all -o ./outputs/circle\n</code></pre> <p>Or even set the output folder to the same input, so videos sorts nicely alongside images:</p> <pre><code>depthflow input -i ./images main -b all -o ./images\n</code></pre> <p>It might be a good idea to specify a common height for all exports:</p> <pre><code># Ensures all videos are '1080p', at least in the height\ndepthflow input -i ./images main -b all -o ./images -h 1080p\n</code></pre> <p>Loving what you see? Help me continue this Full-Time Open Source Work!</p> <ol> <li> <p>For example, when exporting a video, you can also input your image on the command chain.\u00a0\u21a9</p> </li> </ol>"},{"location":"depthflow/quick/install/","title":"DepthFlow/Install","text":""},{"location":"depthflow/quick/install/#installation","title":"\u2705 Installation","text":"<ul> <li>There are a couple of ways to get started with the projects:</li> </ul>"},{"location":"depthflow/quick/install/#from-releases","title":"\ud83d\udce6 From Releases","text":"<p> <p>The most convenient way to use the projects. \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Portable executables made with PyApp for all platforms.</li> <li>Double click and run, everything's managed for you.</li> </ul> <p><sup>Recommended for: Basic users, alpha testers.</sup></p> <p></p>"},{"location":"depthflow/quick/install/#from-pypi","title":"\ud83e\uddc0 From PyPI","text":"<p> <p>The most reliable way to use the projects. \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Standard pip install, requires basic Python knowledge.</li> <li>Run the package commands or as a python import.</li> </ul> <p><sup>Recommended for: Basic users, advanced users, developers</sup></p> <p></p>"},{"location":"depthflow/quick/install/#from-source","title":"\ud83d\udd25 From Source","text":"<p> <p>The most flexible way to use the projects. \u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Automatic install scripts, spend more time using the projects.</li> <li>Latest features, bugs, fixes, highly configurable.</li> </ul> <p><sup>Recommended for: Advanced users, contributors, developers.</sup></p> <p></p>"},{"location":"depthflow/quick/scripts/","title":"DepthFlow/Scripts","text":"<p>Talk is cheap, and if you're here, you know what you want \ud83d\ude05</p> <ul> <li>All scripts below are self-explanatory: <sup>hopefully</sup></li> </ul>"},{"location":"depthflow/quick/scripts/#simplest","title":"Simplest","text":"<p>This simplest script is the same as running the main entry point directly</p> <pre><code>\"\"\"\n(c) CC BY-SA 4.0, Tremeschin\n\nSimple example of running DepthFlow default implementation\n\nNote: This file is the same as running `python -m DepthFlow` or just `depthflow` with the pyproject\n    scripts entry points when on the venv. You can also run this directly with `python Basic.py`\n\n\u2022 For more information, visit https://brokensrc.dev/depthflow\n\"\"\"\nimport sys\n\nfrom DepthFlow.Scene import DepthScene\n\nif __name__ == \"__main__\":\n    scene = DepthScene()\n    scene.cli(sys.argv[1:])\n</code></pre>"},{"location":"depthflow/quick/scripts/#custom","title":"Custom","text":"<p>You can create custom animations, and manage/automate everything within Python</p> <pre><code>\"\"\"\n(c) CC BY-SA 4.0, Tremeschin\n\nBasic example of defining your own class based on DepthScene, running\nit via CLI or a code managing it for automation\n\n\u2022 For more information, visit https://brokensrc.dev/depthflow\n\"\"\"\nimport math\nimport sys\n\nfrom DepthFlow.Scene import DepthScene\nfrom ShaderFlow.Message import ShaderMessage\n\n# Note: DepthScene.method(self) is preferred over super().method(self) for clarity\n\nclass YourScene(DepthScene):\n    def update(self):\n        self.state.offset_x = math.sin(2*self.cycle)\n        ...\n\n    def pipeline(self):\n        yield from DepthScene.pipeline(self)\n        ...\n\n    def handle(self, message: ShaderMessage):\n        DepthScene.handle(self, message)\n        ...\n\ndef manual():\n    scene = YourScene()\n    scene.cli(sys.argv[1:])\n\ndef managed():\n    from Broken.Externals.Upscaler import Upscayl\n    # Note: For headless rendering / server, use backend='headless'\n    scene = YourScene(backend=\"glfw\")\n    scene.set_upscaler(Upscayl())\n    scene.input(image=\"image.png\")\n    scene.main(output=\"./video.mp4\", fps=30, time=5)\n    scene.window.destroy()\n\nif __name__ == \"__main__\":\n    # managed()\n    manual()\n</code></pre>"},{"location":"depthflow/quick/scripts/#complex","title":"Complex","text":"This monstruous script combines batch and parallel processing, animation variations <pre><code>\"\"\"\n(c) CC BY-SA 4.0, Tremeschin\n\nAdvanced example of parallel rendering, with multiple parameters per rendered\nfile, limiting the number of concurrent processes, thread and vram leaks safe\n\nWarning: This WILL use A LOT OF RAM depending on concurrency and image size\nWarning: This WILL use A LOT OF CPU for the video encoding, if enough GPU\n\n\u2022 For more information, visit https://brokensrc.dev/depthflow\n\"\"\"\nimport math\nimport os\nimport time\nfrom abc import abstractmethod\nfrom pathlib import Path\nfrom threading import Thread\nfrom typing import Self\n\nfrom attr import Factory, define\nfrom DepthFlow.Animation import Actions, Target\nfrom DepthFlow.Scene import DepthScene\nfrom dotmap import DotMap\n\nfrom Broken import Environment, combinations\nfrom Broken.Externals.Depthmap import DepthAnythingV2, DepthEstimator\nfrom Broken.Externals.Upscaler import BrokenUpscaler, NoUpscaler, Upscayl\n\n\n# Note: You can also use your own subclassing like Custom.py!\nclass YourScene(DepthScene):\n    def update(self):\n        self.state.offset_x = 0.3 * math.sin(self.cycle)\n        self.state.isometric = 1\n\n# ------------------------------------------------------------------------------------------------ #\n\n@define\nclass DepthManager:\n\n    estimator: DepthEstimator = Factory(DepthAnythingV2)\n    \"\"\"A **shared** estimator for all threads\"\"\"\n\n    upscaler: BrokenUpscaler = Factory(NoUpscaler)\n    \"\"\"The upscaler to use for all threads\"\"\"\n\n    threads: list[Thread] = Factory(list)\n    \"\"\"List of running threads\"\"\"\n\n    concurrency: int = Environment.int(\"WORKERS\", 4)\n    \"\"\"Maximum concurrent render workers (high memory usage)\"\"\"\n\n    outputs: list[Path] = Factory(list)\n    \"\"\"List of all rendered videos on this session\"\"\"\n\n    def __attrs_post_init__(self):\n        self.estimator.load_torch()\n        self.estimator.load_model()\n        self.upscaler.load_model()\n\n    # # Allow for using with statements\n\n    def __enter__(self) -&gt; Self:\n        self.outputs = list()\n        return self\n    def __exit__(self, *ignore) -&gt; None:\n        self.join()\n\n    # # User methods\n\n    def parallax(self, scene: type[DepthScene], image: Path) -&gt; None:\n        self.estimator.estimate(image)\n\n        # Limit the maximum concurrent threads, nice pattern \ud83d\ude09\n        while len(self.threads) &gt;= self.concurrency:\n            self.threads = list(filter(lambda x: x.is_alive(), self.threads))\n            time.sleep(0.05)\n\n        # Create and add a new running worker, daemon so it dies with the main thread\n        thread = Thread(target=self._worker, args=(scene, image), daemon=True)\n        self.threads.append(thread)\n        thread.start()\n\n    @abstractmethod\n    def filename(self, data: DotMap) -&gt; Path:\n        \"\"\"Find the output path (Default: same path as image, 'Render' folder)\"\"\"\n        return (data.image.parent / \"Render\") / (\"_\".join((\n            data.image.stem,\n            f\"v{data.variation or 0}\",\n            f\"{data.render.time}s\",\n            f\"{data.render.height}p{data.render.fps or ''}\",\n        )) + \".mp4\")\n\n    @abstractmethod\n    def animate(self, data: DotMap) -&gt; None:\n        \"\"\"Add preset system's animations to each export\"\"\"\n        data.scene.animation.add(Actions.State(\n            vignette_enable=True,\n            blur_enable=True,\n        ))\n        data.scene.animation.add(Actions.Set(target=Target.Isometric, value=0.4))\n        data.scene.animation.add(Actions.Set(target=Target.Height, value=0.10))\n        data.scene.animation.add(Actions.Circle(\n            intensity=0.5,\n        ))\n\n    @abstractmethod\n    def variants(self, image: Path) -&gt; DotMap:\n        return DotMap(\n            render=combinations(\n                height=(1080, 1440),\n                time=(5, 10),\n                fps=(60,),\n            )\n        )\n\n    # # Internal methods\n\n    def _worker(self, scene: type[DepthScene], image: Path):\n        # Note: Share an estimator between threads to avoid memory leaks\n        scene = scene(backend=\"headless\")\n        scene.config.estimator = self.estimator\n        scene.set_upscaler(self.upscaler)\n        scene.input(image=image)\n\n        # Note: We reutilize the Scene to avoid re-creation!\n        # Render multiple lengths, or framerates, anything\n        for data in combinations(**self.variants(image)):\n            data.update(scene=scene, image=image)\n\n            # Find or set common parameters\n            output = self.filename(data)\n            scene.config.animation.clear()\n            self.animate(data)\n\n            # Make sure the output folder exists\n            output.parent.mkdir(parents=True, exist_ok=True)\n\n            # Render the video\n            video = scene.main(output=output, **data.render)[0]\n            self.outputs.append(video)\n\n        # Imporant: Free up OpenGL resources\n        scene.window.destroy()\n\n    def join(self):\n        for thread in self.threads:\n            thread.join()\n\n# ------------------------------------------------------------------------------------------------ #\n\n# Nice: You can subclass the manager itself \ud83e\udd2f\nclass YourManager(DepthManager):\n    def variants(self, image: Path) -&gt; DotMap:\n        return DotMap(\n            variation=[0, 1],\n            render=combinations(\n                height=[1080],\n                time=[5],\n                loop=[2],\n                fps=[60],\n            )\n        )\n\n    def animate(self, data: DotMap):\n        if (data.variation == 0):\n            data.scene.animation.add(Actions.Orbital())\n        if (data.variation == 1):\n            data.scene.animation.add(Actions.Set(target=Target.Isometric, value=0.4))\n            data.scene.animation.add(Actions.Circle(intensity=0.3))\n\n# ------------------------------------------------------------------------------------------------ #\n\nif (__name__ == \"__main__\"):\n    images = Path(os.getenv(\"IMAGES\", \"/home/tremeschin/Public/Images\"))\n\n    # Multiple unique videos per file\n    # Note: Use Upscayl() for some upscaler!\n    with DepthManager(upscaler=NoUpscaler()) as manager:\n    # with YourManager(upscaler=Upscayl()) as manager:\n        for image in images.glob(\"*\"):\n            if (image.is_file()):\n                manager.parallax(DepthScene, image)\n\n        for output in manager.outputs:\n            print(f\"\u2022 {output}\")\n</code></pre> <p>Loving what you see? Help me continue this Full-Time Open Source Work!</p>"},{"location":"depthflow/quick/webui/","title":"DepthFlow/WebUI","text":"<p>\u2705 On any installation method, you can run <code>depthflow gradio</code> to start the web interface. This will open a new tab in your default browser on a local server hosted in your machine:</p> <p>The user interface should be somewhat self-explanatory, and is subject to change.</p> <ul> <li> <p>\ud83d\udcc1 Input any image on the top left, optionally upscale it; configure rendering options below and/or change the animations, and hit \"Render\" to generate a video!</p> </li> <li> <p>\u267b\ufe0f You can pass a <code>depthflow gradio --share</code> flag to have a temporary public link of your instance, proxied through Gradio's servers. Do this when hosting for a friend, or if you don't have access to the local network of a remote/rented server!</p> </li> <li> <p>\u270f\ufe0f Options that could cause confusion include Fit width or Fit height. If you click fit width, the height will be calculated to match the image's aspect ratio, e.g.</p> </li> <li> <p>\ud83d\udea7 Animations system will change and be improved. For now, enable presets and change their settings on the expandable accordion on the middle of the interface.</p> </li> </ul> <p>Loving what you see? Help me continue this Full-Time Open Source Work!</p>"},{"location":"get/","title":"Get/Installation","text":""},{"location":"get/#installation","title":"\u2705 Installation","text":"<ul> <li>There are a couple of ways to get started with the projects:</li> </ul>"},{"location":"get/#from-releases","title":"\ud83d\udce6 From Releases","text":"<p> <p>The most convenient way to use the projects. \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Portable executables made with PyApp for all platforms.</li> <li>Double click and run, everything's managed for you.</li> </ul> <p><sup>Recommended for: Basic users, alpha testers.</sup></p> <p></p>"},{"location":"get/#from-pypi","title":"\ud83e\uddc0 From PyPI","text":"<p> <p>The most reliable way to use the projects. \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Standard pip install, requires basic Python knowledge.</li> <li>Run the package commands or as a python import.</li> </ul> <p><sup>Recommended for: Basic users, advanced users, developers</sup></p> <p></p>"},{"location":"get/#from-source","title":"\ud83d\udd25 From Source","text":"<p> <p>The most flexible way to use the projects. \u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Automatic install scripts, spend more time using the projects.</li> <li>Latest features, bugs, fixes, highly configurable.</li> </ul> <p><sup>Recommended for: Advanced users, contributors, developers.</sup></p> <p></p>"},{"location":"get/#cloud-or-docker","title":"\u2601\ufe0f Cloud or Docker","text":"<p> <p>The most scalable way to use the projects. \u2b50\ufe0f</p> <ul> <li>Docker images with everything pre-installed.</li> <li>Cloud providers instructions and fixes.</li> </ul> <p><sup>Recommended for: Enterprise, CI/CD, production.</sup></p> <p></p>"},{"location":"get/docker/","title":"Get/Cloud & Docker","text":""},{"location":"get/docker/#cloud","title":"\u2601\ufe0f Cloud","text":"<p>Cloud providers are a great way to run the projects without the need of a powerful machine, to have a dedicated server for it, or scale up the usage. Naturally, there are a lot of providers to rent hardware from, with quirks and differences between them.</p> <p>Getting OpenGL GPU acceleration to work is the trickiest part; if it's not listed here, you could try following the Docker section's of what needs to happen. Consider improving this!</p> <ul> <li> <p>Note: When the GPU is not used in OpenGL, <code>llvmpipe</code> (CPU) device will be used. Rendering speeds will be abysmal, in the order of seconds per frame, avoid at all costs.</p> </li> <li> <p>Note: The examples below are only for properly setting up the environment for the projects to run. Continue after with any project's installation or usage for more.</p> </li> <li> <p>No conclusions, grading and guides are final, and can fail or be improved at any time.</p> </li> </ul> <p>Loving what you see? Help me continue this Full-Time Open Source Work!</p>"},{"location":"get/docker/#amazon-ec2","title":"\ud83d\udd18 Amazon EC2","text":"<p>\u2705 \u00a0 #notsponsored \u2022 \ud83c\udf10 Website\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f (5.0/5.0) \u2022 Works out of the box\u2122</p> <ul> <li>Simply chose <code>AWS Deep Learning AMI GPU PyTorch 2.4 (Ubuntu 22.04)</code> or similar!</li> <li>No extra configuration needed, install the projects and continue</li> </ul>"},{"location":"get/docker/#runpod","title":"\ud83d\udd18 Runpod","text":""},{"location":"get/docker/#pods","title":"Pods","text":"<p>\u2705 \u00a0 #notsponsored \u2022 \ud83c\udf10 Website\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f (4.8/5.0) \u2022 Minor fixes within user's reach</p> <ul> <li>Rent any pod with Nvidia GPUs (L4/T4 or cheapest should be enough)</li> <li>Template: <code>runpod/pytorch:2.2.0-py3.10-cuda12.1.1-devel-ubuntu22.04</code></li> </ul> <p>After having access to a terminal, run the following:</p> <pre><code># Installs required packages, adds the NVIDIA as a EGL vendor device\napt update &amp;&amp; apt install -y libegl1-mesa libglvnd-dev libglvnd0\nmkdir -p /usr/share/glvnd/egl_vendor.d\necho '{\"file_format_version\":\"1.0.0\",\"ICD\":{\"library_path\":\"/usr/lib/x86_64-linux-gnu/libEGL_nvidia.so.0\"}}' &gt; /usr/share/glvnd/egl_vendor.d/10_nvidia.json\nexport __EGL_VENDOR_LIBRARY_FILENAMES=/usr/share/glvnd/egl_vendor.d/10_nvidia.json\n</code></pre> <ul> <li>Install the projects and continue as usual</li> </ul> <p>For more context, see this GitHub comment of mine.</p>"},{"location":"get/docker/#serverless","title":"Serverless","text":"<p>\u2753 \u00a0 #notsponsored \u2022 \ud83c\udf10 Website(?/5.0) \u2022 Unknown</p> <p>Unknown.</p>"},{"location":"get/docker/#google-cloud","title":"\ud83d\udd18 Google Cloud","text":"<p>\u2705 \u00a0 #notsponsored \u2022 \ud83c\udf10 Website\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2606 (4.5/5.0) \u2022 Minor changes needed</p> <p>Goes mostly smooth by following the base dockerfiles, reportedly works with GPU Acceleration.</p>"},{"location":"get/docker/#modal","title":"\ud83d\udd18 Modal","text":"<p>\u2705 \u00a0 #notsponsored \u2022 \ud83c\udf10 Website\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2606\u2606 (3.0/5.0) \u2022 Major changes needed + support ticket</p> <ul> <li> <p>You must ask their support team to move your workspace to an older runner of theirs, as the newer ones don't expose <code>graphics</code> capabilities to Docker containers, failing to use the GPU.</p> </li> <li> <p>NVENC is not available due \"security reasons\"; they can enable it if you're trustworthy, again, ask them.</p> </li> </ul> <p>See this script file for running the projects on Modal!</p>"},{"location":"get/docker/#google-colab","title":"\ud83d\udd18 Google Colab","text":"<p>\u274c \u00a0 #notsponsored \u2022 \ud83c\udf10 Website\u2b50\ufe0f\u2606\u2606\u2606\u2606 (1.0/5.0) \u2022 No GPU acceleration</p> <ul> <li> <p>\u26a0\ufe0f Important: Colab disallows WebUI usage in their free plan.</p> </li> <li> <p>Doesn't seem to provide GPU acceleration for OpenGL.</p> </li> </ul> <p>Here's my effort on trying to get it working.</p>"},{"location":"get/docker/#replicate","title":"\ud83d\udd18 Replicate","text":"<p>\u274c \u00a0 #notsponsored \u2022 \ud83c\udf10 Website\u2606\u2606\u2606\u2606\u2606 (0.0/5.0) \u2022 No OpenGL and Pydantic version conflict</p> <ul> <li> <p>I am using Pydantic version 2 for at least a couple of months, but they're stuck on v1.0 in <code>cog</code> and injecting on the environment for a good while, making it a dependency conflict hard to solve at runtime.</p> </li> <li> <p>Not only that, when I tried plain <code>moderngl</code> for OpenGL, I couldn't get GPU acceleration to work.</p> </li> </ul> <p>It's been a while since I tried it, it's probably possible to get it to work with some effort.</p>"},{"location":"get/docker/#inferless","title":"\ud83d\udd18 Inferless","text":"<p>\u2753 \u00a0 #notsponsored \u2022 \ud83c\udf10 Website?/5.0 \u2022 No OpenGL acceleration?</p> <p>A community member reportedly ran it basing off my main dockerfile, and OpenGL acceleration didn't work.</p> <ul> <li>I don't have any more information or if this is true.</li> </ul>"},{"location":"get/docker/#beam-cloud","title":"\ud83d\udd18 Beam Cloud","text":"<p>\u2753 \u00a0 #notsponsored \u2022 \ud83c\udf10 Website?/5.0</p> <p>It's been a while since I tried it, but don't remember getting it to work.</p> <p></p>"},{"location":"get/docker/#docker","title":"\ud83d\udc33 Docker","text":"<p>Docker is a platform for containerization of software, easy deployment and scalability. Basic usage is relatively simple, and most Linux knowledge can be applied to it. The main problem for running the projects on Docker is getting OpenGL acceleration to work, as the focus of it are compute workloads (CUDA, ML) or services (Jellyfin, NextCloud, APIs, etc).</p> <p>There are quite a lot of combinations in hardware<sup>1</sup>, platform and intention to use it, and guides like this can only go so far, and focuses on getting OpenGL working.</p> Docker can't open native GUIs on the Host OS \u2022 The intended usage are: <ul> <li>Implementing a backend e.g. with FastAPI</li> <li>Serving and acessing a Gradio web page</li> <li>Isolation, security or Headless usage</li> </ul>"},{"location":"get/docker/#installing","title":"\u26a1\ufe0f Installing","text":"<ul> <li>(Windows) Install WSL2, default Ubuntu 22.04 distro is fine     PowerShell<pre><code>wsl --install\n</code></pre><ul> <li>Preferably add an user with <code>sudo adduser &lt;username&gt;</code> (inside <code>wsl</code>)</li> <li>And make it default <code>ubuntu config --default-user &lt;username&gt;</code></li> </ul> </li> </ul> <ul> <li>Install Docker Desktop for your platform or Package Manager<ul> <li>Linux users might only want Docker Engine, per bloat and licensing model</li> <li>Windows: Enable <code>Settings &gt; Resources &gt; WSL Integration &gt; Default distro</code></li> </ul> </li> </ul> <ul> <li>(Linux) You might need to install Docker Compose if you distro splits it</li> </ul> <ul> <li>(NVIDIA) Install the NVIDIA Container Toolkit for your Distro<ul> <li>I don't have to say \"Have NVIDIA Drivers installed\", on the host system, do I?</li> <li>Windows: Follow the <code>apt</code> instructions on the link above, inside WSL</li> </ul> </li> </ul> <p>DO NOT INSTALL NVIDIA OR DISPLAY DRIVERS (MESA) ON THE WSL DISTRO PER NVIDIA DOCS</p> <p>Restart the Docker Engine:</p> <ul> <li>(Linux) Run <code>sudo systemctl restart docker</code> on the Terminal</li> <li>(Others) Close and open Docker Desktop on the System Tray</li> </ul> <p>(Windows) It may be a good idea to reboot the whole system</p> <ul> <li>Clone the Monorepo following the \ud83d\udd25 From Source/Manual page, until <code>uv sync</code></li> </ul>"},{"location":"get/docker/#context","title":"\ud83d\ude80 ContextWhat to avoidWhy we want EGLNative Linux vs WSLBut why is this important?Talk is cheap, show me the codeChecking stuff is working","text":"<p>Per Monorepo structure, I've configured a <code>.docker-compose.yml</code> file that builds a <code>base.dockerfile</code> with common dependencies, and hopefully OpenGL Acceleration. The other dockerfiles starts of at the end of this base image for the specific project</p> Have enough RAM and don't want to hurt your SSD's TBW? <p>Edit or create the file <code>sudo nano /etc/docker/daemon.json</code> and add: <pre><code>{\n    \"data-root\": \"/tmp/docker\",\n    // ...\n}\n</code></pre></p> <p>Most Projects uses ModernGL for interfacing with OpenGL, that renders the Shaders. The Context creation is handled by glcontext, which selects the proper platform's API to use</p> <p>Long story short, we want to avoid at maximum using x11 inside Docker and even on native Linux !. The code is feature-frozen but with many technical debts, requires a real \"Display\" for Graphics APIs (OpenGL, Vulkan) to even work, and there is no headless mode</p> <ul> <li>One might think that prepending the commands with xvfb-run could work, but this will always use Software Rendering, which happens entirely on the CPU - a fraction of the speed of a GPU. So, we want to avoid xvfb at all costs</li> </ul> <p>This isn't an issue per se when running natively, as OpenGL Contexts created on a live Desktop Environment WILL have GPU Acceleration via GLX, provided by the current driver. Or EGL itself, if we're running Wayland</p> <p>Luckily, Khronos Group developed EGL, and NVIDIA the libglvnd libraries. Together, EGL provides context creation directly on OpenGL without relying on WGL/CGL/GLX, so we can have true GPU accelerated headless contexts, and libglvnd a vender-neutral dispatch for so</p> <p>Well, not so fast. That is, if the available devices are GPUs themselves. It is well known that NVIDIA provides their own Proprietary Drivers and firmware for their GPUs, with shared libraries (`.so` files on Linux, `.dll` on Windows) pointing to their driver's libraries; while AMD and Intel GPUs on Linux runs the Godly Mesa Project. Mesa always at least provides <code>llvmpipe</code> device, which is a Software Rendering fallback device</p> <p>Now, here's where it gets tricky. Docker is running a virtualized Linux machine always, but inside a pseudo-native Linux in WSL (three layers lol). The previously installed NVIDIA Container Toolkit deals with both cases slightly differently:</p> <ul> <li> <p>On Windows, the NVIDIA drivers used are from the Host (Windows itself), \"redirected\" to WSL. The wrapped binaries are found at <code>/usr/lib/wsl</code> on the WSL distro, provided by the container toolkit This is why no drivers should be installed on WSL. The <code>llvmpipe</code> device can be a pointer to <code>d3d12.so</code> file with actual GPU Acceleration</p> </li> <li> <p>On Linux, the NVIDIA drivers used are from the Host (Linux itself), directly. The files are found on regular <code>/usr/lib</code> location, provided by the container toolkit wrapping the host's drivers. No sketchy, <code>llvmpipe</code> is always software and a GPU device shows up</p> </li> </ul> <p>If anything goes wrong in this complicated soup of shared libraries, your rendering speeds won't be 290 fps, but 40, 20, 5 fps at maximum, without utilizing GPU</p> <ul> <li> <p>The fun thing is that <code>/usr/lib/wsl</code> isn't mapped automatically to Docker on WSL \ud83e\udd21</p> </li> <li> <p>Getting EGL to work on Cloud Providers can be tricky \ud83c\udf88</p> </li> </ul> <p>Thankfully, we have <code>nvidia/opengl:1.2-glvnd-runtime-ubuntu22.04</code> image to start with</p> <p>We absolutely need to set those env vars:</p> <pre><code>ENV NVIDIA_VISIBLE_DEVICES=\"all\"\nENV NVIDIA_DRIVER_CAPABILITIES=\"all\"\n</code></pre> <p>Additionally, for ShaderFlow to use EGL, and not GLFW, set</p> <pre><code># Can disable with WINDOW_EGL=0 (sends backend=None to Window class)\nENV WINDOW_BACKEND=\"headless\"\n\n# Alternatively, use shaderflow scene class args\nscene = ShaderScene(backend=\"headless\")\n</code></pre> <p>For pure ModernGL users:</p> <p>Sending <code>backend=\"headless\"</code> is the same as using the <code>moderngl_window.context.headless.Window</code> class, alongside sending a <code>backend=\"egl\"</code> kwarg to that Window class initialization if <code>$WINDOW_EGL</code> is <code>\"1\"</code></p> <p>Almost done, but there's some CLI args to go:</p> <ul> <li> <p>On Any platform, we must add <code>--gpus all</code> to the Docker Engine's CLI for finding GPUs If running from the configured `docker-compose.yml`, this is already configured</p> </li> <li> <p>On Windows, due the <code>d3d12.so</code> lib hack, we must add <code>-v /usr/lib/wsl:/usr/lib/wsl</code> to the Docker Engine's CLI Already configured on `docker-compose.yml`. That makes so we map the WSL's libraries of the Host OS's Drivers to Docker virtualized OS</p> </li> </ul> <p>I've configured a Dockerfile for you to test your setup. Check its output messages:</p> Terminal<pre><code>docker-compose run --build glinfo\n</code></pre> <p>If everything is nominal until now, you've probably got a healthy setup \ud83c\udf89</p> <p>For reference, here's the final Base Dockerfile and docker-compose.yml files</p>"},{"location":"get/docker/#usage","title":"\u2b50\ufe0f UsageAll of that..Your own Dockerfile","text":"<p>This page helped you?</p> <p>Consider Joining my Sponsors and helping me continue everything !</p> <p>..was just for saying I've suffered and automated enough, so you can simply run:</p> Terminal<pre><code># Torch CPU already managed \ud83d\ude09\ndocker-compose run --build depthflow\n\n# Somehow, faster than native linux?\ndocker-compose run --build shaderflow\n</code></pre> <p>Funcionality is limited</p> <p>You're expeceted to upload your own <code>.py</code> files in a separate Dockerfile (recommended), or edit the ones currently at <code>Docker/Scripts/*.py</code> for your current intentions (anti-pattern)</p> <p>In the future, there will be <code>$project-gradio</code> runnable images</p> <p>You can also build the <code>Docker/base.dockerfile</code> as <code>-t broken-base</code> and base off of it in yours dockerfiles with <code>FROM broken-base:latest</code> locally</p> <ul> <li>Not much different from how it works now:</li> </ul> <pre><code>FROM broken-base:latest\nCMD [\"python3\", \"Docker/Scripts/depthflow.py\"]\n</code></pre> <p>This way, no reinstall is required, and you have everything available right away</p> <p></p> <ol> <li> <p>Untested on AMD Radeon, Intel iGPU, Intel ARC. Your mileage may vary, here be dragons !\u00a0\u21a9</p> </li> </ol>"},{"location":"get/pypi/","title":"Get/PyPI","text":"<p>The most reliable way to use the Projects \u2022 Run the package commands or as a python import.</p> <p>Recommended for: Basic users, advanced users, developers.</p>"},{"location":"get/pypi/#installing","title":"\u26a1\ufe0f Installing","text":"Pip uv Poetry Rye PDM <p>Follow their quick start, install packages with:</p> <pre><code>python3 -m pip install {package}\n</code></pre> <p>Follow their quick start, install packages with:</p> <pre><code>uv add {package}\n</code></pre> <p>Follow their quick start, install packages with:</p> <pre><code>poetry add {package}\n</code></pre> <p>Follow their quick start, install packages with:</p> <pre><code>rye add {package} --pin equal\n</code></pre> <p>Follow their quick start, install packages with:</p> <pre><code>pdm add {package}\n</code></pre> <p>...where <code>{package}</code> is the name of the project you want to install:</p> <p><code>depthflow</code>, <code>shaderflow</code>, <code>broken-source</code>, <code>pianola</code>, <code>spectronote</code>, <code>turbopipe</code></p> <p>\u2705 Preferably pin the package version <code>==x.y.z</code> on <code>pyproject.toml</code> for stability!</p> Python 64 bits interpreter is required <p>Reason: Some or many dependencies don't have precompiled wheels or will fail to compile for 32 bits</p> <ul> <li>\u2705 Check your installation with: <code>python3 -c \"import struct; print(struct.calcsize('P') * 8)\"</code></li> <li>This is specially important on Windows as python.org front page might link to 32 bit versions</li> </ul>"},{"location":"get/pypi/#usage","title":"\u2b50\ufe0f Usage","text":"<p>Go to the project tab of your interest above and see the quickstart!</p>"},{"location":"get/pypi/#upgrading","title":"\ud83d\ude80 Upgrading","text":"<p>Simply upgrade the python dependency:</p>  Pip uv Poetry Rye PDM <p></p> <pre><code>python3 -m pip install --upgrade {package}\n</code></pre> <p></p> <pre><code>uv add {package}\n</code></pre> <p></p> <pre><code>poetry update {package}\n</code></pre> <p></p> <pre><code>rye add {package}\n</code></pre> <p></p> <pre><code>pdm update {package}\n</code></pre>"},{"location":"get/pypi/#uninstalling","title":"\u267b\ufe0f Uninstalling","text":"<p>See the Uninstalling page</p>"},{"location":"get/pytorch/","title":"Get/PyTorch","text":"<p>Some projects have Optional or Total Dependency on PyTorch</p>"},{"location":"get/pytorch/#from-source","title":"\ud83d\udd25 From Source","text":"<p>When a project requires PyTorch, a Prompt will pop up to install a flavor automatically</p> <ul> <li>Alternatively, when inside the Virtual Environment, choose one below and run:</li> </ul> <p>1. Select your Platform</p>  Windows Linux MacOS <p></p>  NVIDIA (CUDA) Radeon (ROCm) Arc (OneAPI) Any (CPU) Command<pre><code>poe cuda\n</code></pre> <p>Have the NVIDIA Drivers installed</p> <p>AMD doesn't support ROCm on Windows yet</p> <p>It is supported on Linux, consider trying it there!</p> <p>Please use CPU installation for now</p> <p>Help needed, I don't have the Hardware to test</p> <p>Please use CPU installation for now</p> Command<pre><code>poe cpu\n</code></pre> <p>Slow option, but works on any System</p> <p></p>  NVIDIA (CUDA) Radeon (ROCm) Arc (OneAPI) Any (CPU) Command<pre><code>poe cuda\n</code></pre> <p>Have the NVIDIA Proprietary Drivers packages installed in your Distro</p> Command<pre><code>poe rocm\n</code></pre> <p>Have the Mesa Drivers and ROCm packages installed in your Distro</p> <p>Requires RX 5000 series or Newer. Set <code>HSA_OVERRIDE_GFX_VERSION=10.3.0</code> for (&gt;= RX 5000)</p> <p>Help needed, I don't have the Hardware to test</p> <p>Please use CPU installation for now</p> Command<pre><code>poe cpu\n</code></pre> <p>Slow option, but works on any System</p> <p> Command<pre><code>poe base\n</code></pre></p> <p>Should work, but I don't have the Hardware to test</p>"},{"location":"get/pytorch/#from-pypi","title":"\ud83e\uddc0 From PyPI","text":"<p>Specify a PyTorch version in <code>pyproject.toml</code> on the Python package manager that you use. Or do what I do: use poethepoet for the user's choice (or automate it)</p> <ul> <li>PyTorch is hard to deal with, I can't write exhaustively</li> </ul>"},{"location":"get/releases/","title":"Get/Releases","text":"<p>The most convenient way to use the Projects \u2022 Double-click and run, everything's managed for you.</p> <p>Recommended for: Basic users, alpha testers.</p>"},{"location":"get/releases/#installing","title":"\u26a1\ufe0f Installing","text":"Windows Linux MacOS <p> Note: Executables are safe and auditable, but might trigger a false antivirus alert     <code>       [1]       [2]     </code> <sup>I am not destroying my reputation by distributing malware and take security seriously.</sup> </p>  x86-64  <p></p> <p> Note: Open a terminal in the download path, extract it with <code>cat *.tar.gz | tar -xzvf - -i</code> <sup>And then run <code>./project-name-*.bin</code> for its command line!</sup> </p>  x86-64 ARM64 <p></p> <p></p> <p> Note: Open a terminal in the download path, extract it with <code>cat *.tar.gz | tar -xzvf - -i</code> <sup>And then run <code>./project-name-*.bin</code> for its command line!</sup> </p>  Apple Silicon Intel Macs <p></p> <p></p>"},{"location":"get/releases/#usage","title":"\u2b50\ufe0f Usage","text":"<p>Simply double click and run the executable on your platform. It will install or update everything and run the software. Go back to the project tab of your interest for more info!</p>"},{"location":"get/releases/#upgrading","title":"\ud83d\ude80 Upgrading","text":"<p>Download a newer release from here, or your package manager<sup>1</sup>.</p>"},{"location":"get/releases/#uninstalling","title":"\u267b\ufe0f Uninstalling","text":"<p>See the uninstalling page.</p> <ol> <li> <p>You know what you are doing if using this. Reach me if you want to package for any package manager, we could make it official and write a proper page and guide for it!\u00a0\u21a9</p> </li> </ol>"},{"location":"get/source/","title":"Get/Source","text":"<p>The most flexible way to use the Projects \u2022 Latest features, bugs, fixes, highly configurable.</p> <p>Recommended for: Advanced users, contributors, developers.</p>"},{"location":"get/source/#installing","title":"\u26a1\ufe0f Installing","text":"Windows Linux MacOS Manual <p> Open a folder to download the code on Windows Explorer Press Ctrl+L , run <code>powershell</code> and execute: <pre><code>irm https://brokensrc.dev/get.ps1 | iex\n</code></pre> How it works: <code>irm</code> downloads the script, <code>iex</code> executes it directly  Don't want to use it? Follow the  Manual tab above!</p> <p> Open a Terminal on some directory and run: <pre><code>/bin/bash -c \"$(curl -sS https://brokensrc.dev/get.sh)\"\n</code></pre> How it works: <code>curl</code> downloads the script, <code>bash</code> executes it directly  Don't want to use it? Follow the  Manual tab above!</p> <p> Open a Terminal on some directory and run: <pre><code>/bin/bash -c \"$(curl -sS https://brokensrc.dev/get.sh)\"\n</code></pre> How it works: <code>curl</code> downloads the script, <code>bash</code> executes it directly  Don't want to use it? Follow the  Manual tab above!</p> <p></p> <ul> <li>Install git and uv on your Platform</li> </ul> <p>Download the code<pre><code>git clone https://github.com/BrokenSource/BrokenSource --recurse-submodules\n</code></pre> Enter the directory<pre><code>cd BrokenSource\n</code></pre> Ensure submodules are on main<pre><code>git submodule foreach --recursive 'git checkout main || true'\n</code></pre> Create venv and install dependencies<pre><code>uv sync --all-packages\n</code></pre></p> Directly with uvTraditional method <p></p> Start using any Project<pre><code>uv run shaderflow\nuv run depthflow\nuv run broken\n</code></pre> <p></p> <p>Activate the venv<pre><code># Windows:\n.venv\\Scripts\\Activate.ps1 # PowerShell\n.venv\\Scripts\\Activate.bat # CMD\n\n# Linux and MacOS:\nsource .venv/bin/activate # Bash\nsource .venv/bin/activate.fish # Fish\n</code></pre> Start using any Project<pre><code>broken\nshaderflow\ndepthflow\n</code></pre></p> See what <code>get.sh</code> and <code>get.ps1</code> does <p>The content below is a verbatim copy of the current live script on this website</p> (Windows) \u2022 get.ps1(Linux and macOS) \u2022 get.sh <p> PowerShell script<pre><code>#!/usr/bin/env pwsh\n# (c) MIT License, Tremeschin\n# Script version: 2024.11.10\n\n# This function reloads the \"PATH\" environment variable so that we can\n# find newly installed applications on the same script execution\nfunction Reload-Path {\n    $wingetPath  = $env:LocalAppData + \"\\Microsoft\\WindowsApps\"\n    $machinePath = [System.Environment]::GetEnvironmentVariable(\"Path\", \"Machine\")\n    $userPath    = [System.Environment]::GetEnvironmentVariable(\"Path\", \"User\")\n    $env:Path    = $machinePath + \";\" + $userPath + \";\" + $wingetPath\n}\n\n# Option to continue normally even on errors\nfunction Ask-Continue {\n    echo \"`nPress Enter to continue normally, or Ctrl+C to exit\"\n    Read-Host\n}\n\n# Consistency in showing steps\nfunction Print-Step {\n    echo \"`n:: $args`n\"\n}\n\n# This function immediately exits if Winget is found, else it tries to install it with\n# the official Microsoft docs 'Add-AppxPackage' method. If it still fails, it tries\n# to download the Appx package (.msibundle) and install it manually.\nfunction Have-Winget {\n    Reload-Path\n    if ((Get-Command winget -ErrorAction SilentlyContinue)) {\n        return\n    }\n\n    Print-Step \"Installing Winget\"\n\n    # Attempt via: https://learn.microsoft.com/en-us/windows/package-manager/winget/\n    Add-AppxPackage -RegisterByFamilyName -MainPackage Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\n    Reload-Path\n\n    # Attempt manual method if still not found\n    if (-not (Get-Command winget -ErrorAction SilentlyContinue)) {\n        echo \"Winget installation with Add-AppxPackage failed, trying 'manual' method..\"\n        Print-Step \"Downloading Winget installer, might take a while..\"\n\n        # Why tf does disabling progress bar yields 50x faster downloads????? https://stackoverflow.com/a/43477248\n        $msi=\"https://github.com/microsoft/winget-cli/releases/download/v1.7.10582/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle\"\n        $tempFile = [System.IO.Path]::GetTempPath() + \"\\winget.msixbundle\"\n        $ProgressPreference = 'SilentlyContinue'\n        Invoke-WebRequest -Uri $msi -OutFile $tempFile\n\n        # Install the Appx package\n        echo \"Finished download, now installing it, can take a while on HDDs systems..\"\n        Add-AppxPackage -Path $tempFile\n        Reload-Path\n    }\n\n    # If Winget is still not available, exit\n    if (-not (Get-Command winget -ErrorAction SilentlyContinue)) {\n        Print-Step \"Winget was not found, and installation failed with Add-AppxPackage\"\n        echo \"Winget was installed but still not found. Probably a Path issue or installation failure\"\n        echo \"&gt; Please get it at https://learn.microsoft.com/en-us/windows/package-manager/winget\"\n        echo \"&gt; Alternatively, install manually what was meant to be installed but failed\"\n        Ask-Continue\n    }\n}\n\nif (-not (Get-Command git -ErrorAction SilentlyContinue)) {\n    Print-Step \"Git was not found, installing with Winget\"\n    Have-Winget\n    winget install -e --id Git.Git\n    Reload-Path\n    if (-not (Get-Command git -ErrorAction SilentlyContinue)) {\n        Print-Step \"Git was not found, and installation failed with Winget\"\n        echo \"Git was installed but still not found. Probably a Path issue or installation failure\"\n        echo \"&gt; Please get it at https://git-scm.com\"\n        Ask-Continue\n    } else {\n        echo \"Git was installed successfully\"\n    }\n} else {\n    Print-Step \"Updating Git\"\n    winget upgrade --id Git.Git\n}\n\nif (-not (Get-Command uv -ErrorAction SilentlyContinue)) {\n    Print-Step \"uv was not found, installing with Winget\"\n    Have-Winget\n    winget install -e --id=astral-sh.uv\n    Reload-Path\n    if (-not (Get-Command uv -ErrorAction SilentlyContinue)) {\n        Print-Step \"uv was not found, and installation failed with Winget\"\n        echo \"uv was installed but still not found. Probably a Path issue or installation failure\"\n        echo \"&gt; Please get it at https://docs.astral.sh/uv/\"\n        Ask-Continue\n    } else {\n        echo \"uv was installed successfully\"\n    }\n} else {\n    Print-Step \"Updating uv\"\n    winget upgrade --id astral-sh.uv\n}\n\n# # Clone the Repositories, Install Python Dependencies on venv and Spawn a new Shell\n\n# Skip cloning if already on a cloned directory\nif (-not (Test-Path -Path \"Broken\")) {\n    Print-Step \"Cloning BrokenSource Repository and all Submodules\"\n    git clone https://github.com/BrokenSource/BrokenSource --recurse-submodules --jobs 4\n    cd BrokenSource\n\n    Print-Step \"Checking out main branch for all submodules\"\n    git submodule foreach --recursive 'git checkout main || true'\n} else {\n    Print-Step \"Already in a Cloned Directory, Skipping Cloning\"\n}\n\n# The PowerShell execution policy must allow for the Python activation script to run\nif ((Get-ExecutionPolicy) -notin @(\"Unrestricted\", \"RemoteSigned\", \"Bypass\")) {\n    echo \"`n(Warning) The current PowerShell ExecutionPolicy disallows activating the Python venv\"\n    echo \"&gt; More info: https://github.com/microsoft/vscode-python/issues/2559\"\n    echo \"&gt; Need any of: 'Unrestricted', 'RemoteSigned', or 'Bypass'\"\n    echo \"&gt; Current ExecutionPolicy: '$(Get-ExecutionPolicy)'\"\n\n    echo \"`nDon't worry, we just need to run as admin the following:\"\n    echo \"&gt; 'Set-ExecutionPolicy RemoteSigned'`n\"\n    Read-Host \"Press Enter to do it, or Ctrl+C to exit\"\n\n    Start-Process powershell -Verb RunAs -ArgumentList \"-Command Set-ExecutionPolicy RemoteSigned\"\n}\n\nPrint-Step \"Creating Virtual Environment and Installing Dependencies\"\nuv sync --all-packages\n\nPrint-Step \"Spawning a new Shell in the Virtual Environment\"\npowershell -ExecutionPolicy Bypass -NoLogo -NoExit -File .\\.venv\\Scripts\\Activate.ps1\n</code></pre></p> <p> Bash script<pre><code>#!/bin/bash\n# (c) MIT License, Tremeschin\n# Script version: 2024.11.10\n\n{ # Prevent execution if partially downloaded\n\n# Exit on any error or failed command (includes pipes)\nset -euo pipefail\n\n# Detect current system\nMACOS=false\n[[ \"$OSTYPE\" == \"darwin\"* ]] &amp;&amp; MACOS=true\n\n# macOS: Must have 'Xcode Command Line Tools' installed\nif $MACOS; then\n  if [ ! xcode-select -p &amp;&gt; /dev/null ]; then\n    printf \"(Error) Xcode Command Line Tools are not installed\\n\"\n    printf \"\u2022 Install them with 'xcode-select --install'\\n\"\n    printf \"\u2022 Run again this script after installation\\n\"\n    exit 1\n  fi\nfi\n\n# Must have 'git' installed\ngit=\"\"\nif [ -x \"$(command -v git)\" ]; then\n  git=$(readlink -f $(which git))\n  printf \"\\n\u2022 Found Git at ($git)\\n\"\nelse\n  printf \"\\n(Error) Git wasn't found, and is required to clone the repositories\\n\"\n  printf \"\u2022 Get it at (https://git-scm.com/), or from your distro:\\n\"\n  printf \"\u2022 macOS:  'brew install git' - needs (https://brew.sh/)\\n\"\n  printf \"\u2022 Ubuntu: 'sudo apt update &amp;&amp; sudo apt install git'\\n\"\n  printf \"\u2022 Arch:   'sudo pacman -Syu git'\\n\"\n  printf \"\u2022 Fedora: 'sudo dnf install git'\\n\"\n  exit 1\nfi\n\n# Must have 'uv' installed\nuv=\"\"\nfor attempt in $(seq 1 2); do\n  if [ -x \"$(command -v uv)\" ]; then\n    uv=$(readlink -f $(which uv))\n    printf \"\\n\u2022 Found uv at ($uv)\\n\"\n    break\n  fi\n\n  if [ $attempt -eq 2 ]; then\n    printf \"\\n(Error) uv wasn't found after an installation attempt\\n\"\n    printf \"\u2022 Do you have the Shims directory on PATH?\\n\"\n    printf \"\u2022 Try restarting the Shell and retrying\\n\"\n    printf \"\u2022 Get it at (https://docs.astral.sh/uv/)\\n\"\n    exit 1\n  fi\n\n  printf \"\\n\u2022 uv wasn't found, will attempt to install it\\n\\n\"\n  /bin/bash -c \"$(curl -sSfL https://astral.sh/uv/install.sh)\"\ndone\n\n# # Clone the Repositories, Install Python Dependencies on venv and Spawn a new Shell\n\n# Already inside a git repository\nif git rev-parse --is-inside-work-tree &amp;&gt; /dev/null; then\n  work_tree=$(git rev-parse --show-toplevel)\n\n  # Must be on BrokenSource to continue\n  if (cd \"$work_tree\" &amp;&amp; git remote get-url origin 2&gt;/dev/null | grep -q \"BrokenSource\"); then\n    printf \"\\n\u2022 Already inside the BrokenSource main repository\\n\"\n    printf \"  - For latest changes, run 'Scripts/update.sh'\\n\"\n    cd \"$work_tree\"\n  else\n    printf \"\\n(Error) Currently in a non-BrokenSource main git epository, exiting\\n\"\n    exit 1\n  fi\n\n# Directory exists\nelif [ -d \"BrokenSource\" ]; then\n  printf \"\\n\u2022 BrokenSource directory exists. Assuming it's the repository\\n\"\n  printf \"  - On errors, try deleting the directory and run again\\n\"\n  printf \"  - For latest changes, run 'Scripts/update.sh'\\n\"\n  cd BrokenSource\n\n# Fresh clone\nelse\n  printf \"\\n\u2022 Cloning BrokenSource Repository and all Submodules\\n\\n\"\n  $git clone https://github.com/BrokenSource/BrokenSource/ --recurse-submodules --jobs 4\n  cd BrokenSource\n\n  printf \"\\n\u2022 Checking out main branch for all submodules\\n\\n\"\n  $git submodule foreach --recursive 'git checkout main || true'\nfi\n\n# Make scripts executable for later use\nchmod +x Website/get.sh\nchmod +x ./Scripts/activate.sh\n\nprintf \"\\n\u2022 Creating Virtual Environment and Installing Dependencies\\n\\n\"\n$uv self update || printf \"\\n\u2022 uv self update failed, ignoring..\\n\\n\"\n$uv sync --all-packages || printf \"\\n\u2022 uv sync failed, could cause issues..\\n\\n\"\n\nprintf \"\\n\u2022 Spawning a new Shell in the Virtual Environment\\n\"\nprintf \"  - Source the Virtual Environment to get here again\\n\"\nprintf \"  - Tip: Alternative, run 'Scripts/activate.sh'\\n\\n\"\nsource .venv/bin/activate\nexec $SHELL\n\n}\n</code></pre></p>"},{"location":"get/source/#usage","title":"\u2b50\ufe0f Usage","text":"<p>Go to the project tab of your interest above and see the quickstart!</p> <ul> <li>You can also run the projects with: <code>uv run 'project'</code> directly</li> </ul> <p>Next time, to use the projects</p> <p>You just have to Open a Terminal on the BrokenSource directory and source the virtual environment</p> <ul> <li>For that, run <code>Scripts/activate.sh</code> if on Linux/MacOS or <code>Scripts/activate.ps1</code> if on Windows</li> <li>Or manually with  <code>source .venv/bin/activate</code> or  <code>.venv\\Scripts\\Activate.ps1</code></li> </ul>"},{"location":"get/source/#upgrading","title":"\ud83d\ude80 Upgrading","text":""},{"location":"get/source/#repositories","title":"Repositories","text":"<p>The installation script should've initialized and set all submodules to the main branch:</p> Command<pre><code>git submodule foreach --recursive 'git checkout main || true'\n</code></pre> <p>After that, you can pull the latest changes of all repositories with:</p> Command<pre><code>git pull --recurse-submodules --jobs=4\n</code></pre> <p>If you have any local changes</p> <ul> <li>Keep them: Add <code>--rebase</code> to the command above</li> <li>Delete them: Add <code>--force</code> to the command above</li> </ul>"},{"location":"get/source/#packages","title":"Packages","text":"<p>The Python tooling I'm using to orchestrate the Monorepo is uv</p> <ul> <li>You'll probably only need to know of a single command:</li> </ul> <p>Command: <code>uv sync --all-packages</code></p> <p>This will update the venv and install any new dependencies</p> <p>After that, just activate the venv and you're good to go!</p>"},{"location":"get/source/#uninstalling","title":"\u267b\ufe0f Uninstalling","text":"<p>See the uninstalling page</p>"},{"location":"get/uninstalling/","title":"Get/Uninstalling","text":"<p>Thanks for using Broken Source Software, I hope you found it useful \u2764\ufe0f</p> <ul> <li>Here's a exhaustive list of places you'll find all Project data:</li> </ul>"},{"location":"get/uninstalling/#runtime-data","title":"\u2705 Runtime Data","text":"<p>Project Workspaces: Where Cache, Data, etc are stored</p> <p>The main Library uses AppDirs to decide per-platform directories</p> <p>For unification, all project's Workspaces are located at your Platform's User Data or Documents directory, followed by a AppAuthor and AppName, which will be BrokenSource and ProjectName in most cases</p> <ul> <li>Linux: <code>~/.local/share/BrokenSource/AppName/*</code></li> <li>Windows: <code>Documents\\BrokenSource\\AppName\\*</code></li> <li>MacOS: <code>~/Library/Application Support/BrokenSource/AppName/*</code></li> </ul>"},{"location":"get/uninstalling/#releases-installation","title":"\ud83d\udce6 Releases installation","text":"<p>Where the executables manages themselves</p> <p>PyApp stores cache, installs packages, creates venv on:</p> <ul> <li>Linux: <code>~/.local/share/pyapp</code></li> <li>Windows: <code>%applocaldata%\\pyapp</code></li> <li>MacOS: <code>~/Library/Application Support/pyapp</code></li> </ul>"},{"location":"get/uninstalling/#python-stuff","title":"\ud83d\udc0d Python stuff","text":"<p>Where Dependencies are installed</p> <p>Depending on what Python Manager you used, (\u26a0\ufe0f uv is used on the From Source installation), you'll find the Python Virtual Environment in a couple different places:</p>  Pip Poetry uv Rye PDM <p>Manual method, you either created it yourself with <code>python -m venv (path)</code> or it's located at the System Site Packages for your Platform. It's a BAD IDEA to remove the later, so do a <code>pip uninstall {packages}</code></p> <p>Poetry, by default, installs venvs at your Platform's Cache directory:</p> <ul> <li>Linux: <code>~/.cache/pypoetry/virtualenvs/*</code></li> <li>Windows: <code>%localappdata%\\pypoetry\\virtualenvs\\*</code></li> <li>MacOS: <code>~/Library/Caches/pypoetry/virtualenvs/*</code></li> </ul> <p>uv creates Virtual Environments on the <code>.venv</code> directory on the repository root</p> <p>Rye creates Virtual Environments on the <code>.venv</code> directory on the repository root</p> <p>PDM creates Virtual Environments on the <code>.venv</code> directory on the repository root</p> <p>PyTorch Models: HuggingFace, TorchHub, Transformers</p> <p>You may find cache directories, if the project uses PyTorch, for Neural Network models at your Platform's Cache directory (or the one managed by any of those tools), usually found at:</p> <ul> <li>Linux: <code>~/.cache/{huggingface,transformers,torch}/*</code></li> <li>Windows: <code>%localappdata%\\{huggingface,transformers,torch}\\*</code></li> <li>MacOS: <code>~/Library/Caches/{huggingface,transformers,torch}/*</code></li> </ul>"},{"location":"include/love-short/","title":"Love short","text":"<p>Loving what you see? Help me continue this Full-Time Open Source Work!</p>"},{"location":"include/get/","title":"Index","text":""},{"location":"include/get/#installation","title":"\u2705 Installation","text":"<ul> <li>There are a couple of ways to get started with the projects:</li> </ul>"},{"location":"include/get/docker/","title":"Docker","text":""},{"location":"include/get/docker/#cloud-or-docker","title":"\u2601\ufe0f Cloud or Docker","text":"<p> <p>The most scalable way to use the projects. \u2b50\ufe0f</p> <ul> <li>Docker images with everything pre-installed.</li> <li>Cloud providers instructions and fixes.</li> </ul> <p><sup>Recommended for: Enterprise, CI/CD, production.</sup></p> <p></p>"},{"location":"include/get/pypi/","title":"Pypi","text":""},{"location":"include/get/pypi/#from-pypi","title":"\ud83e\uddc0 From PyPI","text":"<p> <p>The most reliable way to use the projects. \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Standard pip install, requires basic Python knowledge.</li> <li>Run the package commands or as a python import.</li> </ul> <p><sup>Recommended for: Basic users, advanced users, developers</sup></p> <p></p>"},{"location":"include/get/releases/","title":"Releases","text":""},{"location":"include/get/releases/#from-releases","title":"\ud83d\udce6 From Releases","text":"<p> <p>The most convenient way to use the projects. \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Portable executables made with PyApp for all platforms.</li> <li>Double click and run, everything's managed for you.</li> </ul> <p><sup>Recommended for: Basic users, alpha testers.</sup></p> <p></p>"},{"location":"include/get/source/","title":"Source","text":""},{"location":"include/get/source/#from-source","title":"\ud83d\udd25 From Source","text":"<p> <p>The most flexible way to use the projects. \u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Automatic install scripts, spend more time using the projects.</li> <li>Latest features, bugs, fixes, highly configurable.</li> </ul> <p><sup>Recommended for: Advanced users, contributors, developers.</sup></p> <p></p>"},{"location":"insiders/","title":"Insiders","text":"<p>No meaningful content exists yet. I am sketching ideas and the website structure!</p> <p>Very briefly, the Insiders program will be a way to support the development of the software, while getting early access to new features, projects, premium content, and more. Most certainly it'll contain commercial-ready and content-farms tools for you to exploit!</p> <p>This will not cannibalize any of the other projects into the \"open-core\" realm or limit their features. The idea is to join the cumulative work of most projects into something greater, that is too good for commercial exploit to be a freebie, while also returning loss-leader features to the community as a whole.</p> <p>It will only be available to GitHub Sponsors, starting at a modest entry level, and building up in progressive commercial usage terms. The code will be Open Source, but no distribution rights will be granted, that is, only for personal or private use. You will evidently lose access to new features and the license to use it if you leave the program.</p> <p> This is also known as sponsorware!</p> <p>Features may include (not a promise):</p> <ul> <li> <p>Auto-lyrics generation and synchronization integrated with ShaderFlow; where one can automate long form or shorts videos with beautiful visualizations.</p> </li> <li> <p>Integration of DepthFlow as a background for music visualizers, just as seen on the ShaderFlow project readme, truly an unique application!</p> </li> <li> <p>Premium music visualizers shaders with 'modular' components (chosing particles, music bars, progress bars, etc), highly customizable and easy to use.</p> </li> <li> <p>Full pipeline for automated video generation from scratch using AI: automatic theme and scripts, video fillers, text to speech or music outputs (I have done it before lol).</p> </li> <li> <p>Newer projects, such as a smooth livestream chat visualizer for archiving or fun, a faster low-memory alternative of auto-editor, and others I forgot!</p> </li> </ul> <p>When will it be available?</p> <p>I have to overhaul some core parts of ShaderFlow to start the work on the music visualizers and text support. Don't have any ETA yet, and I might start some work in auto-editor's killer first. Stay tuned!</p>"},{"location":"pianola/","title":"Pianola","text":"Pianola World's finest piano roll visualizer, where elegance meets motion.         Links \u2022     \u2705 Installation \u2022     \ud83d\udce6 Documentation \u2022     \ud83d\udd25 Issues \u2022     \u2764\ufe0f Funding <sub> YouTube \u2022     GitHub \u2022     Contact \u2022     Changelog \u2022     Uninstalling \u2022     License </sub> <p><sup>\u2696\ufe0f The Entertainer by Scott Joplin (Public Domain), Salamander Grand Piano by Alexander Holm (CC-BY 3.0)</sup></p>"},{"location":"pianola/#description","title":"\ud83d\udd25 Description","text":"<p>Pianola is an elegant and powerful dynamic piano roll visualizer written in Python and GLSL Shaders, with an focus on quality, performance and visuals. Unresistable after you see it.</p> <ul> <li> <p> Visualize your midi files in a beautiful and smooth piano roll animation, with unrestricted customization in the code and high quality output.</p> </li> <li> <p> Spring physics model governing many animations, providing a realistic and organic feel to the visuals - a unique innovation in the market.</p> </li> <li> <p> Commercial use allowed and encouraged - Simply attribute the project, and go the extra mile by supporting this project and others directly!</p> </li> </ul> <p>All the benefits of the parent project ShaderFlow are also present \ud83c\udf89</p>"},{"location":"pianola/#installation","title":"\ud83d\udce6 Installation","text":"<p>Head out to the official website for the latest installation instructions and more!</p> <p> </p>"},{"location":"pianola/#usage","title":"\u2b50\ufe0f Usage","text":"<p>\ud83d\udea7 Under construction \ud83d\udea7</p> <p>Run <code>pianola --help</code> to see all available commands for now!</p>"},{"location":"pianola/#community","title":"\u267b\ufe0f Community","text":"<p>Be featured here if you make any integrations or a channel using Pianola!</p> <p>\ud83c\udf35 Such an empty place here, for now..</p>"},{"location":"pianola/quick/examples/","title":"Pianola/Examples","text":"<p>This project will receive further development eventually</p> <p>For now, manual work is needed to change anything</p> <p>After activating the Virtual Environment on <code>.venv</code>:</p> <ul> <li>Run <code>pianola main</code> for a real-time window</li> <li>Run <code>pianola --help</code> for rendering options</li> </ul>"},{"location":"pianola/quick/install/","title":"Pianola/Install","text":""},{"location":"pianola/quick/install/#installation","title":"\u2705 Installation","text":"<ul> <li>There are a couple of ways to get started with the projects:</li> </ul>"},{"location":"pianola/quick/install/#from-releases","title":"\ud83d\udce6 From Releases","text":"<p> <p>The most convenient way to use the projects. \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Portable executables made with PyApp for all platforms.</li> <li>Double click and run, everything's managed for you.</li> </ul> <p><sup>Recommended for: Basic users, alpha testers.</sup></p> <p></p>"},{"location":"pianola/quick/install/#from-pypi","title":"\ud83e\uddc0 From PyPI","text":"<p> <p>The most reliable way to use the projects. \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Standard pip install, requires basic Python knowledge.</li> <li>Run the package commands or as a python import.</li> </ul> <p><sup>Recommended for: Basic users, advanced users, developers</sup></p> <p></p>"},{"location":"pianola/quick/install/#from-source","title":"\ud83d\udd25 From Source","text":"<p> <p>The most flexible way to use the projects. \u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Automatic install scripts, spend more time using the projects.</li> <li>Latest features, bugs, fixes, highly configurable.</li> </ul> <p><sup>Recommended for: Advanced users, contributors, developers.</sup></p> <p></p>"},{"location":"shaderflow/","title":"ShaderFlow","text":"ShaderFlow   Imagine ShaderToy, on a Manim-like Architecture. That's ShaderFlow      Links:     Quick Start \u2022     Releases \u2022     PyPI \u2022     Cloud/Docker \u2022     Cloning \u2022     Documentation <sub>       Extras:       YouTube </sub> <sub>\u2b50\ufe0f Consider starring the project to help it grow! \u2b50\ufe0f</sub>"},{"location":"shaderflow/#description","title":"\ud83d\udd25 Description","text":"<p>ShaderFlow is a complete Tool for Artists, Musicians and Shader Enthusiasts</p> <p>A Framework for Creating, Exporting Real Time and Audio Reactive Shaders</p> <ul> <li>\ud83d\udee1\ufe0f Open source: trust and transparency, cross platform, configurable</li> <li>\ud83e\uddf8 80% ShaderToy compatible, easily transfer your knowledge</li> <li>\ud83d\udcd4 Video codecs: easily export to H264, HEVC, AV1, (+NVENC)</li> <li>\ud83d\ude80 Physics-like animations with control systems dynamics</li> <li>\ud83d\udd31 High quality: any resolution, framerate, bitrate, SSAA</li> <li>\ud83c\udfb5 Audio reactive: live music, professional video</li> <li>\ud83c\udf0a Audio waveforms and oscilloscope support</li> <li>\ud83c\udfa5 Video as texture: real time 4k processing</li> <li>\u267b\ufe0f Live reload shaders, instant feedback</li> <li>\ud83c\udfa8 No watermarks, user first experience</li> <li>\u23f3 Perfect frametimes, no jitter, no lag</li> <li>\ud83c\udf35 Fastest rendering times in the west</li> <li>\ud83d\udc41 Built-in camera 2D, 3D, 360\u00b0, VR</li> </ul> <p></p>"},{"location":"shaderflow/#showcase","title":"\ud83d\udcf8 Showcase","text":"<p>\ud83c\udfa7 \u2022 Remember to Enable Audio on the Videos !</p> <p></p> <p><sup>Video: Music Visualizer Tech Demo Scene. Sources: Music and Image. Property of their original owners \u2696\ufe0f</sup></p> <p></p> <p><sup>Video: Music Bars Tech Demo Scene. Sources: Music. Property of their original owners \u2696\ufe0f</sup></p> <p></p> <p><sup>Video: Real Time Piano Roll Tech Demo Scene. Sources: Salamander Grand Piano by Alexander Holm, CC BY 3.0 and Midi File for the composition Flight of The Bumblebee by Rimsky Korsakov. Property of their original owners \u2696\ufe0f</sup></p> <p></p> <p><sup>Video: Educational Scene about Parallel Plates Capacitor. Source: Coded myself long ago.</sup></p>"},{"location":"shaderflow/#installation","title":"\ud83d\udce6 Installation","text":"<p>Head out to the official website for the latest installation instructions and more!</p> <p> </p>"},{"location":"shaderflow/module/","title":"ShaderFlow/ShaderModule","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p>"},{"location":"shaderflow/scene/","title":"ShaderFlow/ShaderScene","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p>"},{"location":"shaderflow/scene/#resolution","title":"Resolution","text":""},{"location":"shaderflow/scene/#aspect-ratio","title":"Aspect ratio","text":"<p>The aspect ratio of a resolution is the ratio between its width and height. Two interpretations are: \"How many times wider is the resolution than it is tall?\", and a numeric one: \"If the top value is 1 relative to the center, what is the \\(x\\) value on each side?\"</p> <p>The value of <code>self.aspect_ratio</code> will always be <code>self.width/self.height</code> at any given time, and an internal attribute <code>self._aspect_ratio</code> controls how resizes are calculated.</p>"},{"location":"shaderflow/scene/#resizes","title":"Resizes","text":"<p>The resolution a Scene will render in realtime or export to a video file is calculated inside the <code>main</code> method. The final value weakly depends on the state prior calling it, and strongly on a few incoming arguments, namely <code>width</code>, <code>height</code>, <code>ratio</code> and <code>scale</code>.</p> <p>The internal starting value of a Scene's resolution is 1920x1080 (Full HD), with no enforced aspect ratio (dynamic), and a scale of 1. This is the default output resolution if no such related arguments are passed, and no <code>self.*</code> attributes were changed anywhere.</p> <ol> <li>The value of <code>self._aspect_ratio</code> is None</li> </ol> <p>This is the simplest case. Any value passed on either <code>width</code> or <code>height</code> will override the respective <code>self.*</code> attribute, not affecting the other. The final resolution is post-multiplied by <code>self.scale</code>. For example, rendering with <code>width=1280, height=None</code> will give a <code>1280x1080</code> video, and rendering with <code>scale=2</code> gives <code>3840x2160</code>.</p> <ol> <li>The value of <code>self._aspect_ratio</code> is a float</li> </ol> <p>This will enforce the aspect ratio of the resolution.</p> <p>If only one of <code>width</code> or <code>height</code> are passed, ShaderFlow will calculate the other based on the aspect ratio, and force the one sent. For example, <code>ratio=1</code> and <code>width=1280</code> will give a <code>1280x1280</code> video, and <code>ratio=16/9</code> and <code>height=1440</code> will give a <code>2560x1440</code> video.</p> <p>If both <code>width</code> and <code>height</code> are passed, ShaderFlow will take preference to <code>width</code> over <code>height</code> in the calculations. For example, <code>ratio=16/9</code> and <code>width=1280, height=1280</code> will give a <code>1280x720</code> video.</p> <p>The value is post-multiplied by <code>self.scale</code> as always.</p>"},{"location":"shaderflow/shader/","title":"ShaderFlow/ShaderObject","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p>"},{"location":"shaderflow/texture/","title":"ShaderFlow/ShaderTexture","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p>"},{"location":"shaderflow/modules/camera/","title":"ShaderFlow/ShaderCamera","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p>"},{"location":"shaderflow/modules/camera/#camera-modes","title":"Camera Modes","text":"<ul> <li>1 Free Camera 3D</li> <li>2 Generic Camera 2D</li> <li>3 Spherical Camera 3D</li> <li>p Camera Projection</li> <li>i j k UP Axis (x, y, z)</li> </ul>"},{"location":"shaderflow/modules/camera/#camera-controls","title":"Camera Controls","text":"<ul> <li>W A S D Move</li> <li>Q E Roll</li> <li>Space Shift Move Up/Down</li> <li>Mouse Look Around</li> <li>Mouse Wheel Zoom In/Out</li> <li>T G Isometric +/-</li> </ul>"},{"location":"shaderflow/modules/camera/#scene-controls","title":"Scene Controls","text":"<ul> <li>R Reload Shaders</li> <li>O Reset Scene</li> </ul>"},{"location":"shaderflow/modules/camera/#window-controls","title":"Window Controls","text":"<ul> <li>Tab ShaderFlow Menu</li> <li>F1 Exclusive Mouse Mode</li> <li>F2 Screenshot</li> <li>F11 Fullscreen</li> <li>Esc Exit</li> </ul>"},{"location":"shaderflow/quick/","title":"\u26a1\ufe0f Quick start","text":"<p> Go to any section in the left sidebar to get started!</p>"},{"location":"shaderflow/quick/examples/","title":"ShaderFlow/Examples","text":"<p>\ud83d\udea7 Work in Progress \ud83d\udea7</p> <p>After activating the Virtual Environment on <code>.venv</code>:</p> <ul> <li>Run <code>shaderflow</code> to see all available scenes</li> <li>Run <code>shaderflow (scene)</code> to run a specific scene</li> <li>Run <code>shaderflow (scene) --help</code> for rendering options</li> </ul> <p>Official Scene files are located at <code>ShaderFlow/Resources/Scenes/**/*.py</code></p>"},{"location":"shaderflow/quick/install/","title":"DepthFlow/Install","text":"<p>Intended Usage</p> <p>ShaderFlow, similar to Manim, is best used directly from a <code>python</code> script</p> <ul> <li>From Source or From PyPI Installation is recommended</li> </ul>"},{"location":"shaderflow/quick/install/#installation","title":"\u2705 Installation","text":"<ul> <li>There are a couple of ways to get started with the projects:</li> </ul>"},{"location":"shaderflow/quick/install/#from-releases","title":"\ud83d\udce6 From Releases","text":"<p> <p>The most convenient way to use the projects. \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Portable executables made with PyApp for all platforms.</li> <li>Double click and run, everything's managed for you.</li> </ul> <p><sup>Recommended for: Basic users, alpha testers.</sup></p> <p></p>"},{"location":"shaderflow/quick/install/#from-pypi","title":"\ud83e\uddc0 From PyPI","text":"<p> <p>The most reliable way to use the projects. \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Standard pip install, requires basic Python knowledge.</li> <li>Run the package commands or as a python import.</li> </ul> <p><sup>Recommended for: Basic users, advanced users, developers</sup></p> <p></p>"},{"location":"shaderflow/quick/install/#from-source","title":"\ud83d\udd25 From Source","text":"<p> <p>The most flexible way to use the projects. \u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Automatic install scripts, spend more time using the projects.</li> <li>Latest features, bugs, fixes, highly configurable.</li> </ul> <p><sup>Recommended for: Advanced users, contributors, developers.</sup></p> <p></p>"},{"location":"spectronote/","title":"SpectroNote","text":"SpectroNote Piano-perfect audio spectrogram. Unlock a hidden absolute bitch in you.         Links:     Quick Start \u2022     Releases \u2022     PyPI \u2022     Cloud/Docker \u2022     Cloning \u2022     Documentation <sub>       Extras:       YouTube </sub> <sub>\u2b50\ufe0f Consider starring the project to help it grow! \u2b50\ufe0f</sub>"},{"location":"spectronote/#description","title":"\ud83d\udd25 Description","text":"<p>SpectroNote is a mostly scientific Audio Spectrogram for the empiricist in you</p> <ul> <li>\u2705 Reassigned Method: unlimited precision, lower blurrying, sharp basses <code>(soon\u2122)</code></li> <li>\ud83d\udee1\ufe0f Open Source, trust and transparency, cross platform, configurable</li> <li>\ud83d\udce6 Export Videos: powered by the ShaderFlow platform</li> <li>\ud83c\udfb9 Side Piano: instantly find notes being played</li> <li>\u23f3 Real Time: it's python, scientifically made</li> <li>\ud83c\udfa8 No Watermarks, user first experience</li> </ul> <p></p>"},{"location":"spectronote/#showcase","title":"\ud83d\udcf8 Showcase","text":"<p><sup>Image: SpectroNote in Action, without the Reassigned Method</sup></p>"},{"location":"spectronote/#installation","title":"\ud83d\udce6 Installation","text":"<p>Head out to the official website for the latest installation instructions and more!</p> <p> </p>"},{"location":"spectronote/quick/examples/","title":"SpectroNote/Examples","text":"<p>This project will receive further development eventually</p> <p>Changing recording device in real time or rendering files to videos</p> <p>After activating the Virtual Environment on <code>.venv</code>:</p> <ul> <li>Run <code>spectronote main</code> for a real-time window</li> <li>Run <code>spectronote --help</code> for rendering options</li> </ul>"},{"location":"spectronote/quick/install/","title":"SpectroNote/Install","text":""},{"location":"spectronote/quick/install/#installation","title":"\u2705 Installation","text":"<ul> <li>There are a couple of ways to get started with the projects:</li> </ul>"},{"location":"spectronote/quick/install/#from-releases","title":"\ud83d\udce6 From Releases","text":"<p> <p>The most convenient way to use the projects. \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Portable executables made with PyApp for all platforms.</li> <li>Double click and run, everything's managed for you.</li> </ul> <p><sup>Recommended for: Basic users, alpha testers.</sup></p> <p></p>"},{"location":"spectronote/quick/install/#from-pypi","title":"\ud83e\uddc0 From PyPI","text":"<p> <p>The most reliable way to use the projects. \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Standard pip install, requires basic Python knowledge.</li> <li>Run the package commands or as a python import.</li> </ul> <p><sup>Recommended for: Basic users, advanced users, developers</sup></p> <p></p>"},{"location":"spectronote/quick/install/#from-source","title":"\ud83d\udd25 From Source","text":"<p> <p>The most flexible way to use the projects. \u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Automatic install scripts, spend more time using the projects.</li> <li>Latest features, bugs, fixes, highly configurable.</li> </ul> <p><sup>Recommended for: Advanced users, contributors, developers.</sup></p> <p></p>"}]}